cset: moving following pidspec: 3213895
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.872907419 seconds)
loading group "shootout"... done (took 1.228353915 seconds)
loading group "string"... done (took 0.776576572 seconds)
loading group "linalg"... done (took 9.754875286 seconds)
loading group "parallel"... done (took 0.023609933 seconds)
loading group "find"... done (took 3.92221913 seconds)
loading group "tuple"... done (took 2.565803798 seconds)
loading group "union"... done (took 15.587875464 seconds)
loading group "dates"... done (took 2.01401787 seconds)
loading group "micro"... done (took 0.244212454 seconds)
loading group "simd"... done (took 7.433925284 seconds)
loading group "io"... done (took 1.828556664 seconds)
loading group "random"... done (took 14.136628597 seconds)
loading group "problem"... done (took 1.972476138 seconds)
loading group "array"... done (took 40.572626501 seconds)
loading group "misc"... done (took 2.392846082 seconds)
loading group "scalar"... done (took 76.950068349 seconds)
loading group "sort"... done (took 6.205965063 seconds)
loading group "sparse"... done (took 22.639433138 seconds)
loading group "collection"... done (took 28.719653485 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.561797865 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.129998542 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.164038461 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.137264997 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.285776302 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.139314135 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.146409662 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.127994883 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.136216697 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.177664375 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.15202901 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.469921058 seconds)
done (took 6.239393858 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.32432593 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.26999748 seconds)
    (2/2) benchmarking "String"...
    done (took 0.200966597 seconds)
  done (took 1.790861117 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136430554 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.067941074 seconds)
    (3/3) benchmarking "different"...
    done (took 0.075952096 seconds)
  done (took 1.603826511 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.073879801 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.154471773 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.075169805 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.078927727 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.076280747 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.075444952 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.075274945 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.075228755 seconds)
  done (took 1.931505558 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.080834245 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.075735334 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.074602007 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.075755639 seconds)
  done (took 1.624544702 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.073570564 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.138309469 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.073284113 seconds)
    (4/4) benchmarking "different"...
    done (took 0.072903973 seconds)
  done (took 1.68475787 seconds)
done (took 10.363031381 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.216843481 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.86831709 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.96965247 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.183677812 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.357110818 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.368104693 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.135409622 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.243962193 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.147621677 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.086812624 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.182273618 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.092114216 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.557974102 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.531365311 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.082276922 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.2119762 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.658555369 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.093271528 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.126056878 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.328874447 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.090601136 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.094370796 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.100851494 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.084430117 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.235543145 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.298760817 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.652686465 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.103907248 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.077452277 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.10289879 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.079250945 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.084784409 seconds)
  done (took 11.81807213 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.143715296 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.143118529 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.077117534 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.114957482 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.106240839 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.079295328 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.085598997 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.078173748 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.099237406 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.146578883 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.100338723 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.159590302 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.076484425 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.078977662 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.143803742 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.17581328 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.091627051 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.094503696 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.078852608 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.093627006 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107603354 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.090083215 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.088554272 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.088214825 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.125976969 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.145197671 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096079564 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.123729316 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.078647488 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.090952582 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.107274586 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125405074 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.077005703 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.077311602 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.124471095 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096398892 seconds)
  done (took 5.179839854 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.136043817 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.117493948 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.13925069 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130745704 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.120713611 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.105731392 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.181988205 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.138189492 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.113490317 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079040374 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.215434252 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.780121683 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.169667083 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.283943392 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.082745232 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.18344868 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.402834537 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.000486614 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.080889091 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.078375092 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.129893405 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081849159 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.174111518 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.078214255 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.198503832 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.841372241 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.081216388 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079548468 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.113696806 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.141200574 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.074830203 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.159484974 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105679862 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.079446232 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.626787272 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.076038878 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.073509906 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.097166409 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.114409716 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.075503277 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.076636867 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.089278531 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.07511457 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.131034037 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.089791431 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.600556318 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.080202656 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.724106742 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.390281854 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.084874898 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.082554546 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.115250478 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.074519503 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.078430668 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.664481585 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.165007785 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.076594762 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.319756651 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077682083 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.077989592 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.078724314 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.112347654 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.077184769 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07998379 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.083775072 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098988043 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.104271936 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.165757311 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097854637 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.075254712 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076576513 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.075407072 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.621190053 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.084728304 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.080246397 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.074444956 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080654468 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076139602 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076947634 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.1186869 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.103541291 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.101133176 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.079835251 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.075847508 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074712895 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.603094211 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.040255746 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.076240385 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.076865856 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.547450295 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.073850553 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076863514 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078404206 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.100194652 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.075669947 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.072857145 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.113803281 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.078233803 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.12443918 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.615047182 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.077714964 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.074052435 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.707397781 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.081406254 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.116305835 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.14080168 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.079149897 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.119018246 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.078240057 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.076234004 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.085378976 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.075388225 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.081051337 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.07648084 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.077358429 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.076820093 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.080616897 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.079577758 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.078475039 seconds)
  done (took 26.261014724 seconds)
done (took 45.715635171 seconds)
(4/20) benchmarking "parallel"...
done (took 1.504343825 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.294788685 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.106901681 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.075633088 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.234365542 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.101764144 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.199440684 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.248379084 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.190480789 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.101883426 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.101618872 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.103926396 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.251471303 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.262223766 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.102783117 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.181461921 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.263266345 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.103900035 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.074857982 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.101978734 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.104468862 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.105790997 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074785029 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.103242761 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.103958568 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.18048744 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.102382799 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.074070295 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.181492672 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.103510913 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.185494118 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.105552235 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.10392669 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.104411644 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.182027714 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.105706852 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.182869391 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.075341977 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.104633524 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.105383768 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.106587572 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.1058651 seconds)
  done (took 7.147369467 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.101667182 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.095514762 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.099188199 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.071860012 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.081620229 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.094894534 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.071347094 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09348142 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.113441875 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.094716894 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.095549191 seconds)
  done (took 2.509837352 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.094786939 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.095084799 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.096363522 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.070461092 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.083231538 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.098074594 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.07055732 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.094769498 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098554982 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.09512 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.095648071 seconds)
  done (took 2.414990585 seconds)
done (took 13.465744267 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.231739378 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.123100297 seconds)
  done (took 1.77259534 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.620176097 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.237852756 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.133711634 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.260523678 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.126164638 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.158216362 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.630765197 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.159114082 seconds)
  done (took 7.804935094 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.144571287 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.150003882 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.078812681 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.078421286 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.078948847 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.078815549 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.083589961 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.078364331 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.077362156 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.08035173 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.080405197 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.078226978 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.079397087 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.081179102 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.079239893 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.079226074 seconds)
  done (took 2.971501836 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.081984575 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.081547118 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.082097569 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.071786907 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.084701932 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.083851395 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.084738511 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.084947213 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.083671638 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.083709195 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.081151543 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.084141511 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.083165902 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.081627831 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.084460483 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.071369441 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.084976513 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.084577305 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.086256962 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.0855346 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.084214429 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.082343886 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.086844751 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.083591891 seconds)
  done (took 3.442757442 seconds)
done (took 17.411746851 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.211755572 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.087899157 seconds)
  done (took 1.754964549 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.131841063 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.13169621 seconds)
  done (took 1.731029732 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.084312784 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.070066335 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.089438172 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.081633591 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.071539582 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.071192019 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.088758738 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.071406485 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.071376921 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.072215887 seconds)
  done (took 2.23966055 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.073159194 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.079042783 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.077402939 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.074134758 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.078125747 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.071539997 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.075365324 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.07385217 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.079776715 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.07193399 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.076294998 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.097327575 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.074604404 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.096263312 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.075361637 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.075328383 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.07808519 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.075642465 seconds)
  done (took 2.862700372 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.070496162 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.072017547 seconds)
  done (took 1.598660705 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.074162318 seconds)
    (2/7) benchmarking "second"...
    done (took 0.069951378 seconds)
    (3/7) benchmarking "month"...
    done (took 0.073629744 seconds)
    (4/7) benchmarking "year"...
    done (took 0.073897259 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.071521465 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.070976774 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.072369595 seconds)
  done (took 1.960832174 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.503395489 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.233769362 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.487301198 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.080848015 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.096783805 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.302590546 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.07561546 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.081206794 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.081959608 seconds)
  done (took 3.395220602 seconds)
done (took 17.009180071 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.096327492 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.206517844 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.157167439 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.507976067 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091406105 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.079382539 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.108954769 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.265290672 seconds)
done (took 2.968628504 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.568181084 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.459577387 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.32445657 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.076451694 seconds)
  done (took 3.334513073 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.459797649 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.206256808 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.085919492 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.075244094 seconds)
  done (took 2.312060063 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.07397843 seconds)
    (2/2) benchmarking "read"...
    done (took 0.080622477 seconds)
  done (took 1.634300578 seconds)
done (took 9.305848891 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080849971 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.067503044 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.074470594 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.069846679 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.07313291 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.069280494 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.06955507 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.070025699 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.067800572 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.069941153 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.07062248 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070387308 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070080113 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070625451 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.069995597 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070506442 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.068262685 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.071093903 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071458028 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071031377 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.069891713 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071858796 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.070553031 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.071626813 seconds)
  done (took 3.15976615 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.0885002 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.073662762 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.07351744 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.073919331 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.074372539 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.073481394 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.075286456 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.073663714 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.074924874 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.074090103 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.075726491 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.075444844 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.073393745 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.075972871 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073147014 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.075288577 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.074369534 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073969034 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072819901 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.075527289 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.074297411 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074060168 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.075825442 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075151916 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.07537069 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.074900847 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.073610914 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.074918544 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.074801926 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.075673666 seconds)
  done (took 3.730843611 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.074550573 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.065711983 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.067126221 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.078212584 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.067537046 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.066859947 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.067300411 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.06689062 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.067143628 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06807232 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.067917471 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.066982797 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.067962475 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.067419782 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.067581943 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.068102982 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.073030375 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.090104164 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.067588632 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.066888005 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.072835631 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.066842494 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.066601612 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.066476078 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.066668401 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06805266 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.067040643 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.068097706 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.067067484 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.067578441 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.066509346 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.07267054 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.07451662 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.068087186 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.080286672 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.074203479 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.068411364 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.075580481 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.069435372 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.068302298 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.06846648 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.067543375 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.068506797 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.068706587 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.080683358 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.067403178 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.068709221 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.068679627 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.068479987 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.067892473 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.067892141 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.069955769 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.074753792 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.069029235 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.067672437 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.068675717 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.067537565 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.068498986 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.067345988 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.067738264 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.067532397 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.072386648 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.069665079 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.068221963 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.091878909 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.069181909 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.080064811 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.067661638 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.067856234 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.072543122 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.068025413 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.089662513 seconds)
  done (took 6.54110342 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.079178684 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.077921507 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.087616933 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.077656859 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071070634 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.067582968 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.07157921 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067845405 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.078287303 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071496217 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068097654 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071231008 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07771767 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.074354939 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068548424 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.078057728 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071605799 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070854625 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.068146576 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.072137836 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069295234 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.07144528 seconds)
  done (took 3.113413598 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.15701685 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.073542269 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.118173091 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076698347 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07589213 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077581045 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.073927076 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.074242135 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073957295 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074815694 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07453682 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073506565 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.075474145 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07422475 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074452227 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074682758 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.073770514 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.075537138 seconds)
  done (took 2.962244743 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.084575678 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.074033379 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.102535973 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073569449 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.074276688 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.074138144 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.077618869 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.077758948 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.074256228 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.074770642 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.078367959 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.074270177 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.07408536 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075103633 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074540568 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07408092 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.074099619 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074445015 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077958115 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.077415958 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.077960204 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.079003235 seconds)
  done (took 3.190695268 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.088124366 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073274093 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.09089419 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.074552686 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.067463539 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.067631793 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.075290905 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.07416087 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.075078498 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.073384875 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073861105 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06773259 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.075662416 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.073437265 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.088953426 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072786095 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073315416 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073201688 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.072338125 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06696476 seconds)
  done (took 2.989999561 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.124788371 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069548974 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06947485 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07421489 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069911562 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070316694 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075763535 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070343331 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071546547 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.097102859 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070063056 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070533601 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075346205 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073800033 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070612925 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075204048 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075197526 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07551797 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07004743 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070971616 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.097359552 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070460809 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075067583 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071378439 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070983115 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071191859 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071281351 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074274309 seconds)
  done (took 3.62780244 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073917784 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.072221909 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.072537456 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.072535151 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.072980141 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.074047839 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.072834661 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.073871117 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.073156112 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.073117445 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.072948427 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.072765595 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07296034 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.072400533 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.072204455 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.072614853 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072122036 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.07239131 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073149157 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073593477 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.072515033 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072720299 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.072502054 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072562165 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072900921 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.072351961 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073185161 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073364985 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.073073428 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073503489 seconds)
  done (took 3.717315985 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.081636228 seconds)
    (2/2) benchmarking "in"...
    done (took 0.080165959 seconds)
  done (took 1.690716082 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.069293268 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.087485395 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.06703316 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.083080311 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.077467149 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.073094533 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.078268447 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.077837952 seconds)
  done (took 2.131230531 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.120324127 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.149718492 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.070214395 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.070430202 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121319473 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.145037759 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.132136609 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.084072434 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0858275 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.073378569 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.069682714 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.131592191 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.069030128 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.086049125 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070654037 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.084204072 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078920848 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.090034675 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.085777427 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06951147 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.084317639 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070993023 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.069241165 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.07064081 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.071262217 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.078997808 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.089139052 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.085256602 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080341854 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.067938309 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.092030391 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.068302296 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.068563386 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079818223 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.123073675 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.068380026 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.11160646 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.06952047 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.074790387 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.068513818 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.082298686 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.093377565 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.085648539 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.089754347 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.070144744 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.070368268 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.0677907 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.069937822 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.073889687 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.079823984 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.068685551 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.079002648 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06813877 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.069296337 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.080814878 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.069314066 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.073963674 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.080509077 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.085895833 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.081874971 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.083895733 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.087626148 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.080041194 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.077696038 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.069902411 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.091919558 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06982767 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.084445877 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.085606535 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.069600798 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083681815 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.067313479 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.067262337 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.067992471 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.107719525 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.070828672 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.070554383 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.068796291 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.068946234 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.071008587 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080767408 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.07492535 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.079206187 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.073744402 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.088923077 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.081584113 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.070593726 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.078791656 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.091861984 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.074664315 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.070516309 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.089677282 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.074866885 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.068937259 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.090712949 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.083013737 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.071976258 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.071575618 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.075255745 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.246726122 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.069987526 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.06672683 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078727787 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.069265513 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.118301313 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.072168699 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.078001379 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.067981324 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.080030791 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.073291142 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.069018012 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.066147877 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.073191474 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.068208997 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.065945633 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.078900585 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.068056468 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.084468658 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.076251098 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.084955777 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.08571552 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.080395524 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.085685485 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.067593659 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.065860546 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.088339662 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.079234364 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.069452444 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.088321443 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.067199044 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.080216676 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.067148356 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.068984536 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.078284453 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.066704447 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068885625 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06782793 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.072494738 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.068572035 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06872975 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.074241069 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.078025625 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.082362056 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.069416776 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.078908674 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.069097263 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.087137204 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.080915849 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.07429738 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.07115642 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06862842 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.082174458 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.075946244 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.08000308 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.067897707 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.068879375 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06854795 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.081535088 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.080286699 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.070145227 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.075998908 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.074110305 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.068554638 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.068004406 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.068366964 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.072954611 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.071334497 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.069403211 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.078669774 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.078927116 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.084524043 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.075313625 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.079274387 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.070162687 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06793309 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.069691922 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06750588 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.074312155 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.080165419 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.087275142 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.08366925 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.094134969 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.06820569 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.079930559 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.069935291 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.087615712 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.083781483 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.069125675 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.073209024 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.067682028 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070119679 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.079673525 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.083300197 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.086321924 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.087464029 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.07514661 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.074861272 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.068384994 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.087840048 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.069386245 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.079828786 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.080831849 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.076622392 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.070224907 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.071574764 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.081313906 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.076765263 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.07082584 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.0889145 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.078758745 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.23723258 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.085469467 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.068619996 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.080567526 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.067260714 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.072715367 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.074830268 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.069751381 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.078941438 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.085494314 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.066566147 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.068055836 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.085063902 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.069112272 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068675471 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.076091947 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.084125396 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.073565385 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.077255048 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079978485 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.080193114 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.073746745 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.079650481 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.068668194 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.078680022 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.07029889 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.080766206 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.067587532 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.088885634 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.066770129 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.085681013 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.067984122 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.080410364 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.068485664 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078359041 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.067496828 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.087097236 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.068513534 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.068143129 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.080806881 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.066589785 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.078612263 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.067055535 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.073982536 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.075902109 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.07916003 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.069823298 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.079831103 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.069934753 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.078818796 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.074774996 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.078875298 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.079698559 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.074357508 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.067466119 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.077778623 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08074655 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.077554154 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.069247461 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.069135667 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.069349644 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.078912349 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.06974858 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.069716334 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077987111 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.07457537 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.075798428 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069553083 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.070552273 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.070222668 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.079294153 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080058172 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.089272909 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079144513 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.077787121 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07916316 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.068660803 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.087270278 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.068178512 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.076893293 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.066287192 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.074798589 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.078989327 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.068710325 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090658544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.070210626 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.078852754 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.083246423 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079258788 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.073970689 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.089907771 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.072613226 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.079798021 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.078316121 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.074762327 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.0775122 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.069764887 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.078354978 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.080687299 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.082862171 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.071192572 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.079129911 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.081795341 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.071937989 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.079603042 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.072111172 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.08138686 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.072089826 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.069563516 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.07631982 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.084590982 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.07675761 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.077410064 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.0704806 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.069183861 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.07110809 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.247745982 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.07408093 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.078412139 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.086959904 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.06660656 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.072396964 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.068058365 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.073492009 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089450315 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079113097 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.075940206 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.074301465 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.066664646 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.069422939 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.069562661 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.068904505 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.071401661 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.066996895 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.067447536 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079929286 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.069482779 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.072983683 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.068103928 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.068556019 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.079252755 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.070828098 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06843032 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.076248318 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.06787215 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.074235841 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.065970118 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.068725892 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.073139139 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.067068048 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.072841465 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.080581845 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.086992855 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.075778939 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.078592576 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.068765804 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.078051814 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.086441498 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.07547042 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06890722 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.078830604 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06676984 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.088189714 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.079311911 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079387291 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.080585911 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.070177362 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.088140887 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.07493657 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.080314811 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.086991717 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069888387 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.076539619 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.068127951 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.087573846 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.075616057 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.067938594 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.077840893 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078252052 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.075937251 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.082079323 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.06862495 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.078561771 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.073538076 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.073067395 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.069999468 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.070004925 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.078795739 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.086481577 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.068710098 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.074156709 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.078706468 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.078240125 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.074300557 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.082530831 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.078198481 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.070185721 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.070739664 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.073087788 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.069422653 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.082911322 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.069497845 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.074678595 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.074032542 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.068535733 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.076888639 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.088012727 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.079263974 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079721609 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.068059351 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.067576788 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.089724816 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.073803055 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.072287715 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.078307538 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.079620787 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.08456118 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.082302221 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.089591974 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.070692625 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.076580189 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.084489689 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.070592612 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.069741785 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.074587974 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.071616087 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.081518402 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.081973231 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.079307974 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.073242695 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.079091983 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.085716004 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.241438304 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.073430051 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.074210734 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.069120366 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.080654352 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.077704011 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.078519349 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.069068063 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06723854 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.073046366 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.078287534 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.077344698 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.078909054 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068432224 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.074394899 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.083999168 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.076874804 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070641148 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.066537211 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070800534 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.078583371 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.072594537 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.067573647 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.073744514 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.073387428 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.075838798 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.078497152 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.073584315 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.067131658 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.08722196 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.076694348 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.077921516 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068702783 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.069203021 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.068457437 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.067292894 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.081031941 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.067407655 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.068967438 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.073982944 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.069178282 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.087416602 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07740026 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.08595734 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068363962 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.073757284 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.35955955 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082259496 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.07346604 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.067259192 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.079329885 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.067434023 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.085434878 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.081683522 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.074407323 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.067745809 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.07506929 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.077412216 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.085714061 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079476388 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.078312643 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.071300975 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.08040634 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.070276676 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.082098393 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.068285097 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.067602486 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.080766848 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079168165 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082665829 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.067890286 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.081328718 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.070744186 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.078664514 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.078321801 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.069808284 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.069687934 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.070099077 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079321388 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.074050105 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.07945164 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.074446583 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.08769063 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.069563192 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.08162678 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.079800688 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.081431855 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.085351991 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.082472801 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.078746192 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.07004443 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.077972716 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.079033743 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.0704934 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.075176957 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.071792395 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.093533341 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.07074477 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.071002527 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.08694117 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.078696651 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.070420911 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.078958158 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.075544792 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.082976941 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.071571381 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.082192006 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.076704161 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.071635382 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.076603811 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.076651312 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.069212027 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06997352 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.070323137 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.244482369 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.073727645 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.068160656 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089558355 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.069827097 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.079232391 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081766956 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.076678556 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.069964773 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.066091447 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.068794113 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.083407493 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.084539872 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.072037146 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07752642 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.069453585 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.078966854 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.066946474 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.07845828 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.076880723 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.078468104 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.066837079 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067767205 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.084929929 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.085759068 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.07300704 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.086047086 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.077781992 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.068417348 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09143272 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.078155846 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068554721 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.080225702 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.069958159 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.067549893 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.066775712 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.068592207 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.080819523 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.06658258 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.070452297 seconds)
  done (took 48.273433203 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.112416977 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067756163 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067473672 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067668443 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074611796 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069235965 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067464485 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068715906 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069492053 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070013788 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068109485 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067261476 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073496662 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084341747 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076012497 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071747743 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068069325 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069346305 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068602727 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069484291 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074833826 seconds)
  done (took 3.131181531 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.071680984 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.071633875 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072050816 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.071899815 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071209578 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.067911095 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072016577 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069070349 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073143634 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06897506 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.072522566 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068571866 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.069474542 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.069187065 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0687328 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069682749 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071985041 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.074723769 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.068879903 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071951209 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069970806 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072826225 seconds)
  done (took 3.167078799 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.069951637 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.068809436 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.077511019 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.066945876 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.067988474 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.070445914 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.066880547 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.073729659 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.073547446 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.072867919 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.078653312 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.068689028 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.067506806 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.075296611 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.067913573 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.069002018 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.117635531 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.069235596 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.069384545 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06710906 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.070538781 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.079084296 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.067542446 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.068852061 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.073918669 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.071228966 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.067833729 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.070525255 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.068593253 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.073654961 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.068541176 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.067779607 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.078968438 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.079019521 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.074058624 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.074148428 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.070567813 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.069275916 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.068446607 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.068617044 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.078011583 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.068598516 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.067315321 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.069872462 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.079461203 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.068575816 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.068451685 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.080387038 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.068281195 seconds)
  done (took 5.154270093 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.080649719 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.132913121 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.074471308 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.114518766 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.081400991 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.072929585 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.074436872 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.117985506 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.068767278 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.070078809 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.081652916 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.081780271 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.070430291 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.07194899 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.075599225 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.070315909 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.07125433 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.070545723 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.073705126 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.070746536 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.073209824 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.076781191 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.081202964 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.082320392 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.072025585 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.069728369 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.071015438 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.072893012 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.082308413 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.074415993 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.072545818 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.073105225 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.082136726 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.076183248 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.070834435 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.070963023 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.082990218 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.070940075 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.071116989 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.069590258 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.070205389 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.072205492 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.075925368 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.082583432 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.071059767 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.076500801 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.071001037 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.068423953 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.08198934 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.070923922 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.074819544 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.083666947 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.071956032 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.071830584 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.071628431 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.082377016 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.071400166 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.070006435 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.071885234 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.081584224 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.069887209 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.072828621 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.082807149 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.070417201 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.074494919 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.083645567 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.0770942 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.07306281 seconds)
  done (took 6.972691123 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.078224714 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.107271377 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084040698 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.083426709 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.079219 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.079262364 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.079165227 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.079863599 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.079362255 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082118861 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07884891 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.167065453 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.076169384 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08054453 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.080027889 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.079918465 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07998319 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080474958 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.080987142 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.079762034 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.079449076 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.08509867 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.079403345 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.084952867 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084529032 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.076470219 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.079887639 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.079427906 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08422411 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.078479462 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084159945 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.079693336 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.079244962 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.087227997 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.083258205 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.079133801 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069119102 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.079875938 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.079854797 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.080145723 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.075973832 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084394046 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.080240383 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.076664489 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.080237707 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.080060206 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.085696912 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.084603546 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081855346 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082803216 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.079347179 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.085368561 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080232235 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.080247104 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.084188966 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.086954519 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.084602222 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084609019 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.080287323 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.084665912 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.08509623 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.087788455 seconds)
  done (took 6.805154787 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.083804227 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.073544919 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.088278532 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.066919815 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066401002 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.078324048 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06752985 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.067390791 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.073701042 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.073801381 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.075822149 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.077680029 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07929764 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.075067808 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.078370751 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.079350286 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.077821868 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.078341169 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074669272 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.078386223 seconds)
  done (took 3.164497424 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.069219093 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.072868281 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067657785 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.085235358 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068728047 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.076944677 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068701204 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068508389 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068820982 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068998134 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072492183 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072515638 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068232828 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.076800755 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071739772 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.076018481 seconds)
  done (took 2.761710359 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.071777343 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.075769581 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.122744828 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.069196198 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.071171575 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.068276811 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.069350793 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.068018188 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.069736386 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.083295372 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.069567612 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.071138741 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.068863178 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.068196536 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.068516691 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.070787668 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.070328394 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.069127258 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.068248452 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.12504822 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.078803073 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.070547995 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.071798032 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.070516725 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.071560661 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.079367536 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.071302757 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.071434614 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.069197801 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.072584898 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.071252728 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.081834158 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.071191919 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.069907221 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.068592423 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.068987201 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.069575206 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.071771711 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.072343549 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.069647143 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.068211455 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.071296996 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.069890261 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.070782305 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.071181795 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.0724414 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.070781435 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.080905165 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.069970906 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.071727695 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.069986106 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.070289828 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.070251199 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.082829674 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.073097434 seconds)
  done (took 5.663177549 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.087710382 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.07374071 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.067675759 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.066988794 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.073408584 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.074513932 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.073995223 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07423009 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074684883 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.067564054 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.074666848 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073700758 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074363263 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074410626 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074708073 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.07450728 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.068230957 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.074365688 seconds)
  done (took 2.96987378 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078545104 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.073013172 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.073000085 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.069544976 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068596067 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073987344 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067976956 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.069514758 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069236308 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069084181 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069750267 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.069339823 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069038172 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.069219367 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.073064929 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069133232 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.069108931 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068187138 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069715709 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067653944 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.07340771 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068412646 seconds)
  done (took 3.178060925 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.148068944 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.094645689 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.196829865 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.090025212 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.102048257 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.081618737 seconds)
  done (took 2.344034982 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.104658563 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.109289115 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07444557 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073454415 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077871223 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076344427 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076547912 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076391104 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08015479 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082639966 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076751497 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080035137 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07942014 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081641611 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077954063 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078672154 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076637123 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076885903 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074195656 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.084213118 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076850033 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080633122 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077248862 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077086701 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077806241 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.08216211 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080378804 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.083779026 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07741531 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081079989 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079589585 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077819822 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080650523 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.084320615 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07470834 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080948087 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076949312 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.08550973 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078733834 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.082694406 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.073779838 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079078577 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080805891 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.080908489 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081126116 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077302097 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.081305756 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078115754 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078053301 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.089586605 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07984172 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082718584 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079980728 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080899703 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080956574 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.089395763 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.084089921 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082488373 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07978781 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.084156432 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082597131 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079800262 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082651477 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.083776498 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07927511 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082684428 seconds)
  done (took 6.962034257 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.115915207 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.073792757 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076514547 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082364809 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.081409845 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077067227 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077397774 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076874019 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077532612 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075011557 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.115529764 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077724294 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081617818 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082080255 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076250291 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077094087 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077870694 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082735192 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075076236 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.088648908 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077560655 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.083459221 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083279373 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083073705 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.084055786 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078692734 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077592243 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077474732 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076196662 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077482639 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.080525224 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077218606 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081733145 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.075389759 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082563694 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077100549 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077336892 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.080220758 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077838093 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078724448 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.082231217 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.085088919 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078134304 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077770043 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083723669 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077729509 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077852043 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074967163 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077950804 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074596496 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083240884 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.086921147 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.083117134 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082444072 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077698095 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077838701 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077660394 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077696812 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077900177 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079414616 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082531191 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078083827 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.089826676 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077640196 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077437456 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.083102394 seconds)
  done (took 6.987062979 seconds)
done (took 145.854591324 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.26551458 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.228136347 seconds)
  done (took 2.111770412 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.133842866 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.134639553 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.158184381 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.081788527 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.169186562 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.244676425 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.186818884 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.082691009 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.082025648 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.084818944 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.081885984 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.084297857 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.084321315 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.081791365 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.150388673 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.082534518 seconds)
  done (took 3.582542566 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.134258821 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.254213943 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.119714613 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.079799268 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.170348012 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.08696154 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.083661451 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.086874304 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.088705965 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.081410332 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.132199019 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.095441237 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.084859847 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.08638528 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.082429644 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.085097851 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.085771587 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.086725945 seconds)
  done (took 3.606148479 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.151299434 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.091175907 seconds)
  done (took 1.913019605 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.179665222 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.118527696 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.162387581 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.385612869 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.152663856 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.153495433 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.156153084 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.151172279 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.12408299 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.149074571 seconds)
  done (took 3.393977469 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.11836325 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.117425383 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.361095392 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.115396469 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.094539524 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.087261681 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.085160548 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.090498696 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.085571189 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.08703864 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.137361676 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.085103884 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.082542108 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.139304291 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.111116172 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.120655631 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.080764673 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.088680038 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.091015105 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.079885033 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.084726971 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.088887869 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.196138015 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.087996702 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.111365679 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.08443912 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.086189152 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.083397723 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.083717658 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.087081589 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.088133266 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.111711059 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.08894439 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.094093313 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.085779265 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.107551219 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.080381479 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.109516102 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.082683508 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.081041853 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.084030836 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.088459476 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081295829 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.087357265 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.083791298 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.087150362 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.090065107 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.080424156 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.085165138 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.084082635 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.081725893 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.085975302 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.085447514 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.08583671 seconds)
  done (took 7.052129966 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.134299533 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.122797496 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.078537418 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.130206507 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.123076187 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.079203089 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.138985926 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.117763166 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.13704902 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.078792729 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.078319325 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.078024105 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.084747846 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.090131254 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.133416728 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.126515937 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.080494856 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.079018909 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.126049759 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.12625438 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.077769305 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.138235598 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.130349494 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.124780008 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.077467062 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.078418825 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.076908985 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07767171 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.085842425 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.085921104 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.078590752 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.088790594 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.090252602 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.085606005 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.077449947 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.077424117 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07685834 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.086079437 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.090611542 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.087375622 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.084200318 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.076786677 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.077255617 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.077561112 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.077910021 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.076457799 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.086780319 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.086123214 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.087678198 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07846099 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.078244366 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.076550846 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.078335249 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.085271186 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.084132336 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.085000546 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.088312709 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.078990236 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07763741 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.079035314 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088895509 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.086146979 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.086372373 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.078415466 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.086946915 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.078315911 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.088886964 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.090677944 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.077647857 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.077592108 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.078226207 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.076800584 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.077616364 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.083708562 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.084329056 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07898113 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.078906266 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077598277 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.086456386 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.085804767 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078447091 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.088446504 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.078240263 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.079706215 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.079578346 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.080961984 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.091086026 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.089338491 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.080717791 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.080828084 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.080332744 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.079705574 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.07894574 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.250210697 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.085449358 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.085980688 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.087342835 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.077566418 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.086762822 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.085093719 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.077870349 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.083693498 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.077184028 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.077535028 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077678024 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.084237691 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.083821168 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084899901 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07685287 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.076398888 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.085174337 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.087367894 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.077240658 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.083964058 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.086572928 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.084217812 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.076789817 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.087323356 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077010685 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.085477654 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077564906 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.085727698 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077268232 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.084260972 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.077453803 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.076914746 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.077310616 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.086527395 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.079369364 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077803247 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077324101 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.076820897 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.084565754 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.088451649 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.078623885 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.085591331 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.08558633 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.077983556 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.086394993 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.077985944 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08762885 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.078547572 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078463828 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077091318 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.09010157 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.07837389 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.078774855 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.077850548 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.086895716 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.077997755 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.087660896 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.084823352 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.077334103 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.089089516 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.086879104 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.084761538 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.087901788 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.079177314 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.077706217 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078107867 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.078158944 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.087081505 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.088266751 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.079235915 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.077819308 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.084446877 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.08815452 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.078029566 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.085022422 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.085147724 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.086048325 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.077974396 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.077308208 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.088122664 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08919089 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.084579395 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.08945743 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.08753997 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.079475943 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.08712834 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.090350986 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078785563 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.093636218 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079434427 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.090813781 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.09106181 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.086825872 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.253026881 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.088434785 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.086928138 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.085789303 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.088337119 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.076339863 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.07612481 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.082781469 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.076541096 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.079491781 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.08287535 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.077752078 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.078594702 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.090076582 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.078162642 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.086399659 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.076772032 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.084508893 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.076892165 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077845407 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.088439078 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.077511936 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.077691231 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.083838686 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.078167345 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.084072682 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.086635372 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.083802846 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.076673902 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.077798618 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.087403164 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.086418224 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.077513355 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.076923169 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07696281 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.085529308 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.085524921 seconds)
  done (took 21.104540633 seconds)
done (took 44.419197647 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.213559564 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.128421989 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.224121104 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.151128235 seconds)
  done (took 2.381887836 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.112150418 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.073236627 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.136994931 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.148081643 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.07321573 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.133355167 seconds)
  done (took 2.363367883 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.274649376 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.19732607 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.201707641 seconds)
  done (took 2.377419748 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.195445823 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.345920765 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.6236399 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.191917585 seconds)
  done (took 3.061795106 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.181763645 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.165555151 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.086239021 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.179257952 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.093309239 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.069900463 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.158263538 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.078591571 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.109156423 seconds)
  done (took 2.895259109 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.156797834 seconds)
done (took 14.924351009 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.332649416 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.139308014 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.088664338 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.082598983 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.200050195 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.197205736 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.291346171 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.08461954 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.281238437 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.397501088 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.232344804 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.106311642 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.158561845 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.101072556 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.353529398 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.088163017 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.084793636 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.080774621 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.214320327 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.211733406 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.251520243 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.085560478 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.160162395 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.087172468 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.17034154 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.141942484 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.238977886 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.386109328 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.352611022 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.087638787 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.195288443 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.105570838 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.1881026 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.200456799 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.200282162 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.112230799 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.076773054 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.336525238 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.17027271 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.404539022 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.221852963 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.082728384 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.21145214 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.081036384 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.145338878 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.146316127 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.091080748 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.082786136 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.101833645 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.081463031 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.09762435 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.082995839 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.209742539 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.079845616 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.15653599 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.206159168 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.235642754 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.234628703 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.08287291 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.096837742 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.086912295 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.223918269 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.103128842 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.082603397 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.08945175 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.077600989 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.203073492 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.098252009 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.077669723 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.087291526 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.085148551 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.17474767 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.159320034 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.126148322 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.089760598 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.18483872 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.160771355 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.105340413 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.112678971 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.087375885 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.076889467 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.237885259 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.082919246 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.096512111 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.082267077 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.116459392 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.076859318 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.09888252 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.225943386 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.221941308 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.143810669 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.077601678 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.307501581 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.079131763 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.108735029 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.145970184 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.078110345 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.237397375 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.077739113 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.077249162 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.086860916 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.085475649 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.080485735 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.224897909 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.170325386 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.084694069 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.084149703 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.077477104 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.08226096 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.079318984 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.077085258 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.076377348 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.162566941 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.099249061 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.077051223 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.17270296 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.195827978 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.088592237 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.097113174 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.145318457 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.078806104 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.085569427 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.084446945 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.193812728 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.084859872 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.204174271 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.078997314 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.101493802 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.184713435 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.160871379 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.170802991 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.07838779 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.224824896 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.08740967 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.076754119 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.084375282 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.108406366 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.086991773 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.093025256 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.085929676 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.224857322 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.087901883 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.081895416 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.183762022 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.077267114 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.176646137 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.160499687 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.566779865 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.084104534 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.089272549 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.2408003 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.106699641 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.110852705 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.104178478 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.084029226 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.08044548 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.079505342 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.095850815 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.079756397 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.080179126 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.095437859 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.086256612 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.078716029 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.2563369 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.087907345 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.081255471 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.277656045 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.090783855 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.156022975 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.101423632 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.078351128 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.173979013 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.079257043 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.101384215 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.232760097 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.077498535 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.162530348 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.078462022 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.077855527 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.084644873 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.078349768 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.08526467 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.090338572 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.078213217 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.092402509 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.084237069 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.075927612 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.170911359 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.079626495 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.240529927 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.169626228 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.174206962 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.075517618 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.096050875 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.076545341 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.200515704 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.076837494 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.130583341 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.181648647 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.09255246 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.099056769 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.077337501 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.159373467 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.090791681 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.074954813 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.165005025 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.194295383 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.151085388 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.084273573 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.252715361 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.085468522 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.074316571 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.081999103 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.083743415 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.074613008 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.160044174 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.079907971 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.075604996 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.074970771 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.07743479 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.075084933 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.102168685 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.074933711 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.082382452 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.074589742 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.077486834 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.07768041 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.075019455 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.082915 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.160507329 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.194421313 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.081029601 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.097067473 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.088543099 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.086553377 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.209379932 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.082081023 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.208472695 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.075434539 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.084554399 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.099170118 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.075926799 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.080766954 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.074870034 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.095159277 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.078161612 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.076387293 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.282404787 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.0817997 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.077009325 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.077755198 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.077169934 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.083103317 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.077657767 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.075741374 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.074533465 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.073343856 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.079214064 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.079413045 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.085167322 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.096257098 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.476695235 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.075852322 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.078155211 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.074375885 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.074599632 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.076655285 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.076046356 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.074694024 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.076647217 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.075513766 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.074720431 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.105037496 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.079980065 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.074300611 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.097156647 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.073704972 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.083408531 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.193971015 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.094214072 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.081197775 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.074921657 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.271415145 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.16741413 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.097987154 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.097388555 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.075437285 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.085438465 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.075219855 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.076385817 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.074610585 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.103801527 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.081131561 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.074416809 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.075806236 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.075313366 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.2077358 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.084084429 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.075636111 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.082924882 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.075619531 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.074791179 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.103027816 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.076249036 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.07558554 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.093683741 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.088183757 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.16064291 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.087188068 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.077082781 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.211596345 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.075957981 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.075954669 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.074985309 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.174214604 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.087749181 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.076942981 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.074872695 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.082290469 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.083406861 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.27395781 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.080676845 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.077323355 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.080765033 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.073778765 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.074408864 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.10025372 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.104848806 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.077058561 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.078293892 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.075757233 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.074532937 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.155477975 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.082563919 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.079413782 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.168049053 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.077284572 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.082089106 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.075370733 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.478259182 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.082152178 seconds)
  done (took 44.044426306 seconds)
done (took 45.753324749 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.164215371 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.090519031 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.090043085 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.085081516 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.088909482 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.088154841 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.090491817 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.086039226 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.089325899 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.088320086 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.141033801 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.074655589 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.082484808 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.090393771 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.084295821 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.091922093 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.087214725 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.090695647 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.075258908 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.092504194 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.10321841 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.089605629 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.084877248 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.089332011 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.074873511 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.083861795 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.155529166 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.096218579 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.08024881 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.085310619 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.082870656 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.089269074 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.082539657 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.081362356 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.08467161 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.08031278 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.085093719 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.082108377 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.155960595 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.080604536 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.07453624 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.087407852 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.081128159 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.092496408 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.084647327 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.087835868 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.080502586 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.089428772 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.073425715 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.087725616 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.155079513 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.080126084 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.079329903 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.083367237 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.080787399 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.085078096 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.080171137 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.086960886 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.079561095 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.087897838 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.084387161 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.082422029 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.073312469 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.084088884 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.085516968 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.082984932 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.073712611 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.080179408 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.074301407 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.073722733 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.073128923 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.084014036 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.082520185 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.080366148 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.072535051 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.074505746 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.073421182 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.088678416 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.081962241 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.083979131 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.075519821 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.079997323 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.079487862 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.074091011 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.080101089 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.087216682 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.072850036 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.075443422 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.073656295 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.086976703 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.081985311 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.075030976 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.088000696 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.080521936 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.080497461 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.074345222 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.074534872 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.081241882 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.083799942 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.074696175 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.073178266 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.080313361 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.080015022 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.084936374 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.075397074 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.078842917 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.080708211 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.07266618 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.08379308 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.082783973 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.247643519 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.087674837 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.083698806 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.086071541 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.074228455 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.07216087 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.083893349 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.073925287 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.079297086 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.081734157 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.079590416 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.081755015 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074119514 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.073170529 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07914763 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.079679062 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.074048185 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.073948183 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.073358074 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.083270231 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.08197891 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.073085573 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.074226475 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.083997938 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.083937033 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.072167474 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.07303991 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.0830307 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.0742696 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.080328964 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.079334353 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.083485705 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.072931919 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.073587119 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.072578183 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.073430011 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.072840303 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.079591684 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.079704311 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.074201479 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.083151292 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.082170762 seconds)
done (took 14.823811984 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.087593946 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.121870054 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.178354236 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.141224288 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.089400216 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.075314865 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.079574159 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.097407078 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.078888343 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.102662244 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.103656194 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.099414594 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.164615782 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.073239197 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.075445945 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.076736469 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.074070383 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.089607189 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.148144214 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.10271066 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.122331786 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.075418436 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.092331019 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.097322522 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.089840742 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.096456365 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.077047181 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.077107496 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.080076229 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.095946301 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.105864475 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.076180517 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.077432194 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.096551735 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.094174096 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.086014745 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.077388882 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.083655884 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.076862697 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.075722887 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.078090865 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.096977317 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.085088812 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.083815219 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.077072819 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.077322096 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.076109034 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.084023125 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.091571872 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.083227407 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.089920595 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.094538917 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.07860387 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.076890996 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.074353416 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.084294246 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.076021269 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.075972423 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.07616424 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.075793767 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.076580132 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.078953867 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.08182521 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.087644928 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.080682577 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.08375913 seconds)
  done (took 7.810905149 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.095069109 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.105363439 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.090639151 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.094399554 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.074603843 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.075325888 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.075797284 seconds)
  done (took 2.557156386 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.124224216 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.138409686 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.146451613 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.148249019 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.160910733 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.146044257 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.090069081 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.111041992 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.074750058 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.161289064 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.156808203 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.152082882 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.079242384 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08897148 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.111831129 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.154466565 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.090876114 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.084655538 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.145661457 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.152682705 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081299648 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.108440049 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.091030467 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.076679113 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.148403642 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.141489096 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.079026279 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.075668637 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.077187164 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.075445279 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.074632013 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.100559398 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.140187601 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.091703754 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.075802456 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.075352489 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.139081986 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.07708072 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.140320821 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.084191286 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.140322659 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.078024811 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.077871377 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.074610687 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.077240844 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.144258339 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.077446305 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.076314474 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.075808367 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.144885082 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.074870226 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.143223251 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.078766383 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.08135362 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.082836808 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081585265 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.083283371 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.07514734 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.144686293 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.085930515 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.077762273 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.154460343 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.153911606 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.312292792 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.14822701 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.085385269 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.138063311 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.135285027 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.074242327 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.083434424 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.075239684 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.148788886 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.079022816 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.077323939 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.080559189 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.082959548 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.152360897 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.153460941 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.153430692 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.090742855 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.079542698 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.075464805 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.150686518 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.152527762 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07938749 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.074843841 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.075476739 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.091215455 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.102207223 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.077133932 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.080194055 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.074345035 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.085560764 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.077286743 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.077132727 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.146292415 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.075938196 seconds)
  done (took 12.309821339 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.078225415 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.07717489 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.075543235 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.076590714 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.07689248 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.077410791 seconds)
  done (took 2.439694094 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.103234022 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.07537577 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.088765479 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.075752743 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.098453437 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.140990598 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.142426147 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.076456333 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.092545071 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.088623069 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.144059018 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.146510802 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.146493205 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.077731215 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.144887888 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.089552064 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.145417902 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.080829495 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.088312435 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078366378 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.092305814 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.077898411 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.077597016 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151755448 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.079043718 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.088682042 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.086221674 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.088764403 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.088220722 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.07785428 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.076855676 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.079104104 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.086173366 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.077466069 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.14602438 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.084992886 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075963102 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.0816217 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.078704268 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.079377342 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.148416235 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.078069945 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.082049668 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.08168054 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.077403151 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.086133391 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.081293286 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.080597099 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145450207 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.081266182 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.081117522 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.08021481 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.078614508 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.081013027 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.086464227 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.077606452 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.081885053 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.147336537 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.077452131 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.087037959 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.077839204 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.079456291 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.078833429 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.079534352 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.082892451 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.081960373 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.087154184 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.078668906 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078493288 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.077381514 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.082332297 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.077850365 seconds)
  done (took 8.610836965 seconds)
done (took 35.617908899 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.568964865 seconds)
  done (took 2.50567649 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.100328095 seconds)
  done (took 3.074340211 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.107689442 seconds)
  done (took 2.096573866 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.390709148 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.499000626 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.840135001 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.148439114 seconds)
  done (took 3.840822408 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.897647868 seconds)
  done (took 2.879029276 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.289115453 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.248985418 seconds)
  done (took 2.532970048 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.502723883 seconds)
  done (took 2.4749171 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.538681145 seconds)
  done (took 3.510049359 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.253709048 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.177130693 seconds)
  done (took 2.414913519 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.743742655 seconds)
  done (took 2.739889479 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.046040074 seconds)
  done (took 7.077002119 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.288796445 seconds)
  done (took 2.357934751 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.255340071 seconds)
  done (took 2.250405481 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.810795378 seconds)
  done (took 2.810914329 seconds)
done (took 44.561105103 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.099993462 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.095979439 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.096061615 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.091276263 seconds)
  done (took 2.361270964 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.084341945 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.07916742 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.081980778 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.081965207 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.079919581 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.081109187 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.08219142 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.079065985 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.08096806 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.079318172 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.077715063 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.079431088 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.082618494 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.078533581 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.081372898 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.082986022 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.079104476 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.078912232 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.081019439 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.077320835 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.081204349 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.078627364 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.078686924 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.080643176 seconds)
  done (took 3.917564534 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.088020702 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.080187176 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.084714794 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.079123547 seconds)
  done (took 2.329876576 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.085526986 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.085069606 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.094268065 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.09902959 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.085052725 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.086019827 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.093364744 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.09272141 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.100055157 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.095856925 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.076711299 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.076963813 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.075697841 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.096416082 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.092492658 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.069096394 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.070570292 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.086624805 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.08519223 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.08935736 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.079453599 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.073798593 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.086488316 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.087049426 seconds)
  done (took 4.056753413 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.09161614 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.073975562 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.091464302 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.102718581 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.104147956 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.074235826 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.089022401 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.104628685 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.144166395 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.074521612 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.080859967 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.074334168 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.11733153 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.073887195 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.089231169 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.123816928 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.125774919 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.07848886 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.110368961 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.075522726 seconds)
  done (took 3.909121096 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.086505356 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.078918132 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.079019833 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.073590731 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.084046205 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.081409711 seconds)
  done (took 2.5060104 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.07628754 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.075783903 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.075419752 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.081213883 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.076275022 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.075573373 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.074953614 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073661483 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.074581248 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.075499484 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.074852529 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.075773997 seconds)
  done (took 2.919927859 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.235278526 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.080132449 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.079005284 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.074272016 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.075859708 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.074085458 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.089375908 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.076833633 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.093531807 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.074914654 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.075037151 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.076764039 seconds)
  done (took 3.118776239 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116975618 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123199964 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158374194 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128805561 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127012735 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107322817 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.203121292 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.10335669 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.184857447 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.153528361 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131609494 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104693779 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098463345 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.079221944 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111819067 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132955817 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154373959 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082717266 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126711974 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.248350981 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148268164 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.150911791 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.161425111 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131214179 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104317871 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.161413026 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109183218 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113776067 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138123685 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141730122 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131691293 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.110728079 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.080790603 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.08004978 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167801743 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.119586068 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135449093 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.104456688 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118128309 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100065891 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121413139 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.079030202 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.094712677 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.126711913 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096940692 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14601709 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.103332301 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128896857 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.264768772 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.152449581 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14017517 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171969024 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095831418 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116396823 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151085361 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123989638 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147922654 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.117346457 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092848325 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.131037223 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.116074432 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110913001 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119577453 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091274419 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.194280673 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099772105 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.124638013 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122942463 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.106888146 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107687312 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120396325 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.154456202 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142601066 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.140304047 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154451145 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104784743 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134102501 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.114492976 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.144804858 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117437085 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.082372327 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.138226089 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.145894652 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112339277 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.115221722 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147101899 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105576973 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085661323 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.114411522 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.133954561 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091090718 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.129937112 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091381905 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.123770599 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154354148 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111654644 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.305177271 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13107645 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087636391 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165123578 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119671822 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081627937 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129358699 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124004813 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169274284 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10400657 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.08567201 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111644501 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113740018 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.166663062 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118021305 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089950104 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120171546 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151044757 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104891074 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254981521 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106866103 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.15513589 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125498721 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099361576 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085398897 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.102767522 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128861071 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121498996 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126311378 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104833984 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.095863288 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099036374 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130350583 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106492504 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092710069 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12931112 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.119160486 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.085562221 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099413218 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.088085635 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160194138 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.089469515 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154148983 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142852189 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.08904269 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121985466 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110725948 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122302288 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.113327662 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136924404 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157572502 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.211994224 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104871353 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.109209076 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.305040332 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.160667032 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.139747564 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10485892 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.087482893 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112493434 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124568729 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109172842 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138572241 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106351166 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119587847 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115277811 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.156524452 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159399843 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109802886 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113340774 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12055987 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.136248146 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085519659 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172504175 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115277303 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133093922 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098684157 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.158359556 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.127713738 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101782148 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099218532 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112873754 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.117386735 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120654195 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161063279 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.109871481 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.083264461 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104504184 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.162437555 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087346806 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123747389 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.103503109 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.105767458 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133742342 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.107481152 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092049465 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.078596429 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143548059 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.177476997 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.080565299 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129061584 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.122108347 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115802981 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.139343097 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.080543747 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13542861 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.336261883 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129146272 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152913525 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179782146 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129606247 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134326437 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.127416127 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.119588376 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089732015 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.140418062 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.149291696 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1055078 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101537381 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146606629 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.131590242 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.150299083 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.128960882 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132937725 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.117934049 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120938954 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114827561 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.11789127 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162441661 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138476042 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.140925699 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095704508 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119799903 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13479079 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151048194 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093667739 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.156750351 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.097652124 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135733305 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.089558337 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139274231 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.087736147 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.191399406 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091078344 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.113993141 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.080082853 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.084541989 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.161104951 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.128550923 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121664309 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116013828 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.156845056 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.155711272 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.089912325 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122848481 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.312510117 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114265058 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129568073 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120007712 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.098643025 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104289654 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118875779 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094987867 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.091315518 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126821654 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103026509 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137181217 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093508552 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083819722 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151216138 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114806038 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104620435 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085315124 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11845737 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.135149377 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10218532 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096626134 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128618688 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116193746 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.156065415 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.102247703 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.10994361 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13808339 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089896037 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.10466036 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.078945433 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.096709177 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.086347576 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142751615 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085690004 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129573993 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.078469033 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.146338891 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098051275 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.10578436 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115051513 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123426533 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1428049 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106169746 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.155613442 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100093307 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136525179 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121023516 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106564038 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099109401 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117933689 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114255906 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.137701236 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.109979803 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14107793 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162689077 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116970945 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.337959427 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10020576 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135005129 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119630495 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137250188 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122304468 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179792374 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.151956682 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123408627 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123042099 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08427203 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109655448 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116359597 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125157896 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.189035595 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136707425 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.082268534 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115873907 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104998587 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122106263 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114414532 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09077945 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159834059 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11434974 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.099988823 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125340766 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.102190143 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.117729337 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086650307 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112682766 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.117200743 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108135641 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11010248 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129426816 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143509439 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127626342 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161642486 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.112669964 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.104674528 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.13309988 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124185394 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124019628 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097670507 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098453405 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.155452272 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.136496249 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.143026797 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.114590903 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123674988 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126751085 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113902234 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.319391686 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118997014 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.137347763 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089863681 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.085977776 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.077206647 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.080274573 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135408825 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118769306 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122822948 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10801108 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.080120667 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114370884 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114130471 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080764445 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097610857 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102697082 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108736923 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.102339455 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118445804 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.124362456 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.10797615 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.114816602 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110023599 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.159432759 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.112155317 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097824461 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15917308 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.164635641 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102193488 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103472462 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.082074402 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089307017 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125601052 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164916345 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.168547509 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.088724505 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098364381 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.097174788 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097375114 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.081769696 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.099919829 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.099903541 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117776251 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110039942 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.126470205 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11785281 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085473488 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11622412 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111694749 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103652916 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.120805751 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137589654 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146502282 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.16056898 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129546999 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122105883 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.265191259 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.090422706 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085581596 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089466623 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114018238 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.086895018 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086127178 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.156349617 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.103127488 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115904504 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120699745 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098751282 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085474723 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147929609 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.078218014 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.148398739 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.080520839 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091930416 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.092501931 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08818946 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102664507 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149755499 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121925824 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123917466 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118867561 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116402221 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174518662 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173924029 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092009747 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.159564134 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087366549 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087621823 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086377427 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123065704 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101082756 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128449298 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1559706 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100958427 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113900935 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089408305 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.160728629 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.11198567 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11707116 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096805874 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090030582 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.160165495 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091188513 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.092226535 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101802634 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127229652 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.082377402 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115578888 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094521299 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090027037 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.181542102 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.726383433 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103705103 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.086716301 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.287628876 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.158807303 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145171887 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106896573 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119861181 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.131789576 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112332492 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105431883 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119063036 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.206313506 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083644133 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104127065 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.114657744 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108699926 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112661602 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.110343833 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.098576703 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.104035171 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.097862438 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08939811 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119948367 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098865985 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10805669 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12007913 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094689581 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.099177127 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.144408151 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.115565797 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.093160543 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099172396 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.117703076 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098472839 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116690607 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.080278245 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127131557 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100438477 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133957026 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.110444543 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122192672 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139526523 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10600322 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.151617089 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.120209204 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136343706 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100376402 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.088639951 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141516149 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.102099682 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087743747 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161449238 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.109721899 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.118984981 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117485077 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.110184526 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127168789 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132611177 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127685322 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11037967 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091267646 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116576592 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.118129893 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100376796 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092107245 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.086138664 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.088657366 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125251167 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101039335 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100586135 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130736259 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10384515 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120194188 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.121647484 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.142882599 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102600633 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.120918041 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130986974 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107952378 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128279247 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118778638 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.152760002 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.205728712 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148083566 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.151109133 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157898807 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.091317402 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.089411596 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.080810351 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133212312 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092976167 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.104717165 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091114841 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.156914124 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.095478881 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131936917 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.264483988 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094066953 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11154108 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113539911 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.081528404 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097630947 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126720274 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101995865 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094228651 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140617315 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094267943 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.149711257 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130734795 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117020885 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113116882 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094715567 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134308027 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.120218244 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.153217962 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111592016 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.089263795 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.511584173 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.119691558 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15648537 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.086733131 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094071332 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.148828427 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118233935 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148807082 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092569323 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168938098 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.162506895 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115510564 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153454023 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083916551 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102941966 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.748111572 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.145603223 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097038291 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127451211 seconds)
  done (took 78.02894069 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.196357486 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.190837635 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.133612407 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.14752465 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.303527703 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.312626299 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.164174351 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.134503951 seconds)
  done (took 3.829816749 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.082484929 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.094641704 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.092385968 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.299621608 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113985102 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.078026921 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.082605182 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.093509088 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.0839111 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.076389031 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.118900947 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.077325524 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.081744512 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.60287965 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.076512812 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.083472165 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.08131189 seconds)
  done (took 4.453528608 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.376575422 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.820156143 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.439561584 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.89455581 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.178142338 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.739949615 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.084753992 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.095070445 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.971725771 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.438014034 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.171890029 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.236825008 seconds)
  done (took 22.65550455 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.086417385 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155725788 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.155893466 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.084881206 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.08444621 seconds)
  done (took 2.761667787 seconds)
done (took 138.906509124 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.095506389 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.201012184 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.078253647 seconds)
  done (took 2.508005822 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.154214372 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.155125244 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.154057788 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.156419244 seconds)
  done (took 2.817065896 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.08556088 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.086457451 seconds)
  done (took 2.379484642 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.249217995 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.259405362 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.102923643 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.092972931 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.088848471 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.091025297 seconds)
  done (took 2.488173489 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.080733399 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.080295821 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.081056963 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.081187877 seconds)
  done (took 2.519194422 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.197665049 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.076513805 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.078688067 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.080577358 seconds)
  done (took 2.632902063 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.095890213 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.096865087 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.129544723 seconds)
  done (took 2.539586021 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.094364864 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.095128106 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.088573605 seconds)
  done (took 2.484620044 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.121216129 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.108877226 seconds)
  done (took 2.431653599 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.092154266 seconds)
  done (took 2.332351307 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.103416624 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.110364733 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.22355495 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.188855837 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.229224399 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.212981337 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.087339517 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.088467963 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.083804716 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.082615003 seconds)
  done (took 3.651839195 seconds)
done (took 31.673291863 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.096667876 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.211846655 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.326198152 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.099895902 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.667993091 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.322758951 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.739741293 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.102034581 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114948843 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.077683736 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096676652 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.642260812 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.742171637 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.156264984 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.726367802 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.151569293 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.572206065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.078433142 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.076522897 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.076319903 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.719196933 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.077455698 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.076828684 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.077291454 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.56901693 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.344435912 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.079420871 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.146148779 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07780187 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.081828647 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.325767357 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.078621542 seconds)
  done (took 14.942659133 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.08488427 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.140982926 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.081217949 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.094600586 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.079901609 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.079437338 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.081139879 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.078044443 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.12593703 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.077256047 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096533138 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.076771054 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.082042506 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.078644775 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.099542676 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.077459013 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.080194787 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077856123 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.076720984 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.078364094 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.098688704 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.07743827 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.078051408 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.077786346 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.077865413 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.093250697 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.079381136 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.077452164 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.077988991 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.082161842 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.084096856 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.079756393 seconds)
  done (took 4.965185673 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.143667624 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.146808121 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.082432012 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.123253792 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.137834188 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.079466677 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.174155101 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.101782673 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.129699514 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.077971233 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.096318392 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.077353732 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.118187922 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.079215276 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.100623465 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.078368989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.080746594 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.078041021 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.077143343 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.078322525 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.098613745 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.0770021 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.077705257 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.078747473 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07783484 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.096654208 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.079694351 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.077801856 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.077256363 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.08153022 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.08333353 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.078817654 seconds)
  done (took 5.277713736 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.078599743 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.080441812 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.089505637 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.092238936 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.074852424 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.078000647 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.078858006 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.075436355 seconds)
  done (took 2.878603967 seconds)
done (took 30.302552824 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.089198952 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.075827151 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.078780808 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.096909576 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.08294789 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.144970549 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.073448196 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.083910806 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.080804845 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.081243889 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.082563976 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.076382733 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.080057385 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.074066595 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.08083897 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.074455449 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.147207923 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.078177839 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.145966013 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.146211142 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.076412385 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.080729883 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.085139784 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.147090555 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.146849951 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.147847732 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.083758526 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.080997342 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.0753682 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.078318626 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.223861355 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.228203643 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.084705702 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.143200926 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.075487143 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.075467225 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.080098363 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.078301594 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.151560258 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.084595778 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.077900622 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.084581102 seconds)
  done (took 6.473169914 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.22893274 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.236792282 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.229975906 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.090441953 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.101668 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.090885885 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.236923956 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.086861103 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.085431154 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.236772693 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.082065268 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.085756788 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08840646 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078020043 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.084753505 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.08135871 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.08732712 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.079828182 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.085249862 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.085995052 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.238908928 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.078652706 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.091512256 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.087129856 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.081101713 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.088325747 seconds)
  done (took 5.404683176 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.083659546 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.100264837 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.10437272 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.164904232 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.122678295 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.093414936 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.093187892 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.105810412 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.113591258 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.076824667 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.102199553 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.10642609 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.109306577 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.085274766 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.11921727 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.096555064 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.089772666 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.078624594 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.083774468 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.115459406 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.102538035 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.098209142 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.112095053 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.099440176 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.076279524 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.086745385 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.085071267 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.095230586 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.085091129 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08988379 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.081100592 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.134774793 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.077866513 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.089474898 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.080861212 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.074562056 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.101605588 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091901713 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.093630376 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.119071425 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.087796548 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.078710922 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.109229702 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.15157206 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.076425497 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.079379294 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.080934999 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.090848557 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.078412807 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.110267004 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.095306434 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.076859535 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.097640869 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.079220306 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.079139281 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.098963449 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.078911558 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.079811232 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.089946659 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.083526684 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.099997068 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.083631123 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.101622262 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.077123905 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.089917991 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.078977336 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.078842488 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.075112812 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.116410401 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08581016 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.135956883 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.079007921 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.074501306 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.091846909 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.090471689 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.085718839 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.077432688 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.100073075 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.091798211 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.080924742 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.089602248 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.080375338 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.080834558 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.116824758 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.074932603 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.075023119 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.075856472 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.080112838 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.08134344 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.07805683 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.09177524 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.076947164 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.081632454 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.095433378 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.078257379 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.07911515 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.080584926 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.079119613 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.077370663 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089773611 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.082387423 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.080352731 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.09092067 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.07864852 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.081771257 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.095287347 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.088795544 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.077756278 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.079063741 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.080097387 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.079887932 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.084593779 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.082503007 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.080751129 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.084223506 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.087509158 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.085632507 seconds)
  done (took 12.873161393 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.251157003 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.24030673 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.077485529 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.23407238 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.086517647 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.162462881 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.238761914 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.240663985 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07876935 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.079889334 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.077314592 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.177258816 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.171984762 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.185155644 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.1641068 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.079807795 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.107028362 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.1850921 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.243093439 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.237993375 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.10494762 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.085983158 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.081161006 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.079114651 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.078360471 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.087035042 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.093865685 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.087327548 seconds)
  done (took 6.350576058 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.084280565 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.125954727 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.081505378 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.103620664 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.095484531 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.076979409 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.079827561 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.077861685 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.095851399 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.082962401 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.078054387 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.082570399 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.081295424 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.079937212 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.078754936 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.085112054 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.084208955 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.086636934 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.081936683 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.082539941 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.089650306 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.179883793 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.082479177 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07822317 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.080496655 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.07875673 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.085103106 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.085670076 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.076919534 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.084095676 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.073552826 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.082327448 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.09341663 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.0793164 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.077935172 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.079208916 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.078757343 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.078236701 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.079480254 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.076448963 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.075383845 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.084281347 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.076266943 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.08255429 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.093692023 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.081037876 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07949043 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.080423632 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.079360875 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.072902013 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.081322866 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.080881328 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.079468001 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.087502511 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.081404948 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.080173681 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.079495822 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.110095278 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.083554143 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.076277637 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.146045851 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.075786712 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.078330187 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.085676856 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.095897797 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.080025195 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.076224424 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.077521697 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.088693739 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.093201632 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.076456114 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.083219428 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.074067041 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.077713413 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.079342355 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.080313117 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.078911777 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.075228768 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.077320768 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.077583966 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.077998565 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.076453679 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.078220765 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.080470172 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.075546273 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.075033818 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.078313779 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.078820018 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.08326176 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.076752814 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.080816247 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.079019455 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.075933761 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.080103133 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.084555555 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.080867605 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.10049851 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.085431193 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.077634774 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.075647158 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.094287946 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.079619984 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.076499479 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.081200535 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.081823804 seconds)
  done (took 11.11122813 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.108575144 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.079172357 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.099281915 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.112284454 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.088779645 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.082683841 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.093109555 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.078714431 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.10319744 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.07664972 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.086624524 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.074888084 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.091846143 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.086944894 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.079147146 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.088230135 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.079844096 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.099179773 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.093442939 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.075536339 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.087448166 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.090656355 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.090099712 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.097394704 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.097496496 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.09865419 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.091367353 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.080527329 seconds)
  done (took 4.8378712 seconds)
done (took 49.261462193 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.337479715 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.516521024 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.35994779 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 4.003498697 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.517841082 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.371681584 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.518984773 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.337801905 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.819458601 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.41740034 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 4.088689251 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.979792108 seconds)
done (took 74.606877884 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.434435963 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.472334606 seconds)
    (2/2) benchmarking "String"...
    done (took 2.555070431 seconds)
  done (took 7.323622085 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.817652175 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.363819804 seconds)
    (3/3) benchmarking "different"...
    done (took 2.388901646 seconds)
  done (took 9.852398337 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.639432539 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.893619075 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.6120089 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.322734416 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.315049313 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.814463572 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.46484872 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.958532235 seconds)
  done (took 36.653069983 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.344280538 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.70853289 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.827982855 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.881806512 seconds)
  done (took 24.097581493 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.775366554 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.746881924 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.756782836 seconds)
    (4/4) benchmarking "different"...
    done (took 3.032402657 seconds)
  done (took 13.654562438 seconds)
done (took 105.069214367 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.327778034 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.841588848 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.34930959 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.505225072 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.399518193 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.436408132 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.34324455 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.34099337 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.324541308 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.331669655 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.336388144 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.326083897 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.319359108 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.391512536 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.346710595 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.365622951 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.826600624 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.3226575 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.36095457 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.436269674 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.707731686 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.367312544 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.336006065 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.376348156 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.935759039 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.38875214 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.404075677 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.328739747 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.96620764 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.326254755 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.33833406 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.340074064 seconds)
  done (took 223.29375995 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.315702842 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 5.132548678 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.152819603 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.342099612 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.807823404 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.680577207 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.17532763 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.779136034 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.346054341 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.362457594 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.412315724 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.331261691 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.360806281 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.885240788 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.367196374 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.365783042 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.215235138 seconds)
    (18/36) benchmarking "symv"...
    done (took 4.137826594 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.375925584 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.232699535 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.344402915 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.845181088 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.813388162 seconds)
    (24/36) benchmarking "symv!"...
    done (took 4.159144857 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.348597329 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.571684316 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.335391899 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.345452167 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.813104396 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 4.176030877 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.350664821 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.387570507 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.841046 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.572005933 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.338401519 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.339843661 seconds)
  done (took 198.612972094 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.569498096 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.357175261 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.374186163 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.433784742 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.346810486 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.229882947 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.326580337 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.336487936 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.353295771 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.37094856 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.34327833 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.409119412 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.335016013 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.733403662 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.344848395 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.320254734 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.325968449 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.720109744 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.343446521 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.34051241 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.344565638 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.448109343 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.678317665 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.461567804 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.349640033 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.341854727 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.445869611 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.336710747 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.327551349 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.331703194 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.442803294 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.316266416 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.460754584 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.451434973 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.325635045 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.372866127 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.33442173 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.690781611 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.330328914 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.325068213 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.339148106 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.40270751 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.363089229 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.638343199 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.452639374 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.341385941 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.33826778 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.781342583 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.89599879 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.32663804 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.336523387 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.321197429 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.32785745 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.329520523 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.49620625 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.380364033 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.401627689 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 12.291440827 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.32860396 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.331726478 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.320181325 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.322438638 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.332541893 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.337152547 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.353353484 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.998534673 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.908689728 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.710525378 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.189233527 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.345707006 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.355149203 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.358054468 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.652568138 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.397388422 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.34056335 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.33824417 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.506713422 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.342952365 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.331681212 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.47006185 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.392765831 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.328778112 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.450901095 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.335915109 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.335452126 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.79052453 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.570414339 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.342163247 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.350613389 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.372453527 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.32765729 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.33116091 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.341369606 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.419278414 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.355241172 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.350901389 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.783812165 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.340699206 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.328679921 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.72197288 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.724005686 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.325000868 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.42039156 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.755816532 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.295732626 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.329997992 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.368632522 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.394832975 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.362112218 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.368407554 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.349047851 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.351318371 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.328794721 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.345622783 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.334112883 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.326070555 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.321031615 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.34715857 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.336564415 seconds)
  done (took 476.028905208 seconds)
done (took 902.889973612 seconds)
(4/20) benchmarking "parallel"...
done (took 2.2586157 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.594156645 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.950790852 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 7.436194688 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 3.292044708 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.559598363 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.514769831 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.571341598 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.668733062 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.580400545 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.509500285 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.583936445 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.528787409 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.628706542 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.606418369 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.68689563 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.619957097 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.532858454 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 4.158610573 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.572379957 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.519388049 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.53852414 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.816205557 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.477061125 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.566756662 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.60490699 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.534504779 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.764026181 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.590306033 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.555839228 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.62759927 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.639804028 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.639571961 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.558288222 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.601399774 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.626075449 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.601378768 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.597553766 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.605919676 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.518451442 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.553343378 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.569863366 seconds)
  done (took 116.949686781 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.665738606 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.485329769 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.643804327 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.606989157 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 3.157609084 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.622151729 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.703945775 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.484149118 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.482308926 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.614066943 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.659856102 seconds)
  done (took 32.405410298 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.578571819 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.496755663 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.632168197 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.628116563 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.869248271 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.602992251 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.678707728 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.485539253 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.509250111 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.614605963 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.644151309 seconds)
  done (took 32.037521234 seconds)
done (took 183.645475092 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.880726611 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.404022138 seconds)
  done (took 7.548463604 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.353328399 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.33535193 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.339789568 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.330975403 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.346673755 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.366732769 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.557921181 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.351449751 seconds)
  done (took 21.241711455 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.357184763 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.355950592 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.346114863 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.335236334 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.343150739 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.339314529 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.343526207 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.342101186 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.334425623 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.335644141 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.35199762 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.345106939 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.326699598 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.344215554 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.347070453 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.34033336 seconds)
  done (took 39.761644643 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.35047954 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.341043432 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.339959152 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.367384383 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.357680779 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.381418911 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.368206926 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.360457781 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.357710463 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.358810756 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.359506935 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.34174194 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.345125182 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.338678842 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.335589939 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.333150734 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.33457806 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.330160284 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.328342714 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.334124056 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.337460948 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.336815305 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.335917489 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.338802239 seconds)
  done (took 58.581491158 seconds)
done (took 129.410224151 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.929209742 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.334017627 seconds)
  done (took 10.525007178 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.388108954 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.38092698 seconds)
  done (took 7.146719609 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.358136614 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.349665508 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.353960966 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.354306293 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.34370104 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.34895534 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.340274679 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.344232322 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.341582924 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.341660697 seconds)
  done (took 25.76695944 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.346610421 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.326651233 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.342858515 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.343201627 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.350149565 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.332976367 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.342207389 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.350676472 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.347028391 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.354837837 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.353749776 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.567971755 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.391601641 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.598443568 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.36646012 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.352534375 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.359135663 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.355784687 seconds)
  done (took 45.050199413 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.338048708 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.349168875 seconds)
  done (took 6.944456316 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.346804556 seconds)
    (2/7) benchmarking "second"...
    done (took 2.343058166 seconds)
    (3/7) benchmarking "month"...
    done (took 2.335083025 seconds)
    (4/7) benchmarking "year"...
    done (took 2.339865558 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.343936746 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.335772617 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.341985693 seconds)
  done (took 18.637611895 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.791342002 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.493613613 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.567559385 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.804661435 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.980028039 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.293769571 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.016913224 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.319775678 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.172056221 seconds)
  done (took 28.69679835 seconds)
done (took 145.034648771 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 6.018561245 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.347101762 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.965474314 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.489653823 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.430495508 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.683191172 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.376417823 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.910015021 seconds)
done (took 48.525231704 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.660484386 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.344974461 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.374886048 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.366699238 seconds)
  done (took 24.355273264 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.348783024 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.911458559 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.369283483 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.3502004 seconds)
  done (took 25.322368679 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.889669878 seconds)
    (2/2) benchmarking "read"...
    done (took 2.909421842 seconds)
  done (took 8.0874378 seconds)
done (took 67.7313265 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.354313743 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.355198838 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.34992911 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.349437071 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.353116539 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.330284292 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.3419748 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.358077044 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.349985839 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.348949485 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.358433256 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.347864553 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.344498464 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.346897631 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.365562418 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.357605728 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.358498678 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.361892244 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.356608071 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.341198922 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.36696358 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.398172107 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.397339993 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.376956548 seconds)
  done (took 58.850898309 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.445411455 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.436032675 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.427705881 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.421305601 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.446461774 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.43077844 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.431438471 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.405609979 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.429916888 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.412173552 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.381209729 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.431996146 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.38920276 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.449341314 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.395592392 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.435091681 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.431068265 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.399422108 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.378410682 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.447406544 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.444708637 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.431454085 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.462834874 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.41920876 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.459292484 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.40535831 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.421493743 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.413527301 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.388778517 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.439959031 seconds)
  done (took 74.999285013 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.398729258 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.354861888 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.362162598 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.447130046 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.359273913 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.362731712 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.359672936 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.355713111 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.356811208 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.353512493 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.351535678 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.351152489 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.364556225 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.344856056 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.372277618 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.394671159 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.429141493 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.555633218 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.351797403 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.369622532 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.412557346 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.364563119 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.352435019 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.357608405 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.353003068 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.350861195 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.360485092 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.353499978 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.356673978 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.351081786 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.344578819 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.395986123 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.393540708 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.354512309 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.45752097 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.411277757 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.358805097 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 3.945424687 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 4.455177916 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.431256558 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.376534168 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.372308568 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.366565193 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.368883864 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.430584391 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.373458291 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.372275644 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.361793585 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.362851614 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.353307784 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.355474375 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.36034524 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.37495775 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.358059634 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.350983462 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.357321969 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.347755279 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.346721277 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.337938084 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.354665155 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.34989555 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.420756307 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.348126543 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.371386612 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.759670407 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.395378991 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.446673427 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.376071568 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.374117036 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.57464358 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.355490834 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.548002226 seconds)
  done (took 177.649600712 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.352429433 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.351661086 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.445524872 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.432085606 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.364833179 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.354837919 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.363005692 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.370680894 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.020240198 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.36191225 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.368015817 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.375257982 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.025701987 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.360936454 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.35962552 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.47206322 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.401597657 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.380278295 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.374654506 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.368855523 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.371637359 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.356713582 seconds)
  done (took 55.903638681 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.399536454 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.370301603 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.400885494 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.371511649 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.372386508 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.373747977 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.402509293 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.368210775 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.399986805 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.405519735 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.390262681 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.4029504 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.375935616 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.392516427 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.400484043 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.452081313 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.399507721 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.484990572 seconds)
  done (took 45.445159979 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.572891561 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.539124164 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.451632636 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.411854755 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.609318107 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.584131452 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.451715159 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.520662299 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.399616091 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.529464074 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.535498174 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.406008252 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.587555442 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.408288519 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.397353889 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.613205904 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.448830473 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.404057266 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.466706971 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.459346809 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.530119235 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.458789032 seconds)
  done (took 57.108408481 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.440147842 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.440223533 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.458242595 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.444969685 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.36639905 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.376334778 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.425733838 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.403880348 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.377943732 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.397870075 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.418627475 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.364932305 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.454258441 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.424950085 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.448038912 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.418667671 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.40654977 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.421653974 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.40905444 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.360436322 seconds)
  done (took 50.55025954 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.364829745 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.358169375 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.359955144 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.376614359 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.391131093 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.384660745 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.371127195 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.371608 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.359607495 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.597066055 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.351040361 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.345517473 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.352888964 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.358396728 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.350110417 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.35546213 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.352033983 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.349115128 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.350438297 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.353659475 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.584774841 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.353093247 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.361210087 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.348804572 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.352833832 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.365228978 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.35722394 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.349099877 seconds)
  done (took 68.815564591 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.459061122 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.443674645 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.433822012 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.492755857 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.501936691 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.409280326 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.482029539 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.492260058 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.408171551 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.408594577 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.452623267 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.404478229 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.403304205 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.412743947 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.39162095 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.438453219 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.40271355 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.482413522 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.444197505 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.40484393 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.450348623 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.407499102 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.443362383 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.410476896 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.42717472 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.488139125 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.468578528 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.537414534 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.44115232 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.417314984 seconds)
  done (took 75.565761195 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.390753721 seconds)
    (2/2) benchmarking "in"...
    done (took 2.399648582 seconds)
  done (took 7.081741187 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.359056 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.464787553 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.371643818 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.565662524 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.53488092 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.549761025 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.524714012 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.459830135 seconds)
  done (took 22.119806003 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.369279594 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 5.71970239 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.517893766 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.366871203 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.383112844 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.957040418 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.353048717 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 4.273129031 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.183859479 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.249629328 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 3.543673821 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.923236287 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 4.418392571 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.699772388 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.473959029 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 4.234414174 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 4.580005244 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.961741384 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 4.402983733 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.520826312 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 5.176829771 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.459448092 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.381209724 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.378759718 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.369025887 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.309203501 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 5.402844401 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.781994093 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.533198758 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.477819488 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 5.17560549 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.417346812 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.353380337 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.650619228 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.454755964 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.37204278 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 4.553039668 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.480985339 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.391360874 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.379326811 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 6.228306392 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 6.080548284 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.591741494 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 4.588331588 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.431387161 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.36444958 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.36589973 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.343617531 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.610699811 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 4.026533865 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 4.422613506 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.357201038 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.49859702 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.361757029 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 6.025663128 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.522789604 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.368082834 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.310760903 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 7.155565367 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 4.593066158 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.736422094 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 5.623399608 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 4.519548027 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.474692358 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.348829558 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.591201578 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 4.259774837 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 5.264189469 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.171580498 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.502707288 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.026144606 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.396253399 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.388721016 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.380512075 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.369908253 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.739761097 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.398302357 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.353667535 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.356668916 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.344091793 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.634879731 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.454681117 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 3.201488448 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.490346744 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.561794611 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 5.952717223 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.482095152 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.373695415 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 5.102989283 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.283507452 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 3.580824625 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 6.161927116 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.586534381 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.510179882 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 4.402972557 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.610783097 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.39752767 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.358966632 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 3.217721557 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 4.885933221 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.511007212 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.365028721 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.737496516 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 4.466822826 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.419276461 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.401174574 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 4.121720706 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.498477879 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 4.518379479 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.405819294 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.363284971 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.373397952 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.999535885 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.557112096 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.416741898 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.898328138 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 4.43117607 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.835823976 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 5.811365493 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.550652956 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 4.755903311 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 6.421419698 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.661951507 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 4.297283278 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.432615496 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.778168013 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 4.401765688 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 5.029326141 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 4.689259916 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.493664716 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 6.312680133 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.400439375 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.371089223 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 5.585020387 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.431577719 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.370541302 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.369293031 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.375025279 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.41611148 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.396247191 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.516626623 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.790944613 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 6.119695359 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.493264613 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.612056274 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.468485813 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 6.293627145 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 4.568776665 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 4.061608401 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.502259911 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.380837412 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 6.065949305 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 5.849296891 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 4.107156071 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.520244849 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.385049578 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.381054132 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 4.268307695 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.410903749 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.453391481 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.368846451 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 3.01497403 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.577034259 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.404544186 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.366879479 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.844994236 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.512897259 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.374437559 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 4.480763741 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 4.162750512 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 6.18828375 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.554274372 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.723160091 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.506515659 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.397548958 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.376890151 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.384926499 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 3.165775374 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 4.045363818 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 7.694919345 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.987045075 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 7.278497367 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.442423614 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 4.547820214 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.449496407 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 4.781303943 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.60116825 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.544992139 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.401381234 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.386334777 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.394053246 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.910431108 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.390745292 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 6.439102775 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 5.38321258 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.418444385 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 4.464702206 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.551243898 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 4.246418426 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.381841413 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.123263942 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 5.387081821 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.489452747 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.405020565 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.395507951 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.52859684 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.568833715 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.528759737 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.838419826 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.507865842 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.366980112 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 4.046158788 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.47474542 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 5.072222686 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.457461472 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 3.20838971 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.48336045 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.487852957 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.512781959 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 6.098585518 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.526122372 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.407590085 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 6.207178551 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.4960854 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.376940226 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 4.449358374 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 4.938702198 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 3.318243964 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 4.105348837 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.909270421 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 4.495110887 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.925230973 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.615704226 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.516625086 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 5.246476807 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.494244878 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.687718086 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 4.532285467 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 5.876944804 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.574633776 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 4.164784243 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.37273208 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 6.048909108 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.496534428 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.400758617 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.476389958 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.8690245 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.471856576 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.367957663 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 4.558822873 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.44867954 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 4.059952017 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.530306144 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.533436438 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 5.782295407 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 5.336563019 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.451730823 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.646476739 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 4.519247397 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 4.357026515 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 4.344983893 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.699584958 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 5.35349077 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 3.402496216 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.556677674 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 4.199150259 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.571473048 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 4.807536346 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.53350634 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.393904403 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.382116936 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 5.63111453 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.446050736 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.375754871 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.720633491 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 4.39252358 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.460085208 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.559323852 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.399278558 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.373741531 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.608059274 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.544486134 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 5.729558982 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.89070303 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.981126212 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 4.213078228 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.508832353 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.120282477 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.475336657 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 3.093979423 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.576048375 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.418467148 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 4.056048271 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.510842048 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 4.684049271 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.523784574 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.489421781 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.926731172 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.721062598 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.711626578 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 4.58633333 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.515823419 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 4.196810295 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.902614074 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.630429322 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 5.862560812 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.383055959 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.970894791 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 7.600900343 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.966097865 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 4.444437781 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 3.133252353 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.583677849 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.437992669 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.424764936 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.405125469 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.989022534 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 4.46472121 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.427814214 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 3.176450899 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.964733443 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 4.467512496 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.136257255 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.57647033 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.426600372 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.381441129 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.379749071 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.328583502 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 5.621452934 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 5.776862238 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.51889419 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.418752944 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.406079073 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.391456934 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.824577748 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.202854151 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 4.269278981 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 4.387351217 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.527341062 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.38664974 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.38027553 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.382951121 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.381068726 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.398996176 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.387758102 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.797434478 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.544118264 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.037136904 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.582471942 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.460420677 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 4.647510474 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.446039126 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.391035677 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 5.648232416 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.447024372 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.485984323 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.447498096 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.371302098 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.789840058 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.523721373 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.40564597 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 5.793196091 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 4.671666453 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.607490004 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 6.018203264 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.413990036 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.838653537 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.771203392 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 4.274843958 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.443587677 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.339475593 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.578174644 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 5.26079234 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.388864369 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.968642951 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 4.017367499 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 4.46830467 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 4.775742041 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 3.282412882 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.80136903 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 6.694659955 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.483235957 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.422525378 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.422336874 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.503191325 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.632160374 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.423325874 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 5.717663064 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.550951958 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.411556554 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 5.868640793 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.486915633 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 5.689982906 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.399818186 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.405543523 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.391529743 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.400913291 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.885042456 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 5.362488378 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.479280523 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.401298485 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.352737468 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 5.410981856 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 3.289416119 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 4.050837252 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 6.405594981 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.500000519 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.375493953 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.583926472 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.437138638 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 6.339164679 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.407413206 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 3.190798291 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.727032788 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.480247111 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 5.692911936 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.826214582 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 6.257694527 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.80903382 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.501965453 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.401245867 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 4.793124071 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 3.381863821 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.528784709 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 4.324867487 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 4.719877495 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.955216987 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 5.969523719 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 6.852952797 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.51294094 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.344080824 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 5.087018964 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 4.47233096 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.441302335 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 3.248313168 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.535123386 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 5.736603601 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 5.396727735 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.662028929 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.523661752 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 3.082034368 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 5.259360096 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.533979939 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 4.030495211 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.570324843 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.435509894 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 6.159035556 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.487260537 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 5.746057137 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.504671472 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.393162119 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.407779997 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 4.085663873 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.977192229 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 5.647845549 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.461232282 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.408737364 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 6.140499058 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.30752808 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.633978659 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.492763036 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.443357738 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 5.914378633 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.434857938 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.405561836 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.803384859 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 4.001443585 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.5314169 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.924149939 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 5.637637083 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.540368668 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 4.683557979 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 5.833211824 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.575313022 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.445393031 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.39451302 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.409579263 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.444912463 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.883843675 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.573164507 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.412029144 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 4.010112747 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.536906825 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 4.198261353 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 4.328934209 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.656590956 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.453670036 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.806178805 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.532535981 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.923548817 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 5.401827916 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 3.580729031 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.729030549 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 4.583076126 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.620956574 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 5.194533917 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.498681998 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.404357315 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 4.362599723 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 5.757549211 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 4.74950386 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.81789471 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 5.760338481 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.461242627 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.10426896 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.494310987 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 6.115839005 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.582540642 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.443569372 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.951555321 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 6.706750844 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 4.85347571 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.545506923 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.889088631 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.510152642 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.781450962 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 5.775999563 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.491196058 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.387604878 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.39716304 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.440882968 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.454299603 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 5.071822944 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 6.460100454 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 4.904894036 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.532714604 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 4.293644421 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 7.06738879 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 6.146026219 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.762770049 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 6.730434976 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 5.913354423 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.406058416 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.366258735 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 5.808962203 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.46423244 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.603678476 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.530361542 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.263140979 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.480740368 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.421228274 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.831139202 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.558059527 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.399093018 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.397778413 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.347669533 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 6.331349446 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.479301288 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 4.607259407 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.470692093 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.406059941 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 4.038042397 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.66841767 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.458168992 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.454960506 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.448215085 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 5.328725838 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.522614544 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.419846493 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 4.757936524 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.544056784 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 4.738423561 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.261586746 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.949310504 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.460458983 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.392474613 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.405710999 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 4.166147096 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 5.91672703 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.58928876 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.794043406 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 4.562083175 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 4.030491972 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 4.488391725 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.972014976 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.906063158 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 4.411482163 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.522479335 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.405635519 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.458114787 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 6.377668061 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 4.482127809 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.179875386 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 7.048419063 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.490537052 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 5.249031976 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 4.421930477 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.467084724 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 5.648153016 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.438882519 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.407682074 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.393423056 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.394125108 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.908191733 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 4.460131884 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.426807143 seconds)
  done (took 2212.7269983 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.663026711 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.404487941 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.393397544 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.405795648 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.410944479 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.405377209 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.407003756 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.391821853 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.409735377 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.438951804 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.452211506 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.437862684 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.426866393 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.696985767 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.42438361 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.412673303 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.409872064 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.40523457 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.416765264 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.403405829 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.416206657 seconds)
  done (took 53.547499274 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.403884755 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.407282119 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.401720609 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.411133457 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.397928719 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.402908701 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.398756548 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.409394674 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.402690365 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.409084729 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.396209103 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.4293138 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.443895918 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.44951052 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.430887626 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.405733865 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.411939591 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.419413992 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.416293971 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.39885691 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.404695742 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.407246026 seconds)
  done (took 55.38250813 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.39667668 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.403103929 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 4.152272885 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.522848034 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.40505011 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.389310534 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.407372996 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.593470777 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 3.427320211 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 3.310579048 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 4.932486162 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 4.588376172 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.490977409 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.61102945 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.511635714 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.40154639 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.524432121 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.399121326 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.403661935 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.402417705 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.40436711 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 4.639182194 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.529226757 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.404138806 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 3.243668893 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.550275153 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.41669986 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.416168608 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.416087567 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 3.431691079 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 3.592369744 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.465170267 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 4.305611977 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 5.200372857 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.713283136 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 3.333402129 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.591000428 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.443866393 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.405232225 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.414822574 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.646375848 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 4.273157804 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.456581396 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.408175389 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.704494964 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.50675326 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.408574774 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.801104863 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 4.5445192 seconds)
  done (took 154.266697906 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.504541163 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.569534079 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.499771246 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.44090424 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.554430993 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.432523038 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.476525727 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.41084408 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.400913705 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.409716557 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.546016398 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.558805057 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.40734847 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.407010691 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.505864902 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.405454385 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.40543211 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.406148486 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.406508787 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.417230397 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.409539703 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.465781234 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.520529309 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.57216937 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.443215904 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.450453692 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.425085435 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.411288577 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.555121743 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.408515011 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.416152742 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.401556014 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.531850259 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.492523787 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.403079173 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.411304596 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.534077021 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.402142273 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.388213406 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.400478297 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.405282545 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.397448653 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.464572296 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.547042386 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.408040666 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.504741299 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.417687989 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.40718044 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.609180921 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.451847259 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.452098554 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.592914431 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.436844554 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.430485642 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.424967354 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.522570246 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.415141431 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.410020459 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.414624585 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.545908529 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.402769518 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.406408224 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.549655174 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.402986823 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.406727399 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.572505143 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.52033488 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.415978694 seconds)
  done (took 169.506003522 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.407514594 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.543388507 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.578216865 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.598760471 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.576760314 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.572996534 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.56753146 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.551346255 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.563780813 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.552892428 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.538009902 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.482177006 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.50642415 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.493065619 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.546358336 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.526445229 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.521952391 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.530456717 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.538233534 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.530176367 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.533813237 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.572086752 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.540634882 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.580025638 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.758262008 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.514135112 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.536250857 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.570832717 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.626908778 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.575935436 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.775780073 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.563081785 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.562830407 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.593511909 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.763803354 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.544314141 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.400937994 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.548730806 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.540974011 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.532163854 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.509513639 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.576782893 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.533630362 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.523475723 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.531273872 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.539618248 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.577846367 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.75715465 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.504931514 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.527930109 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.570201695 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.632958289 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.577991247 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.555163202 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.593196809 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.535689883 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.58503788 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.581687674 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.530015694 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.578010182 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.576184434 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.507090143 seconds)
  done (took 161.092383134 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.411211343 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.411363715 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.481010902 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.411393916 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.416392958 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.496517297 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.413589152 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.412800821 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.425005488 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.415749232 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.406834483 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.514111058 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.826011438 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.452604383 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.530937715 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.80550559 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.516353698 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.493438031 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.419800851 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.496088442 seconds)
  done (took 54.090553087 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.417614439 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.417008733 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.401583855 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.558236788 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.414081118 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.553419394 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.418315568 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.399634977 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.399760165 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.416589467 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.414399928 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.407994146 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.420671212 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.587306199 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.45932545 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.597806983 seconds)
  done (took 41.618879865 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.437126324 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.432651632 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.427303767 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.414449445 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.414677397 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.416054106 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.413224317 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.413687232 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.40716272 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.873463985 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.420256055 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.415548246 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.408114559 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.407238645 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.420226166 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.414169292 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.423395951 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.432357634 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.426017341 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.412424343 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.989710869 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.444943087 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.454647844 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.454691984 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.439398789 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 3.010246718 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.423101413 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.412139038 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.400361542 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.415436827 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.409228768 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.880863774 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.417506619 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.412668443 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.396410367 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.412642939 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.413125331 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.417003143 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.403876542 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.40879067 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.410976106 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.403195507 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.415245687 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.413007695 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.418730143 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.441078222 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.448187418 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.908201941 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.436461118 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.428619628 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.427460815 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.430565218 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.420653262 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.898029123 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.413887894 seconds)
  done (took 138.523979183 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.467650912 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.474996582 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.433147115 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.435891624 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.489052452 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.461186391 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.47376987 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.433060625 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.458857217 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.415014636 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.482935234 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.444364264 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.461048649 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.483904514 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.510528688 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.489275746 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.433778729 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.487444609 seconds)
  done (took 46.684396868 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.437365762 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.439354041 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.429494634 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.419952077 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.420490072 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.418769736 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.40593498 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.393857132 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.387645122 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.382634697 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.389513763 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.383770032 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.402529468 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.394308713 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.401960275 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.406237807 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.427066223 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.422746139 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.430284523 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.442641473 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.462391338 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.46243109 seconds)
  done (took 55.515269435 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 3.066652157 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 3.048817876 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 3.209523556 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 3.592057939 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.691497122 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 3.241702703 seconds)
  done (took 21.220876129 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.507057036 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.487368894 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.461445581 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.470443546 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.498859393 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.500808788 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.492386662 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.513456844 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.48374542 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.729394231 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.507467584 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.494487198 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.515341396 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.592806201 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.520622452 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.504619971 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.551498233 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.530300608 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.481323767 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.517077239 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.515123803 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.484559218 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.522258232 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.493523501 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.521344345 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.555385889 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.492819967 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.722531506 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.505627465 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.498010475 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.491730189 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.516671221 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.498862471 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.7161218 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.467730302 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.506540951 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.549943675 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.547325099 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.519253444 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.564612134 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.491060243 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.505229872 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.485256355 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.514525678 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.487718322 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.505120433 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.523872577 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.521414274 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.523212826 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.723641948 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.496616592 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.554321573 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.495367091 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.489024744 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.491586295 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.710568094 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.732271514 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.55045412 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.489461383 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.752161885 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.586725344 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.52298301 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.579980627 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.738527082 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.515359454 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564013858 seconds)
  done (took 169.953678819 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.557845352 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.475031823 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.513938582 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.737178922 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.560508062 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.511115159 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.514670306 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507320664 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.511831411 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.497528023 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.51705243 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.515133297 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.550903556 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.553070567 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.520236141 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.524764839 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.54421387 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.588954997 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.519344551 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.733410652 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.531753759 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.581207723 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.561489924 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.555315704 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.716630463 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.519425511 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.533073376 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.520542772 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.506548162 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.515226035 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.515430644 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.522299195 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.565999938 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.468109653 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.540901877 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.521554001 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.503301916 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.512514119 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.511983294 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.531195594 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.598561708 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.547044211 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.522149767 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.533123798 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.73371538 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.533575145 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.516272869 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.48791282 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.513172423 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.496747149 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.736775857 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.724687782 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.732494157 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.564243416 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.517546891 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.524920848 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.519019928 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.514674027 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.51431076 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.517976161 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.555657378 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.516629368 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.734657672 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.548545252 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.574618835 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.592064461 seconds)
  done (took 170.911023734 seconds)
done (took 4201.416596666 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.468120931 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.514868785 seconds)
  done (took 17.359022994 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.429967681 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.436712761 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 2.582734889 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 2.425501979 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.444581737 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.491936708 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.43833658 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.483605325 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 2.460208537 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.523724145 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.448702271 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.581543633 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 2.537207063 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 2.423624939 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.472580872 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 2.423254206 seconds)
  done (took 62.011794537 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 7.437151177 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.933355736 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 4.398179279 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 4.127990989 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 7.443112461 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.366252527 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 3.789705284 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 7.194896745 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.703979028 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.863572195 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.675630368 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 6.311337456 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 7.050611116 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 7.645384571 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 3.060981237 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.865451907 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.96754407 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.05343809 seconds)
  done (took 85.23329546 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.45686988 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.563553509 seconds)
  done (took 12.39041088 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.502430567 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.458408337 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.48481696 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.438812207 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.464012971 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.440282964 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.459094294 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.49577185 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.459656802 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.46698722 seconds)
  done (took 77.049802973 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 7.425670288 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 4.045249513 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.795265645 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.864961358 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 5.065351517 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.871656116 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.584930363 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.790782336 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.540948936 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.465831674 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 6.76043138 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.852703774 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 4.274612207 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 4.677794459 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 3.0646641 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.612487273 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.936991152 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.935970305 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 3.018010324 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 4.55237287 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.740895232 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 6.583474402 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.862747538 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.243656515 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.461446901 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 5.0122228 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.600428585 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.546209612 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.514379 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 4.573122849 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 6.639084683 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.626073972 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 6.605790272 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.619386672 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 5.644712129 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 4.052836396 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.159858995 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.630807965 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.931255777 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.744642212 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 3.090658687 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 5.126924885 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.493986609 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.085525239 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.580727044 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 4.768298905 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.32401839 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.786886684 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.523894446 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.549511121 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 4.074569227 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.636752729 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.578917731 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.550027217 seconds)
  done (took 227.452895444 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.441911881 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.862774861 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.604359837 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.440156632 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.811336747 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.654856143 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.233392913 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.892195131 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.458690749 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.674619783 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.660041733 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.615260345 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.481762312 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.455802145 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.438755934 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.436487166 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.598888632 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.860018496 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.440547426 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.43878037 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.653130336 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.710100547 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.614896325 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.483024339 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.626538536 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.704921449 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.842562466 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.56265987 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.792045587 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.441481064 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.859062039 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.437034042 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.437445371 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.323823874 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.860990123 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.793206342 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.927806541 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.479606809 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.205659585 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.443911998 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 3.056466284 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.655755787 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.768251151 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.594860389 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.699072423 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.674172157 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 3.026605847 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.436779556 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.157239587 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.635850842 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.698987128 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.698905034 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.739737066 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.464154139 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.009988008 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.445552582 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.439828367 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.716278507 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.591207958 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.557766503 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.440554778 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.439518562 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.497604577 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.704871597 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.472117736 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.570334306 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.458882454 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.452580503 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.563105906 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.561552481 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.605242319 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.676534887 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.677486253 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.687165859 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.417386451 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.694707996 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.883518562 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.707694672 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.452568715 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.456018251 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.833537732 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.846219873 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.58935836 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.681814162 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.751427285 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.727616997 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.979885918 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.442942122 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.658851981 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.603078618 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.670108402 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.710866804 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.854531651 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.33831311 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.464631446 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.462489238 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.607065868 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.567637701 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.45003304 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.930894804 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.719588553 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.03615638 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.608677991 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.881951439 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.553173774 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.457544972 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 3.031565941 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.472358083 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.67569153 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.745037391 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.462311419 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.43896731 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.57925765 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.187628878 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.454075514 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.467308749 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.851664725 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.448928262 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.639021327 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.477386028 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.704470546 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.299538132 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.673882963 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.450842448 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.713577537 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.637230777 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.731055561 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.436664182 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.703568027 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.730884142 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.851903006 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.668898275 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.050374247 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.474433056 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.759712776 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.447174639 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.43202844 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.625991979 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.461812233 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.608137051 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.444697512 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.691904371 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.612588247 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.849471212 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.474895237 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.708347714 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.712882543 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.889233968 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.463747925 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.582363301 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.448996154 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.477762193 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.61400893 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.45600162 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.457352748 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.269979559 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.48559573 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.62688393 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.701873082 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.196960772 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.843397064 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.797172192 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.433256413 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.869810418 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.649316737 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.938805755 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.944988972 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.605960891 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.455544727 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.441727765 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.491424256 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.700821634 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.636072737 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.44773479 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.444604947 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.132207866 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.532326275 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.447179659 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.631756824 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.697006104 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.905581497 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.69973515 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.50148025 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.86404869 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.476421209 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.622132313 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.951226491 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.709202364 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.451108176 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.450749987 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.454988555 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.468201059 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.678084119 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.714222783 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.020784242 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.602479671 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.748611291 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.659606531 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.755523449 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.908238437 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.462162705 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.702572987 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.451599979 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.862248932 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.457996141 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.716155163 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.759525782 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.492883071 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.70049197 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.831883766 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.538154408 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.911882971 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.451448409 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.444414972 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.450164704 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.63119839 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.915280511 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.465508175 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.588741534 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.867625417 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.584946895 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.656272693 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.715447759 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.421704965 seconds)
  done (took 1030.421309236 seconds)
done (took 1514.298057625 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.45272333 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.461729104 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.453168913 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.468887963 seconds)
  done (took 32.204245434 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 3.476306724 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 3.562771228 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.655707176 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.463790098 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 3.871169293 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.501437108 seconds)
  done (took 20.921567452 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.459398377 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.465606412 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.456103722 seconds)
  done (took 24.75541193 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.750114006 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.849786534 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.589210077 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.542695822 seconds)
  done (took 13.101178528 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.477093417 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.499525136 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.483172399 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.49469165 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.477821376 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.462312659 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.499192065 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.477028105 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.447323879 seconds)
  done (took 24.685199686 seconds)
  (6/6) benchmarking "26942"...
  done (took 7.051175893 seconds)
done (took 125.092305179 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.746758129 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.761596195 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.455771596 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.730938211 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.587993003 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.77051552 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.561262956 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.471549714 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.813436326 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.904011431 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.929794856 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 3.598256955 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 3.793967502 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.876833052 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.675816299 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.476562956 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.471766457 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.524645709 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 4.071640936 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.615114211 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 7.093403106 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.581342761 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 7.103924411 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.481201883 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 3.31051096 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.599872852 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.725120437 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 8.777018662 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 3.517900358 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.4694583 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.542676463 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.950748877 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 3.703051078 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.798174984 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.586100123 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 3.296364781 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.87405694 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.455335635 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.693529342 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.846689854 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.747965835 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.585401734 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.446219545 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.829572828 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.866650555 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.493207524 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 3.455791945 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.628282988 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 4.041666624 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.612576599 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.931230027 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.448859454 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 3.062298809 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.534116064 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.584192152 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 7.560599987 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 3.36284929 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.93644604 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.620306809 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.767681341 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.495436349 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.481423785 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 3.405543111 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.492298659 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.483750648 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 4.496280409 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.886676311 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.577437625 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.857426751 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.471014355 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.450462363 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.469081565 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 3.146710994 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.602669675 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.456567009 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 7.568760621 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.806629054 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 3.638995435 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.488443195 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.60150516 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.723865769 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.440656122 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.714832729 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.800975148 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.606447116 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 3.865328073 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.880248434 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.796610331 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.812251896 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.447554656 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 9.233222805 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.417929461 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.548718948 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.467046834 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.592456722 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 9.305706128 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 4.306540159 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.92876918 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.607764652 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.991302747 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.494572351 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.482313163 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 3.800902914 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.764021677 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 3.247568209 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.48775078 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.613627245 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.453361239 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.699529918 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 8.47828534 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 7.546728818 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.996926521 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.459456282 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.537290582 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.916477877 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.468359279 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.776557396 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.878111535 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 3.511164865 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.449030035 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.703966805 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.442052929 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.564040312 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.983197763 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.832692115 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.647224212 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.443699658 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 4.28479957 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.503009597 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.665430014 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.483922259 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.994510613 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.955092985 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.475167205 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.744268788 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.579715241 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.450705613 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.733906192 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.506203373 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.66330762 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.762419673 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.779928104 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.615667199 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.465420452 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.796396033 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.489004151 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.691269625 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.780337002 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.60970485 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.766671987 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.522330332 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.473753028 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 3.371752779 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.888107294 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 3.041122307 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.991702092 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.696801068 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.599208914 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.956049576 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.697317357 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 3.280884366 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.595960908 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.547375429 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 7.503901999 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.479690618 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.536639718 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.466286744 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.461439696 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.710978346 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 3.696117127 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.93938923 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 3.244863627 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 7.052483712 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.764149843 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.592659572 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 3.284538085 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 3.018360989 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.498071133 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.753852101 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.937455838 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 3.590116985 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.48565078 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.467521598 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.454726727 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 3.162957141 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.485565748 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.744343672 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 3.972925572 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 3.775607803 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.877496771 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 3.728982175 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.511541634 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.835156373 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.700936859 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.784479077 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.67682308 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.855461033 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.599089889 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 3.856374513 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 3.52468312 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.777867429 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.450345383 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 4.094787088 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 3.752609059 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.952513183 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.767851502 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.67597934 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.629466689 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.794595155 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 7.47960199 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.489612366 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 9.189677068 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 2.789192998 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.467354455 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.464250117 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.195215093 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 3.356656322 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 3.398494968 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.569739956 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 3.788177662 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.605910228 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.683338702 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 4.066232932 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.508659195 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.821722221 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.648052492 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.683539449 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.698998482 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.496082116 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.585701014 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.697249139 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.587011772 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.726982191 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.384684286 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.872019251 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.443469218 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 4.060341542 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 7.495727325 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 3.54699071 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.530084595 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.50310321 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.729084152 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.654915709 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.779275591 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 3.654822275 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.624209896 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.469999384 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.610040806 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.863354861 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 3.254446473 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 4.022889816 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 3.437025831 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.48444284 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.458247992 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.883219089 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.889679658 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.584793374 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.61593 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 3.016762322 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.501683473 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.632222796 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 7.490345126 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.474276333 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 4.207847018 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.592118637 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.714212124 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.938092255 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.469772557 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 4.263508072 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 3.559054105 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 2.902549087 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.96051121 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.540315319 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.637332626 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.492591064 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.411128057 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.885333679 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.501352584 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.659024008 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.799891166 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.580013272 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.595912887 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.484569093 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.502854687 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 4.069520918 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 3.735264574 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.99139753 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.537744039 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.855283725 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.510053141 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 4.277042243 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.509257389 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.551645474 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.815130418 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.621550325 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.871172296 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.475916686 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.584501374 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.720409186 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.48887624 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 7.472436538 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.725357027 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.479000746 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 9.026568491 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 4.565796729 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 3.722891459 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 3.479203992 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 2.724991977 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.480545943 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.734576494 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.659279812 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.585796507 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 3.066970271 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.963632424 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 7.490367679 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.677890046 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.501224828 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.858883552 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.498419292 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.499331714 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.609138402 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.568415217 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.480842632 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.965887782 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.704677722 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.955560217 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 3.611556298 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 3.359234372 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.481138284 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 4.22127279 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.646984974 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.791399809 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 7.186353281 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.510944426 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.622456217 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 6.160496211 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 3.690706064 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.50533505 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.694318693 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.473690057 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 3.022910875 seconds)
  done (took 1331.334329627 seconds)
done (took 1333.850240344 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.816129312 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 3.877122485 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.748358253 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 3.382929305 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 3.312885774 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 3.164747771 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.797355403 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.767011443 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.59159072 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.794893533 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 3.479443851 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 3.322070366 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.586891172 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.605551846 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.582174131 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.611423422 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 3.702277238 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.72438101 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.616726871 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 3.301930161 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.985881545 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 3.305794327 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.919677323 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.774561578 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 3.868997531 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.623500034 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.809296532 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 3.023107561 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 3.011838616 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 3.494556215 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 3.746026867 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.733146635 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 3.324410467 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 3.742041885 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.583843206 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.581796057 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 3.371448042 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.585979019 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.756115159 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.575811374 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 3.875555708 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.626089795 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 3.20565471 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 3.422216711 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 3.297001942 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.94412478 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 3.376679854 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.624265733 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.6210256 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.740080405 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.782609311 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.756558707 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 3.000927014 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 3.505931084 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 3.399939591 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 3.426711808 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.985409674 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 3.38642728 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 3.218338786 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.715351574 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.878909173 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.590679881 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.713825158 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.742561944 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.641166608 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.818779195 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.959099936 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.794414191 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.758281351 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.801756841 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.785972158 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.731185146 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 3.622489036 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 3.69882784 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.637581916 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.767244401 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 3.137038162 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.752497757 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 3.306430818 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.598102245 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 3.393980787 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 3.380357939 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 3.447136231 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.580180448 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.811725211 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 3.300346138 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 3.606864583 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 3.403061759 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.631862028 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.74663448 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 3.438947485 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.758471789 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.985921263 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.758129764 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.801303969 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.747743962 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 3.613299744 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.744634451 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 3.681517621 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.727769672 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 3.279418544 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.753527659 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 3.539967967 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.564503512 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.610719797 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.777805488 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.797476054 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.961320836 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.739618018 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 3.676210706 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 3.879189025 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.649347363 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.722255606 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.609693291 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.573656528 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 3.273071746 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.764510341 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 3.366415601 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.757129108 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 3.154036883 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 3.744510119 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.578226319 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 3.881825281 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.784070556 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.813201112 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.621151214 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.637952991 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 3.415223579 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.619311576 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.61210333 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 3.696866362 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.953033076 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.726907061 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 3.372471584 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.717500905 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 3.30717514 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.737296279 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.718530534 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.574052376 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 3.348115053 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.587682239 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 3.670585091 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.797944634 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 3.867079944 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.739757504 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.827412102 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.66112471 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 3.813953818 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.765320875 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.636440028 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.72343566 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 3.639719581 seconds)
done (took 460.262082268 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.811205577 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.745900472 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.732966718 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.754664817 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.834784948 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.836582354 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.543384962 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.927101837 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.587537449 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.891386862 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.725346484 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 4.383423965 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.883418848 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.696545414 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.845090648 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.724299021 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.592754587 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.731072948 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.913100503 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.813396474 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 4.240012296 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.717920816 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.622731816 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.895749305 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.479838523 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 4.231918747 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.838477721 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.617775138 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.771988459 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 4.288168752 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 4.275984556 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.77222674 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.857080211 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 6.256171448 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 4.918779885 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 4.223185778 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.832228448 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 4.309454847 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.816478444 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.816813634 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.740133776 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.331247527 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 4.231436249 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 4.319266182 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.665599454 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.837070025 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.56776903 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 6.45461112 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.488888582 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 4.220185773 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.741558059 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 4.322100848 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 4.353301797 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.811200602 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.678472916 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 6.237496343 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.97173181 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.968831372 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.873704956 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.799244761 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.862340598 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.924097271 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.914948258 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.683268243 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 4.298784152 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.778259072 seconds)
  done (took 240.215209261 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.918996145 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.770660682 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.923769585 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.866210575 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 3.045339973 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.90744029 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 4.013687004 seconds)
  done (took 24.837184025 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.537371707 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.532670623 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.773966458 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.740936384 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.563310333 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.682993429 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.63048661 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 4.291355021 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.774147572 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.57260639 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.837563181 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.773863112 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 4.183216735 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 4.260531006 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.604858484 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.788871138 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.505657833 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.582980945 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.590714269 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.786946504 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 4.266959455 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 4.247272681 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.837494631 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.656750029 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.56303895 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.58941653 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.536725707 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.516811529 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.579309529 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.514501616 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.544318658 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.645795648 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.517801218 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 4.24684161 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.537771972 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.835377153 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.50977181 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.577088773 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.674202948 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.480100303 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.505830801 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.529428071 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.688249977 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.56953354 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.538257901 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.737954248 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.533584425 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.549392479 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.543010388 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.541343001 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.820666181 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.532334641 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.562658645 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 4.189269404 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.736877078 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 4.258019784 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.595049948 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.516378917 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.530588924 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.590348813 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.543280236 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.792690248 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.779092269 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.52833118 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.811680337 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.851564506 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.563113385 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.535245926 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.528287906 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.755994751 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.540700156 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.756432246 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.530614347 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.580292965 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.57406908 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.661803906 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.716239225 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.327015381 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.294165069 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 4.176323606 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.507791011 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.518625663 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.830999395 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.462563039 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 4.2071326 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.560645549 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.617119003 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 4.230703242 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.461355444 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.553371945 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.858406055 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.517770962 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.585084303 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.584290279 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.56151395 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.602155988 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.751249111 seconds)
  done (took 287.792794282 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.807898746 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 5.131447503 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.732099087 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 3.721668769 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 3.853104519 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.981793342 seconds)
  done (took 25.63012574 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.903563503 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.407718502 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.602523995 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.564265733 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.604301389 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.539232078 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.549844759 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.757980467 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.749147168 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.609290434 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.546046133 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.558119403 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.548661329 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.677159514 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.536616197 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.558257779 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.533372124 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.572816507 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.550835614 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.627132548 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.891254377 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.623185387 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.627974583 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 3.486743289 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.669265691 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.599210557 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.591652203 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.543197127 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.548174587 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.986200734 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.718141001 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.53043749 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.397514453 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 5.009104227 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 3.343094449 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 3.50625517 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.736159241 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.581072028 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.604954895 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.56378608 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.583154412 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.619279788 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.576338008 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.565016191 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.941121022 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 4.472446887 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.658829571 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.829816711 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.527038618 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.539554552 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.533778861 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.542787236 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.522374112 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.54219949 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 5.443337282 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.995292175 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 3.560939762 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.590519026 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.602261341 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.510504538 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.690653189 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.591701832 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.943552922 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 3.540099038 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 4.273319687 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.542817531 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.468268491 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.709750637 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.624019041 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.541048067 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.539886391 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.554162011 seconds)
  done (took 221.258902895 seconds)
done (took 802.129306375 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.902202523 seconds)
  done (took 10.307171904 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.660448699 seconds)
  done (took 10.211986555 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.519500812 seconds)
  done (took 9.94898883 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.526413566 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.540334635 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.503817185 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.50190972 seconds)
  done (took 32.499100574 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.67640084 seconds)
  done (took 10.087816952 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.556825629 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.509908244 seconds)
  done (took 17.581321995 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.642400686 seconds)
  done (took 10.058555501 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 8.081658343 seconds)
  done (took 10.501120555 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.503533287 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.517598357 seconds)
  done (took 17.452064887 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.499632427 seconds)
  done (took 9.908272921 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.560639701 seconds)
  done (took 12.081813209 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.51001293 seconds)
  done (took 9.941042425 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.48064635 seconds)
  done (took 9.88818331 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.740717072 seconds)
  done (took 10.140300112 seconds)
done (took 183.018657662 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.499099322 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.520190228 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.504502937 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.508244586 seconds)
  done (took 32.438535332 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.810505908 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.811778573 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.784648706 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.849143473 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.745806315 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.752217881 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.802404624 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.812930216 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.777153338 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.97557755 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.809433728 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.973561713 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.982029228 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.823015624 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.826661016 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.884230328 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.886710882 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.841050417 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.776711658 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.798979078 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.859683819 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.873241991 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 3.242328939 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 3.229738529 seconds)
  done (took 71.355443562 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.699191955 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.932913712 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.63936047 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.803346275 seconds)
  done (took 13.469521523 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.523788604 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.868608794 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.848355298 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.911221542 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.858065293 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.693003174 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.873831321 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.705966261 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.661128713 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.649440483 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.121293707 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.642717345 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.651287065 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.808812727 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.670038492 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.497492211 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.499636402 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.628138692 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.864139688 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.698415254 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.75990224 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.850407927 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.852467395 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.83911785 seconds)
  done (took 68.383261558 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.260682764 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 3.454452202 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.888122971 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.405951716 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 3.220554563 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.286945872 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.775692964 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.001279122 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.76035453 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 3.734748711 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 3.230757996 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 3.224257343 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.6290197 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 3.37913492 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.238058991 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.661065089 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.666498467 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 3.322972986 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 3.112524052 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 3.826463213 seconds)
  done (took 67.4813188 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.523865924 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.758697199 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.700667878 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.650071168 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.491305493 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.473431057 seconds)
  done (took 36.045662388 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 4.61455849 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.625004117 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.83177482 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.784893683 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.635958959 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.622569181 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 3.140968244 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.731539772 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 3.31229259 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 3.30019977 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 4.205699943 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.971564558 seconds)
  done (took 40.189910787 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.504514931 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.500508219 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.495248546 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.614832731 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 3.427574058 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 3.343545725 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.812136584 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.493345922 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 3.767698738 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.719734921 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 3.375881552 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.685208243 seconds)
  done (took 58.170727752 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.698150393 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.672786636 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.789737162 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.345592152 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.991421036 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.565161247 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.895506989 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.004209912 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.299450263 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.350533142 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.013508991 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.567803673 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.040290627 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.459653999 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.498585834 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.776808462 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.322368182 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.404533878 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.901283962 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.559731187 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.449860862 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.627086483 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.49734172 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.171650605 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.832501782 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.519975642 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.719570478 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.737692087 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.581534684 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.685687093 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.50198234 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 3.019278736 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.668884825 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.80828405 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.023427615 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.586487273 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.593409545 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.733375553 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.068055825 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.795394976 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.646905839 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.651716893 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.491291948 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.593606843 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.728144794 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.264928467 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.496126611 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107700259 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.47332533 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.699437891 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.384734392 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.109042973 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.838716314 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.45966521 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.630539699 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.77344008 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.659147288 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.70185072 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.785060411 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.591041361 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.684541042 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.591191997 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.734799925 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.48451536 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.064335567 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.825174351 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 4.837009558 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.79843674 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.75936062 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.786758229 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.846680085 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.662572178 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.244546272 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.627884706 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000142415 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.411578848 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.928684227 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.52097454 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.241561085 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.014508115 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.441844138 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.581288828 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.183583013 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.436816834 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.49922339 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677577442 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.735161598 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.454603799 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.611589885 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.646136142 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.887400763 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.644198174 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.656399024 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.773140813 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.200424891 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.469024255 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.334130818 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.786210601 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.450078512 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.047241918 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.503865646 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.548076822 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.54184168 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14797738 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.897874151 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.553407416 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.247778784 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.118828576 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.784639502 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.059228354 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664694727 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.499077959 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.876374688 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.822453466 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.510432958 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.227373862 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.768406027 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.650171472 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.814075175 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.509619792 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.45297945 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.868239151 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.660918964 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.484747415 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.803184899 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.502902989 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 3.675164198 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.538877641 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.331072439 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.776573825 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.740761917 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.013016483 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.825415815 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.580478002 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.450035748 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 3.638639681 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.981733333 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.58449693 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.819059713 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.929968868 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 6.103002352 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.311107907 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.500884842 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.361637625 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.958806165 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.765039536 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.830456584 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.061433224 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.638823076 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.576951688 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.497944636 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.641691809 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.524295952 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.017906125 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.530434258 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.25240189 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.196385945 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.793309849 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.491680348 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.46531476 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.692871756 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.693286615 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.205585765 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.527861174 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.653288032 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.812428739 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.71442069 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.519608214 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.466346102 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.832239158 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.740955781 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.007188296 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.727833183 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203613821 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.846402739 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.969597682 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.6950401 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.852969906 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.203852079 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.135338037 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.815643367 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.202871054 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.515143997 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.515502055 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.609310796 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.895583304 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.717306948 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.266610576 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.737640541 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.186515564 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.525253682 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.095044457 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.488547301 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.674796165 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.970038425 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.514776122 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.041274601 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.579504406 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.882510701 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.76463667 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.522002401 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.826092289 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.623856141 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.91642986 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.866875255 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.818948584 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.507090773 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.540322919 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.972444595 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 5.005208787 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.630366787 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.750906762 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.447918279 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.532465088 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.498513628 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.834801666 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.375952 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.252371707 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.80536931 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.363336685 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 5.051764099 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.623772029 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.49654259 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.506029399 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.426944593 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.617732922 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.585577384 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.622079739 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.138854507 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.790379352 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.8438615 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.523812896 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.512771738 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.765885037 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.800851904 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.767159758 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.995903162 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.107614586 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.156412811 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.594861356 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.108994971 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.685177471 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.565051771 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.226038624 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 4.808586471 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.448216865 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.669813767 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.121583195 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.674170984 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.524469784 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.767976926 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.494921253 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.963076561 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098820362 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.500491789 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.527356901 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.629016592 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.528589846 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.740805475 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.391829777 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.704719354 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.660221741 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.942325802 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.721680941 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.663972457 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.86753817 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.001742789 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.210448044 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.456304169 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.688407834 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.611528197 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.81413806 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.529403399 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.773541122 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131925121 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.229253134 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.290129259 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 3.030974684 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.77246844 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.10298385 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.951888206 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.748006517 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.846499707 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.468693029 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.17972786 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.491458413 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652150666 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.465445534 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.331577522 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.805282893 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.866717694 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.948626462 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.547485012 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.013967077 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.874584522 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.594856461 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.652074208 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.781762222 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.547778396 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.826634227 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.529594815 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.785501077 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.898116218 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.523651266 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.135300335 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.684290515 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.823976913 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.649898593 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.097020728 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.555848837 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.660806119 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.097391943 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.696630697 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.642349181 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.843017691 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.611011095 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.523459667 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.567409426 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.474532886 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.087479952 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.962260993 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.106746657 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.103012679 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.923882292 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.299630917 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.535797508 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.714105745 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.662417445 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.331785718 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.658997069 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.871899968 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.509139171 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.689990369 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.799747491 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.616356058 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.989452054 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.479683362 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.118996824 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.61965504 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.004343677 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.021280518 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.285495715 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.001303054 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.755041403 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.038909956 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.433366609 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 3.648671946 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.772922173 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.253615641 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420772041 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.365879055 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.350262405 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.707569836 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.934162626 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.65425451 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.224168076 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.661265889 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.739841771 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.694914701 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.629976748 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.438945465 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.039615768 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.248435329 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.814482428 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.682250079 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.697809681 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.724421482 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.927025663 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.027923212 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.802178794 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.249385819 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.952079073 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.716787335 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.453275677 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.510978287 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.201789915 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.682405655 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.609746222 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.805803893 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.930081283 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.638984111 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.540717219 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.786264239 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077610494 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.213315305 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.225672485 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.811878246 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.992543364 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.974703593 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.515330978 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.279513855 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.749919074 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.96721224 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.914388632 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.422318949 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.91672897 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.826017335 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 3.665408952 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.465502491 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.66916507 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.520323065 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.58429906 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.345453869 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.797820483 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.638527032 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.358912864 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.148669641 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.819298744 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.560773931 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.559136461 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.729874351 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.70534385 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.514357691 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 3.046445111 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.897900288 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.653028469 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.475834105 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.25666484 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.477689602 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.743193421 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.770625658 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 3.694028513 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.336300127 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.629622082 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 4.145787384 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.116431764 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.850919507 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.681992048 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.465639483 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.601579524 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.510639102 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.275391108 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.323453346 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.774218088 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 4.04031531 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.687084732 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.509130795 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.82385249 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.636591509 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.797994778 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.970816233 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.980438671 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.924948105 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.850542762 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.784932001 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.2981588 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.634138877 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.752875964 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.48809203 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.529173969 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.577105713 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.882634319 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.873660465 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.504493086 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.038621774 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.751689674 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.684891307 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.658794334 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.61965473 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.136131137 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.739900089 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.724399924 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.657412012 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 3.728370254 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.859948926 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.515439448 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.749035464 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.529832093 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.510997043 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.752757975 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.784604525 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.922668688 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.845303592 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.118922455 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.672274159 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.034512124 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.436410668 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.02335797 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.50441491 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.615885926 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.82355233 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.520457852 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.982530339 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.177756639 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.699533215 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.227400503 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.507846406 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.77431842 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.675191781 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 3.994498578 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.530300933 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.10346032 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.887062221 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.513180716 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.970969806 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.610672012 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.678752808 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.305165584 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.010957747 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.526865906 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.605692841 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.515936687 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.97159451 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.763790698 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.491885586 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.631083401 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.365768001 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.512307559 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.539495446 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.575663904 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.03787057 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.531645544 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.032479197 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.693724986 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.638041688 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.520189123 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.654705997 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.556998291 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.737720578 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.721740877 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.765938576 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.795193812 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.671704496 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.496676719 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 3.059759996 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.169453205 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.851778488 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.695370443 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.737518593 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.841009781 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.274321286 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.771764795 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.10592367 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.728350753 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 3.719458107 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.95226991 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.765806882 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.543017795 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.699475934 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.518655623 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.825500214 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.66286243 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.038589855 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.746989575 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.759009837 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.70708128 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.549349029 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.060518344 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.988149425 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 3.393814065 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.520125619 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.81502042 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.515070604 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.336894189 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.087843509 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.683587619 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.687833989 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.477363437 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.037652541 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 4.8585401 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.640322727 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.535103965 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.713755342 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 4.007443187 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.457105445 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.333224619 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.321790545 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.705826403 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.839724794 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.470099287 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.668069481 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.535558254 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.51260259 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.006996897 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.576070887 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.7962731 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.47251721 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.02600216 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.483430446 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.639447095 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.642961998 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.872606216 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.521155353 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.521330139 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.696860914 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.520198512 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.515708346 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.873404797 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.609889935 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.753596362 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.976544253 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.803628368 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.81247943 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.354143788 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.615137004 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.956650981 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.840999327 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.355554799 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.083289015 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.833759168 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.012057098 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.445849448 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.484496187 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.050296448 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.742056783 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.258531987 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.646721507 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.011584248 seconds)
  done (took 2797.536308368 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.531875198 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.558009678 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.578549535 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.606001611 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.563693521 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.553767518 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.566291192 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.549741628 seconds)
  done (took 62.938592683 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.513606869 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.284682087 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 7.321104763 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.690598332 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.524273999 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.790587876 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.641414533 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 7.111856264 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.701975613 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.62425003 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.588646925 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.529086464 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.728482655 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.511625264 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 7.29007487 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.796053635 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.525260227 seconds)
  done (took 116.617222375 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.582783729 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.548974241 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.523407345 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.847858976 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.54415395 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.806616507 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.501289043 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.510585696 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.595578061 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.251815857 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.592690152 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.663034688 seconds)
  done (took 96.44614692 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.559324776 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.561921021 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.552349895 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.550173996 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.534777619 seconds)
  done (took 15.190054787 seconds)
done (took 3478.788955132 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.733313869 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 3.059935152 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 3.07337045 seconds)
  done (took 8.569192843 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.611271008 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.660126295 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.742717737 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.679584968 seconds)
  done (took 13.155567513 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.808749414 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.016612526 seconds)
  done (took 8.278991222 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 3.05295998 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.623214362 seconds)
  (7/15) benchmarking "20517"...
  done (took 3.088897102 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.539715569 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.531048948 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.527479076 seconds)
  done (took 25.040984344 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.580350116 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.573177703 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.57741279 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.553626704 seconds)
  done (took 12.740255738 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.536139793 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.554588046 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.518382042 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 3.580670156 seconds)
  done (took 25.647480033 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.824836931 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.785597243 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.260339046 seconds)
  done (took 11.311343733 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.318458877 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.890321176 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.315193506 seconds)
  done (took 11.963643476 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.518013433 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.499682285 seconds)
  done (took 9.47288725 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.674474672 seconds)
  done (took 5.130925433 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.030032147 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 3.009729907 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.371780918 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.371472635 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.500143674 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.828918926 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.907278458 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.940644372 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.169899857 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.055887565 seconds)
  done (took 33.62358199 seconds)
done (took 183.868587035 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.474826808 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.922629501 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.70592196 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.224878915 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.616129436 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.670934512 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 8.125721868 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.97750786 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.101562591 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.122527407 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.216162589 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.611832166 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.577510543 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.936695667 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.556809507 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.881135611 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.933818766 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.444947146 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.744082234 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.551877014 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 8.151469477 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.822548893 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.934821493 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.836241913 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.953186425 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.683990215 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.666319267 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.892093639 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.035320024 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.664298038 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.684360825 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.867434603 seconds)
  done (took 199.023758763 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.540300915 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.512223723 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.520399504 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.528900944 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.316684662 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.539622651 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.524672555 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.551021664 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.380680304 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.351608497 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.512651083 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.328171983 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.527462839 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.514871413 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.518876417 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.561651045 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.517995818 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.543277007 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.541363271 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.519329087 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.526510879 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.198188216 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.541638818 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.214476327 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.509970766 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.559648252 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.533569431 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.533414286 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.52596777 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.524948226 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.537262519 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.527258265 seconds)
  done (took 234.045615488 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.544925957 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.544222126 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.543694403 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.525840727 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.529993701 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.527909863 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.521528715 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.535371542 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.541067249 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.546077151 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.534813786 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.528140848 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.516337248 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.528794812 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.538256768 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.541506395 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.545763748 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.54006132 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.531150687 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.529825038 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.5300625 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.527771223 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.5243181 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.54889995 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.539117741 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.548197839 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.523807024 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.519890843 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.539240134 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.527846086 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.529336771 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.552004793 seconds)
  done (took 243.577671833 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.847330572 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.600061534 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 3.511140039 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.928303921 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 3.445361306 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.569087355 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.894066935 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.842363032 seconds)
  done (took 28.092250981 seconds)
done (took 707.18810542 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.189607749 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.447622424 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.714129025 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.747944488 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.122827678 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.833962177 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.773872992 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 3.043318419 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.266464472 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 3.015109206 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 3.055009567 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.777971258 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.378754953 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.774413025 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.71280654 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 3.010649708 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.94016975 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.223950007 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.743411808 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.386826335 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.715347159 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.3651616 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 3.052794949 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.306599413 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 3.015577191 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.431538867 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.62597386 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.958987203 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.729918987 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.748178568 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.506427195 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.906598319 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.762084781 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.750688588 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 3.009706636 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.970521493 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.834493695 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 4.107410972 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.690221489 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.166263922 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.376707415 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.09383416 seconds)
  done (took 135.729491166 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.553067531 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.567890706 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.722194772 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.633215946 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 3.190014502 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.635786806 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.774146108 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.742064973 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.631743311 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.737519617 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.751702359 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 3.148864015 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.758486113 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 3.139541897 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.729169759 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.771552908 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.611536685 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 3.136671488 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.754306817 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.740043886 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.574068989 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.704018665 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.578823374 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.751747205 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.596364365 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.611349185 seconds)
  done (took 73.999880145 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.627883162 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.724973787 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.820662088 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.941200262 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.783867847 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.582181935 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.972095533 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.718607664 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 4.562795098 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.990292379 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.636674683 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.706976991 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.730190876 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.828021896 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 6.20939851 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.707497619 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.729512646 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.732001832 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.729898432 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.785969836 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.680929652 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.662354035 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.974889284 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 4.733817114 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.224089816 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 4.839650902 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.954023873 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 3.147435944 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 6.143962679 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.673907404 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.728725768 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.956482351 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 3.008968603 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.856643028 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.734085264 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.604003787 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.598929411 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.650678348 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.477674305 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.782761105 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.965924166 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 4.636951381 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.901947119 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.106097629 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 4.527365254 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.759080187 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 3.008633614 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.640307856 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.67795346 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 4.338993243 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.85140283 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 5.637197559 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.741710781 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.784371941 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.704962003 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.965296958 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.755436997 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.891450619 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.738728688 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 4.110701318 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.626804205 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.938212416 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.728458853 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 4.523252499 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.811308373 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.773170923 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 4.735132464 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 4.869451349 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.921611865 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 5.948615503 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.284567526 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.650396439 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.610528572 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.646784183 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.737705187 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 3.072759349 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 4.903404909 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.782286279 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.014187358 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.954405127 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.886847491 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 3.165209552 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.539930944 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 4.215143744 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.604531473 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.564220787 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.641486679 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.916082261 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.966038564 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.070944146 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.140057456 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.930956061 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.890310452 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.950505162 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 4.846774501 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.965050012 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.546241285 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.568462081 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.798806107 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.103165879 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.645399373 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 4.82207985 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 3.209018208 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 4.912682548 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.849322305 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.798814155 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.959417077 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 4.568185994 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.971432399 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.567952795 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 4.780613763 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 4.893889772 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.829063249 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.910540979 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.561955166 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 3.094022556 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.663807672 seconds)
  done (took 396.041114862 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.530574302 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.519251056 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.5576814 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.543942618 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.528448976 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.113754138 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.588358516 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.541755563 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 3.11387202 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.592334853 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.5270073 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.550339586 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.55020225 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.549596101 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 5.10650374 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 5.090755044 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 4.143420854 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.521001866 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.523009766 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.535612473 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.366103229 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.54642206 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.543720907 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.537464756 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.527288602 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.529648495 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.532552716 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.565675353 seconds)
  done (took 193.326969324 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.588757616 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 3.029966178 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.634091738 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.695626423 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.644578188 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.605143963 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 3.083711939 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.708406693 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.657627773 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.598634114 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.587088065 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.81510426 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.795561985 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 3.139461204 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.7097395 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.618436406 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 3.216142009 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.718384833 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.603636274 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.589782229 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.746358959 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.910105178 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.859138681 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.904603191 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.758655231 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.888419517 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.666552149 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.593416838 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.718393134 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 3.061236058 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.599060954 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.951413273 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.718141706 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.581763658 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.073961665 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.930350825 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.142019109 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 3.101833875 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.747735889 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.546305202 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.537906791 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.784806306 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.895800383 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.643600898 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.605838406 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.240652699 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.619088362 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.963876802 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.611210658 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.541644781 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.661185636 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.668737588 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.823739209 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 5.090334926 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.740916796 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.720298174 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 3.06007057 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.549932823 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.622529954 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.889097211 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.552772303 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 3.065736688 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 4.103133729 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.671469824 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.621770075 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.460379783 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.689671462 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 3.105769095 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 3.189620824 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.632912951 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.916981616 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.78249015 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.559927728 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.837269667 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.734268194 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 3.055765301 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 3.15069892 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.726448705 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.692985928 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.664824523 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.836233358 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.571619525 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 3.098370169 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.695889527 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.585232486 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 3.08813058 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 3.005015531 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.585599924 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.607744747 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.723031644 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.754021589 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.762387002 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.900441435 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.667696306 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.464564599 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.844670805 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.900641498 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.602263467 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.704775268 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.566212215 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.534143713 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.765568663 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.571836919 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.883675742 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 3.023839198 seconds)
  done (took 307.211320584 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.353520935 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.657533113 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.809283419 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 3.143449133 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.985353541 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.446489593 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.854686916 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.659622653 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.856156803 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.804645572 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.804184433 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.67963709 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 4.544428444 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.33266342 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.643916194 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.775851247 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.656245154 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 3.203735297 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.942446885 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 5.36990264 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.150263348 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.32733886 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.906065786 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.982436579 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.97776104 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 3.086119783 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.214909465 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.714936762 seconds)
  done (took 91.384856565 seconds)
done (took 1200.152712308 seconds)
SAVING RESULT...
DONE!
