cset: moving following pidspec: 20658
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.830965886 seconds)
loading group "shootout"... done (took 1.120697481 seconds)
loading group "string"... done (took 0.668317979 seconds)
loading group "linalg"... done (took 8.658961679 seconds)
loading group "parallel"... done (took 0.170892595 seconds)
loading group "find"... done (took 2.930817775 seconds)
loading group "tuple"... done (took 2.113800746 seconds)
loading group "union"... done (took 14.838900932 seconds)
loading group "dates"... done (took 1.444285108 seconds)
loading group "micro"... done (took 0.219520934 seconds)
loading group "simd"... done (took 4.772027704 seconds)
loading group "io"... done (took 1.077259141 seconds)
loading group "random"... done (took 9.480017921 seconds)
loading group "problem"... done (took 1.525239978 seconds)
loading group "array"... done (took 25.217925112 seconds)
loading group "misc"... done (took 1.889914564 seconds)
loading group "scalar"... done (took 43.474264259 seconds)
loading group "sort"... done (took 3.355556866 seconds)
loading group "sparse"... done (took 12.67704951 seconds)
loading group "collection"... done (took 18.514680977 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.430672677 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125108459 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128303706 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114531636 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186241818 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.12151935 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130772241 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086294248 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.893468921 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.144630601 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115161951 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.428505752 seconds)
done (took 5.352978327 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.169363309 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093560127 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083288921 seconds)
  done (took 1.398345677 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074475761 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.065114564 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067828388 seconds)
  done (took 1.42954306 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065691362 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.13861924 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066675021 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067265898 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066924224 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066611594 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066803897 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067408049 seconds)
  done (took 1.765028748 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074293098 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068646121 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066066548 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067854381 seconds)
  done (took 1.500498851 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067438534 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122289888 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065335258 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064959195 seconds)
  done (took 1.541383403 seconds)
done (took 9.116530493 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139344614 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.812102994 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.774286071 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122954933 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.247313663 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.451260738 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123597866 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183712 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089117137 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07522971 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121372065 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.077915282 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.39784391 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.398467879 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071214435 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169123973 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.656134793 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089323583 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.136425357 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.473736891 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073729393 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088102388 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084790843 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071474451 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.355278735 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.153802874 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.666391801 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.100036825 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069170049 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095358252 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071841784 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078914338 seconds)
  done (took 10.776809324 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09614058 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091530059 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068810901 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124127271 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097197678 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069999709 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075601965 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.06817547 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088586673 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124336169 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093447539 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.106498742 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066707308 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069749739 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074275833 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197586122 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.083163318 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.08246515 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067876009 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081329195 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106022266 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079948283 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078767127 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078826535 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133113934 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173420782 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100942296 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.100892277 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068622873 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080005248 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115280666 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128897093 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069301237 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067253276 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120190073 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097635386 seconds)
  done (took 4.703003279 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892677472 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097314643 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08398307 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074459302 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106499333 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113702523 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.124642969 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123198656 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100195177 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069257372 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153444492 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.66876798 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.166054307 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.074645437 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119832759 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356457468 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.062077911 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071107257 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068664428 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071249595 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070043523 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112044453 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066511164 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17545795 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.58465338 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070728377 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069069183 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095921589 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065320139 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.13973355 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092877247 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070195902 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.543190262 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065499337 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.064071013 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089096798 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095125214 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067981259 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06836889 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079069785 seconds)
    (40/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.094459962 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066140961 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109022262 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082651251 seconds)
    (44/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085103348 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.514481437 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070309496 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.584808959 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225646961 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072927009 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071972887 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065118537 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10210787 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.0647319 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067892899 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.848217535 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.1467421 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067344169 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27344368 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070326025 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068851954 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069012694 seconds)
    (62/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.067174506 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099397202 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06726274 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068657693 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073185846 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096441967 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.798440958 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090729555 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096784977 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067847626 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.406242696 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.07630691 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069291275 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069464949 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.084175911 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111398488 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067013283 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066571439 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110598318 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095354469 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088961957 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069669725 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067383264 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.06629893 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.320986491 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.16738525 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067668682 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067268399 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.608074858 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065586361 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067504153 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069360755 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.09306325 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068052261 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064826095 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066252686 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099845407 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071011896 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.333402574 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067288022 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.489286846 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069169182 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10356918 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.119838315 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068261537 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102132662 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.06855371 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065243923 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073928117 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066191105 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065276883 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070071665 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066391142 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066745763 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069582937 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069067612 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068151313 seconds)
  done (took 22.773359665 seconds)
done (took 40.37573129 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.327294362 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078799829 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079515166 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079231799 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079282797 seconds)
  done (took 1.914027994 seconds)
done (took 3.284540632 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132853422 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075233043 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064116354 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100338485 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068648971 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101823094 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108497604 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104091689 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068717471 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069133636 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069011788 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105149482 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105296236 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069231657 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.0982984 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103787775 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068858145 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064943502 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069077508 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068747389 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068839974 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065112005 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069113979 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068959741 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099352802 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068969596 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065156051 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098582378 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.06899242 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099196543 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068819513 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069057831 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068960858 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099852005 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069278402 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099174186 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065888243 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.187745057 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069072536 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068917902 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068982564 seconds)
  done (took 4.733075544 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073243819 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08184365 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083507513 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062185057 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071441186 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082433636 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061920451 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081678003 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091599274 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082864771 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08258352 seconds)
  done (took 2.174471472 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071757652 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083224472 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084899573 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0625059 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073503959 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083584138 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062207227 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083120554 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085668437 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083662323 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08340859 seconds)
  done (took 2.157593359 seconds)
done (took 10.353516819 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.099656432 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065939403 seconds)
  done (took 1.442971598 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224359436 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.504460333 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.300529368 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093682847 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072918619 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085734714 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203640379 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067435924 seconds)
  done (took 8.023897709 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.100094164 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072683966 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067687737 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069252827 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067634467 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067569908 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069668873 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068940412 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06807988 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069491364 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068482781 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068789521 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069679769 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068679487 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070156803 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068598056 seconds)
  done (took 2.538248509 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104508099 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069382224 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099163533 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06241241 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.072120889 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063388522 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071149369 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072886007 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070057571 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071226678 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072500517 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070787147 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071743282 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071282921 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072886323 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.073277584 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.07261833 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070878174 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073323683 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.074337524 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073148534 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073463252 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.074070721 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071520329 seconds)
  done (took 3.192473215 seconds)
done (took 16.499948521 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176846287 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074837605 seconds)
  done (took 1.545560026 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070201554 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069117302 seconds)
  done (took 1.451733407 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07579399 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060901591 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078332461 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07027123 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061986245 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061331035 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077270038 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061790108 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061389732 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061420455 seconds)
  done (took 1.982601041 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.064858807 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070473252 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068220435 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064682745 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067229581 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063098491 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06525506 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062726146 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069500002 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061904048 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065899449 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08271891 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065191722 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083436428 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065326383 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066160567 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067539108 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064824724 seconds)
  done (took 2.534491571 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062941173 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062284394 seconds)
  done (took 1.44646984 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.066746231 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063162234 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064493718 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064196262 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062082731 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061756299 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061740567 seconds)
  done (took 1.75835405 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.422139914 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121660301 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339741746 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068725165 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076547626 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254423133 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064011583 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068633681 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068581474 seconds)
  done (took 2.842489071 seconds)
done (took 14.892199643 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08414946 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179740236 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08777855 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.402762555 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091705679 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067708849 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112937776 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.181794062 seconds)
done (took 2.55357842 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.290809946 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.251775638 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.40347213 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124618333 seconds)
  done (took 3.098675635 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.338468939 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078619997 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077030461 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068721888 seconds)
  done (took 1.896940308 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066802363 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072937956 seconds)
  done (took 1.463788487 seconds)
done (took 8.090004158 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074721802 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.091946596 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.067028691 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061932114 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.064212581 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.074680124 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064094082 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063791113 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062534565 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064536628 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062110826 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064438474 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064692565 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064662657 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064611389 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063988631 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064301284 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064217148 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064065879 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063494493 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064092117 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064603581 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063532253 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06398724 seconds)
  done (took 2.938621572 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.081994184 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066051841 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066911925 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066467782 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067473635 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067061846 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066957662 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065514663 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06706954 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065755671 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067511828 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067188647 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065325873 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067534587 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065775153 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067492805 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066995275 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066225853 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065945709 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067427866 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067064127 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065935677 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068018325 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067125233 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067310832 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067721196 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065760006 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066167428 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067136557 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06765464 seconds)
  done (took 3.363261023 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068711165 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060236996 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.06058478 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.06973394 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060250109 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06097054 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061004179 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060822868 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060749925 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06151577 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061012986 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.06088485 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061573087 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060693691 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060463039 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060867188 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06535101 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079956863 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060639004 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060566946 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065071652 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060465131 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060974393 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060538077 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061251551 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060875697 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060573027 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060830249 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060358158 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061300257 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060237797 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064593497 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.0653406 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060332057 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070220047 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065397988 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060348841 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064590359 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061527881 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060548465 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060324801 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060262857 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060183443 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060068634 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070362984 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060715657 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061890929 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061283831 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060929988 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060330055 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060972089 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062499748 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.069011436 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061480155 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060261357 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061546864 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059969464 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060836888 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060710671 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06007762 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060176156 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063835764 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061763662 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061364977 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080352753 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061700253 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070163605 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060205354 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061077539 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063855563 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06068901 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078003256 seconds)
  done (took 5.858020854 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074723021 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072659578 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079149377 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070142738 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064456054 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06145887 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065231563 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061618146 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070659273 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065826762 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061681191 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064992437 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070760932 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06572327 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063011659 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.07042683 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065385125 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064931967 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06178129 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06563827 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062786046 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065486252 seconds)
  done (took 2.829136863 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141421171 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066396381 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104657484 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070388561 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068556932 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070087338 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066069177 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066484068 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066114975 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066781569 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066896948 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066402058 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068794708 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066852652 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066975969 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067149332 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066530097 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066716453 seconds)
  done (took 2.669123123 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.079231805 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067067082 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.088929753 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066021092 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065924599 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066110439 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069643933 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070623862 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065894641 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066406669 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070695154 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065898557 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065840836 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066252772 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065686566 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065970295 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065720816 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066298779 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069927467 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06949418 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070080181 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069804257 seconds)
  done (took 2.867626963 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079650196 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065161132 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080957522 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.0666814 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061015632 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06085096 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066815922 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065303746 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066515655 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064839096 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065270274 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060985955 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067070207 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065457282 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067430354 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065624199 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064929511 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065489901 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065237993 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061176124 seconds)
  done (took 2.677923205 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074188192 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063277034 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063346763 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068609961 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06340986 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06348021 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068623221 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063431365 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063239013 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084845437 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063825486 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063422292 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068850403 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066866164 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063413232 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068752293 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069045617 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069210467 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063640166 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063837534 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085042657 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063713319 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068985545 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063339605 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063499244 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063326972 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063411471 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06682144 seconds)
  done (took 3.229400808 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066271738 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06495139 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063918836 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064216962 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064378802 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064019089 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063963934 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064278226 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063594698 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064351287 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063810905 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063592386 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066523373 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063849131 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064133008 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063804647 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064437748 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063882516 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064327471 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064112354 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064234537 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063417602 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063812006 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064331021 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064093113 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063501749 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064682912 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064430793 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063748601 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064109545 seconds)
  done (took 3.285007465 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075698191 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072260228 seconds)
  done (took 1.508567953 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064481873 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078298781 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060044145 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072585437 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068655982 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064252725 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069285066 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068883154 seconds)
  done (took 1.900542971 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.068909703 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092524393 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063107273 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063074436 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065533609 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12699198 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074796518 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074044912 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076012066 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064807343 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062824946 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074110615 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062517982 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075498859 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063667698 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071244244 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069777161 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079921274 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07539678 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061143635 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075042716 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063682578 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061270412 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063312894 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062134704 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069237372 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077575915 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07513585 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070537652 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060231686 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08105176 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061156051 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062089886 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071075799 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065597771 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061463074 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098117398 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061995066 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066819378 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060957952 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073492527 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082150196 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075675668 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079627662 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063058044 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063220801 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060725031 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063170704 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065350586 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070733233 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060899498 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068809571 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060478406 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062994177 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072111009 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061411086 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066448103 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070847928 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075031725 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071980417 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070229904 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077117297 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070154158 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069038962 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062385523 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080852101 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063118367 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074901571 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076120905 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062628528 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074792078 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060637293 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060194509 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060995179 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094782934 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063128536 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062696593 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06167827 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061323056 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062997213 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071343684 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066578843 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068967583 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065065469 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076752803 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070507582 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061441971 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067292151 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079113404 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065031309 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061235042 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077368935 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064196249 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060661537 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078505277 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071082295 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062767781 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06175759 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06411388 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074260247 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062005151 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059651645 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06939185 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062300919 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063300834 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065307326 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068746472 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060707049 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070350212 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064885796 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062136249 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059353785 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064632712 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061457286 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059654827 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069730425 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060980441 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074567608 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066331512 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074758564 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074696975 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070491258 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075853987 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059878607 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058890272 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078079935 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069596133 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200473944 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080640796 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062160607 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075680493 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061655617 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06327829 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071264215 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060768021 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063550288 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061525319 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.06660986 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062677213 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06276958 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.066727968 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069987771 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073344477 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06251794 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070435646 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061518211 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076880887 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071278686 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066057472 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064794767 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061963381 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073066815 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068055151 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070909296 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060813679 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061652821 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062104584 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071590469 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071161637 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063386377 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068885321 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066171225 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061943299 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061450196 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062511459 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065061907 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064448451 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062418013 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069294575 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070103272 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075113698 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068573578 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070236031 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061058073 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060952191 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063595962 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061257306 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066255124 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070832317 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076909361 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073068266 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082166356 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061758861 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071512535 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062974355 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078433128 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074843998 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062477652 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066194622 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060440834 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063078743 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070673749 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072885623 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075070092 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076482043 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065883397 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065694475 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061087653 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076156414 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061766727 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069731085 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070709672 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065981337 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061388392 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062973751 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070580982 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065821785 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061211086 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076973694 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067448321 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061146247 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075893582 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062160066 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072536962 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061041854 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064665227 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066417125 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063599578 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070995456 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076940936 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060904925 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062029178 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077046494 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063414673 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063172107 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069138694 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076264386 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065768205 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069417777 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072116395 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070902229 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065626189 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071102248 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061964201 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070486854 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064363414 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073029748 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060923311 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078479056 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059769441 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075916651 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061289064 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071447459 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061545021 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069721358 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06150962 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077135558 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061987399 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060997376 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071968143 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059271388 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069140799 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060034772 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065258808 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066865705 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070014787 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062501759 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069765801 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062080514 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.211483379 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067141716 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071247019 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071792641 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066776631 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061515582 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070178946 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073182715 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070272742 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063081918 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063152722 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062058587 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070897409 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063256483 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063129321 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069755986 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066049875 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067520782 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063027968 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063460998 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063171875 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069959363 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071524407 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079547812 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069854938 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06891787 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071013779 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06128313 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077212292 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061716618 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.072061525 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060257362 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067427684 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070250824 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061747865 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080556814 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.0630473 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069261921 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073777431 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070404883 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065010856 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079383487 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06725725 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069887798 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069378217 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065857509 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067857659 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063461413 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070226956 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071258488 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072356225 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062820375 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069248566 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070516853 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063067042 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069356446 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063428619 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069835134 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063381971 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060788401 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066316281 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072892848 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066624724 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066561489 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062001752 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060424573 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061891696 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068792981 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066482826 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070559625 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076867204 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060393675 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062511385 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06112386 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065243418 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079477971 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07129645 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069561062 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066593455 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060686313 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062767474 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063297632 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061953071 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064984958 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060691548 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.0612002 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072030679 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063177939 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065796621 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061854433 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062670092 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07102729 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066284957 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062619871 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068509226 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061447228 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06668511 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060876492 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063039889 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066250592 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060983643 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065177524 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072111049 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.07773162 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068024743 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070735277 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062662508 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069392272 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076841009 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068155236 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062298285 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070613667 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060570271 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079264442 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070595205 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069918128 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071040119 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062144743 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076950309 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06517534 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070435997 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075560121 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061354428 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06666143 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059682586 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07526961 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064381361 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060222834 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067882912 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068375941 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065575918 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071890221 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060798722 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067563565 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.213338754 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.065923371 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064272624 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06372206 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070886849 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077906771 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062376498 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065677219 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069820411 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.069939088 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.065873722 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074069996 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069770376 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062630753 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063249915 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064763144 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062546734 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073410608 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061816081 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065895575 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065870117 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061301315 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068571609 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078010592 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071173909 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071508565 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061130493 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060840969 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078816957 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065148316 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064635609 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069675738 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071102802 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073653361 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070705168 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078170703 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062239152 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066953062 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07346295 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062688076 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061215478 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065196921 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063424664 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070493769 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071330708 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068909842 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063507241 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068158016 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075010874 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062976882 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066625111 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06650629 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062230438 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072218667 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069728202 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072954118 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06268209 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061268926 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064825861 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070304295 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069363538 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070422844 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062528868 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068012694 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074785777 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069048672 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065053085 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060988661 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064730031 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070556246 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066264722 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061267503 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066266937 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065319366 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06873377 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070906087 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065792053 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061155033 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078326519 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069511075 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070703121 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063669865 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.06348017 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062127876 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.06101584 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072447842 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061281674 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062957995 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066066523 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063172489 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078726882 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069728186 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077554942 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062878151 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.06590572 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061231026 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071387295 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066239355 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062025323 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071742508 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060838866 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076716251 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.093149001 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066861862 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060767236 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066341596 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06953368 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076380877 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07105925 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070445087 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064946791 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070921418 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062726149 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072196337 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060545389 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060448216 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07107319 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069254766 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072931403 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060565194 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070103681 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062897678 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068473895 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068530662 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06201656 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062234352 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061953028 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069309494 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064682398 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069763483 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064829026 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07637299 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.206062657 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074038687 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071702601 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073343417 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075779016 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073595245 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069440686 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062078959 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068814097 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069605391 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06268481 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066263857 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064922786 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082740796 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063291125 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062849952 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075113771 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067616507 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061485028 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068740986 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066729567 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071671879 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062513725 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072030088 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065734092 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062451201 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066155157 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066375675 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060345863 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061203999 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061604841 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071159295 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06598645 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062131744 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080175312 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063637856 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070062347 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072767684 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068230028 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063171552 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060104937 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062557263 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074540046 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076883745 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064956349 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070095974 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062856599 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070950891 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.06058423 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070133293 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069468469 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070425891 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061230593 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061539823 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076374849 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077161277 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066156546 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070740488 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070783523 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062875593 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082744087 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070418811 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062877548 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072482432 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063877633 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060973252 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060477581 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.0630279 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.072956211 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061026074 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063904619 seconds)
  done (took 42.292690835 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.10228028 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063280167 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061386441 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061118663 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069493601 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062475686 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061062672 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061717988 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061943504 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063750173 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061313231 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063759519 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067962295 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074355849 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06982451 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065114052 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061025149 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062570329 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061364394 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062039645 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067717314 seconds)
  done (took 2.866206568 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066925521 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065934364 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065575081 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065355233 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06491463 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061561925 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065329155 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.0614 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066176681 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061590398 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066112573 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061588199 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062016049 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061990014 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062107997 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062670115 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065685281 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064851146 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061455127 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06548227 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06335165 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065507153 seconds)
  done (took 2.867023816 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.065049401 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062598943 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069978525 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060517524 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06073881 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.0646122 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060562266 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065018736 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065349298 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065164826 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.069888853 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061858763 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060501103 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066800282 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060438292 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062129004 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104068007 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062086965 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062566002 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060929418 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063914123 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070332721 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060770198 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061396231 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065479539 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064197036 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061070568 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063914136 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062149778 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064895205 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062283594 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060945806 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070170067 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069729757 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.0658795 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065686103 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062629855 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061995282 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06109571 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060575404 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069659028 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062235028 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060982197 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062257732 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070030694 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061147947 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06084635 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070506216 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060667641 seconds)
  done (took 4.628990759 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073928912 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113167716 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066774085 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094447692 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074210475 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066950431 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066373876 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095770329 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062284775 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063100141 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075103062 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075545612 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064132913 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065560205 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068123217 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064092603 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064479815 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063700453 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066733625 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063533721 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066627281 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067690334 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073910091 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074425119 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064493951 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062887626 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063509162 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065264772 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074033449 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068014779 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06525637 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06607458 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074286369 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068466865 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063522535 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063520785 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074962918 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064354805 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063891649 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062115097 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063612144 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065510063 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067986221 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075472362 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064238832 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068634805 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06443884 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062069806 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074686957 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064066526 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067564205 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075735982 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065362136 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064546448 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065777166 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074723853 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064148742 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062970855 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064160125 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074133661 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062277653 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065146558 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077359607 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.0633494 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067314681 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075046634 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069177747 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065407555 seconds)
  done (took 6.294469187 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072839231 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096273798 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076480785 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076872136 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071486908 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07189149 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071663856 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071474982 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071550388 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074545337 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071993621 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106312212 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068452036 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.074057791 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071873892 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07156813 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071571765 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07158379 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071524264 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07150547 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07179451 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076489171 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071748364 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076872337 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074114422 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068391061 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072366805 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071386467 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076989502 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071406554 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074219856 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071502147 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071677563 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07698745 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073985278 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.0714457 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062166775 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071421066 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071945684 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072057086 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068082995 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076882812 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071755458 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068051945 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071876218 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071698663 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07721739 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074082217 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073526142 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074925426 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072025616 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077248727 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071724865 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072172395 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077295249 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079695018 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077242892 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077249558 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071924994 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076803474 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076859539 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079814329 seconds)
  done (took 6.09720552 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077426189 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068220401 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079465815 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060845572 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061207677 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070590576 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060883113 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061495137 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067998344 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068661651 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069599891 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070651078 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072757138 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069414176 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070538241 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07241471 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070391658 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070504403 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068131867 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070277228 seconds)
  done (took 2.880357826 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.07792268 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079932224 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067181339 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070284251 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066937668 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070367053 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066086763 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066704835 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067410682 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067753264 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071529106 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.07162582 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067124004 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070494173 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071664023 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070158519 seconds)
  done (took 2.606229646 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06988225 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069225159 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067858052 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062318922 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06414595 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061829879 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06258233 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061033158 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.064030757 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074998246 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062454432 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064727761 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062386561 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061650764 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061643331 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.065122601 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063658947 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062313254 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.06280646 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066771805 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070566912 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063010226 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064799867 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062137501 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064376451 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070479222 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063905549 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.065271964 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062160762 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064792098 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06487417 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068843692 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064581683 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062846108 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061468047 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062219338 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062418324 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064987454 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06515448 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062823768 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061234808 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067564199 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063039009 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063503372 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06415443 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065048666 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064103565 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067848062 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062956018 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064769774 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063008399 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064234168 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062897153 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069784358 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064859474 seconds)
  done (took 5.034593103 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080072138 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06661203 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061054774 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060623661 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066421382 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067074366 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066326968 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066515482 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067069959 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061262215 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067081043 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066310134 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066742427 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066567151 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067048934 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066279582 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061046626 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066401837 seconds)
  done (took 2.690842925 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.069865147 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066858684 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.066355635 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063228199 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063494528 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.0678323 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061652784 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062692648 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062981915 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063324986 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063048101 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06301176 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062716898 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.06284689 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067316155 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063274759 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062772006 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061526056 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06300688 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061458148 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067661303 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061465449 seconds)
  done (took 2.897978781 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090705534 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084451066 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127813658 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080652573 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.08893865 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072281334 seconds)
  done (took 2.039397959 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096441921 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098113564 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066294047 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06588811 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070861084 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068989782 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069643546 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069601347 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072979328 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073271273 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06953179 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073482712 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072711739 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074748199 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070967076 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071435108 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069427906 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069429622 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066363704 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076869028 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069354181 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07308838 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069275315 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06896503 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069346412 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075150602 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072776872 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073375733 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069566358 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072921488 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071242431 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069736066 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073009323 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073000443 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066381402 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073093468 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069203932 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077264497 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071128681 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075037665 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066122715 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071100843 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0728754 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073001408 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072998261 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069501114 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072607777 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069565314 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069747582 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07841539 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07189828 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075035161 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071596073 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073348978 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072814705 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078327602 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073556837 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074807354 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071003386 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073544997 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075178849 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071434221 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075318405 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073934171 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071412424 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075334458 seconds)
  done (took 6.289021001 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106192172 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066759546 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069390652 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073406777 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074893339 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069595986 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069392112 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069263112 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069873521 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06724636 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105272522 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069880757 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074902093 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077625678 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069756726 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069436417 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069582241 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075129031 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066891867 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078892744 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069743225 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074735307 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07505209 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074853407 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073148363 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070974222 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069168949 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06926965 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069403216 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069112124 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072813407 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069919759 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074660022 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067006906 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074672305 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069791915 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06948295 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072988032 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069386239 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071506683 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075224808 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077433803 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069708759 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069700392 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073643813 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069776582 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069503501 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067284026 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069816212 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066747957 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073432615 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07363249 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073794487 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075107445 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069610111 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069601239 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069961082 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069853873 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069621054 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071466837 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075152796 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06955473 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078513016 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069363157 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069751698 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075321437 seconds)
  done (took 6.298379193 seconds)
done (took 130.246094531 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.222647768 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.191427488 seconds)
  done (took 1.886085311 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077640039 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166262374 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075032893 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074996111 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108475305 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107752324 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076526913 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072513259 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074770451 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072271627 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139246022 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.07666254 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072417783 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072451641 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073065708 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072599577 seconds)
  done (took 2.907949596 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110189692 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.183860852 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082336322 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070266538 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151371025 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077153577 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072266881 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07708146 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077280284 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070432867 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.10710579 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083766382 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075751345 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076826579 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072114011 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075610393 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077000675 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076854307 seconds)
  done (took 3.121697759 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.106063411 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.091739775 seconds)
  done (took 1.698035184 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159097837 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10557941 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144748971 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.344398827 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13663583 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138402881 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.142303057 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137272206 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110058271 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.135070042 seconds)
  done (took 3.055455248 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.109352353 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105158233 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307644853 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102269653 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082473884 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077677804 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074967502 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080006329 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07561776 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07676845 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.12172249 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075634991 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07280611 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123835904 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09874569 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106240441 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071331196 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078457608 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080024381 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070932636 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076334361 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080421662 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178034073 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078270897 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100360395 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075210955 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077482871 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074665536 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074571141 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078392096 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079380712 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100098194 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078781526 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083323617 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077073611 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097573535 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072403451 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098953698 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074870005 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07304002 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075449979 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079323802 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072485796 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078726717 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076000489 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07799457 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080172272 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07126362 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075858777 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075272262 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073045244 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076786073 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07670502 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077604656 seconds)
  done (took 6.305418441 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110509002 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108595893 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070490448 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.112860441 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105253259 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070618298 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104631872 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100457067 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.1086909 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070364689 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069936546 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069943966 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076784633 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079893011 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116293916 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108010611 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072066928 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070492632 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107472918 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.10730873 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069225952 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102575348 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100250278 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106905036 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069087274 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070891663 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069146143 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069975536 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074313741 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07590457 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069761002 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07621696 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081164811 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075959078 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069014922 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069593262 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06907311 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076257551 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077049248 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076586303 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075099727 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069382964 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069404992 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069998812 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070521638 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068634601 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075839252 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076591867 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07537892 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069441152 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069934148 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06905384 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070142766 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075679384 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074943912 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076808175 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076059548 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0690915 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069375653 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070911494 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077630641 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077181825 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076762814 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070289686 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077499183 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069155559 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078067891 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081707558 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069425652 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069571318 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069341541 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069349321 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069562484 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075004042 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075339691 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069870872 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069436613 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069173013 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077537044 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075375809 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068999757 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074497135 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0688001 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069390012 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070327905 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070183399 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074557429 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075928899 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069728367 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069252624 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069094554 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068817124 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068804034 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074676879 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075422532 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076137797 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075245154 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070017124 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074788731 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074828532 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069065059 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073700117 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06853431 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06851405 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06830829 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073574674 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072747448 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07563077 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068224059 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067830153 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073596883 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075940953 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.208144033 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076001563 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078523293 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076314376 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069297598 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078563018 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069865235 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077163056 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069806936 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077944744 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069773406 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075701215 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069457163 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069026603 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069587812 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075263875 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069855967 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06952638 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069758346 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069276253 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075556726 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078649613 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070029761 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075422575 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075459233 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069785319 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075232207 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069568122 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07629087 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069233685 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070012715 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068702968 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078402314 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068887866 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069185555 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069125647 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077152105 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069231561 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077584349 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074709868 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068985291 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079302321 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077439153 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075112812 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077706711 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069853382 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069713321 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069467705 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07238639 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075187525 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075957716 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070273007 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069584362 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074449642 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077705718 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068734367 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075189447 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075486828 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075818455 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069641054 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069786125 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078381316 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077492461 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075388628 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075416818 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076168289 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069357398 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07491329 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075313794 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069486791 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081451553 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06953227 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079526038 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075443634 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074482668 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075569991 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077206577 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.07753146 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077658657 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080285076 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069098551 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.299978965 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07607458 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069046736 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069104722 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07512665 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069878369 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06969397 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080225341 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06985185 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077510849 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068946931 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07606145 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06898769 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069848244 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08031174 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069458005 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069690988 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075072173 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06904707 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074561442 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077174927 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074533052 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068611393 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068852053 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075152843 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074990109 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068271584 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068235393 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069030023 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073605286 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073160238 seconds)
  done (took 18.696095213 seconds)
done (took 39.197119904 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.17035267 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115952689 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210729988 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198225025 seconds)
  done (took 2.3072702 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.103599082 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066023037 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080959605 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090683214 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065731651 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076980687 seconds)
  done (took 2.046390747 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.204450916 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176031372 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244393728 seconds)
  done (took 2.177288225 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.366568185 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151039659 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.215553428 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499350108 seconds)
  done (took 2.890320026 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110315552 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10095523 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078016627 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111958497 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085547289 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063309196 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134445588 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070343113 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100094426 seconds)
  done (took 2.476116931 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139155672 seconds)
done (took 13.630492449 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.106056602 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237020062 seconds)
    (3/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125540283 seconds)
    (4/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.25311381 seconds)
    (5/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.235719972 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092438397 seconds)
    (7/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.206175283 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.129656709 seconds)
    (9/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.188815802 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155952868 seconds)
    (11/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.213075297 seconds)
    (12/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.253294528 seconds)
    (13/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.221648155 seconds)
    (14/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.135392311 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.184360316 seconds)
    (16/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.145895405 seconds)
    (17/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.177928463 seconds)
    (18/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.082965451 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.091367913 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.073676431 seconds)
    (21/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.077624691 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076917024 seconds)
    (23/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.197552116 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078459881 seconds)
    (25/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.200469418 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143071178 seconds)
    (27/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081531289 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079244698 seconds)
    (29/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.172264981 seconds)
    (30/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074118622 seconds)
    (31/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164400368 seconds)
    (32/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075529382 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.152696321 seconds)
    (34/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136417083 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075429722 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127424736 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.112803094 seconds)
    (38/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.188140526 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.175527614 seconds)
    (40/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.194778467 seconds)
    (41/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071656312 seconds)
    (42/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143870353 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071945083 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078755019 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073322572 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.07713221 seconds)
    (47/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.25380646 seconds)
    (48/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.154334027 seconds)
    (49/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092165923 seconds)
    (50/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.07278097 seconds)
    (51/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066111261 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.08605407 seconds)
    (53/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085042486 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.198928075 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077392556 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.138964159 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08747024 seconds)
    (58/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074748017 seconds)
    (59/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.198691108 seconds)
    (60/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.215357123 seconds)
    (61/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066386987 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074249134 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14487578 seconds)
    (64/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.19835769 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.07590768 seconds)
    (66/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.197107923 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075221211 seconds)
    (68/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066175027 seconds)
    (69/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.219548694 seconds)
    (70/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075939412 seconds)
    (71/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.21419928 seconds)
    (72/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076071577 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067288618 seconds)
    (74/341) benchmarking ("sort", Float64, false)...
    done (took 0.292608699 seconds)
    (75/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.155165307 seconds)
    (76/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.089841482 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092149238 seconds)
    (78/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.083209974 seconds)
    (79/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06850985 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075101029 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.150060313 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088284532 seconds)
    (83/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074900237 seconds)
    (84/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.197846646 seconds)
    (85/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.181384161 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074920323 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066317179 seconds)
    (88/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.163666404 seconds)
    (89/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.07452221 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068345328 seconds)
    (91/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075120126 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067776577 seconds)
    (93/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073529706 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066028275 seconds)
    (95/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145148958 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.088733188 seconds)
    (97/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078420227 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.122670061 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065990102 seconds)
    (100/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.180460536 seconds)
    (101/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.066656073 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073109174 seconds)
    (103/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.228254306 seconds)
    (104/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066826217 seconds)
    (105/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.066498854 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066441439 seconds)
    (107/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.083750059 seconds)
    (108/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077386619 seconds)
    (109/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.157497778 seconds)
    (110/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066447012 seconds)
    (111/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073460545 seconds)
    (112/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.066774746 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074475113 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 0.138165576 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.07371665 seconds)
    (116/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.083037114 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.0665865 seconds)
    (118/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067287235 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.065966988 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084137606 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.093433679 seconds)
    (122/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074710556 seconds)
    (123/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084198573 seconds)
    (124/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066269361 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066851235 seconds)
    (126/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.067300859 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076328569 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069462163 seconds)
    (129/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.06638237 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199355336 seconds)
    (131/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075210962 seconds)
    (132/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066913206 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.07323859 seconds)
    (134/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092527936 seconds)
    (135/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069968344 seconds)
    (136/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.218218668 seconds)
    (137/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.073294562 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129125962 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075364684 seconds)
    (140/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066826335 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089600112 seconds)
    (142/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082906457 seconds)
    (143/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.189915325 seconds)
    (144/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069793564 seconds)
    (145/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066230204 seconds)
    (146/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.18933284 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.065775249 seconds)
    (148/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.191139923 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074102037 seconds)
    (150/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066336157 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.083189027 seconds)
    (152/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069620633 seconds)
    (153/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.0732371 seconds)
    (154/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06618854 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075341128 seconds)
    (156/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075130195 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 0.146074303 seconds)
    (158/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.068371843 seconds)
    (159/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09401394 seconds)
    (160/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066470034 seconds)
    (161/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.179885198 seconds)
    (162/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.149967671 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066412615 seconds)
    (164/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066328503 seconds)
    (165/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066595905 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066002539 seconds)
    (167/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088753875 seconds)
    (168/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083900233 seconds)
    (169/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.143675903 seconds)
    (170/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165450487 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066345463 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073257984 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075024901 seconds)
    (174/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138284647 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 0.067013611 seconds)
    (176/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078557282 seconds)
    (177/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.067965954 seconds)
    (178/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065528948 seconds)
    (179/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.067876748 seconds)
    (180/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068311784 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156272691 seconds)
    (182/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.141841824 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066267714 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065449946 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082733855 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173856588 seconds)
    (187/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073051842 seconds)
    (188/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.245777149 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.069396684 seconds)
    (190/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145571112 seconds)
    (191/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.165211004 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134432283 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085411811 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113585144 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091764492 seconds)
    (196/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068645173 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149778274 seconds)
    (198/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093405757 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146981026 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067369902 seconds)
    (201/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083555268 seconds)
    (202/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066554035 seconds)
    (203/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.066649316 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066756309 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078192412 seconds)
    (206/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069449829 seconds)
    (207/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066097393 seconds)
    (208/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.090378058 seconds)
    (209/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.164393915 seconds)
    (210/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079106421 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078870324 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.081959796 seconds)
    (213/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228136431 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.079552503 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.066652726 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064761896 seconds)
    (217/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079192917 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066769649 seconds)
    (219/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065457676 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068082357 seconds)
    (221/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067075977 seconds)
    (222/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154669445 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.161707416 seconds)
    (224/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.06512176 seconds)
    (225/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068174227 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091269726 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074311647 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.171900418 seconds)
    (229/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075956209 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073548843 seconds)
    (231/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066179114 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091223366 seconds)
    (233/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066512187 seconds)
    (234/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066416211 seconds)
    (235/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089242742 seconds)
    (236/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075261692 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069064366 seconds)
    (238/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084489259 seconds)
    (239/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067541902 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092061581 seconds)
    (241/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074608782 seconds)
    (242/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065112757 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078235498 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077010887 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073673433 seconds)
    (246/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.083917484 seconds)
    (247/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066887205 seconds)
    (248/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068714447 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134039381 seconds)
    (250/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.219044336 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073992199 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069999348 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085844043 seconds)
    (254/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.208991778 seconds)
    (255/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067452399 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064893601 seconds)
    (257/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067941819 seconds)
    (258/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065400383 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066454885 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.16922873 seconds)
    (261/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.070284669 seconds)
    (262/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.068500609 seconds)
    (263/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066902429 seconds)
    (264/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065110276 seconds)
    (265/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066165154 seconds)
    (266/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068952756 seconds)
    (267/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.070347524 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067625019 seconds)
    (269/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069642122 seconds)
    (270/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066432798 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066587328 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.066351838 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073299729 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064848954 seconds)
    (275/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067955378 seconds)
    (276/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.06882107 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067793342 seconds)
    (278/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066730643 seconds)
    (279/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067936239 seconds)
    (280/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075621097 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123631251 seconds)
    (282/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066841815 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067189645 seconds)
    (284/341) benchmarking ("sort", BigInt, false)...
    done (took 0.260622323 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.0891515 seconds)
    (286/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.066463666 seconds)
    (287/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.142511546 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149918972 seconds)
    (289/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070267703 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067168667 seconds)
    (291/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.066925122 seconds)
    (292/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06660387 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150063886 seconds)
    (294/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.170103324 seconds)
    (295/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065895881 seconds)
    (296/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.065525894 seconds)
    (297/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066070089 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125885412 seconds)
    (299/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072407733 seconds)
    (300/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066369222 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139541899 seconds)
    (302/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070358586 seconds)
    (303/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074091411 seconds)
    (304/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066298893 seconds)
    (305/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.0653484 seconds)
    (306/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.065914082 seconds)
    (307/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066995937 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08311707 seconds)
    (309/341) benchmarking ("sort", Int8, false)...
    done (took 0.146104135 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.247215148 seconds)
    (311/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.072269423 seconds)
    (312/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.068395845 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087438737 seconds)
    (314/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075822924 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.06874053 seconds)
    (316/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072557582 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134959299 seconds)
    (318/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067453954 seconds)
    (319/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.167069208 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079060325 seconds)
    (321/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067790547 seconds)
    (322/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.067093238 seconds)
    (323/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067753551 seconds)
    (324/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067269648 seconds)
    (325/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.067334677 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115787653 seconds)
    (327/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067223915 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066671585 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123338503 seconds)
    (330/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073729815 seconds)
    (331/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066722793 seconds)
    (332/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06702597 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065950196 seconds)
    (334/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069818643 seconds)
    (335/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066434886 seconds)
    (336/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065385202 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066749815 seconds)
    (338/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171442285 seconds)
    (339/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066639055 seconds)
    (340/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066513495 seconds)
    (341/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.07138857 seconds)
  done (took 36.891407278 seconds)
done (took 38.472948338 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.09371998 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079498157 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077834229 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074552129 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078115048 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077346076 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078439941 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07633728 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077814696 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077765716 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077487316 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065510842 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074086092 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080886068 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074758666 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081692533 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079026482 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.082199752 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066874863 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.08093493 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093544413 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078227904 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075287108 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080471997 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066938997 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075521799 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090000605 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087323741 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072953134 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075774196 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073838984 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084105676 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073751025 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072531675 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075542089 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072450311 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.07559959 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073622763 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089727755 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072076092 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066779737 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078478415 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073765908 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07491749 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075453028 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078453359 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071818223 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080012475 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066178223 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077745918 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089547183 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071445543 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073068512 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074868354 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071612359 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075750513 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073021951 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077612764 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071485233 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077785138 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077416781 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074813129 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066220739 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074962909 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073395626 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074062815 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065505753 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071360537 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066389533 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065989651 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065729295 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074768013 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073160657 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071116032 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065937027 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066192302 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066000782 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078347559 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.0722892 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075563564 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066498488 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071429255 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071498213 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066341418 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07158273 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077882957 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065297795 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066452801 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065488549 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080507453 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072675844 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066093898 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078047561 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071304103 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07107254 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065987631 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065234128 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071125736 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07415767 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065847865 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065312181 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070975908 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071190703 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074977175 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06642289 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070850412 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070860058 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065477464 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075006815 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073211752 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074569983 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078858522 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.074541551 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078023204 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066537465 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065674924 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075869209 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066244334 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071060811 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073952133 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071656634 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074395062 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066799302 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065888539 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.0714714 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072198905 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066366637 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066699151 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066419037 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075451201 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073467263 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065116743 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065562971 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074357072 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07455518 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065142854 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06476631 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074578362 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065681433 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071236106 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07126785 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073899793 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065113784 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.06613965 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.064216349 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064739425 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.064472052 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070441795 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070179634 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06552651 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07365174 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071147498 seconds)
done (took 12.773867976 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.073394782 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109528189 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.081197596 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083596571 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079673204 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06861244 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071284766 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.08562097 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070033281 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091296218 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094075004 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088342601 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097472439 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066111742 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067232059 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068397221 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065687907 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07877746 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083987734 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090161163 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102801786 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067072706 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082825114 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086521715 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080852575 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084978451 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068097919 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.108041585 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070002603 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085490503 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092805096 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066958909 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067965566 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084604377 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081796159 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075037762 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067317149 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073192672 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.07041451 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066864311 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069263148 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08496791 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073451542 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073482371 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068089962 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068145539 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067718567 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074190789 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084316641 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072733881 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078959616 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085946271 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068990938 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067346728 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065581674 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074568794 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066964254 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068468802 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067448132 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067279896 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067300321 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069966623 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071854588 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073098029 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07032963 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073463232 seconds)
  done (took 6.709909388 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084809959 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092682487 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081626205 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081684326 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.0664412 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067591864 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067534243 seconds)
  done (took 2.238615874 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070162468 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074738981 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07921595 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079080214 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088395437 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076896584 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067651704 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098965364 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066359457 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075697179 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082791856 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080863824 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070732366 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079301258 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067732839 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079187413 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067905718 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.07415981 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074811747 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080562355 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071496255 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097066477 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.0810413 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.06788492 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081021062 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074884084 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069595185 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068072642 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067930732 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067547484 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06740128 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089267838 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073686066 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079435501 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067971639 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066673945 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.0716313 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068059139 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071263608 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07602927 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070505956 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067095516 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067761933 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067160632 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068885822 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071955071 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068361632 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067089619 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066810837 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074989468 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066482728 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074217915 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069359244 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072575934 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072195119 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071734098 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074356452 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067692091 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074646799 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073597226 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066880105 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079472625 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078823667 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070755342 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.0786947 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075374588 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073595063 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070684037 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066812589 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066749898 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067713372 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078984319 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070759147 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069599173 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068340779 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072305375 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071134754 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082662733 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082579158 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080596821 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069576163 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067577933 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071529095 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082761493 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07214056 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067166992 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068318803 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066805483 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072398847 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067388475 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07214146 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067397786 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07413024 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069978885 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069722453 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075349441 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067402616 seconds)
  done (took 8.772291953 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072111217 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069725775 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068785361 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068682904 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069054554 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06902482 seconds)
  done (took 2.147230607 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093148086 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068106754 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079732136 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067845745 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090095942 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074272231 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074173574 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069667754 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084186178 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07814714 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074168713 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07653593 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077044887 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069391702 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073800259 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069326759 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073721492 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070780405 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077746448 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070101923 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084144711 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069743595 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069737606 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079753095 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070782666 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068961845 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068742585 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078534422 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077496665 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069356773 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069180651 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07083912 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076330332 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069434001 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074164182 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076325347 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067896732 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073205561 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070062896 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070734153 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076227248 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069851497 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070184098 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073479615 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.06945153 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076283655 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073454522 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071805929 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074333342 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073337865 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073256464 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068482966 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071300126 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073432128 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076463312 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069433536 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073469702 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073829616 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069816226 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076276845 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068411799 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070837243 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069824695 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070737958 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072725991 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073410651 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076587705 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069650642 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070128588 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068052986 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073206087 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067739611 seconds)
  done (took 6.960400173 seconds)
done (took 28.562064284 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548299955 seconds)
  done (took 2.213470667 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.612043781 seconds)
  done (took 2.323466963 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.34704959 seconds)
  done (took 10.061920921 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.357067326 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.413739431 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.738201718 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133458248 seconds)
  done (took 3.398888355 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.75286197 seconds)
  done (took 2.479419171 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23334801 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221019358 seconds)
  done (took 2.188248722 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.338911124 seconds)
  done (took 2.053266471 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.161344481 seconds)
  done (took 2.866614205 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238071755 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163398621 seconds)
  done (took 2.118225393 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.539553575 seconds)
  done (took 2.251002291 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.276521033 seconds)
  done (took 5.992722445 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235827926 seconds)
  done (took 1.991423233 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234399777 seconds)
  done (took 1.952418269 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.105962409 seconds)
  done (took 3.817880266 seconds)
done (took 47.438113517 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087024643 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087302632 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087052768 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082475849 seconds)
  done (took 2.024692937 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077336305 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071577517 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074786292 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074696851 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072170357 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073368459 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074693563 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070736948 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072825992 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071247183 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069622726 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071444564 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073694189 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071031814 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07403519 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075124595 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071387585 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071205034 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073739863 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071050392 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.07370416 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071055151 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.068941436 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070844052 seconds)
  done (took 3.454269751 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081422366 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.072847061 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076352451 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071892815 seconds)
  done (took 2.028239219 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.079493658 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077637624 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086248752 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091637987 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07688616 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077735885 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084734568 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085198877 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066956049 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087761632 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069367297 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068488708 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067738622 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086261583 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084375751 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063845819 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064836052 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077884974 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077001996 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079947112 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069386215 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066953176 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077019295 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078276735 seconds)
  done (took 3.569094807 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084614122 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067143249 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082203841 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091908313 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09285046 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066536833 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080035417 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093670526 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.1286143 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066604664 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072735725 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066952393 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105763947 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067106672 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081491961 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110059131 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112138898 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070669799 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099225303 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066650073 seconds)
  done (took 3.444167049 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079235574 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070424636 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071112329 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066679877 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078097488 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07416765 seconds)
  done (took 2.17818346 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071119019 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068898405 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070931284 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073476497 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.069200444 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068742095 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06787171 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067144662 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067498774 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068082381 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067978879 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068035505 seconds)
  done (took 2.558500137 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.157361045 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.0699984 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071001028 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066927061 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072079118 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067671274 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082547773 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069618599 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085396534 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067934297 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068072891 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070053423 seconds)
  done (took 2.679512995 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107765568 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112613334 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146453874 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117728705 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117507442 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097778306 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125797507 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.096007391 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160163128 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137798871 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117771013 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094020372 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08722101 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070518257 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100629587 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119441131 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138766393 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074143874 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114154676 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165790292 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132894817 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136330775 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149627361 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118116616 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092126611 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149334717 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097973488 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103922737 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12533617 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127674276 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119836559 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099059829 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073017965 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072275529 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150176728 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10474476 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120984631 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093281456 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105260318 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088834678 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108156643 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070563564 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08822098 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113974239 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08557025 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131967898 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088787145 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116700618 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081700767 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137490317 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122137648 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097780507 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085377752 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103201097 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135492605 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108960135 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130859734 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105364865 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081224596 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116209211 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102158145 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09813233 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104859074 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079443433 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173157368 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087427927 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.10669693 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105149764 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.089718471 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091457399 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103395481 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129036121 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118112099 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.11784439 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12889339 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092536991 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114577559 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.094431503 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.123399365 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098158221 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071116016 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.113666509 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123892708 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093745997 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097712695 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120381314 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089410482 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076740106 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094563338 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.113110511 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077982733 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.105532402 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076422451 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.10346457 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123301695 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092054279 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105297407 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110403377 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07545145 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141810476 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102909173 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071808279 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.215051295 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105212295 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143793737 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.343341992 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077762749 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100801706 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103949891 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151972636 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106129848 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080979564 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109545664 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139063885 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095814815 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169022146 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097105938 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139185151 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110957713 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087726105 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075810346 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090657345 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111990886 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107198571 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111704194 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090976575 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083876753 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087462132 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111021373 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091992388 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080682603 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112170397 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.101624083 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074792521 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087450201 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078828688 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138995274 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077425664 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13422698 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12315644 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078504523 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104270514 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096421114 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106304505 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.096280535 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114574814 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136953587 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113979043 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08843617 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091884562 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10577262 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.139374646 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124386114 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091448267 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076284009 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098420862 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110159593 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.096729987 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12288291 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099191102 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11052276 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103753674 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137862537 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141650314 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098979826 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.254575174 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10403064 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.118840153 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075656098 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150544397 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1015074 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115891676 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083482647 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137724 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.112368729 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088387286 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086282576 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098359252 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.101689391 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104095424 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139863466 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09461803 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071945464 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091260662 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140512974 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075673798 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107772896 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.08938656 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091985442 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116081294 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.091451951 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08060142 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.068352123 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124299704 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.153691383 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069660721 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112122895 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.109362841 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100302754 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.117716363 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069068665 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115742915 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134647438 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114771244 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136466237 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142135921 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113424302 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115631344 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110666419 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103520043 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078752936 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122868094 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131683407 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094423397 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091245733 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133290668 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116027154 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132995943 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.270304354 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110789284 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102130604 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10459556 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100284493 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099523519 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139664951 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117349305 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.120994641 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084459375 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103463437 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114729961 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132219677 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081174379 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137689321 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.082617874 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115607981 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.076703029 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120858919 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.078928175 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.109862651 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078871423 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097790381 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.068943942 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.07337984 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137812597 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.110120702 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10357686 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097676622 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.134309702 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133117259 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.080088415 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105915189 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112561401 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099504423 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11319045 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107269029 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.087539529 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093190771 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106679135 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084420259 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.080335818 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111860681 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092565993 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123911947 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083344231 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074755454 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137634556 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103009877 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094148141 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07766106 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105716139 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.120380886 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091853723 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086669353 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112959986 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102704936 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139214528 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.089449365 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.096345437 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.27373872 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079757753 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090681589 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069190821 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084177284 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.075805636 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.122306435 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075598068 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11212392 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068128044 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.125864927 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084871541 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092660087 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100547249 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109719912 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125362878 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093202556 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136653756 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088026228 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115396644 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105622942 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093247237 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086782338 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101839447 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099376269 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.120610307 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095078615 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120434649 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140398148 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102633195 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138549822 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089828641 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119249478 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104444504 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121440551 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109882018 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143548964 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134402879 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109580459 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109570473 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074743094 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092734052 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103101848 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109082653 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169637357 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122672547 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.071715901 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10390252 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0929556 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105932645 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103016628 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081708153 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143808669 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099745913 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087278882 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110138758 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.238087013 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102423201 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075125713 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093085126 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.097596725 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092092407 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096367348 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111555443 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123613803 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109812006 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139186175 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097802257 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092049669 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115934499 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108444343 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108211847 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085073456 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085622763 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134564947 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115852734 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125681655 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.097826525 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107183764 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109427162 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098471209 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122048249 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105661032 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.123445278 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07917241 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.074902609 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067834244 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071386797 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120335603 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106605171 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109479216 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096961495 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071791609 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101451157 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103627555 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071344913 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08731492 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092188781 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097106374 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.08948546 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103530812 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11229957 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.089787153 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102050147 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097632545 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142359412 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.098516198 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087082879 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140219872 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146687439 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086991489 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091556643 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071317861 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078468229 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11121737 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145676126 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.296510663 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077016457 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085546294 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084068678 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084493812 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071298489 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.085544336 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.087894904 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102080743 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096877059 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110640462 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102530657 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075071905 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101585462 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097360406 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091014918 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102024094 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115333994 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122613367 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.137288177 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108869474 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10502016 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075706114 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080071018 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075335195 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079146566 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.100678605 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078646576 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075643013 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139338792 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090564261 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103226481 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106727689 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087610658 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074829622 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1309598 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068834633 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131902418 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071081914 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080873657 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081828756 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078641218 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092106668 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1352762 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107370048 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110380838 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104304343 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102821668 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137011112 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152262516 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078721294 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140105215 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074939268 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075108823 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075471098 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111644053 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088404198 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112515629 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13741607 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08983765 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101292418 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076558395 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.291118338 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.094224768 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101662032 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085296075 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078407207 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138456001 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07881327 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.078381141 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088160913 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.108717233 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072061774 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102744105 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083717467 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079084312 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13872584 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.62845567 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088966684 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075297496 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094165961 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138979992 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124293612 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093201269 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106817279 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.116423924 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098093325 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094046283 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10578002 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.181731549 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074068796 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092985793 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101671557 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0964279 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100228973 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.097019538 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086806807 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09066836 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085967735 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079077484 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105685657 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087729403 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094427764 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105043444 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081596229 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084998748 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.127482398 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101660447 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080848833 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087314987 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.104000924 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087624398 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099493827 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068765306 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111286936 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.090014023 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114732732 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093341255 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10563228 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124767965 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088971294 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135510035 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.105043689 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.273196041 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087265652 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07737947 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120608672 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.085765105 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076918933 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139472996 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.09173204 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092346549 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102130406 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.095485797 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110773192 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114566494 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109372009 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09580293 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078523409 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097611848 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.1002637 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083973134 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077619094 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073830161 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076505567 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105577681 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084216709 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082857581 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112769229 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087890767 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102223899 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.098578825 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120068067 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082578415 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099798217 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107720359 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090933504 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107547138 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098573709 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125589026 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169961881 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12206786 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125956977 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131347612 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076195849 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075078271 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068729352 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113199727 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078189886 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087658656 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080522015 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130378064 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.080780698 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108932657 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229301857 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079669158 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092380985 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094618497 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069228068 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082340129 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105867013 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086639728 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079575819 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116749772 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082948418 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124816791 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.262000453 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096646448 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092547654 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079668695 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109638816 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.103401851 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126173762 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093041355 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07380448 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110226818 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101783921 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133509289 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073085574 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080243174 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126005932 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101599404 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128963564 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079495754 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146113193 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140053159 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098113751 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130938611 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070818206 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082824392 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087791654 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122909152 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083486827 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109040641 seconds)
  done (took 66.821344792 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149182676 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139964555 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.081025632 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.10213307 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185038733 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.194902531 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117900707 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.095166506 seconds)
  done (took 2.858322761 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069108415 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081276214 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079394349 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.20094868 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.106567865 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066575594 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.072118524 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081071211 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066567862 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066029503 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100447386 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066682829 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066905989 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.360069548 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066227424 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071262123 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067145449 seconds)
  done (took 3.460833109 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325781826 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.112502697 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.211970946 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.444934318 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.136228372 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.474112924 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075959563 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082353236 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.548981038 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.36551861 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.128919391 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086841722 seconds)
  done (took 17.772885509 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078180554 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.078679606 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078249408 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075981844 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075036811 seconds)
  done (took 2.22351723 seconds)
done (took 116.815152452 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085134716 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170239008 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067804034 seconds)
  done (took 2.05966293 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083362715 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.0802688 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.080473276 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.07786064 seconds)
  done (took 2.11481606 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076063341 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.076508715 seconds)
  done (took 1.935561399 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.217178829 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176125428 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089658504 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08284832 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.079136933 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079892976 seconds)
  done (took 2.030390941 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072760232 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.071475483 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.071541066 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071672211 seconds)
  done (took 2.06275722 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.0688572 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070220243 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068452759 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070472071 seconds)
  done (took 2.054890129 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086170839 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085925611 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114545337 seconds)
  done (took 2.06661359 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.08435079 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082497041 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.07799389 seconds)
  done (took 2.030753266 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.10902337 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09647361 seconds)
  done (took 1.985428616 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081377441 seconds)
  done (took 1.872255481 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09039327 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096688877 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.135384788 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105757731 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.136811464 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123053682 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076828707 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077744698 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073603725 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072360122 seconds)
  done (took 2.77489384 seconds)
done (took 25.347496026 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080276027 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.18054955 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.351950246 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086787303 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.65288446 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.34871636 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.875414248 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090709946 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100573118 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068583881 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085308615 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.630605921 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.86829847 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.139686882 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.852807041 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.138426326 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.633866495 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069108569 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06860288 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069714135 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.860905707 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06824977 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068440116 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069023882 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.632035903 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.366344954 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069500626 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.138760749 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068793009 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072615914 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.349796239 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069251539 seconds)
  done (took 14.988052706 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071711669 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121809168 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072324412 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084225575 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.070564722 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069752121 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071450283 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069046686 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11162741 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068832899 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085546201 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068550453 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072244042 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069808697 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087966487 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068644206 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071068478 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072396808 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068413648 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069675471 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087175368 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068538175 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069285573 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069633039 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069096687 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081785026 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070027442 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068666211 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068731787 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072246241 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073045233 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070233216 seconds)
  done (took 4.224005884 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122838952 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124748356 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073368117 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109028534 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.117064109 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070613881 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.1504893 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091698672 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114507179 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068892723 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085937617 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068892036 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104080291 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070086499 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088567157 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069375109 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071571983 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069842108 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068939666 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069960195 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087732026 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068216314 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069119893 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069316368 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069121196 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083368858 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069505433 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068857192 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068675864 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072809993 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073706935 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069741629 seconds)
  done (took 4.484405644 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071070253 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.071362953 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080076396 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.080632914 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066583257 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.069176878 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070099873 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067095826 seconds)
  done (took 2.3920073 seconds)
done (took 27.904055146 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080743022 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067982025 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070997648 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087384974 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074216617 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070201906 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064951339 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074848389 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.071720031 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071888414 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073381572 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.067325604 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070627194 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.065494673 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072498847 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.066552898 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072714613 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.07060908 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070639221 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.072269653 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069152548 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072527713 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074986593 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071014741 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070876238 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070736723 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075167983 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.072123982 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06696644 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069184678 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068994064 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081029602 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072661367 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.0725477 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.066516758 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.066528056 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071110786 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068668351 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.07292541 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.075240358 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068692375 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075657662 seconds)
  done (took 4.779440748 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09044611 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.093864252 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086252941 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.081690015 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.106883995 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082107812 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.090208817 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079481653 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.077831396 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089467562 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074848817 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.079997237 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081059037 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075958968 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079676184 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075387247 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080803034 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074339741 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078847257 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079396981 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09141034 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072144359 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078990699 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080430094 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073735871 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079948562 seconds)
  done (took 3.951303017 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.073962356 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087895824 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.092818445 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140435844 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109301737 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082916029 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082931238 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097969611 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101096473 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.068648571 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.072533873 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09451364 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096995583 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.075564839 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10659411 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.086569481 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081333941 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07047933 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075138734 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102921673 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091503076 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08773696 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.100962781 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088663419 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.067547275 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077869307 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07597899 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084748616 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076414439 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080817306 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072833682 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072258643 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069541542 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080636833 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076068386 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.066496248 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090721317 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081297491 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084127666 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10616761 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07832761 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070191046 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098495182 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133859246 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068053902 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070631246 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.072316021 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081542196 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070095715 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097966602 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086531476 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067841789 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086943699 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069907495 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069989514 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084877406 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070063158 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070038625 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08039367 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.074284896 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.08913067 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073444689 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089921086 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068602632 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07994409 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070084984 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.07025349 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067021607 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104635468 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075858411 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120525788 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069691667 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.066931531 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081018666 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080110919 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07510348 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068550262 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088109307 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.080685948 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072000108 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080007406 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071111403 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.071660016 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104178806 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067782876 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066489085 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.066749106 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070391641 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.071493875 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.068610656 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081565003 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.067936739 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071900029 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083797199 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068237602 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068806692 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070886481 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.069317721 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.067853042 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078991292 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072044299 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069903816 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080874442 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.06912304 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071548462 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083155894 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077808389 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067668096 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.069265965 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070708666 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070168816 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072891245 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072028941 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070459553 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.075525983 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075830258 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074710028 seconds)
  done (took 11.15481025 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163477929 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.152031558 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.069548706 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.146707097 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.0766224 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072609337 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149422623 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.087985163 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068918867 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070130585 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.068648827 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096391349 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.091998044 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.100381374 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072686543 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.06993949 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093963478 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101385854 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151326325 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.145691192 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09201309 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076732446 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071416848 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070457817 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07057312 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077871812 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082537052 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076582502 seconds)
  done (took 4.525560547 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076931925 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.083792249 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.072610258 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092204854 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086176181 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069449568 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.070635369 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070103972 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085679573 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075049082 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.06915517 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072792805 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072285772 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069600829 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069311511 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075393867 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075759004 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068470955 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.07247813 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073421814 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079491229 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.093441047 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073172602 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069289286 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072110365 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069100979 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075186154 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077881632 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.068432816 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098633445 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066192119 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073396354 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083084249 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070118496 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068615151 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069793669 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069040993 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069325553 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.069318401 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.0672269 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067118254 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073796234 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.067698815 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074153209 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082805724 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076184969 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070403027 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074581762 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071930389 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.065945929 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072381791 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072019878 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071182506 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.077319581 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.072504618 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07150127 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070153537 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09844624 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074961411 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068260128 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067734833 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067415238 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.070613106 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075766327 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.085397663 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070654753 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067259416 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068973267 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073275638 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082885435 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068079988 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07418315 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065754548 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069049815 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07119366 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.071403717 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070315036 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06693319 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068735307 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068997043 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069028718 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.06884726 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068037323 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.071420105 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.066725416 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067169915 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069590518 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070113196 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074499851 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06755101 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071805947 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070409096 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.067668694 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.071700518 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073924601 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.071653219 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088392626 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076840175 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.06940242 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066956637 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08299682 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071094875 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068098863 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074021009 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073548274 seconds)
  done (took 9.528729056 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093405726 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070169851 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088354616 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094959228 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078939116 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074137725 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083173625 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069239489 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085225111 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067644707 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077618875 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066870715 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082080676 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077948461 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.070414611 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07922647 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071329908 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.08926877 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083478049 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.067323618 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078097659 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080968101 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081257392 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086469018 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087200189 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087438376 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081573299 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.071312005 seconds)
  done (took 4.090389285 seconds)
done (took 39.847545801 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.882896957 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.046290086 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.883371459 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.159283141 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.93914687 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.087380764 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.978074329 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.871773367 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.083308848 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.902012151 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.197041841 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.259132311 seconds)
done (took 68.168908108 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.953689375 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.032388963 seconds)
    (2/2) benchmarking "String"...
    done (took 2.1064603 seconds)
  done (took 5.946374781 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.479573597 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.880378636 seconds)
    (3/3) benchmarking "different"...
    done (took 1.929449455 seconds)
  done (took 8.094891544 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.058232818 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.507637624 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.127959361 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.874011354 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.877306877 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.287473852 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.682495598 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.344514582 seconds)
  done (took 32.510455105 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.907951583 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.056499639 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.570097152 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.597612896 seconds)
  done (took 15.98143219 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.498336258 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.14312067 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.143909574 seconds)
    (4/4) benchmarking "different"...
    done (took 2.136508356 seconds)
  done (took 10.781845553 seconds)
done (took 85.218215893 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.890350332 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.076973441 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.901009328 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.028631868 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.940264569 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.917575219 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.888400259 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.912452697 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.875555317 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.893698138 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.271956606 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.889527099 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.884235981 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.924644531 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.890573467 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.9313059 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.212882018 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.876355434 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.951065704 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.153924417 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.390047542 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.876387962 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.876157566 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.068533801 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.887611736 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.891070044 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.454319542 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.885806267 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.589728706 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.883083396 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.892554219 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.884766041 seconds)
  done (took 208.698316258 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.879596952 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.938954069 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.990854552 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.901168799 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.302498365 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.067805388 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.02026207 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.344841189 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.88249007 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.892471004 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.007909231 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.879050708 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.02684055 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.832403198 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.87565014 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.907595096 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.149946123 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.015607994 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.876108459 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.05775249 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.90447334 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.912918059 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.870807287 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.969350321 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.915836548 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.965662492 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.892496446 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.884909368 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.06885504 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.115677617 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.901924247 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.893346133 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.082435554 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.745711389 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.87826648 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.891714307 seconds)
  done (took 173.557738716 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.045361847 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.888760072 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.939186521 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.001937797 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.607291461 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.57518242 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.878953992 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.878741488 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.878420703 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.886172136 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.88184387 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.945621 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.715362632 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.90109741 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.89337968 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.880348181 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.539222433 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.036575903 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.883081541 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.882706498 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.956861736 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.256915248 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.100317 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.88034969 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.893749679 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.008127371 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.890521722 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.882159436 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.005964973 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.883796611 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.95969368 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.003842049 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.888627234 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.961950917 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.890125683 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.376023214 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.884277174 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.8842149 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.884214826 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.942490511 seconds)
    (40/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.881819631 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.883774388 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.956973458 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.972667444 seconds)
    (44/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.881854134 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.884993728 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.898753592 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.952112086 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.579830379 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.88576713 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.884876871 seconds)
    (51/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.884233547 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.883737221 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.884884408 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.884997486 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.215330749 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.884373298 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.912778311 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.47622959 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.87519421 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.88546913 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.900789635 seconds)
    (62/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.885931874 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.8849778 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.876817248 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.875918709 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.924086442 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.609050043 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.559178529 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.271563401 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.623043934 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.88498296 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.964062269 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.944868953 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.901150607 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.964463716 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.882731482 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.885467177 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.886043368 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.886307819 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.982553778 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.94733226 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.888210861 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.008572643 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.887060554 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.887971866 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.931568988 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.5946696 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.884651021 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.901767422 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.943157215 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.887261029 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.886024778 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.894107093 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.95084107 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.887668295 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.885402465 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.886112442 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.931428579 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.890805889 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.109793418 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.108122181 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.959091123 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.102242399 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.092685412 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.890246897 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.887501349 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.901206991 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.888876852 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.887940046 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.894028103 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.879913543 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.889527974 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.902780228 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.889944637 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.88852448 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.857824134 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.903648495 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.887842156 seconds)
  done (took 422.200336012 seconds)
done (took 808.35219762 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.531339618 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.637232928 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.575215879 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.603059259 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.524722201 seconds)
  done (took 14.692124598 seconds)
done (took 16.510894373 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.925191344 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.905079759 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.879268432 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.957915939 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.914173939 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.899863708 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.936393883 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.935725273 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.919120599 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.901556748 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.951416793 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.902917483 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.920876026 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.922479548 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.975813819 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.926598339 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.905217351 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.898333247 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.960201229 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.90509745 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.903367824 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.901799704 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.900443355 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.952223292 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.980100175 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.911459419 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.900746134 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.94908253 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.912472971 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.9493213 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.959733767 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.924094504 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.934276189 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.976332811 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.947242447 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.974454069 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.910178013 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.97104713 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.906020368 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.992051871 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.957853331 seconds)
  done (took 80.978847144 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.896453971 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.028850087 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.110316361 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.928234819 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.897111363 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.108310055 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.95099086 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.023409979 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.024996448 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.107983022 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.1429078 seconds)
  done (took 24.038232389 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.900426301 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.029554773 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.122038092 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.9207822 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.921791039 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.129623218 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.960260277 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.025209402 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.038415084 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.110126253 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.122827607 seconds)
  done (took 24.11164456 seconds)
done (took 130.951884703 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.272983029 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.921555834 seconds)
  done (took 6.019251406 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.894753521 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.914558298 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.043613194 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.893507079 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.892343644 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.896013736 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.894679301 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.894702117 seconds)
  done (took 17.147815565 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.899325657 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.900086452 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.898605248 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.898546135 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.90005729 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.898236013 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.898979818 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.899267834 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.89962922 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.898106958 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.900267609 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.899363276 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.89861183 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.900102551 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.898298358 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.897998044 seconds)
  done (took 32.209098722 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.899154257 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.901281865 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.901803659 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.899665036 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.897784151 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.900868817 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.900696616 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.900276627 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.897644585 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.899204307 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.89909466 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.899435629 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.900271319 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.900026587 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.899205706 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.899420235 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.900967328 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.900589195 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.902492311 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.903284488 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.904142768 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.900797662 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.908203147 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.901035742 seconds)
  done (took 47.443166013 seconds)
done (took 104.652537539 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.097149143 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.454220311 seconds)
  done (took 8.373854847 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.905204406 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.902604489 seconds)
  done (took 5.693063834 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.901156929 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.901096795 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.9008323 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.90227062 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.900940823 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.902566087 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.901084754 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.901155332 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.902086294 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.900322075 seconds)
  done (took 20.839977473 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.902586448 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.900888756 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.901237627 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.901958673 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.902369936 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.900716109 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.903404106 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.903046894 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.903073204 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.90522767 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.902769242 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.904061625 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.902971447 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.90456143 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.904099099 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.90440456 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.904325071 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.902540794 seconds)
  done (took 36.082472984 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.904310824 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.906726889 seconds)
  done (took 5.638530092 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.906021798 seconds)
    (2/7) benchmarking "second"...
    done (took 1.903594223 seconds)
    (3/7) benchmarking "month"...
    done (took 1.905698276 seconds)
    (4/7) benchmarking "year"...
    done (took 1.904280361 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.904419913 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.904751224 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.901557346 seconds)
  done (took 15.160708583 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.903961681 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.043229062 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.092864578 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.510105799 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.906513863 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.908631236 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.791996492 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.909096388 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.911405377 seconds)
  done (took 20.809914232 seconds)
done (took 114.424396529 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.729231534 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.896394867 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.226077585 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.035981871 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.919284783 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.198001336 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.899349786 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.442303995 seconds)
done (took 43.177552007 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.924327749 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.897676994 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.927749929 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.922856746 seconds)
  done (took 22.580182701 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.899733477 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.18436082 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.91891472 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.845633751 seconds)
  done (took 22.695851052 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.277743077 seconds)
    (2/2) benchmarking "read"...
    done (took 2.244624706 seconds)
  done (took 6.355574123 seconds)
done (took 60.388787322 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.905161443 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.905370861 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.906599535 seconds)
    (4/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.906912763 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.908370933 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.906196428 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.910631162 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.905920875 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.9060436 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.906111168 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.905183204 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.90899263 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.906944488 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.90743839 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908421373 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.906640646 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.907178206 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.907710532 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.909201967 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.908244604 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.90798649 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.908929278 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.908887513 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.907994517 seconds)
  done (took 47.606927453 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.909016678 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.908833489 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.91034978 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.907347265 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.910957559 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.907216553 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.907602543 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.908281806 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.910479241 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.908753793 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.910693087 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.910196243 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.908864671 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.906445371 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.907236222 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.901870957 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.909384116 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.906203072 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908141493 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.909792504 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.911267488 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.910591961 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.909660826 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.911125945 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.908959763 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.909576898 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.910252317 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.910374012 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.908285588 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.909897116 seconds)
  done (took 59.097465617 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.909776675 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.912169527 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.909270626 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.908663909 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.910761032 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.910542071 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.909170816 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.909487034 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.910271722 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.909790489 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.908243961 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.910359576 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.909743173 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.910342526 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.909827507 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.909157248 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.910368357 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.908735277 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.908750711 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.911242143 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.909233855 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.91118603 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.909774664 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.911104009 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.909679135 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.911280381 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.909108696 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.910962218 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.910468187 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.909912441 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.910475039 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.910458578 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.911098026 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.911042155 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.911600821 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.909922502 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.911619938 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.911827673 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.910840203 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.913984701 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.911264224 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.910910471 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.912275396 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.912478815 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.912111515 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.911784925 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.910283738 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.912549594 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.912726056 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.911886818 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.911599842 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.9119172 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.911488432 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.91312491 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.913065201 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.912161313 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.917001847 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.914420063 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.913170918 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.911563645 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.912500022 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.913628255 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.912918843 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.912662648 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.912726856 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.912876282 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.914683075 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.911947813 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.912330696 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.915256453 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.913193779 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.911337355 seconds)
  done (took 139.451288851 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.911087462 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.911779656 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.913095166 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.910442972 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.912588214 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.911499414 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.914848406 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.912434834 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.914350527 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.914297892 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.910752756 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.915486851 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.915464267 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.915841017 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.913302475 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.916847976 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.914734769 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.915225541 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.912575173 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.914238175 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.914819127 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.913770681 seconds)
  done (took 43.935241785 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.913193263 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.913498049 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.915884037 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.915799858 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.913746728 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.912247524 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.91592377 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.914055015 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.914534615 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.915563846 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.912944958 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.914963764 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.915842309 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.914664888 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.916541447 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.91466468 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.914794689 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.915061978 seconds)
  done (took 36.301530238 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.914204788 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.915597195 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.916655149 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.917078691 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.91382294 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.915555933 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.912266672 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.914537964 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.91559109 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.914205681 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.914909028 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.915059155 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.916229988 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.916014918 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.916129749 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.915649422 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.915526464 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.916440524 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.917388303 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.91638893 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.915291835 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.915038606 seconds)
  done (took 43.976813738 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.913536879 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.91733177 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.91846713 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.918206394 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.916262207 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.917024449 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.916514648 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.918184377 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.916918967 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.916066028 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.918095611 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.916917894 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.916402374 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.919255055 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.915191146 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.917428004 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.916244862 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.917119152 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.915801581 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.917360561 seconds)
  done (took 40.178622205 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.912686744 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913235654 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.912137501 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.913101209 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.912100385 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.913888075 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.913039839 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.914732509 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.913378279 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.915631641 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.912528267 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.913111641 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.913714383 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.913448726 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.913067925 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.915056899 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.913759774 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.914398767 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.912964898 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.915253264 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.915040112 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.916227784 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.913769703 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.914052583 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.915895022 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.916038529 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.912371003 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.913908615 seconds)
  done (took 55.429451918 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.917552058 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.918473063 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.917919881 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.91901653 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.920683684 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.918524471 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.919985019 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.918094998 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.918897228 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.921184847 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.919421309 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.920757356 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.918722212 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.9190955 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.920239571 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.922265899 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.919594289 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.920704114 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.920808392 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.922979003 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.920715717 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.920406128 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.921946444 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.920101632 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920080123 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.919007583 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.922773127 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.921947413 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.919804102 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.919177678 seconds)
  done (took 59.443275923 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.942719921 seconds)
    (2/2) benchmarking "in"...
    done (took 1.938467896 seconds)
  done (took 5.722478875 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.921350347 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.921362915 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.921253286 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.921443376 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.922177433 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.920103846 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.922556167 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.920512073 seconds)
  done (took 17.213755626 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.9238886 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.932775778 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.921313443 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.921535064 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.916698786 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.939531246 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.91825484 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.932819688 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.933399223 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.917383687 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.923890595 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.934880716 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.927318979 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.936411889 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.924725968 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.918506308 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.931548998 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.934112649 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.932414287 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.923602476 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.936543832 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.919484289 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.92352541 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.919588611 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.923059275 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.934846747 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.942695356 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.910511815 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.924152155 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.924171623 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.939782462 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.922314606 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.919680916 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.934958819 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.920375983 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.924635442 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.939511465 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.905334937 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.904450043 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.91411886 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.917990675 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.933567113 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.933267507 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.935796579 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.91887619 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.923776155 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.924746271 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.91753013 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.919195318 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.937668334 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.934465421 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.933381464 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.921765231 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.915493002 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.936778694 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.924272089 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.919257135 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.937491428 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.941890789 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.941627001 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.93754889 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.955817847 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.94532299 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.921250436 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.924216405 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.945964754 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.94965849 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.934744792 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.937671553 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.925412574 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.942882988 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.925304626 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.926064665 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.926975626 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.950035847 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.932588516 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.92002363 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.923816207 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.926975901 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.922224232 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.935483053 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.922099707 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.933380789 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.922205642 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.945012083 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.961950563 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.921029112 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.920174553 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.937981883 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.923918538 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.926961094 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.937981601 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.920319204 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.924431181 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.938523728 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.924829642 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.922250503 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.922119139 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.921050594 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.945169112 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.927006593 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.927048567 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.94046905 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.930607395 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.926802775 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.92376662 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.938934592 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.925452174 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.943647577 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.924572 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.925498393 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.92691588 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.925128677 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.927493044 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.926233964 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.942772747 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.931752159 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.945827584 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.925259392 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.940198868 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.940329895 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.941796361 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.948431733 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.95205593 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.928688801 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.939964088 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.941999546 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.937800592 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.940456899 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.926646372 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.939078843 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.927844282 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.929635664 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.940674759 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.928542173 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.925986578 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.927851977 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.925514803 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.929663671 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.923981007 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.927344823 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.940483679 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.940709773 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.926321076 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.945000603 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.924648736 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.943159675 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.945593158 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.925408133 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.927193894 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.928435736 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.941542637 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.929456255 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.939433026 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.928166835 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.928631789 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.924792599 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.926561044 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.941020878 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.92377518 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.930929505 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.927217851 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.935181369 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.92677255 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.926485685 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.92849456 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.926911833 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.924512607 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.942162563 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.940450161 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.942145393 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.926150212 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.944842917 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.931702541 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.929819208 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.926720152 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.931859051 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.926250333 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.943076209 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.951653782 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.944261509 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.949011135 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.930672058 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.947324721 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.929685032 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.941722584 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.940661631 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.924931619 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.926038137 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.931473235 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.930306728 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.942512672 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.962576485 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.951617776 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.940436202 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.928678426 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.932178553 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.937044693 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.945910947 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.932877971 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.942529318 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.945989895 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.927831787 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.929595203 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.931748662 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.946023202 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.928842468 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.933682721 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.944873897 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.929879419 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.933888298 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.941651305 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.932965282 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.943952466 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.934352223 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.926749461 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.929145072 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.935912657 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.953330105 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.945704119 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.935879363 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.933110427 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.947229485 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.930006316 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.930285576 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.932404578 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.946157327 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.927746707 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.944006597 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.950011096 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.930656843 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.928540563 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.930163643 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.934684838 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.946223087 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.934205318 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.94637724 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.943579672 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.94489404 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.933566147 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.949698804 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.932657761 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.946305749 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.929474576 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.944526803 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.930108234 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.944663692 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.931424393 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.936173189 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.950407826 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.934789352 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.943364517 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.934830667 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.932357976 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.92991826 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.946214543 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.930541369 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.948567387 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.940905087 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.950842993 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.932819988 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.934879649 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.948080319 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.931793871 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.942387687 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.948908701 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.959173779 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.958349176 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.936940691 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.936437233 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.932916796 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.949799121 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.936007595 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.930352452 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.95370674 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.930526722 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.932316236 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.926886547 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.923558861 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.93038041 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.951527217 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.947501111 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.946941106 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.948455609 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.945767915 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.945936757 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.936014839 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.947793828 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.933688941 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.947126778 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.941650258 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.939062878 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.947457727 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.937435578 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.954824316 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.936506568 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.945295699 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.952920757 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.94733965 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.932205503 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.947234074 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.936732328 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.947666015 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.94702189 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.933110864 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.93435634 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.933762942 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.952114045 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.960191968 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.95013805 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.943637021 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.949880544 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.959199694 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.934931978 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.938272173 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.93542935 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.952882842 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.941212351 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.939444887 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.935545146 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.95574738 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.936586448 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.936227198 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.940730619 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.939394235 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.93396575 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.937206677 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.935860207 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.954721806 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.952316814 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.939693794 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.934555839 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.939194356 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.934309269 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.95004649 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.948348117 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.948968551 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.934896467 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.940701185 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.934422423 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.935272606 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.93564269 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.93599892 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.939052343 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.938862135 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.955163083 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.935488639 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.937943885 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.941892052 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.942594917 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.961901254 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.938668008 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.937337625 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.937679509 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.942831307 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.940308162 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.941721121 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.938261382 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.937360602 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.942787691 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.938763828 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.963927754 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.959180811 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.942309638 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.953109222 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.938794564 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.953536922 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.9631916 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.970588369 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.941196646 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.95762056 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.947657497 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.961490549 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.957045859 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.960260882 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.958150419 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.950064304 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.955448055 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.940088361 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.956333645 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.96774376 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.941439166 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.945497541 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.943444863 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.955962742 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.941907734 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.94493754 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.940638958 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.957748929 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.941588603 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.965946038 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.947267497 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.942668268 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.942669464 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.945169157 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.941965568 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.94677029 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.957898477 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.956334311 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.943539427 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.942194452 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.956644565 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.961177264 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.940843748 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.961650002 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.965557947 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.941648337 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.942816623 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.944564675 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.942187025 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.957416137 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.943050415 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.941189882 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.944930116 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.946187222 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.942177597 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.959539543 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.966070034 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.957227152 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.947368042 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.948959284 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.958891883 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.94289497 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.944583539 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.956387824 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.965840333 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.959842453 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.968339134 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.966245746 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.942057631 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.945826621 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.965438077 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.952736948 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.944076957 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.942875484 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.942104694 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.958232739 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.958983768 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.956406984 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.942275675 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.942456559 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.963609337 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.948850341 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.943891518 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.944980825 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.950227991 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.961620233 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.960704359 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.963566252 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.951423773 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.948829283 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.944281693 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.957647502 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.958217982 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.96105892 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.943084586 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.949123644 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.961226887 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.959815401 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.956260379 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.950362516 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.951703825 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.960983956 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.951657933 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.95190795 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.946719808 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.945661199 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.950030799 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.963127712 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.954928205 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.949751954 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.960584114 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.946320913 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.962815302 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.94678558 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.945290445 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.945976195 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.951772525 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.968499261 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.950896326 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.946354498 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.946524723 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.950749013 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.965315394 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.962798801 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.964892031 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.94777828 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.948337188 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.952371595 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.964844146 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.958922709 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.952949653 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.964340707 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.961585215 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.952148122 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.963234672 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.939554924 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.952100046 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.94632055 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.945972762 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.964387811 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.962260756 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.962111569 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.946294395 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.9623531 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.946308585 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.962530546 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.95106091 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.951918089 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.965062484 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.970755998 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.949182122 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.941600538 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.961225349 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.948606605 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.964739969 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.961117168 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.949115343 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.948892863 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.950212033 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.96284574 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.950647642 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.971199212 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.958273479 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.967392924 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.94862873 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.966328677 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.982317766 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.965374873 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.972284679 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.999251457 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.950199743 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.951928237 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.962913191 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.950949768 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.949768601 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.953847101 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.951050402 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.968685593 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.95194814 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.954838555 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.973257529 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.956840323 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.95376127 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.950319361 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.951987408 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.970820586 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.938452233 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.945517098 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.95217324 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.955464256 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.95109172 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.934677693 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.943606946 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.955467571 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.956595595 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.966053672 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.944167052 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.950845015 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.973023421 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.951170317 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.965720286 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.97850247 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.950378215 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.953186487 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.956242887 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.951567314 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.970092201 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.968140667 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.957213521 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.968380047 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.966920699 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.968555854 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.966350627 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.967488434 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.966900303 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.967460867 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.956757496 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.953349619 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.980201189 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.978973551 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.953577966 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.952831614 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.974953218 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.95624773 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.972988103 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.973638025 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.955919478 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.967067004 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.954348758 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.959037764 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.957904393 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.957528247 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.970935548 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.967741226 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.954168006 seconds)
  done (took 1160.037870908 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.95858708 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.959072655 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.959158642 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.958212756 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.960373716 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.959175142 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.958974679 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.957659093 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.96068763 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.95914476 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.959001474 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.958637904 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.958363996 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.959150743 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.958913558 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.958532005 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.957277703 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.959612688 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.959760716 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.959565038 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.960120098 seconds)
  done (took 43.017049962 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.960236358 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.958998476 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.045233405 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.107717247 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.108613293 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.109246484 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.108617118 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.113849686 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.106349756 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.106299356 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.104244225 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.112369049 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.106041047 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.105424457 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.106494707 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.108034876 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.10955178 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.107202246 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.106095246 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.106267635 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.106544271 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.110972213 seconds)
  done (took 47.892299254 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.107609744 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.108100884 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.120013484 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.111261012 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.111226373 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.106990811 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.108355081 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.109103713 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.10448967 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.106463024 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.129624683 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.122283161 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.118743639 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.108438681 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.113250744 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.106945099 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.258960222 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.110017386 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.10350234 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.113937791 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.105955436 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.126869431 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.114148047 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.111969016 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.106154268 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.109744805 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.113174611 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.106025627 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.104530437 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.103778458 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.106281701 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.107559214 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.115574902 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.11826414 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.10285989 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.102957379 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.10915569 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.099904613 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.106679155 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.106229638 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.123951666 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.134064785 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.103921652 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.097539703 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.11980121 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.107060052 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.100649667 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.114344733 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.110827693 seconds)
  done (took 105.596502273 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.103728383 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.10419845 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.102778719 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.104256437 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.091393944 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.107466476 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.103034202 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.105277837 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.105069172 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.103923058 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.106677171 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.106842511 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.107109068 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.105028343 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.108391923 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.104686191 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.104523802 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.106343586 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.106177772 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.108567599 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.102303393 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.101319519 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.10467465 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.103015957 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.108144877 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.102199598 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.103340931 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.101753719 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.101974295 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.105525264 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.100843662 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.101102595 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.1004217 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.584003981 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.10198992 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.102026814 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.10118492 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.10220556 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.104386319 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.102205716 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.103091836 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.103345781 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.102027657 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.104149198 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.102492813 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.103040384 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.102909993 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.108092183 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.098881538 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.096802502 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.097584025 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.097966152 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.097893031 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.09528263 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.096040111 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.097461242 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.095808616 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.098798371 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.097014824 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.097189078 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.09792541 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.097613057 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.099503287 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.097159449 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.098603898 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.096160091 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.097188043 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.097274067 seconds)
  done (took 145.427660483 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.098001867 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.09573193 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.097630591 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.098602525 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.09764882 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.097567096 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.097759588 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.099039654 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.096810679 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.095931338 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.09533452 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.09936203 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.100686742 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.100623374 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.097657192 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.096997315 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.10070087 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.098879061 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.093166489 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.096031755 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.093843692 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.10176325 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.098074595 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.100231196 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.096015207 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.097312177 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.10363929 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.096605417 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.099517748 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.098594519 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.098598444 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.107100549 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.097597034 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.099997489 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.096930064 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.09523515 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.107764006 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.097530719 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.097186215 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.099134196 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.104283903 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.098618967 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.097881856 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.100003802 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.097176681 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.104101087 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.089617001 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.090895426 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.092675055 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.090974401 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.099478824 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.091387013 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.092742535 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.093802515 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.09272123 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.098135042 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.089757023 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.092586441 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.093186358 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.094632398 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.095484826 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.096286979 seconds)
  done (took 132.051070556 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.095492768 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.097785302 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.092666073 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.091160113 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.090865086 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.089467006 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.094853039 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.089718133 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.09042868 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.0907292 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.089415292 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.102757386 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.093603125 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.094268706 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.093199771 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.094145246 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.096943132 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.093559817 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.092393574 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.090852834 seconds)
  done (took 43.88091058 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.094499784 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.09411637 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.094425036 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.093807428 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.093894546 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.091408528 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.093280617 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.092876486 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.093862974 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.095522851 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.089136886 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.088048007 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.088347973 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.090343628 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.092237275 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.090917139 seconds)
  done (took 35.489443381 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.088592112 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.088490647 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.08909343 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.087406223 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.0905765 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.090941676 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.090197323 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.09082091 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.090225051 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.089701901 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.089731712 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.090714767 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.089453961 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.088862432 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.09090021 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.089886959 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.087638396 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.088310424 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.087229403 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.089845239 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.090903202 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.091318392 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.087350155 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.090223851 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.087630659 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.087675391 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.08847562 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.08802534 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.086646815 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.089812873 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.094530326 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.090251369 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.090031702 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.089412137 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.08912268 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.092181273 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.087466722 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.087937707 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.090639726 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.089404457 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.095639769 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.087587249 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.089055805 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.089160911 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.089994591 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.091181234 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.089641035 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.087883517 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.088038123 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.090128291 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.08842553 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.08670085 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.086626991 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.087614757 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.088417702 seconds)
  done (took 116.924655411 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.086576268 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.086993659 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.086611935 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.090717205 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.090740786 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.085889043 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.085917656 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.086712797 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.092736251 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.087237296 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.085333398 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.085752439 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.088097285 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.08993442 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.087195843 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.086580209 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.088116058 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.085507998 seconds)
  done (took 39.584856272 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.084598273 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.086612563 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.084297926 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.091786629 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.087823874 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.081000028 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.08263072 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.081067217 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.090777295 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.082845703 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.082341419 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.084987566 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.084635814 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.091825865 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.084395222 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082479891 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.083757448 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.08322378 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.08411799 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.081736742 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.082750086 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.08496397 seconds)
  done (took 47.87283407 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.084417055 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.079436134 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.096062747 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.104218187 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.111941705 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.11739528 seconds)
  done (took 14.596685944 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083922963 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.081310507 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.089390872 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0813812 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081860423 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083560358 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082063013 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086149292 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083146367 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08371783 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.080190149 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083446126 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084601584 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08341012 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08213366 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080049462 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.082159925 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084303043 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.079857964 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.080956467 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081516371 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084941608 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.083396364 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082515073 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08073296 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.081562519 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087267391 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.080666507 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080945231 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081576056 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.079633977 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083873889 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08151337 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081025591 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.079846461 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081129428 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080967001 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079854783 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.080153639 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.07905302 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.079497423 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084817632 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080581255 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080692802 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.079294282 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08627962 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.078590033 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.079385044 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.080434337 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079318549 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084394526 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.079892363 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08075796 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.081992212 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081509473 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084291431 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08105919 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081038623 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082626387 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080962387 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087082423 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07944487 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080827307 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.07865578 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081088625 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083423629 seconds)
  done (took 139.411229273 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080257455 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.081959118 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082453281 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.079919083 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081005441 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081789745 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.080384133 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083223211 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083803679 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.078918702 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056195035 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082006696 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08479094 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08122571 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.081906823 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08541784 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.069529252 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087823214 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081126624 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085094398 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082603653 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083683979 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088343178 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08486052 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082632066 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082439414 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08500443 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.087181386 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083656474 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.0824363 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085028402 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083091472 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084561626 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.083765046 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083509882 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08337589 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084519593 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083693502 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.083679162 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082105699 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082981206 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08832376 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080997439 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.079524736 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08427618 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083160145 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089338848 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.070546665 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084110775 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082394586 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059118789 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08272467 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.085703147 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.085147096 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.054695269 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091034325 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.082841568 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085404596 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086624798 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084042185 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092768708 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084891457 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081443573 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083274191 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084080371 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.072112336 seconds)
  done (took 139.412628649 seconds)
done (took 2761.388045799 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.182012421 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.128538408 seconds)
  done (took 16.313604738 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.235178408 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.114543268 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.255625294 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.187886434 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.073331849 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.071717118 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.072411666 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.07660744 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.171523688 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.077114151 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.093861221 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.069966211 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.075223516 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.078612194 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.077678565 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.073998056 seconds)
  done (took 55.812224893 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.076695906 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.078047261 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.075551622 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.065699741 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.088748364 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.151493512 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.096448065 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.078127957 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.092854478 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.109322872 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.099545929 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.081789179 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.082859339 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.064585166 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.16661867 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.122200131 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.132159332 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.13981663 seconds)
  done (took 39.798256869 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.15605099 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.085340686 seconds)
  done (took 11.24431374 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.073137469 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.100365733 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.071456952 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.082814143 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.0820767 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.092167872 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.086376196 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.072578764 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.078156852 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.072528519 seconds)
  done (took 72.812117706 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.079490507 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.08075619 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.333819012 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.087762887 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.085060731 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.103874654 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.070255319 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.109475146 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.087461795 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.079272575 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.083081966 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.343412857 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.090958302 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.082616031 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.500346759 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.090013924 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.066145068 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.113651895 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.113914632 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.085870825 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.089203544 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.08424216 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.242923275 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.759260591 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.084056427 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.070689553 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.087789239 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.086355261 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.082469999 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.080992397 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.086562854 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.080346827 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.084616606 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.079612453 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.084663466 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.085175581 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.566259689 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.07831301 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.091964092 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.174017987 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.126404183 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.089310044 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.859969922 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.081078868 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.081218896 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.089594424 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.757892283 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.13637532 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.075204595 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.233506503 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.424166237 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.095887001 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.257430771 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.292023007 seconds)
  done (took 144.371339596 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.080605924 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.315572828 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.233485102 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.087561836 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.337421281 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.291358753 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.08331315 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.128590424 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.085591542 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.284668105 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.330203315 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.1840224 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.082763027 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.083902968 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.08004372 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.079285497 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.226075944 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.146665487 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.08297239 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.078374081 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.106640195 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.283539479 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.200376735 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.08403576 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.106516808 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.287038268 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.202200519 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.185773311 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.857924747 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.08123228 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.142011125 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.08535116 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.082915798 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.078118169 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.235778226 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.15263383 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.161761578 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.085391345 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.083488599 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.081837121 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.755739378 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.286969039 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.173838846 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.199800284 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.330691046 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.293761093 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.69172918 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.077894298 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.712839244 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.241891696 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.284386079 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.288442402 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.199588433 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.080735496 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.359725657 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.079686817 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.071686793 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.301818343 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.29413025 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.176898451 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.079664865 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.080013195 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.08528366 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.318929029 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.083951744 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.166543755 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.080952305 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.077025979 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.170690226 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.174647556 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.30024035 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.301782001 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.104689273 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.399108531 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.570620005 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.281129038 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.139985382 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.292843566 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.085880164 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.075928272 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.162474453 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.906073777 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.335363056 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.31940256 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.274504905 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.106243863 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.730768443 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.080855872 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.267584348 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.269602304 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.309774436 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.322216806 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.313600912 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.429888849 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.079555277 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.081363964 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.45066519 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.193448822 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.022431748 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.43188907 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.306903484 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.577504557 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.108424029 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.367150978 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.206900507 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.084497593 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.728442213 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.082396436 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.285718111 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.120087173 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.084469308 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.082850337 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.270492059 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.989563935 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082801603 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.809507458 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.143154056 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.082722699 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.285890519 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.084628727 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.328865132 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.081992573 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314584858 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.715980241 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.111714015 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.258998907 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.327595235 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.717817554 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.368309206 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.321241777 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.192522855 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305165666 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.889497123 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.085990134 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.343850627 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.0833222 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.082625949 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.251580766 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.088211229 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.22725961 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.08617783 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.350948739 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.099821379 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.312003294 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.0831315 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.319125934 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.11265058 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.13275662 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.085464426 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.20911145 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.088648819 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.925595047 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.23879062 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.087626253 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.083537404 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.678836733 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.085480688 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.237389874 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.30882868 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.102603246 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.153996449 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.649781959 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.084687168 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.166681499 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.102564985 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.725009196 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.0880284 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.335409712 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.060428198 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.574573828 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.086322739 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.317400401 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.268264401 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.089966003 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.084668882 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.928133262 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.08592889 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.084867371 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.240092893 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.075343694 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.993123053 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.281571272 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.087278276 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209694183 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.088572161 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.157937931 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.426502462 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.084444988 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.087209854 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.088581237 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.087306897 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.088242598 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.291337029 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.109985773 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.506287398 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.220147349 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.340881342 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.389602481 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.263595856 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.1218994 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.089000606 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.30419867 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.088958229 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.146096074 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.083518897 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.106785806 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.314917018 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.089534929 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.290564617 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.316814373 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.969149544 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.133836574 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.088696691 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.08608699 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.999468069 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.232769353 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.169090083 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.084050191 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.086942075 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.19532514 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.202206144 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.264744853 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.907910263 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.1942784 seconds)
  done (took 948.839970438 seconds)
done (took 1291.183048022 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.088193707 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.069496712 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.088356572 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.086918407 seconds)
  done (took 30.342237232 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.090652717 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.088073107 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.089006366 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.085614771 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.087916009 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.089273624 seconds)
  done (took 14.543017288 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.085450028 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.085352687 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.088090842 seconds)
  done (took 23.267548064 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.50732062 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.483261427 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.160441807 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.22223421 seconds)
  done (took 11.385240739 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.091730965 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.089279429 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.088336669 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.087645366 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.089445866 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.091534413 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.089932421 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.089935132 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.089064185 seconds)
  done (took 20.825486654 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.299936185 seconds)
done (took 106.67291271 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.175816078 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.193972011 seconds)
    (3/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.130245946 seconds)
    (4/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.08813119 seconds)
    (5/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.411498332 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.322844816 seconds)
    (7/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.443127385 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.145620889 seconds)
    (9/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.0875976 seconds)
    (10/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.087345802 seconds)
    (11/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.234545908 seconds)
    (12/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.234088322 seconds)
    (13/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.511026341 seconds)
    (14/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.100721016 seconds)
    (15/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.123030098 seconds)
    (16/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.229414077 seconds)
    (17/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.186821447 seconds)
    (18/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.104975723 seconds)
    (19/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.414566707 seconds)
    (20/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.184253976 seconds)
    (21/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.399873399 seconds)
    (22/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.115893877 seconds)
    (23/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.310112906 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.114753194 seconds)
    (25/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.423925257 seconds)
    (26/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.234565189 seconds)
    (27/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.096852699 seconds)
    (28/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.168271134 seconds)
    (29/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.531409749 seconds)
    (30/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.178198339 seconds)
    (31/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.204530941 seconds)
    (32/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.864450253 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.472662146 seconds)
    (34/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.219152826 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.128395772 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.117802852 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.161802517 seconds)
    (38/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.463061985 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.235261675 seconds)
    (40/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.452159479 seconds)
    (41/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.199308075 seconds)
    (42/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.309792298 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.25359823 seconds)
    (44/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.874438638 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.207815009 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.355773345 seconds)
    (47/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.115330051 seconds)
    (48/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.138799603 seconds)
    (49/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.230144225 seconds)
    (50/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.25355325 seconds)
    (51/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.301861141 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.531521099 seconds)
    (53/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.501006021 seconds)
    (54/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.906588772 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.124882854 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.192433901 seconds)
    (57/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.146781771 seconds)
    (58/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.134061465 seconds)
    (59/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.432652313 seconds)
    (60/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.034702042 seconds)
    (61/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.906442383 seconds)
    (62/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.127270518 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.116297884 seconds)
    (64/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.572823351 seconds)
    (65/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.359013621 seconds)
    (66/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.274087485 seconds)
    (67/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.369835816 seconds)
    (68/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.117077222 seconds)
    (69/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.22776501 seconds)
    (70/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.117742531 seconds)
    (71/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.569993208 seconds)
    (72/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.11585766 seconds)
    (73/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.862865669 seconds)
    (74/341) benchmarking ("sort", Float64, false)...
    done (took 5.829831079 seconds)
    (75/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.093909557 seconds)
    (76/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.514682213 seconds)
    (77/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.996016301 seconds)
    (78/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.327721103 seconds)
    (79/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.124671454 seconds)
    (80/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.141503448 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.142011243 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.223101405 seconds)
    (83/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.212257435 seconds)
    (84/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.526007866 seconds)
    (85/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.328047263 seconds)
    (86/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.130068181 seconds)
    (87/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.428403051 seconds)
    (88/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.20745621 seconds)
    (89/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.200938703 seconds)
    (90/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.253070766 seconds)
    (91/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.121397017 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.117581988 seconds)
    (93/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.250936415 seconds)
    (94/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.43824453 seconds)
    (95/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.449731436 seconds)
    (96/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.577786139 seconds)
    (97/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.716386681 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.390725831 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.427620434 seconds)
    (100/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.119714681 seconds)
    (101/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.248479661 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.261093429 seconds)
    (103/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.429312897 seconds)
    (104/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.118029038 seconds)
    (105/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.224351741 seconds)
    (106/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.207698956 seconds)
    (107/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.254624488 seconds)
    (108/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.123719578 seconds)
    (109/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.34240908 seconds)
    (110/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.472139902 seconds)
    (111/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.354364988 seconds)
    (112/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.121583134 seconds)
    (113/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.149554821 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 5.790704584 seconds)
    (115/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.261988091 seconds)
    (116/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.220391112 seconds)
    (117/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.317849908 seconds)
    (118/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.236138785 seconds)
    (119/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.233164097 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.062843174 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.566643756 seconds)
    (122/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.130225777 seconds)
    (123/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.602422947 seconds)
    (124/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.519007897 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.337433459 seconds)
    (126/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.118434405 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.505508817 seconds)
    (128/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.39243555 seconds)
    (129/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.250176845 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.361074979 seconds)
    (131/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.826857347 seconds)
    (132/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.41994289 seconds)
    (133/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.129086807 seconds)
    (134/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.928544801 seconds)
    (135/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.28843328 seconds)
    (136/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.383006229 seconds)
    (137/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.523432632 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.242246931 seconds)
    (139/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.138291117 seconds)
    (140/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.412548912 seconds)
    (141/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.06143079 seconds)
    (142/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.006559762 seconds)
    (143/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.130935071 seconds)
    (144/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.196761594 seconds)
    (145/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.210873611 seconds)
    (146/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.174186364 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.542690338 seconds)
    (148/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.121662534 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.214968309 seconds)
    (150/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.336160406 seconds)
    (151/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.370537664 seconds)
    (152/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.356009354 seconds)
    (153/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.141090213 seconds)
    (154/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.538012068 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.368090663 seconds)
    (156/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.132771644 seconds)
    (157/341) benchmarking ("sort", Bool, false)...
    done (took 2.337464369 seconds)
    (158/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.140736886 seconds)
    (159/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.124155096 seconds)
    (160/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.156083553 seconds)
    (161/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.354358327 seconds)
    (162/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.124808922 seconds)
    (163/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.460841428 seconds)
    (164/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.437373556 seconds)
    (165/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.344169545 seconds)
    (166/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.36164613 seconds)
    (167/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.136412113 seconds)
    (168/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.724039744 seconds)
    (169/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.394203799 seconds)
    (170/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.577888618 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.409396593 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.146588004 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.137297886 seconds)
    (174/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.272427788 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 5.772610716 seconds)
    (176/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.123180134 seconds)
    (177/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.231392549 seconds)
    (178/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.532864029 seconds)
    (179/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.098285874 seconds)
    (180/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.847562135 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.160795769 seconds)
    (182/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.235885648 seconds)
    (183/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.527761119 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.337240791 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.256616374 seconds)
    (186/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.125848289 seconds)
    (187/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.140610774 seconds)
    (188/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.139599106 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.273216345 seconds)
    (190/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.228232222 seconds)
    (191/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.248572418 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.230381046 seconds)
    (193/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.145841262 seconds)
    (194/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.259581734 seconds)
    (195/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.001184421 seconds)
    (196/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.130913234 seconds)
    (197/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.126581614 seconds)
    (198/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.15277301 seconds)
    (199/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.125070665 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.426541673 seconds)
    (201/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.516819001 seconds)
    (202/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.410374391 seconds)
    (203/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.546043626 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.265841725 seconds)
    (205/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.73201675 seconds)
    (206/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.198551231 seconds)
    (207/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.66923278 seconds)
    (208/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.123870697 seconds)
    (209/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 4.072127098 seconds)
    (210/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.284623598 seconds)
    (211/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.927295318 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.536265618 seconds)
    (213/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.426898285 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.258476061 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.52599369 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.145540783 seconds)
    (217/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.826865 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.448044683 seconds)
    (219/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.210051804 seconds)
    (220/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.15740919 seconds)
    (221/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.545556764 seconds)
    (222/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.262480739 seconds)
    (223/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.251885481 seconds)
    (224/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.209295754 seconds)
    (225/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.127047504 seconds)
    (226/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 4.537010542 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.29213602 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.127148658 seconds)
    (229/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.04210251 seconds)
    (230/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.269569071 seconds)
    (231/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.322026595 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.847764924 seconds)
    (233/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.397266818 seconds)
    (234/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.260929848 seconds)
    (235/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.141685096 seconds)
    (236/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.113248858 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.471872503 seconds)
    (238/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.838503233 seconds)
    (239/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.125169478 seconds)
    (240/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 4.544204901 seconds)
    (241/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.148219727 seconds)
    (242/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.231442557 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.810565365 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.428746582 seconds)
    (245/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.130709197 seconds)
    (246/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.41017892 seconds)
    (247/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.764858227 seconds)
    (248/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.837596987 seconds)
    (249/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.26265417 seconds)
    (250/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.567043004 seconds)
    (251/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.270563336 seconds)
    (252/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.213300139 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.401293177 seconds)
    (254/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.539498691 seconds)
    (255/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.872442656 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.207294351 seconds)
    (257/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.195659655 seconds)
    (258/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.242320036 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.463771232 seconds)
    (260/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.128012222 seconds)
    (261/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.236595228 seconds)
    (262/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.904738095 seconds)
    (263/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.35056859 seconds)
    (264/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.265793595 seconds)
    (265/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.288632424 seconds)
    (266/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.215057817 seconds)
    (267/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.606562407 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.127321587 seconds)
    (269/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.423555777 seconds)
    (270/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.258792703 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.263598351 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.245400921 seconds)
    (273/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.134604518 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.146421762 seconds)
    (275/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.12898314 seconds)
    (276/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 5.511954379 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.13730708 seconds)
    (278/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 9.599443016 seconds)
    (279/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.232344491 seconds)
    (280/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 3.733352644 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.127396751 seconds)
    (282/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.13922831 seconds)
    (283/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.622322995 seconds)
    (284/341) benchmarking ("sort", BigInt, false)...
    done (took 7.128498301 seconds)
    (285/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.073990356 seconds)
    (286/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.303892458 seconds)
    (287/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.415620177 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.128224436 seconds)
    (289/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.195022616 seconds)
    (290/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.347599976 seconds)
    (291/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.592211893 seconds)
    (292/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.2540932 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.131808329 seconds)
    (294/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.578459525 seconds)
    (295/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.316673753 seconds)
    (296/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.536656058 seconds)
    (297/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.408907529 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.111341779 seconds)
    (299/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.256273509 seconds)
    (300/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.516498233 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.256818753 seconds)
    (302/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.148678259 seconds)
    (303/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.143552704 seconds)
    (304/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.076280583 seconds)
    (305/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.506724518 seconds)
    (306/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.372685847 seconds)
    (307/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.132362192 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.993043774 seconds)
    (309/341) benchmarking ("sort", Int8, false)...
    done (took 5.081598734 seconds)
    (310/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.343414315 seconds)
    (311/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.522365334 seconds)
    (312/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.525862457 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.356427961 seconds)
    (314/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.14683762 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.883667581 seconds)
    (316/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.207391005 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.232135829 seconds)
    (318/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.830812183 seconds)
    (319/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.413406456 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.954617151 seconds)
    (321/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.567071948 seconds)
    (322/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.430869733 seconds)
    (323/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.447557738 seconds)
    (324/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.606613304 seconds)
    (325/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.233240298 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.262339878 seconds)
    (327/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.446403078 seconds)
    (328/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.264713435 seconds)
    (329/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.15739055 seconds)
    (330/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.282511687 seconds)
    (331/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.413375345 seconds)
    (332/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.404117624 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.311258172 seconds)
    (334/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.202675691 seconds)
    (335/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.330754897 seconds)
    (336/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.250390758 seconds)
    (337/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.127255642 seconds)
    (338/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.180281747 seconds)
    (339/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.331543159 seconds)
    (340/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.139204179 seconds)
    (341/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.304504246 seconds)
  done (took 1182.60229675 seconds)
done (took 1184.717196022 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.152932663 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.135730597 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.649274318 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.144615583 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.13444558 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.141016665 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.662167223 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.164729515 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.152980427 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.658927845 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.143377907 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.137208749 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.150873832 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.172677409 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.147993179 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.151056648 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.141361355 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.161091515 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.170099224 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.143194391 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.188286328 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.144565835 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.135014716 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.18820876 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.138497796 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.150776896 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.155644527 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.190047988 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.186300145 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.140359032 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.142970473 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.501515213 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.18843953 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.142780078 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.148847823 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.152927872 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.142978676 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.154764698 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.157826055 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.152162143 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.138781997 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.147342463 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.142376616 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.143304594 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.139286944 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.139472355 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.140877844 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.263714613 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.152364154 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.484976074 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.197817176 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.157089 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.189468444 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.144508703 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.141719963 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.141096641 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.189919763 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.145203569 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.143240619 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.482841846 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.232894291 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.155314978 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.483656203 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.202233611 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.148530666 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.147558253 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.138555145 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.15812168 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.50285921 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.704424242 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.169681307 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.160977073 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.142183839 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.142091058 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.153232984 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.662967249 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.151331367 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.73222805 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.166037739 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.156291329 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.14632846 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.142809001 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.1435144 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.158577139 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.161441532 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.140004002 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.147164761 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.146554575 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.153358536 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.504306299 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.185730171 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.653827136 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.147770862 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.163176971 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.159987724 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.732892547 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.166312463 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.161306045 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.145351786 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.503602999 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.183820173 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.160905462 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.146065904 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.153312228 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.258224403 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.161669392 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.161429836 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.143227431 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.161718308 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.147670811 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.143817164 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.157433308 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.162629374 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.17752317 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.160197376 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.141789876 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.150868366 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.148047573 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.160779582 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.152676996 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.148916076 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.152152018 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.143123039 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.194443134 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.160998995 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.158189389 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.257076212 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.147295634 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.268186082 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.158812154 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.149190163 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.142916443 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.487754713 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.187470321 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.163098978 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.150071231 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.167516701 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.163385655 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.160407124 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.146702141 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.158420975 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.146803931 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.195336571 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.145089893 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.168408033 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.194846936 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.157468297 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.150457347 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.162548347 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.177245375 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.163760588 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.146095294 seconds)
done (took 337.18720888 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.190675225 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.142417269 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.222611123 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.142881334 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.211656349 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.19781266 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.145471948 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.147302819 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.144711864 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.541693312 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.143223675 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.149765401 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.144226542 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.143798072 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.190058532 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.144379678 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.144885345 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.380458341 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.146332145 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.204109378 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.143535983 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.145081888 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.1452815 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.543205139 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.144256651 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.144803108 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.207678212 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.145403826 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.388743184 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.144014377 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.145400724 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.386739045 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.206977942 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.160172293 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.15939769 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.153427157 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.217949791 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.158889666 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.195031449 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.19568091 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.22685062 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.181129538 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.14821468 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.147814362 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.154593901 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.150764871 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.15100309 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.182605459 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.146996993 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.156064386 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.385734285 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.155772897 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.157431988 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.149556184 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.151070452 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.162413634 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.149986834 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.151335087 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.210127567 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.150104916 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.196307717 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.546697363 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.548390851 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.150514251 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.147066725 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.151880486 seconds)
  done (took 202.284228721 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.216170762 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.237360361 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.216267317 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.15222109 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.202321488 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.217459498 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.152906817 seconds)
  done (took 17.462420704 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.157399394 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.150419509 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.171739592 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.171890854 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.15084484 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.287820286 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.162592465 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.157745576 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.177374302 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.148734721 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.484514097 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.173110548 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.161736658 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.150124036 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.162502846 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.180651375 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.153843359 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.15271994 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.249682756 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.229184158 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.158464375 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.159564884 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.180783499 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.162400186 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.15322782 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.151556714 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.152979633 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.158591993 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.15350252 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.152947736 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.15374008 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.164612109 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.154517107 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.150023845 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.155205383 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.153609776 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.152572445 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.155534653 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.153746502 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.151807637 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.154913103 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.154488525 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.154445773 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.154371488 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.154026873 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.174753609 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.154062113 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.154452068 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.154312284 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.154972348 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.18213415 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.155531718 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.153668308 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.159379369 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.194059713 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.162724201 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.144718611 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.154576574 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.155333672 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.158769394 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.152104424 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.233352194 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.176766917 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.155643674 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.177914604 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.191401026 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.139096434 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.147071095 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.155247219 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.178412956 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.155621421 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.1661328 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.156971305 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.253047949 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.155987311 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.296198914 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.17587473 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.15874074 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.157847037 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.152344358 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.161793392 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.156166366 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.157532807 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.16232352 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.162153703 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.157089834 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.15700588 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.155066423 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.16124634 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.156505543 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.199994614 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.158093732 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.155823925 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.250354667 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.15512134 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.253668771 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.181101643 seconds)
  done (took 232.698311837 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.159120368 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.156659562 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.168990885 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.156692894 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.142969081 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.159496831 seconds)
  done (took 15.014916739 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.157051392 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.161371487 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.155661521 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.155471847 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.155365593 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.155498589 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.157765744 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.159150479 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.161235952 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.15854646 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.15742582 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.157770265 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.156288613 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.156689557 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.159414741 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.156323351 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.157945869 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.157056421 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.158021028 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.156092803 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.410270192 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.156023233 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.156503201 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.160689071 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.163425062 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.159158389 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.166175865 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.157611009 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.157415668 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.162165874 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.164368205 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.15558735 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.158661562 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.164267356 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.162616455 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.160058213 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.164601192 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.158311965 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.160162401 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.158986623 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.158341244 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.159087935 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.158863778 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.158252452 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.159809882 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.165208966 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.160424456 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.165412871 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.158896852 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.158982362 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.157983585 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.160485202 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.158056326 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.158815034 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.163882731 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.165821899 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.163701529 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.160613064 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.161345941 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.16165874 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.164165158 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.159123805 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.162480071 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.166284507 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.16684986 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.160081107 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.161436788 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.164528179 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.158212529 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.161031573 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.16132828 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.161397123 seconds)
  done (took 158.844668927 seconds)
done (took 628.364211425 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.23851235 seconds)
  done (took 9.314713119 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.31346003 seconds)
  done (took 9.486836719 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.715889983 seconds)
  done (took 12.798249707 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.184187769 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.188239387 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.169901173 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.154183475 seconds)
  done (took 30.788295401 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.369307427 seconds)
  done (took 9.447524472 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.17556496 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.153185325 seconds)
  done (took 16.470703911 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.322729883 seconds)
  done (took 9.402485157 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.212963642 seconds)
  done (took 9.31750418 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.166055118 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.19674159 seconds)
  done (took 16.458421198 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.162896168 seconds)
  done (took 9.240773603 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.936312805 seconds)
  done (took 10.095900006 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.166231124 seconds)
  done (took 9.263787431 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.227717373 seconds)
  done (took 9.308219988 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.190502063 seconds)
  done (took 10.268244946 seconds)
done (took 173.739456177 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.170578992 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.161777204 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.157181273 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.158020023 seconds)
  done (took 30.724874923 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.196260396 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.19910264 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.205998166 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.197050456 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.187583902 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.188545244 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.199014693 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.198563092 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.188424529 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.196502005 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.198626614 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.190187525 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.193052562 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.202482489 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.202257128 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.190365336 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.193010832 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.194428485 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.184209652 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.200474238 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.191375382 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.19368728 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.157086391 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.158844643 seconds)
  done (took 54.687055327 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.348653961 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.223417536 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.309620275 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.203508102 seconds)
  done (took 11.159125041 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.15979067 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.223020691 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.209797725 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.208071845 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.21044162 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.262379979 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.212015414 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.312500628 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.286911084 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.283515114 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.165075356 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.179734137 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.183141329 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.203057593 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.267457528 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.156684575 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.159217421 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.273961427 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.221676474 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.326202616 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.158938039 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.213114432 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.211608296 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.21013391 seconds)
  done (took 55.37469359 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.161102647 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.165580548 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.1665227 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.158555576 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.16177831 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.161867088 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.16829042 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.161917736 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.181349114 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.162941818 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.160386399 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.159219648 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.164522517 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.159949851 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.160870635 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.170197336 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.175946028 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.163002528 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.164946486 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.170215817 seconds)
  done (took 45.373155477 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.157208324 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.006099471 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.506718202 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.411008722 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.157499597 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.155289024 seconds)
  done (took 33.469008862 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.172182411 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.173984848 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.168411075 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.186443621 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.211056426 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.16558454 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.218981481 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.323611055 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.165562612 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.217540058 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.178258184 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.16804511 seconds)
  done (took 28.42983448 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.159090031 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.159592252 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.159180642 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.169955814 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.171337538 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.164339972 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.167212377 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.158827231 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.171541335 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.177229769 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.166588547 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.174814695 seconds)
  done (took 48.077521626 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.378968509 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.389808036 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.378646621 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.767934896 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.481327509 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.144212514 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.446982336 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.375150747 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.914241029 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.873481063 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449883945 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.143767765 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.110738838 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.08784233 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.081655811 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40584826 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.163077366 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.020006618 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42406633 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.208125025 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167244981 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.162997384 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164896891 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.450326163 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.490986543 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163496127 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.376122058 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.178464698 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.164312093 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430488154 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.757195482 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.217441065 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.365985118 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.422438754 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.508939349 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.32792935 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.170280616 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.354512494 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.207867311 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197124539 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171510107 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.175679165 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.712182 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.174483103 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435709195 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166283043 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.274081919 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.155563988 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08818441 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.46610361 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27805407 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.167506192 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.203127351 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.599966852 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284521879 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.410503244 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172032488 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.357614597 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219775876 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.402728922 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.372402607 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.171307117 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.37955883 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092183616 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.54111469 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29191486 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.169111512 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170420521 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.86625724 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.410542553 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.245333727 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.468842139 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.927710086 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.17146732 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.169291788 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.209578143 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.267310067 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.163532047 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.465391927 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.172246607 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.091644772 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.263487214 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.562053316 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173726982 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.165334889 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176725822 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.016943845 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096137347 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.265000467 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.396931161 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.488826616 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.168757222 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.169587812 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.192601084 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171212268 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.114388487 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.743752166 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.231302023 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.093705825 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.733759989 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.779586787 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.114210404 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.644191801 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208918753 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444894286 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.328145856 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.572170563 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.374153803 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.414832804 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.694985331 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.171890423 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.728336612 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.251563193 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243353931 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.166646733 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.72777914 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.364851314 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.438173421 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.283390922 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.167885259 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.094667979 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.17640034 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.372674686 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.773442558 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.221203765 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165167928 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.176484258 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.167432982 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1734914 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.283063422 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186279024 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.455364201 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.240603375 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.167862455 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.104983817 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.170786835 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.454010897 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.846968056 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223048824 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.41946163 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.439687848 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.870139503 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765296937 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.11396632 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.443170212 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.24592343 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245328415 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.739358417 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.301072895 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.263658704 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.168148216 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.288574054 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.170994612 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.172560976 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.57299032 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.578457431 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.595155587 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.212196045 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.166945143 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.123085387 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.360409696 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409870171 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.236132119 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.192452585 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175773119 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255261123 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398828202 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.171322666 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097621925 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.416912027 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412689099 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.458924281 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.582711843 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.23447604 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.240823799 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.183032437 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.382175641 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.250912138 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.843075418 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.692731066 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.387614057 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.753009834 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.136180039 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.812498135 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.410979067 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.553988156 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190764052 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.622052316 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.353478489 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.8648687 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.183078085 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.702588778 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.10197972 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180792417 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.510714852 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.129992137 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.485609029 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.25533355 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186346214 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.173776677 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.173349831 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182281536 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.094413509 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.277684732 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.240165073 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245534255 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098887654 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.830666364 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.212765213 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.17701773 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.173763718 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.478864561 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.046239158 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125498962 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.174323183 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252475063 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.918033313 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.722995466 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.173265859 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.177336785 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.784563591 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.17596986 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.079194247 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.29383988 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.937349076 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193866414 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.417158587 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.874792009 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460241795 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.249722845 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251681682 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.174276498 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184569843 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.877118617 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.183218789 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.875556982 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.460718867 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.452385511 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.618239797 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.238283508 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.381629491 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.191748929 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.175531064 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.691327533 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.200852947 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177674466 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.382228053 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.694787203 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.478213726 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.820303649 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.265228141 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.170354558 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.445482747 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.184109274 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.772148591 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.863064057 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.177623991 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.176634954 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.431954943 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.862777413 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.17873869 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.157682674 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184731752 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.391329866 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.380139872 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459334115 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.47281414 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.627631689 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.101780916 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.182845561 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.235166716 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.423231204 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.175534081 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214502036 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.620923837 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.246018003 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.60620633 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.457518069 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.538448473 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.810382349 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.44209399 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.240665347 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.188579118 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.832065737 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.30690211 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.110559563 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.296817709 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.106614156 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.932385678 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.469368243 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.197220625 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.444705017 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.162742522 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514243223 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.477631087 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.422178929 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.225741891 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.205168193 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.181056411 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.217373323 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.178107101 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.385053543 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.295677207 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.18388561 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.732008829 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219527456 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227979179 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.186131332 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.713288246 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199036931 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181285327 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.875675672 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.205160253 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301874863 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25328716 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.935502532 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.8152349 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.203741452 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.13249241 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.004811379 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.455428035 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.238058942 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.625168758 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220906096 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.586529427 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.181691051 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.396166576 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.187211495 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.768448652 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225706724 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443346217 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125304259 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.384879206 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.382551751 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.207991449 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.185989002 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109337789 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.288488527 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.080542121 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.165380922 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.183220898 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.866816182 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.585555787 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.407868428 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.622736448 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.002046179 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.185647059 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.541641381 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.582325444 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.817066871 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213256779 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186355646 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.485995127 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.316013137 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.463188227 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.476415521 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.190785988 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.212425493 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397564459 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31160001 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.102981667 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.662836835 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.76739079 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.882038789 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.193989935 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.385071771 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.486832111 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.486008691 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215105809 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.259675149 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.588731284 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.454901917 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.253353995 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.107432483 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.177185353 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.579812638 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.585303952 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.279482708 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.42815796 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.494307491 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.825084925 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.789624844 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.639170918 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.586537075 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.628035644 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.588663523 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.393084375 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.562259914 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.51196417 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.068461521 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.599473942 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.399778506 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.28334415 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469277551 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.059470075 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.896318071 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.429539326 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.192193293 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.114901006 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.396394305 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.190813492 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.602263383 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.756498381 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.435173181 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.422154057 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65236413 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.728515525 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.395218254 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.20953069 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.15521222 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209759738 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.208149452 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.190381141 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.667022414 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.475351584 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.202266867 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12750607 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.858296356 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.114265787 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.402543559 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.390696155 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.221632144 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.746088918 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.416464627 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.288300151 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.480724535 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.447708138 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.220887901 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.114500139 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.891587154 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.13536478 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.250585501 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.613670501 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20382554 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.191765877 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391736331 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.118515899 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235124196 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.190898104 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.389086636 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.770876115 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.466667731 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314697418 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.433321283 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.493334154 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.0518425 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.208492156 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464770759 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.118992567 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.829140355 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.86900018 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.228321553 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259181132 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191777561 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194310534 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.45901958 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.491543219 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.274391293 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.90621792 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.222102391 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.214487168 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.482512332 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.27515003 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.192207708 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.196582325 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.681381102 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.419995072 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.174138256 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.162535242 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.40376911 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264728344 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.389609062 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.264282653 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.706388465 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.19628423 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.043207253 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287430929 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.142749702 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.189170117 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.951820555 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.251554031 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.192322665 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.466907195 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.845558101 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.393867971 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.589770632 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.097236779 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.398821507 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.231967316 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.197809915 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.195846444 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.592246924 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.494804093 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.192862882 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.46146225 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239269737 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.194312037 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.857557784 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.157461722 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.192219969 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.940502139 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.090904709 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.92033286 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.586626238 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.256796096 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195417893 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194999288 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.121833997 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.19172779 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.357159784 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.181000582 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.194855175 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.557117687 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.475869295 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.279188938 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199358384 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.192910458 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.199553586 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.405493012 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.706944262 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209853667 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.894191331 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398477555 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.201946187 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.674831977 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.632519138 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.465979868 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.230158332 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.404105077 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.432762933 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.733607598 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.407170645 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.164802954 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.418277307 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.19771201 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.468991995 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471921919 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.198296745 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.409944271 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.807650782 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.477646607 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.549086692 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.507026069 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.258300217 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.408773833 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.106292993 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.197222853 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.19712949 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.460813022 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250003841 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.195079666 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.203992368 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.749654015 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.952858884 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.66144016 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354942325 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.495810633 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.982745489 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.946814407 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.20258825 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.12291214 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.193683018 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.220234287 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.19928526 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.121650023 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.880709185 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.921133098 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.41284533 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.50592331 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.123620614 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.402617896 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781351369 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.120770249 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.163554342 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.212492852 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.441339674 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.12403107 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198529068 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.153128974 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.437341753 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.92755362 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460724586 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.197364091 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143737287 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.195864512 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.196380358 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.193434519 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.281246697 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.198627032 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.313027316 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.461403114 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.533853493 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.29918699 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.838315025 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.947352765 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.135492712 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.235823836 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.813974408 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.768347688 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.444638422 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.321516297 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.886385182 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.141388666 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.202280914 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215571471 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.441257796 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.200756595 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.199657509 seconds)
  done (took 2269.184759403 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.233310232 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.223187469 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.254810371 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.21836998 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.253420295 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.288855481 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.272512729 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.220990404 seconds)
  done (took 60.078607695 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.195867563 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.169587308 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.200244896 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.199268144 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.194746766 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.197697845 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.394096535 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.225911004 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.197144549 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.199402716 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.174378207 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.210317129 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.207766792 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.200591901 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.221262469 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.503506108 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.227078648 seconds)
  done (took 82.072826515 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.260190638 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.019170187 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.204607812 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.884009252 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.251993358 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.545467732 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.207716488 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.20776287 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.30979077 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.502388446 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.250346382 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.223971142 seconds)
  done (took 93.99573796 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.208636059 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.207875554 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.204851617 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.199598653 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.208833092 seconds)
  done (took 13.153328123 seconds)
done (took 2827.918252457 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.456364152 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.303439363 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.278328327 seconds)
  done (took 6.70450854 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.348207347 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.403482589 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.511487053 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.519854135 seconds)
  done (took 11.91196049 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.499875562 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.578413197 seconds)
  done (took 7.202773559 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.577258578 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.217827505 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.599545862 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.211875818 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.21309933 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.200117486 seconds)
  done (took 23.753909275 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.21217711 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.210991278 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.182113907 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.211258908 seconds)
  done (took 10.943034437 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.206283511 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.993604056 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.206100142 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.217791914 seconds)
  done (took 22.748333505 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.348119787 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.221779174 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.975413396 seconds)
  done (took 10.670000005 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.832088216 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.661764622 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.820667611 seconds)
  done (took 10.438235647 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.389014028 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.195768432 seconds)
  done (took 8.708971944 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.358767515 seconds)
  done (took 4.483314239 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.040641785 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.524007523 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.679148475 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.728380306 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.78826132 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.42632736 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.52956702 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.474991594 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.603735373 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.64968327 seconds)
  done (took 28.57278006 seconds)
done (took 163.112756961 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.647153215 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.226123323 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.41790251 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.587334598 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.449012559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.419195675 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.504135527 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.578522276 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.259204687 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.247963206 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.587546513 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.451232468 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.450014714 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.228414213 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.464773998 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.224494215 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.450517676 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.669449344 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.270097107 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.506243088 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.516181113 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.232851878 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.424893302 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.248472886 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.446669877 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.369123124 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.837548529 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.226211476 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.421738985 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.851105574 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.367839056 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.657446685 seconds)
  done (took 180.366386837 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.106188852 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.208551508 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.185424205 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.209430833 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.53240307 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.208178499 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.211199521 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.210860562 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.471250414 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.464615322 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.208890927 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.5096428 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.203144683 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.200872948 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.204218547 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.203231848 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.595722237 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.129409822 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.200851575 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.201572342 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.205418422 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.391271391 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.203964253 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.420404956 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.575823205 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.205323999 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.201989774 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.203243645 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.205379463 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.201803874 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.205482752 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.203461258 seconds)
  done (took 218.821152663 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.205325394 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.204496756 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.203705527 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.204484458 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.203708903 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.203921923 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.201923422 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.200339986 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.964205309 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.954796707 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.207842315 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.208163281 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.208528814 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.202572937 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.206493183 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.20735264 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.204083394 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.20421831 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.207521758 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.208633285 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.202764542 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.069448747 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.20498016 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.103141023 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.20532046 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.191715101 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.20831019 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.204940243 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.205940464 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.206330892 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.209929927 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.208827095 seconds)
  done (took 231.963177849 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.457527958 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.215022058 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.214853453 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.220665723 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.214057232 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.211542598 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.202325363 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.455373203 seconds)
  done (took 22.31639964 seconds)
done (took 655.606551993 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.612831381 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.97661182 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.340252984 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.234072004 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.500824122 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.275757228 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.230874446 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.298521787 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.877126611 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.305276282 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.647378797 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.242450517 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.989385849 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.262347431 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.352834671 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.298996717 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.583605032 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.845095239 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.368700937 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.916215148 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.441107522 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.193885577 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.319018202 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.92802518 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.669103306 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.214767905 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.262188259 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.588127676 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.241488718 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.473947369 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.922059301 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.500301204 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.250552666 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.235397884 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.294693263 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.281641333 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.440045787 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.246911869 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.343045519 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.986053685 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.903050992 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.766591643 seconds)
  done (took 114.786160938 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.227137947 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.226060736 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.225320434 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.224020994 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.233653625 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.224873918 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.223521285 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.224946563 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.224917418 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.225665599 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.226251303 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.235580921 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.226254224 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.233278387 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.226209828 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.225672875 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.226095607 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.235107838 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.22455576 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.228020029 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.226382137 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.226735152 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.223089554 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.228276965 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.227788356 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.228077107 seconds)
  done (took 60.0524096 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.225281714 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.373819469 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.511001718 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.250630722 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.223195695 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.225965438 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.251461124 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.229139106 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.227287905 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.225906415 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.335166765 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.223616702 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.234752953 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.510131955 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.246314621 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.225977777 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.224784107 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.224993851 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.381617025 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.234191674 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.253520416 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.231561768 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.253460504 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.239413444 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.226192345 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.224724122 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.226291776 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.685866445 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.232154546 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.338121717 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.264465062 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.254015995 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.615002671 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.52254969 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.288614978 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.228050918 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.224295807 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.384720301 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.231765201 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.224824494 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.252566214 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.230230246 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.516070457 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.749866944 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.236358043 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.226109523 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.686135612 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.39721003 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.269052179 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.234995744 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.523838286 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.252851741 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.226217863 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.226153371 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.264913588 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.234484883 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.224943778 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.50646173 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.237202107 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.253939361 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.23390278 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.22815562 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.388977493 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.232852136 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.377710055 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.231786115 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.23350031 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.227417032 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.520983368 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.251124514 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.747167236 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.237455611 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.228716738 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.33840859 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.377368463 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.711272536 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.221823332 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.391369081 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.625383912 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.261395343 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.237558355 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.675417395 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.264951393 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.236557481 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.231367572 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.228093279 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.229153571 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.272370216 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.252656661 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.663923087 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.747749329 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.521694912 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.249315188 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.227982484 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.230277195 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.508761331 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.236530499 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.230711521 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.510403006 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.772943011 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.240779775 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.236351605 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.728210273 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.24295447 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.257716282 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.236657802 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.530097069 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.255456523 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.271567975 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.230150044 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.232964271 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.231891772 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.25687442 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.23596259 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.2314424 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.722820967 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.401167208 seconds)
  done (took 274.760691839 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.23066788 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.225709851 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.229305212 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.224957934 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.21885844 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.230166464 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.228163896 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.229166207 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.22812673 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.227713361 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.228406907 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.230703904 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.231356496 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.230634299 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.263166476 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.231336682 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.717047758 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.229686823 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.228804236 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.225728135 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.801350433 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.211625361 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.229759452 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.213928459 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.231941544 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.230755589 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.237773529 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.259851507 seconds)
  done (took 177.658344179 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.232633584 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.278180377 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.237504416 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.278069824 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.238435964 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.231979313 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.253119735 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.242546208 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.235021399 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.23399207 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.233016987 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.258239939 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.236726104 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.305673052 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.245970577 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.25838388 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.303530128 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.234362185 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.234909342 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.207501201 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.2787095 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.239814683 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.25860277 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.27222795 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.241613209 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.281835343 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.240629982 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.233276716 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.230742303 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.321418514 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.250673046 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.259678757 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.262861721 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.250482324 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.321832947 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.321741589 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.302706345 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.237612307 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.232433375 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.236011083 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.233198545 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.235447578 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.280505613 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.242606038 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.234703058 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.323278189 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.250973402 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.234989284 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.255371836 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.234823914 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.243307461 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.24632307 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.264634082 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.329820941 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.278409123 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.257295644 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.253074388 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.248371255 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.232362537 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.307510971 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.238328074 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.324359771 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.24992809 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.236086643 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.236870403 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.242365 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.283757835 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.263961288 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.310097888 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.239718892 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.305525809 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.285714752 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.245030678 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.237617037 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.236256526 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.284203896 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.317785828 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.287422407 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.292003327 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.27217253 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.239900544 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.232803259 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.235132078 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.262676134 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.241440004 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.324963876 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.324064359 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.242198686 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.236993325 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.237867091 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.239654944 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.258847863 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.287593422 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.274854708 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.312645852 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.268331714 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.271725659 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.241172548 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.249846338 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.236454773 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.266632277 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.241637838 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.249393891 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.563019864 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.273065745 seconds)
  done (took 239.793079333 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.615916337 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.283121011 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.303353018 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.504409187 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.6323551 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.365056455 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.272160707 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.289866476 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.288885639 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.401826937 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.341737457 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.331727324 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.268772052 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.243928156 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.282876999 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.292393299 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.314210697 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.583974051 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.358036196 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.074075603 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.273141756 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.517622903 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.568034798 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.623219871 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.320233747 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.666185519 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.921367993 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.370951601 seconds)
  done (took 72.465174512 seconds)
done (took 941.64154541 seconds)
SAVING RESULT...
DONE!
