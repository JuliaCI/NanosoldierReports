cset: moving following pidspec: 27191
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.807051663 seconds)
loading group "shootout"... done (took 1.059169598 seconds)
loading group "string"... done (took 0.68129636 seconds)
loading group "linalg"... done (took 8.649647685 seconds)
loading group "parallel"... done (took 0.167658188 seconds)
loading group "find"... done (took 2.899794159 seconds)
loading group "tuple"... done (took 2.087993873 seconds)
loading group "union"... done (took 14.779495115 seconds)
loading group "dates"... done (took 1.468646701 seconds)
loading group "micro"... done (took 0.218577211 seconds)
loading group "simd"... done (took 4.763759154 seconds)
loading group "io"... done (took 1.074485273 seconds)
loading group "random"... done (took 9.486246771 seconds)
loading group "problem"... done (took 1.510589004 seconds)
loading group "array"... done (took 25.127780663 seconds)
loading group "misc"... done (took 1.884958085 seconds)
loading group "scalar"... done (took 43.376108707 seconds)
loading group "sort"... done (took 3.315294833 seconds)
loading group "sparse"... done (took 12.657426476 seconds)
loading group "collection"... done (took 18.156191196 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.412966901 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.110745132 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.122696982 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.108457037 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.174325032 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.115514159 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.122888295 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.080559231 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.853015635 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.131017132 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11010608 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.407032521 seconds)
done (took 5.064775452 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.164077356 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.086177337 seconds)
    (2/2) benchmarking "String"...
    done (took 0.079930892 seconds)
  done (took 1.261453174 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.067718441 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.059815266 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064019201 seconds)
  done (took 1.286902736 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062215719 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.130056885 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.062927016 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.063557316 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.0636775 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.062990504 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063443403 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063403054 seconds)
  done (took 1.609087828 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.068493622 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.063955515 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.062382169 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064201888 seconds)
  done (took 1.357099814 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.062409437 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.115643529 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.061882513 seconds)
    (4/4) benchmarking "different"...
    done (took 0.061711008 seconds)
  done (took 1.396523873 seconds)
done (took 8.250216389 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.134270135 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.799922565 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.745519607 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.117962327 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.240371429 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.360148572 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.11891576 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.176926921 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.084570344 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.071399612 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.116751432 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.074011113 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.371266783 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.480220111 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.067602777 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169820587 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.630306873 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.083479026 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.12991503 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.356630228 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.069851845 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.084196723 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08111216 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.068058051 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.257811886 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.147661148 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.655020481 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.088854707 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.064869381 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.091424804 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.067223679 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.074277716 seconds)
  done (took 10.212233394 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.08817757 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.08530556 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.065631773 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.119706195 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.089755045 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067202114 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.071969947 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.064582533 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.084486986 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.119160673 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.085912542 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.094449981 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.063401377 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.06587206 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.06984241 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.190217965 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.077259595 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.077712868 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.064459294 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.07775921 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.101302304 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.075004567 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.074328581 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.074161039 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.128848461 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.166324918 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.093059205 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.094771909 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.062775496 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.075450584 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.112448882 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124324285 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.065017993 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.062300171 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.115557086 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.091902248 seconds)
  done (took 4.388983582 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.85387041 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092616061 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.078842266 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070457819 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.091334167 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.102030134 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.110324455 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.117717265 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.117418292 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.094707342 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071153767 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.147070957 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.644431994 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.062832961 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.08881896 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068395389 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.116531161 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.346420048 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.043646982 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067539525 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065359227 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.080825465 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067665466 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066497227 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111043362 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.063256749 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.169954984 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.562417432 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.067163361 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066383439 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.093046205 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06269627 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.134771749 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.088796633 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066724655 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.532774025 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.062690555 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.167000129 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08659175 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.062540846 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064008309 seconds)
    (41/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.090769479 seconds)
    (42/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.064701821 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075071593 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063104776 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104443765 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.075661431 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.492940024 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066649433 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.558748962 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.218413752 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069212028 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.068639464 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.098560485 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06146593 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.064574984 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.205427224 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.132947412 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.063899576 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.265699967 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.064955607 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065277945 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069266547 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.095051709 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.063985174 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06541183 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.06975141 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.092191355 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.776515228 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085194487 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.09252556 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.063984776 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.386765015 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.071612035 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.066350538 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066248583 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.065649784 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.101926885 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063515428 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.063583692 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.10537633 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091388422 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.085248716 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.066825859 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.064431287 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.063441954 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35104811 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.124489396 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063425306 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06430019 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.467949604 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.061132611 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063252102 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065125426 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.199733861 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064809163 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.061672017 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.062594697 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09578085 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067582108 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.325225251 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.063780057 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.430863605 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.065657207 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098969858 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.115037507 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.064734812 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.094677853 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.064865025 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.062041111 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070701464 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.062902421 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.061647695 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.066549107 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.063046651 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.063395323 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.065926178 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.065139448 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064316077 seconds)
  done (took 22.206615434 seconds)
done (took 38.761603232 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.304228106 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.074062585 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.074413579 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.074188107 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.074351982 seconds)
  done (took 1.752538176 seconds)
done (took 2.988492581 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.240067377 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.071539547 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.061131723 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.192124527 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.083062357 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.168092858 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.202517224 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.152080045 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.083266153 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.083252796 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.083318969 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.209516642 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.214236635 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.083112665 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.1530901 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.215732417 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.08371076 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.061099585 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.083612043 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.083075622 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.083580553 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.061190185 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.083430508 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.083307131 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.152273146 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.083265127 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.060903494 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.152572508 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.083239627 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.152596818 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.082958558 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.082765255 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.083582139 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.152045466 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.082843822 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.151138125 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.060931815 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.083220308 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.082855537 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.083149018 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.083341088 seconds)
  done (took 5.827353169 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071403559 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.186823101 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08081487 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059337266 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068435463 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079092074 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059338144 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079006174 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087690858 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.078730492 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078779238 seconds)
  done (took 2.143876172 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.066793478 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079505061 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080596982 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059015757 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069793093 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079752431 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.058718122 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079093286 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.0819895 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080012765 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.0800073 seconds)
  done (took 1.994223349 seconds)
done (took 11.132928635 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.092260167 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06180979 seconds)
  done (took 1.321703868 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.214885198 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.474800808 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.627882948 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.088285772 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.068840262 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.081598873 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.189257931 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.064107851 seconds)
  done (took 7.157978155 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.094941399 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069597264 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.064136921 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.064862167 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.064269023 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.06682964 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066202666 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.064797668 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.063865023 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.065953515 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.064358911 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.064359837 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.065258286 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.065375164 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.066283307 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06407874 seconds)
  done (took 2.35162278 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.099499543 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.066210892 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095154624 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.058619833 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.067956604 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.059066587 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.067132388 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.068987875 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.066641654 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.06746113 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.068778218 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067575566 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.067849107 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.067806929 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.069314688 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.069144682 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.069121495 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.067087562 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.069871191 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.070063895 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.068825339 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.069201063 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.070068099 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.067556712 seconds)
  done (took 2.971025162 seconds)
done (took 14.984034511 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.166911899 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070799282 seconds)
  done (took 1.414501446 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.06358715 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.064248946 seconds)
  done (took 1.318648406 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.067860115 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.057525565 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.07266497 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.065316393 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.057808542 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.057754429 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.071745445 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.058201866 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.057725712 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058102557 seconds)
  done (took 1.814188403 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.059144543 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.064039539 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.062342534 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061099885 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063046085 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.058777453 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06107716 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.059342773 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.064688795 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058140819 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062131247 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.07848099 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.061621787 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.078976823 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.061289351 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.061814276 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.063542922 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.061446335 seconds)
  done (took 2.33327643 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.057651679 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.058123625 seconds)
  done (took 1.309546796 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.060759602 seconds)
    (2/7) benchmarking "second"...
    done (took 0.05857692 seconds)
    (3/7) benchmarking "month"...
    done (took 0.060443094 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060103569 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.058411928 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.057917868 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.058511799 seconds)
  done (took 1.603118556 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.407129458 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.11974702 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.330993588 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.065618203 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.072554418 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.248328219 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.061426805 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.065238216 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.0654669 seconds)
  done (took 2.667964317 seconds)
done (took 13.664420295 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.078531407 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.17513144 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.082615216 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.366868092 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.08728834 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.063704726 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.109136723 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.165856882 seconds)
done (took 2.341929738 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.272857984 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.189542053 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.38085491 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.121942607 seconds)
  done (took 2.894853196 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.322684873 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.075174094 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.073730954 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.063391051 seconds)
  done (took 1.744514554 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.061662001 seconds)
    (2/2) benchmarking "read"...
    done (took 0.06810133 seconds)
  done (took 1.33370542 seconds)
done (took 7.458271865 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.067737512 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.058112908 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.092165436 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.059355985 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.058250105 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.060368027 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.060640387 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.059976059 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.059778293 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.060440503 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.058474818 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.060558869 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.06036655 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060302267 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.059913031 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059819751 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060375606 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.059859038 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060611301 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.058393775 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.059962546 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.060604997 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.05957234 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.060046576 seconds)
  done (took 2.708809593 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.07503378 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.062253562 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.063221193 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.062581354 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.063607803 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.062788956 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.063103441 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.061987683 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.063394359 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.062295129 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06385997 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.063717216 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.062225145 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.063634984 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062088281 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.063694857 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.063416068 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062375936 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061958892 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.06372237 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.063354489 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062524527 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.063879187 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063364631 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.063990476 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063904303 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.062326311 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.062291003 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063415718 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.063614366 seconds)
  done (took 3.122426997 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.063019776 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.056673203 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057205021 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.066587439 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.05669114 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.056842663 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.05733049 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.056658887 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057182311 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.057928054 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.057426693 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.056843811 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.057786847 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.056824501 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.057229051 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.057791863 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062066279 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.075772291 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.057319502 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.056840972 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.061193935 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.057926442 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057168598 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057003794 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.057436962 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.057237506 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.056655008 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.05748915 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.057268898 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.05755784 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.057141598 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.061258242 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.062016107 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.056905284 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.067080805 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.062147115 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.057354206 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.063304741 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.058135764 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.056690705 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.056756596 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.056902874 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.057186891 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.0571829 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.067294837 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.057342245 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.057843248 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.057409365 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.057452442 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.057134655 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.057020069 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.059012742 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06553741 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.058301662 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.056942915 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.057875764 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.057400023 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.057617078 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.057117788 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.056916108 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.056884687 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.060792615 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.058367686 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.057737114 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.076972099 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.058399282 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.067458093 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.057230509 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.057623375 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.060859948 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.057948307 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07498164 seconds)
  done (took 5.488352256 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.06686918 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067392257 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.075368327 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066074768 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060485049 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.057686921 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061078801 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.057864607 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066598019 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061503816 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058370815 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061257581 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066611344 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061458027 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058722722 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066306101 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.061436009 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060465983 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.058106247 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061417219 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059010687 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06091349 seconds)
  done (took 2.603596056 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.131975955 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062577432 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.101584732 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066341785 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065147973 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066353302 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.062809918 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063211809 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063141765 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063502421 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063534187 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063256731 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065133149 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063477712 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063227947 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063272355 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06334696 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063362296 seconds)
  done (took 2.471373921 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.072524194 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.062510372 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.085159066 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.061993533 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.062759774 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062168216 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065427897 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066139771 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.062166774 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.062698934 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.065975665 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06261341 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.062183958 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062945059 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062506321 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.062618184 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.062371943 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062762218 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0657448 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066445856 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.065765144 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066181497 seconds)
  done (took 2.653030403 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074705939 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.061147397 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.076583661 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062782288 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057071278 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.057203536 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.063021627 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.061970697 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.062633469 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.061433193 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062582423 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057634712 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.063281921 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062006719 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.063732458 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062000939 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.061593169 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062104508 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061798909 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.057446437 seconds)
  done (took 2.474945649 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067165455 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059808332 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059742525 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06403685 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.059573199 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.059586394 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064661122 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.059788063 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06000907 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.080951017 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060431928 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069945911 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064489636 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.062643865 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060042387 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064526904 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064745345 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064344912 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060338655 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060225786 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.081476142 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.060363479 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064728487 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060085492 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.059994738 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.060510684 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060051296 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.063217923 seconds)
  done (took 3.000596708 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.061271296 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.059905451 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.060247426 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.060482833 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.060446512 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.0602819 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.060430408 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.060973907 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059907834 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.060631586 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.059902234 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.060095712 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063086149 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.060169857 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.060262813 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.060052134 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060375405 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06043198 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060859665 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060862302 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.06012965 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060305701 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.060235643 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061088564 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.0608311 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.060201844 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06042433 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.060446156 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.05995009 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.060616521 seconds)
  done (took 3.043607967 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.069011989 seconds)
    (2/2) benchmarking "in"...
    done (took 0.067298303 seconds)
  done (took 1.364821475 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.058197868 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072990001 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.05631577 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068959745 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.064411886 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.060667321 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.065410292 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066223719 seconds)
  done (took 1.737631753 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.062832224 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085992356 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.058512925 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.058747338 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.061554601 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.123194161 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.071272077 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.070698283 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072416264 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.061579219 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059079872 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.070541206 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.058425913 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.072241607 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060091526 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.067831372 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066290656 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.076908226 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.071497828 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.057271557 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071105054 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059145664 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.057609584 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.059536681 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.05850248 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.065579614 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.073906804 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.071082425 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067169218 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.056665866 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077073645 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.057435045 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.058647478 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067061786 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.062035827 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.057918 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.094794288 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05879623 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.062834964 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.05760103 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.069932798 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079043385 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.072506531 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.075848697 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.059543065 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.05957097 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.057185309 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.059250546 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.061422753 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.067218874 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.057329025 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.065623016 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.057589618 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.059559099 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.069198359 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.058892659 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.062990152 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.067750038 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072179651 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.069360619 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.067468042 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.073947865 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.066957832 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.065108649 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.059069624 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.077469766 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.059348145 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.071417498 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072697696 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.058695939 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070519548 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.05705905 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.056605729 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.057465936 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.090348598 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.059447237 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.058661631 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.057495235 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.057526447 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.059145174 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.067129219 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062322171 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065402919 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060728376 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073738498 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.067126745 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.057988759 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.063468904 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.075601243 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.061575749 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.057969438 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.074665289 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.061661476 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.057345399 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.075645056 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.067981217 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.059463076 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.058732699 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.061696423 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.071115638 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.058924563 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.056914343 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.066796774 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.059395465 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.060216324 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.061906117 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.065916013 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.057775273 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068000741 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.062087332 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059431347 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.056654806 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06200734 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.05839292 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.056441476 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06694787 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.057853337 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071771569 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064329026 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.072430645 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072286516 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068541061 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073082193 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.057531918 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056367616 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075208409 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.066854744 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.058964186 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.074797345 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057252964 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070602347 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.056991484 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.058805002 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.196118174 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.05852404 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060991775 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.05875384 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063036858 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.060196409 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.05991189 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.063953106 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.06696385 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.069935871 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.05903722 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067062511 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058009016 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.073823699 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.068298885 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.06254654 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06074252 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.058009507 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.069663537 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.064411246 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.066921801 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.057242849 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.058115576 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.05774422 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.068464477 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.067217413 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.0596267 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.064154073 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.062613559 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.058286717 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.057832643 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.058719808 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.061657465 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060619385 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.058139069 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06574243 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.066564785 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.0708852 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063850511 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.067120499 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.057073266 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.057161225 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.058708961 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.056555303 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.061744642 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.066547445 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072617488 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.068736019 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.078106251 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.057733698 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.067344325 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.058706612 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.073978737 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.070649123 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.058491734 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0615523 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.056729472 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059095053 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.067135365 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.068992136 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.070859017 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072719401 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.06298637 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.062507538 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.057226825 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.072357769 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.0579045 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066256534 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.06674178 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.061340959 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.057641548 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.058803096 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.066731256 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.062108834 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.057407272 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.073095088 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.062772723 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.056984646 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.071951422 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.057659948 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.068067984 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.057332704 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.061515117 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.062867079 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.059093469 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.067114614 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07282691 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.056467555 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.058188793 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073091637 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.059392051 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059249807 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.065737954 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.072805975 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.062166501 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.065582657 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068495565 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.067881577 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.062663751 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.067729326 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.058808997 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.06723819 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060573386 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.069762457 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.057978244 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075617083 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.056990355 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073684466 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058100225 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069062444 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.058942573 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067482935 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.058618728 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.074755055 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059410951 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.058517564 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.069613448 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057066662 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.066962266 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057518452 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.062800917 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.064239272 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.066810236 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.059381809 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.066779515 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059187939 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.066288317 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.062313881 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.065851637 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.066928532 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.061951033 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.056956297 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.066284138 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068843422 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066049005 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.058921206 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.05876832 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.057922282 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.199629141 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060056437 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060059551 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067084377 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06349041 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.064661986 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.05951614 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06026769 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.059621798 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066425807 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.067386813 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.075409339 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066711838 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.06557369 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.067053661 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.057482136 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07304205 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.057536546 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.06811863 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.056606352 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.062731716 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.067017398 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.057636335 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076294766 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.058851808 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.065727842 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.06951112 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066353641 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.061749954 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.075240102 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.060429154 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.066615921 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.066148476 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.062481767 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.064400722 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.059274767 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.066275612 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.06724117 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.068252226 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.058551714 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.065596302 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066872022 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059289486 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.064206799 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.059327103 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.066545773 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.059347138 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.056713021 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.062403483 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.068802258 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.062087333 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06277406 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.058084282 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.056814064 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.058240894 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06402333 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.062245599 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.066397806 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072738609 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.056806398 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.058927816 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.057104276 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.061735353 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.074939537 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.067690707 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.065713898 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.062561111 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.057018835 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.059213686 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.059750985 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.057699948 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.060675283 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.056633853 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.05721219 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068017929 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059299253 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.062261183 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.057738209 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.0588248 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.067267256 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.061707302 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058071265 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.064479663 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.05750169 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063014121 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.05690976 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059012408 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06214291 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.05711934 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.061543716 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.068285038 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.073738241 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.064271678 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.066638813 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.05887199 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.065494092 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072808248 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063797305 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058573453 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.067298894 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.056919513 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076056421 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.066951821 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.066617124 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068042549 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.058752949 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.074439599 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.062208001 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068415995 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073156752 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059173258 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064108613 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.057724558 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073252006 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.062359927 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.057647859 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.065864235 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065859176 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.063650749 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.069735173 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.058302467 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066147899 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062309784 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.061110197 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.058840658 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.058886996 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.06652771 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.073405752 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058189846 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061032672 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.065454829 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.065714514 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062246959 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.069107119 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.065643374 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058533737 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059142554 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061441554 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.194362788 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.070772834 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058823111 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.063314427 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06299628 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.057602537 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.064748405 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074099808 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.067122917 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0672118 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.057347677 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057001006 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.074969224 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.061700557 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.060263417 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.065839502 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.067143516 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.069996412 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.066709438 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.073963322 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.058322138 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.063188966 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.069487591 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058111197 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.057370524 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.061372311 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.058943685 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.066895912 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.067179065 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065445333 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059664026 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.064480608 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.071236754 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.058884352 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.062524706 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.061304941 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.058213334 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.067945769 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.066151208 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.068982296 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.058505146 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.057796965 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.061085536 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.06627709 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065283438 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.066494308 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058072239 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.063094609 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070689007 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065346748 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060264812 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.056785157 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060092406 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.066912542 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.061526952 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057360379 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062504523 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061339385 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063274387 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.066972247 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.062304383 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057346278 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07405579 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.065486948 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.066436467 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059486145 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059695269 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058041121 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057334888 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068429968 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057146016 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059568834 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.062239793 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.058984347 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.074751794 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066265964 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073142776 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.058343307 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.062102981 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057124923 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067143348 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.062335506 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.057902828 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.067800561 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.056525359 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072724344 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.068892427 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.062300589 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.057496003 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.062850195 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.065192178 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.072241089 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067051058 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.066294209 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.060634249 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.066975972 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.059242956 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.068470607 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.057083777 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.056708394 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.067855028 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.066396454 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.069822826 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.057176446 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.067653412 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.059626884 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.066258627 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.066158687 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.059428251 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059451787 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.059704631 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.067776127 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.062528873 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.067632831 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.062611571 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.074676507 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.059250177 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.068880043 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.067001175 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.068568911 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071560048 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069654693 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.065665835 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.058226827 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.065408873 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.065816379 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.058730738 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.062718216 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.060478513 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078204694 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.05892184 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.059002122 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071304699 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.062756842 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.057459098 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.063313538 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.196621239 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.068788711 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.059621234 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.069159218 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.061383434 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.058640063 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.062280434 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.062531129 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.056625642 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.057259334 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.05763678 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.067740245 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.061817711 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.057598372 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.076076524 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.058907379 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.066379679 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.068080431 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.064118762 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.059003774 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.056414916 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.058920347 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.07096404 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.072691116 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.061032823 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.066452104 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.058847362 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.066562989 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.056455027 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.066672807 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066099315 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.066048418 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057622472 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057918746 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07253292 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072799928 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.062318915 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.067103345 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.066680808 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.058665878 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078476475 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.066380807 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058630347 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.068032066 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059676389 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057333405 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.056728358 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.058586702 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.069234401 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.0567597 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.059451433 seconds)
  done (took 39.903901574 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.093109696 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.057859256 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.056996616 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.056851755 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063995978 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.058300884 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.057441232 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.058330675 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.058156601 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.059382108 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.057553805 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.059882209 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.062774747 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.069231079 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06484275 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.060316541 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.0572295 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.057989671 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.057372894 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.057958702 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.062524248 seconds)
  done (took 2.619162335 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.059971156 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.060817184 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.060401218 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061189492 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059996622 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.057172362 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.060843627 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.05730045 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.061296072 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.057583137 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.061306343 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.05759959 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.057847512 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.057835091 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.057701171 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058621912 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.061362979 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060463437 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.057797714 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.060861576 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.058590669 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.060611229 seconds)
  done (took 2.621947286 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.058578578 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.057600694 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.065904255 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.056685666 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.056626088 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.059902964 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.056974985 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.061882753 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.061937632 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.061418405 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.065751389 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.057746715 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.056569947 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.062845828 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.056413914 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.057662876 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.097184345 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.057810075 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.058213981 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.056814906 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.059507967 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.06593728 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.056614121 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.056995026 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.061456462 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.060026073 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.056804155 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.059155674 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.057509879 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.061463711 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.057885289 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.056709191 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.066281439 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.065196276 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.061355918 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.061742754 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.058745288 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.057946491 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.056972586 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.056828858 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.065648691 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.058689242 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.057074348 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.058581444 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.065801241 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.057280668 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.056927193 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.066475194 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.056538253 seconds)
  done (took 4.280096508 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.066311895 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.107029103 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.062434648 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.089351954 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.068527788 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.062288061 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.062405107 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.090271728 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.058037206 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.058392495 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.069329096 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.06977985 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059671705 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.060641622 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.062138445 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059266483 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.059922307 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.059160685 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.061829726 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.059011061 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.062041014 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.063094617 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.068232894 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.068781351 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.060274628 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.058957164 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.059079022 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.060535452 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.068844046 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.062286376 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.060880193 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.061951843 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.068708648 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.064008681 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.059097696 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.05898575 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.069336872 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.060066398 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.059606824 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.05843435 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.059142229 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.060559351 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.063594881 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.069739645 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.059589936 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.063943528 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.059499924 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.057847687 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.06921455 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.059087058 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.063001588 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.070016449 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.060635807 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.05993401 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.060625966 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.06921352 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.0600104 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.058414728 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.059919244 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.068780964 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.058439962 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.060467174 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072825695 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.05920545 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.062636622 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.069826334 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.064459651 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.060378894 seconds)
  done (took 5.815641054 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065597066 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.090663309 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0710034 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07125051 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066963788 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.066991822 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.066708877 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.066980415 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.066608047 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.069452341 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067151146 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.100340558 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.0639032 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.068215257 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.066904718 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.067146415 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.066855736 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067035169 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.066788716 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06667911 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.066788833 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071076092 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.067080807 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07118829 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.069079062 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064053965 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.067004988 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.068543004 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073567008 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.067079885 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.069165834 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.067254108 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.066922756 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071247064 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.069685433 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.066673896 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.05861125 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066668864 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.06688744 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.066760859 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063604911 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07147152 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067029599 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.064174009 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.067772018 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.067109389 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071854937 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.069262359 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.068604065 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069939221 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.067194167 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071602506 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066912744 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.067384967 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072019175 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.073644236 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071794138 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072188599 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067315861 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071654236 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071685672 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.073375374 seconds)
  done (took 5.639263436 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069030796 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063696429 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07480077 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.056966428 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.056974989 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065797196 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.05735927 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.057240711 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063100135 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.063443217 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064794586 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065798886 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067583788 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064599781 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065917311 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067547552 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066041144 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06578499 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063196024 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065642718 seconds)
  done (took 2.632551625 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.071806249 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.075484014 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.062670088 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065710182 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.062220712 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.065613691 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.061851324 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062426171 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063091884 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062634227 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066790733 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06666843 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062812941 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065712229 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066665232 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06566643 seconds)
  done (took 2.38561916 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.060499448 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.064145176 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.063134954 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.058563548 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.059859559 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.057704266 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.058467319 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.057348959 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.059661623 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.071141065 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.057969157 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.060451539 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.058308967 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.057244291 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.057911997 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.060415294 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.059346271 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.058083489 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.058637131 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.061747033 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.065806767 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.05884042 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.060429218 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.058071061 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.060262553 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.066079734 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.059257324 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.060090964 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.057952699 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.060520719 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06018326 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.064526916 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.0599797 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.058373152 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.057150166 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.057990933 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.058555291 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.060868481 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.060442065 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.058594168 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.057111064 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062971516 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.059023075 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.058919349 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.059517387 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.060238644 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.059559525 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.063764727 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.058306365 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.060073441 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.058342415 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.059369872 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.058542951 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.064865236 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.060334516 seconds)
  done (took 4.643296534 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073441994 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.062374216 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.056859066 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.056758389 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.062134232 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06259554 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.062263158 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.062176089 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.062537482 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.057149133 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.062621922 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062012161 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062978134 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.062479184 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.062798457 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062543128 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.056783881 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.062391627 seconds)
  done (took 2.464878739 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.062990565 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061833307 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.061612243 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.058395746 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.0585882 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06296362 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.057493517 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.058736455 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058495335 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.05903752 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059126536 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.058517417 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058899625 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.058447055 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.062196173 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059269179 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.058583175 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.057405834 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.05878783 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.057412927 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062728443 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.057508334 seconds)
  done (took 2.653701713 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.083740892 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.080332337 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.122877706 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.076425105 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.084870231 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.068367429 seconds)
  done (took 1.862229247 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.089733054 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.093132554 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06219147 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.062041963 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066152715 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064643012 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064568621 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065063613 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06766497 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068064561 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065024256 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067756345 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06777922 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069213941 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066392909 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066508651 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064884105 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064916265 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.062308297 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071333102 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065144372 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068270363 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064792531 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064586426 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065037236 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06953012 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067856583 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068438279 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065056704 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068278478 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0663151 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065037882 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068306669 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068769167 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.062136925 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067850378 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065017682 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071389299 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066894556 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069448259 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062134836 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066446652 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067930172 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068030467 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068002238 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065204107 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067614738 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065113303 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065191398 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072463188 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066252851 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069505303 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066644033 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068497211 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067796523 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07271637 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068285502 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069778083 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066732346 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068573728 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069604291 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066651178 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069416073 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06853483 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066651327 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069627791 seconds)
  done (took 5.821392798 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098419407 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062483865 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065300149 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068155137 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069315114 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064771252 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065486042 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065060917 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065258066 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.062653756 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.098623338 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065067687 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069501861 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07256849 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06532308 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064929382 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065465354 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069790687 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.062876974 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072611058 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064936995 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069407909 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069285665 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069277245 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06832658 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066512379 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064938356 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065044148 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064870661 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064936649 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067976335 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065467541 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069411001 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062583222 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069641487 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065212252 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065341583 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067762253 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.064832435 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066888856 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071074119 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072694965 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.064938893 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065157547 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068312891 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06476469 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065086076 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.062902567 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.065324056 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.062520049 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0684421 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068206233 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068743965 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069410678 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065130384 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065049238 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064969339 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065191947 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065288642 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066568126 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069851344 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064983117 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072957716 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064914425 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06566876 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069800944 seconds)
  done (took 5.833265593 seconds)
done (took 121.053075498 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.194031205 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.164435566 seconds)
  done (took 1.695553442 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.070635909 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.153384706 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.071052028 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.071427187 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.100323668 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.100051369 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07166942 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.068527856 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.070597417 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.068271197 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.127822741 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.071986742 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.068436092 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.068609699 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.068244826 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.068612318 seconds)
  done (took 2.673758308 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.102766656 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.180456204 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.097240814 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.066049943 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.145563938 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.072195733 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.06806931 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07218938 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.072155562 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.066403618 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.101709321 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.078837732 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.071481038 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.07230022 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.068148008 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.071291096 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.071899913 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.071748587 seconds)
  done (took 2.908291451 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.097845528 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086579105 seconds)
  done (took 1.547064184 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.14697986 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.09928004 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.137134665 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329267478 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.126233185 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.129758634 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.132606466 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.128472025 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.102209644 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.125197097 seconds)
  done (took 2.802911683 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.100791319 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.099244054 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.296958944 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.097119059 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077370073 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.072368604 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.070510676 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.074972051 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.0709739 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.07198989 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.115730151 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07102591 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.068263678 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.118015986 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.091353106 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.101106838 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.067027484 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07368234 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07570978 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.066914017 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.071929171 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.075011983 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.167803724 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.073402518 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.09299652 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.070292033 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.072351402 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.071122566 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.071434905 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.073532104 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.073694902 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.092641716 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.073337668 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.080091808 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.073711282 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.093867374 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.068950953 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09564479 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.071698967 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069495056 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.072391388 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076266392 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.069451159 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.075284843 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072550332 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07467215 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077093556 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068600096 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.072537433 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072364444 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071494599 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075610946 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075019546 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075683697 seconds)
  done (took 5.913756241 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104694832 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105401937 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06728393 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.110027432 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.102341741 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067752321 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.101653605 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.097578301 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.105460737 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067537784 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066426876 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066655602 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073610497 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.07627077 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113049375 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105697169 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068854359 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067518123 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.104121102 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104082891 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066424751 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099210845 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.097326522 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.103343062 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066080553 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067558565 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066923729 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068173765 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073408419 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074666178 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067840157 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075826645 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08479608 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073154184 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.065562968 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.065605244 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065464066 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.072514065 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.073411432 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07340741 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.071914565 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065480056 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066127694 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066509151 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066992424 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065717052 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072287044 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.07300885 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.072277862 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066301484 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066472029 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066095324 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067519462 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074198337 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07410841 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073695427 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072973675 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066302216 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066410266 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067987035 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074434505 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.073669663 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073575882 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067330078 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074485187 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066030317 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074454223 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078452143 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.065743724 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.067652751 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067231125 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066984718 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068038518 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074037159 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07414774 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068328703 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.067724118 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067641608 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076547572 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074155772 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067806637 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073498823 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067024877 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067666239 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068330845 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068416936 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073493136 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.074829565 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069058867 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067667264 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067543648 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067818714 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069661715 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.073779634 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074609766 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075400458 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074289772 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068205663 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07445966 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074357372 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066673999 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071712086 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065824879 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06593693 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065675543 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071397081 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.071737491 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072771794 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065388894 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065456714 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.072820997 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.074873918 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06539596 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.070199552 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072888758 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.208565708 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06733577 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076185437 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067372107 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.074793318 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067105157 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074888523 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067070226 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072530742 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066799653 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065768834 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066855698 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074414765 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068631297 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066979774 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067297121 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068450911 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.074731979 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077926077 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06898476 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074657807 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074465012 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068214833 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074252406 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068151259 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07552399 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068160182 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067982972 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067288396 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077218902 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067975506 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067994881 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06757806 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076874506 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067728757 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075808357 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073927518 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067346818 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079811859 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07467018 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.071776478 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.074685754 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067093421 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067825534 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067825327 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070833368 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.071692053 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072610181 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066692586 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066210386 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071730595 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074486423 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.06617184 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072096996 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072156591 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072229889 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067013932 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066458711 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075101211 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074535715 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072263451 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072140669 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073294825 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066426755 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072119528 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072405924 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066145774 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078605984 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066888267 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07606121 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073057339 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071908645 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072724065 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.07406308 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074621136 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074846085 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.07679436 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066148848 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066181795 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072089294 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066485871 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066422368 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07204574 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066937511 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067074417 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.078872205 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066709243 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.074431572 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066057568 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072775579 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065934735 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066601472 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078048314 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066863642 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066868057 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.071673325 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066557177 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.071589117 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07471011 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071674421 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066204533 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066940431 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.072419892 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073279599 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066215323 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066091242 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06638076 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.071791998 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.070640154 seconds)
  done (took 17.893593012 seconds)
done (took 36.808109271 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.166027559 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.111729313 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.206896893 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.195478924 seconds)
  done (took 2.265682485 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.097751261 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.062883373 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.077953261 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.087362598 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06314463 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.073210201 seconds)
  done (took 1.991094242 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.197457457 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.172612797 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.240605066 seconds)
  done (took 2.129412665 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.362033021 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.145568443 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212637643 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.495024401 seconds)
  done (took 2.839116545 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.10704871 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.097191621 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.074509821 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108315778 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.082148687 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060169289 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.130692257 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067365669 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.096856389 seconds)
  done (took 2.402502005 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.135802222 seconds)
done (took 13.309233068 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.234745319 seconds)
    (2/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.102122506 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.119568663 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.21557623 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.305131181 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.172055616 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.122646948 seconds)
    (8/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.212157798 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.194702708 seconds)
    (10/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.217393578 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.178884367 seconds)
    (12/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.236440185 seconds)
    (13/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.090641437 seconds)
    (14/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.071030073 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.256262864 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073865099 seconds)
    (17/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066278485 seconds)
    (18/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.200412103 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.243764144 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.089277295 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075252639 seconds)
    (22/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.173760704 seconds)
    (23/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.174780397 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075673822 seconds)
    (25/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.196424628 seconds)
    (26/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.254758327 seconds)
    (27/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070393181 seconds)
    (28/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.170715645 seconds)
    (29/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.134746332 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.12180234 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.072260963 seconds)
    (32/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.140311857 seconds)
    (33/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068454535 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.075939991 seconds)
    (35/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.226823241 seconds)
    (36/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064790541 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.179759055 seconds)
    (38/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068447992 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075682712 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.072305984 seconds)
    (41/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.218158496 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.072151887 seconds)
    (43/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065897644 seconds)
    (44/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.064775953 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087782914 seconds)
    (46/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.220348682 seconds)
    (47/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.194179057 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.083642975 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.128402986 seconds)
    (50/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.110866707 seconds)
    (51/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.07182008 seconds)
    (52/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.177382698 seconds)
    (53/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.063734793 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.085062083 seconds)
    (55/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.146358822 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.134440188 seconds)
    (57/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.080576273 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.073028502 seconds)
    (59/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.163093096 seconds)
    (60/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.064880344 seconds)
    (61/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.064989431 seconds)
    (62/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084064486 seconds)
    (63/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.071636863 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.084506551 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.062805019 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071591234 seconds)
    (67/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.186543987 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.063965504 seconds)
    (69/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.07608979 seconds)
    (70/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.22145297 seconds)
    (71/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.064802971 seconds)
    (72/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.12033201 seconds)
    (73/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.192129947 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06243294 seconds)
    (75/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075743888 seconds)
    (76/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.074347035 seconds)
    (77/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.065962716 seconds)
    (78/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.16710638 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.0706709 seconds)
    (80/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.063732043 seconds)
    (81/341) benchmarking ("sort", Float32, false)...
    done (took 0.132897627 seconds)
    (82/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.338569592 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075336555 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125388802 seconds)
    (85/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.161828674 seconds)
    (86/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.162143768 seconds)
    (87/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.140999514 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177942643 seconds)
    (89/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091152272 seconds)
    (90/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.069190566 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095821634 seconds)
    (92/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.188161482 seconds)
    (93/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.071478414 seconds)
    (94/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.160592463 seconds)
    (95/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.070090382 seconds)
    (96/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.219606779 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.13964007 seconds)
    (98/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083575562 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.181881225 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086259601 seconds)
    (101/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.136282371 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.0631677 seconds)
    (103/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.196069383 seconds)
    (104/341) benchmarking ("sort", Int8, false)...
    done (took 0.146496142 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.123357745 seconds)
    (106/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07142789 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090135865 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06476364 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.196445477 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071279107 seconds)
    (111/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.081952845 seconds)
    (112/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092664676 seconds)
    (113/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070514708 seconds)
    (114/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.14469256 seconds)
    (115/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.186242465 seconds)
    (116/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.192156078 seconds)
    (117/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.076161431 seconds)
    (118/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.073210244 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.080534046 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.066852255 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.148653743 seconds)
    (122/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.07637318 seconds)
    (123/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065649215 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.075846486 seconds)
    (125/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071589357 seconds)
    (126/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064889052 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07298343 seconds)
    (128/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.199469951 seconds)
    (129/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065581177 seconds)
    (130/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066140119 seconds)
    (131/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067834262 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074050481 seconds)
    (133/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.068850056 seconds)
    (134/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066970721 seconds)
    (135/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.065094203 seconds)
    (136/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076299718 seconds)
    (137/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.064616982 seconds)
    (138/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.084317119 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.071291468 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084760389 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071184048 seconds)
    (142/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078056691 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.080576751 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063581518 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153771421 seconds)
    (146/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.159718069 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.074461631 seconds)
    (148/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.063778763 seconds)
    (149/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064274903 seconds)
    (150/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.070728864 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071522984 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.072502164 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.140122589 seconds)
    (154/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.063973196 seconds)
    (155/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067565242 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.089007294 seconds)
    (157/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.063364667 seconds)
    (158/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.063515177 seconds)
    (159/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070221892 seconds)
    (160/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.06371756 seconds)
    (161/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085482087 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.078530392 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070029843 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.072763534 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 0.064813779 seconds)
    (166/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.089519923 seconds)
    (167/341) benchmarking ("sort", BigInt, false)...
    done (took 0.258400285 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.15410017 seconds)
    (169/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.071868531 seconds)
    (170/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.062916269 seconds)
    (171/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.077980658 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.151542477 seconds)
    (173/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.07527252 seconds)
    (174/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.064623465 seconds)
    (175/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.071501211 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.061940397 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.079222458 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.129069443 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.062620581 seconds)
    (180/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.066047266 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138329575 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.07150901 seconds)
    (183/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.062609879 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.166476663 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.061124959 seconds)
    (186/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.155846771 seconds)
    (187/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.063215505 seconds)
    (188/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.246502814 seconds)
    (189/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065341412 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.0658797 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064747423 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07415098 seconds)
    (193/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063885673 seconds)
    (194/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.143991977 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125987794 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146125167 seconds)
    (197/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064528338 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064731762 seconds)
    (199/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087402627 seconds)
    (200/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067462235 seconds)
    (201/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064820993 seconds)
    (202/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064551365 seconds)
    (203/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07554075 seconds)
    (204/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.140706704 seconds)
    (205/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.10934005 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.174638195 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062148112 seconds)
    (208/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145560721 seconds)
    (209/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.064418293 seconds)
    (210/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064285641 seconds)
    (211/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.062056683 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.149764595 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.131635574 seconds)
    (214/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066572958 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063314878 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.063772772 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071141067 seconds)
    (218/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063301917 seconds)
    (219/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074289213 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070531199 seconds)
    (221/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189622912 seconds)
    (222/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063231574 seconds)
    (223/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.066687404 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070117166 seconds)
    (225/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.186725323 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072509837 seconds)
    (227/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073231345 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066826113 seconds)
    (229/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064892056 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065968863 seconds)
    (231/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065386547 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.14907027 seconds)
    (233/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.150177173 seconds)
    (234/341) benchmarking ("sort", Float64, false)...
    done (took 0.135453901 seconds)
    (235/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.06384736 seconds)
    (236/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.070431834 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.07879549 seconds)
    (238/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062507096 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064205632 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.06536533 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075325049 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073631799 seconds)
    (243/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06248622 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.12908455 seconds)
    (245/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.08245836 seconds)
    (246/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.080670053 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070396683 seconds)
    (248/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064124349 seconds)
    (249/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.063369807 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07021437 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066764606 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.061524025 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061626063 seconds)
    (254/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07243136 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.063719533 seconds)
    (256/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.066715823 seconds)
    (257/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.152110629 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.088106991 seconds)
    (259/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.065510995 seconds)
    (260/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.159719586 seconds)
    (261/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.063620478 seconds)
    (262/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06319997 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064176589 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063326695 seconds)
    (265/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072111177 seconds)
    (266/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.062799279 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.062962163 seconds)
    (268/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064225462 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.083628481 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063037113 seconds)
    (271/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.062942228 seconds)
    (272/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.065425244 seconds)
    (273/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070584096 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061993373 seconds)
    (275/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.167311618 seconds)
    (276/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.063771609 seconds)
    (277/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.079246265 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.129494797 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.082188955 seconds)
    (280/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169599053 seconds)
    (281/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064383671 seconds)
    (282/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065135995 seconds)
    (283/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064001263 seconds)
    (284/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.063233162 seconds)
    (285/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.063978019 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.064776218 seconds)
    (287/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.063625271 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.147323764 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082346458 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113321068 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.063672813 seconds)
    (292/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.063948472 seconds)
    (293/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.067280265 seconds)
    (294/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065151716 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.144859622 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145026701 seconds)
    (297/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.062996572 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.063339496 seconds)
    (299/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064340344 seconds)
    (300/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.067583241 seconds)
    (301/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.062294353 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.063662412 seconds)
    (303/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.079584439 seconds)
    (304/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06403236 seconds)
    (305/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.063354234 seconds)
    (306/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.065684363 seconds)
    (307/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.165763613 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.064111076 seconds)
    (309/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.062470791 seconds)
    (310/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.063803747 seconds)
    (311/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.075151027 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.084938944 seconds)
    (313/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.063219091 seconds)
    (314/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.06989991 seconds)
    (315/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.063061761 seconds)
    (316/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.062155477 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.146618272 seconds)
    (318/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.06237365 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.062320851 seconds)
    (320/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.065578614 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.243469776 seconds)
    (322/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077976783 seconds)
    (323/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067593486 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066144041 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.068638739 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121193467 seconds)
    (327/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066707582 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.089560689 seconds)
    (329/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.06344513 seconds)
    (330/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.090650702 seconds)
    (331/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071979933 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065019377 seconds)
    (333/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069680041 seconds)
    (334/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072562039 seconds)
    (335/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.069908265 seconds)
    (336/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081981043 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065105783 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065909757 seconds)
    (339/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065328385 seconds)
    (340/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06362484 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.087334701 seconds)
  done (took 36.168450315 seconds)
done (took 37.711236831 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.088392385 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077011398 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075465162 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072151684 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075579928 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.074621647 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075008412 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073535891 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.074774035 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074091779 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.075339629 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064407791 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072582792 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080193196 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073669537 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080223889 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077150997 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080475469 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065182245 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079530136 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093477275 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076807466 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072435912 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.076984255 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063525519 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072111385 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086715532 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084808642 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069942162 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073087128 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070810394 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082094329 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072614049 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071174568 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074523843 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070564673 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074504367 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071810409 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088512857 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.068991137 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064315809 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076057221 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.070890245 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072477084 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072485296 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077214116 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070531293 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.076927517 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063350327 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075161026 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089287598 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070333216 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071729127 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073306362 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.0698781 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07433179 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071656893 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076476249 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069652012 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076193809 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076183404 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073320033 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064362765 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073226231 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071503958 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.070378335 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062113003 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067870972 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06284774 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.06321486 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06238494 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.07169019 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070038767 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068048335 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062167502 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063114045 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.062183263 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.074936088 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.069168106 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.07231673 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063545805 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068387038 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067916125 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063939239 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068008625 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074863837 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.061982097 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.063083169 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.062639778 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.077100894 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.069325921 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.063022828 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074157346 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067946467 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.06786875 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.062668041 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.0620177 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067619102 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.07097005 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.062993241 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.062236028 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067824296 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.068022483 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071911255 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.063468825 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067931849 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069971375 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063050938 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073043442 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071522712 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.076302413 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.075757849 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.071699565 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.074866831 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.063729131 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.062089908 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.072421745 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.063039882 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068255164 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.070549855 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.067943862 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.070979875 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063355227 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062376018 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.067475129 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068924563 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063518068 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063466703 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063507416 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.072178568 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.069767835 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.061735351 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06278164 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071364941 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071455466 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061876652 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.061704294 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071787712 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06275297 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068209117 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067686311 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.070576236 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.061639539 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062577139 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.061316832 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061797901 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06126536 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.071615991 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.067041953 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.0627575 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070510474 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.215662694 seconds)
done (took 12.475928165 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065170303 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105431941 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.07769098 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.079873393 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.076466492 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.064914033 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067823308 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.082040517 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.066869519 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087491502 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.088882365 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.084980825 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093587594 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062196221 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.063490291 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064144743 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062160867 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075380734 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080248444 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.086923576 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.099159558 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063386427 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079020256 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083028194 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077374931 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.080966439 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065038234 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064438209 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066565936 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082476537 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089262412 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063483413 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064542485 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08112881 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078478843 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071346799 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064740865 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.069728639 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066972173 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063412544 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.065622613 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081079344 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070260803 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070743797 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065186698 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.064865328 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064013296 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070687908 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080904063 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.069236453 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075790513 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.086138334 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.065684059 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06431289 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062568775 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071039172 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.063916036 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.064515855 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.064115909 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.063728117 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.06416937 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.066533158 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.06869193 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070245059 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.066980841 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069975146 seconds)
  done (took 6.407692668 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.07983977 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089608051 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078250225 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078700944 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063171634 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064226762 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064482138 seconds)
  done (took 2.172831075 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064821924 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071820567 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07611984 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076087073 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.085614305 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.073568272 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.064494952 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.096154166 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063212906 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072549335 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079499143 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077379728 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067412369 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.075984719 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.064406274 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.075910147 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.064328222 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071009539 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071933379 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077328134 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068184618 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.093673593 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.077513483 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.064774599 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.077534457 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.071491215 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.06657625 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064202483 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.0645342 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.063580796 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063929158 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.085836928 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.070367008 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.076050396 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064742592 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.063354936 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.06841657 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.064530526 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.067832114 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072964005 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.067745013 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.063896429 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064358131 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.063886666 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065198925 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068494438 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064913316 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063480322 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063938878 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.071097299 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.063043037 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070242883 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06623158 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068821824 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068959458 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06807484 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070785401 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.064419513 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.071076396 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.070165703 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.063734739 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076269968 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075447128 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.067441861 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075616974 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.072220324 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.070313585 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.067623074 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.063404464 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.063362438 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.063991735 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075320729 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06722881 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.066066175 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.065868498 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.06899468 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.067537882 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.079113182 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.079018991 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.077013691 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.066406148 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.063751505 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.06789001 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078505135 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0686684 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064488394 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.064665791 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063325298 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.068660605 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.064139912 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.068744119 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.0639968 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.070656839 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.066420364 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066185492 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071934727 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064283264 seconds)
  done (took 8.378639213 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066744496 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066065887 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.064967393 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06491282 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065370734 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065190521 seconds)
  done (took 2.079404158 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087655795 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064527205 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.07631831 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064749607 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086373784 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07091605 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07130287 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066513367 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.080996698 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.075083836 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.070678856 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.073233854 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073412393 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066152178 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.070673125 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.065275209 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.070296285 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.067294899 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07430609 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066327484 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08030352 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.065922679 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06675248 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.076601421 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.067289653 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.065065687 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.065747856 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.074201555 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.074061329 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.066131784 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.066116868 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.067207505 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.072940938 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.066009169 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.070374759 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.072632765 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06408645 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.069683876 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066707881 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067203139 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07299334 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066307913 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066864779 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.069871575 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.065870713 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.072794428 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.069721437 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068123005 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.070348372 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.069737562 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.06969895 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.0647784 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067030475 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.069801248 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.07275174 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065895438 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.069320219 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.070511869 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06612073 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.072938963 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.064724039 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.067462729 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.065995908 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.067251827 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.069341191 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.069566637 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.072820432 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.066796143 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066294323 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068221503 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.069870618 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.0642695 seconds)
  done (took 6.67229032 seconds)
done (took 27.349797783 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.540599593 seconds)
  done (took 2.171990736 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.882300262 seconds)
  done (took 2.556911022 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.021558289 seconds)
  done (took 9.697816526 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.344076973 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.408440009 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735331761 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.129656412 seconds)
  done (took 3.315776058 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751377753 seconds)
  done (took 2.431917925 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.228136728 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21810929 seconds)
  done (took 2.138118776 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.331715479 seconds)
  done (took 2.001632544 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.145086407 seconds)
  done (took 2.813196855 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.232470567 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.15933305 seconds)
  done (took 2.067996355 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.53300745 seconds)
  done (took 2.201554286 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.537352284 seconds)
  done (took 6.213389545 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229186229 seconds)
  done (took 1.948314033 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.227001372 seconds)
  done (took 1.907588504 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.00802383 seconds)
  done (took 3.679705557 seconds)
done (took 46.812022056 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081544405 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083773142 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083324871 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079030177 seconds)
  done (took 1.97812932 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071545239 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.06818277 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070834692 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07124837 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.069118836 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.069886007 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.070231721 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067639473 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.068876731 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068041382 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066530408 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.067989398 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070474848 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067535227 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070096966 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071473778 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.067981763 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067877528 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070207625 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.068096786 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070555607 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067724088 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065853868 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067510298 seconds)
  done (took 3.326801709 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075849702 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069809992 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073700964 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.069283985 seconds)
  done (took 1.969236977 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.073884546 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074123711 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083012338 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087926128 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073344903 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.07447055 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.080828383 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081358519 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063465581 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.085818839 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065792517 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064393686 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064757868 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083450263 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080738276 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06048062 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061519999 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.074910532 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074255098 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076433621 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066475864 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063192212 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.073957126 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074979266 seconds)
  done (took 3.44367378 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079698586 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063458452 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078697768 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08853674 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089645945 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063209778 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.076650584 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090664344 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12534969 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063207031 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.069698264 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063385871 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102326726 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063303079 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.078343194 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.106835595 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.109247011 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067444558 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096507172 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063480313 seconds)
  done (took 3.330824339 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.074168008 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067530774 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068410919 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.063380149 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074768596 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.071340083 seconds)
  done (took 2.111793951 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066592206 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066045666 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067332275 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070066568 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065946202 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065684047 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065336682 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.063746617 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.063854306 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064486029 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064873862 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065157598 seconds)
  done (took 2.474161599 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145979027 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067109791 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067966759 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063984549 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06557255 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064566858 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078911211 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066478688 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082619748 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.064770269 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065291233 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06946619 seconds)
  done (took 2.586597176 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102136433 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108628927 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141834494 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114237338 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114236807 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09405521 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123586383 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092567334 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.156965854 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.134070199 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114456923 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091065463 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084029032 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.067256943 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097257493 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115181898 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133726228 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070875094 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110503321 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161203995 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128769707 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.131379778 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144776787 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114850107 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087978363 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144760496 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094922578 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100019808 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121603449 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123305025 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116626928 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.094641419 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.069029842 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.068335744 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145075405 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101002866 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117349061 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.090404948 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10202959 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08571163 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10397546 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.066831417 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.082578704 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.109705414 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081919522 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128505391 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.085739853 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112232949 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07911605 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133990997 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119066549 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094813617 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08172223 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100100753 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.287756819 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110040285 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132005234 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104877651 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080932654 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116162146 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100426197 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097737991 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104977242 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077921076 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.17318955 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086308017 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108452363 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108920401 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.090915865 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092048393 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104568212 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13180249 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12203093 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122038131 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134257235 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093469501 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119004276 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096750378 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.125832518 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101844059 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070487119 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.118175705 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.126100645 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.096191278 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098231687 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126413 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089593697 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075148705 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.095902983 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115895369 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077991182 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109174758 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078277551 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.106101378 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130516907 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094300886 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109062304 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113939192 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07554734 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152205989 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106381187 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070025204 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113811137 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109721647 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150989461 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091102648 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.0731035 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096061661 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.258465438 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146958771 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105362075 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078312015 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108150011 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136716369 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092770096 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.166503623 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094000089 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137494885 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109249978 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084955225 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07292017 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087116388 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109007687 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104594752 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109306013 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087161595 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08158007 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084454617 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109421106 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090187738 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078220251 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110545549 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098844352 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072511256 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085787298 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076543602 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138786194 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.075387327 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13441075 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122067474 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076058485 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10318516 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095232551 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105203861 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094897847 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113899314 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137261198 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.113060853 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087193401 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.091071999 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105759705 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140245956 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124286824 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090305416 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074181793 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097238865 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109091444 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095319223 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123059933 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097870574 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106245874 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100858345 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137217702 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139265735 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0963706 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096777499 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101977099 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.280297686 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078049507 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152821177 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101822372 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115945692 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084329914 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137647137 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.110742591 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086713727 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085158132 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097411013 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.100716856 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103640197 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139548086 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.092869702 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070229183 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089823764 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140678279 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074140503 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107143708 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.08785984 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.090234104 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115437607 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.090218587 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07900412 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.066186443 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124233918 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.154666803 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.067645056 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111794511 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.108145787 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100180732 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.118320178 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.0671661 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115815558 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135443621 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114924893 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137411538 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143832269 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113451527 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115463666 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111068856 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102821903 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077556146 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122936745 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131815887 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09351458 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090252051 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13254367 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114031039 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130353953 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.111130585 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109485004 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.100174357 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.262859176 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100635034 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.099324493 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140733812 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117833107 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.121240724 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083048931 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102746488 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114842498 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131950092 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07958402 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138317553 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.080902748 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114443022 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074981501 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119816262 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076849595 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.10771536 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077377366 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096790242 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.067562267 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.071740507 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137345639 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.108602457 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102634871 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096594015 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.133964656 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133348078 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.078509938 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105775103 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112742489 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09875697 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113390099 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106410018 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086200392 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092525918 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106139081 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082815328 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079044524 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111630331 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093076817 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123905248 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081729816 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072686062 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137378808 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102151084 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093413948 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078090625 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106746254 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.119523074 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090320784 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084852858 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113751023 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1018388 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137977516 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.086693553 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.094344931 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.120115044 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077434052 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.08857633 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.066022153 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.081905384 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.072639637 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.284285531 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074368475 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113749774 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.066663672 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.126928729 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08418366 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.090406637 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099405435 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107970832 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124708494 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092468835 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136268805 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08672233 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114430437 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104413432 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091173426 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08547761 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099804959 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097723941 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11938774 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.092767501 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120370098 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139997093 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101514225 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138890654 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088970948 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118505621 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104037492 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121202463 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109606487 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144961773 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134791938 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109819171 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108987797 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072481515 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091647508 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10254497 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109241068 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170993265 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122525394 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.069617602 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103248904 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091409969 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105906196 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102249181 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080132331 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144101881 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099016347 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085228706 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109177906 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.086864302 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100065195 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072517449 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091032116 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.095460306 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.247561113 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096573279 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112626679 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125444744 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110467604 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139755553 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09628492 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.090183981 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115273648 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107421769 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106975934 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083176061 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083791015 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134053987 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115513212 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.124999124 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098577902 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105993519 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107845259 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097225961 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123714689 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105125014 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.122888519 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077604656 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.073884561 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.066359816 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07006893 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119991593 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105720759 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109014376 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096298701 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070173965 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10059708 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103715805 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07010346 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086635605 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091514081 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096790266 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088959628 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103722866 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.111267693 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088715156 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10143905 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096882366 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143588502 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.097464846 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086130385 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140452302 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147196587 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086036578 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090368516 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.06904538 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076746479 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110916192 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146295995 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146494832 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.074104694 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082710757 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081258505 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082223353 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.067876099 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.084334696 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.084642724 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099603359 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094344689 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.107836812 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099691676 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071714741 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097828192 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094094235 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08751925 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098517511 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111680357 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117786058 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.133188725 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102769067 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098930473 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071214544 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.074319207 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07102081 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074766202 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094683228 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.073938542 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071216231 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130577407 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.085000863 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096201236 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099684041 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081966768 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070260218 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122550756 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.065099793 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122698139 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.067207116 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076631543 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.0775988 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073806355 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08580502 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124749781 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100379205 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102603205 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098736855 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096353648 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126748937 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143079767 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072930962 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132461957 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070477052 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069930501 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071281042 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104797839 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082179215 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105895526 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126380476 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084723985 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094492092 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071838709 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130022897 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.089127082 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095927574 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081324143 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07378513 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130341774 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075054852 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072951293 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083944986 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102830916 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.068491109 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097700171 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079260831 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075205475 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129809114 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.623649198 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084259786 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.070278815 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088833082 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.131918727 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115408567 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08741337 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099687346 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.109885539 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091787884 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088201356 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099478692 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.176770109 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069894911 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086331508 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.096415355 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091623264 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093499451 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.090727229 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.080683529 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.085745385 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.081048059 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075134695 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099604523 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08316555 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08918267 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098611436 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07812457 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.080109389 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1197923 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.095807593 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.093329148 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091383852 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.130276716 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086465999 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099606885 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067206791 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113482485 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087894147 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117891165 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092026409 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.107623653 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122046875 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087619224 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1307815 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10078701 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118309407 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083408549 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.073940053 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119664334 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082730521 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074155284 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.526582063 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.094628589 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094585641 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104836505 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.098453587 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115414742 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11938595 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113703264 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099511113 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080705532 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101389247 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.10364762 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085936191 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078947804 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075292921 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077327811 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107840158 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085604531 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084824762 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116165999 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089970289 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104119036 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100694541 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122848935 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083428676 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101604914 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110307938 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091922224 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109426105 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100238063 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128651199 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173719485 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124518837 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128808993 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133718696 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076560235 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075261603 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.06847729 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115785016 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079408497 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088797792 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081018818 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133733971 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081957756 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110805448 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233206634 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080141717 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093360489 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095961945 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069165487 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082604651 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107126814 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086868248 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07915101 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11779963 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082688645 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126745524 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110007746 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09822503 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093638058 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079799185 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112654913 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10425309 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.128268806 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093818157 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.074085279 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113738516 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101718506 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135620533 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071887664 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079174308 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126540701 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100245338 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128773985 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077167191 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144617948 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138507541 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096593163 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129336101 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068507904 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080112439 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085939486 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.121208865 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080256294 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104687031 seconds)
  done (took 65.677724534 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.17519553 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142802678 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082534617 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104129467 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187820437 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197682144 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120249117 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.102930843 seconds)
  done (took 3.105025282 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.067711302 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.082221505 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080218424 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207065477 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.094921478 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066125761 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071541417 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081088756 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066139952 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06556837 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100755174 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.0661528 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066204622 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.368396988 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065250696 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.070597559 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.065805884 seconds)
  done (took 3.575283477 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33207793 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.006019042 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.258415234 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.355910931 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.14793152 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556003349 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075518962 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08253304 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.694440402 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370820494 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.138486853 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.086674131 seconds)
  done (took 20.006558042 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.075319345 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077863202 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.077065386 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.07376728 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.073401239 seconds)
  done (took 2.278305971 seconds)
done (took 117.563857374 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.08319659 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.170291014 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066349572 seconds)
  done (took 2.171609272 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08077417 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.079326619 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079235347 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.077031894 seconds)
  done (took 2.22644617 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.073326484 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074826081 seconds)
  done (took 2.049433581 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22203653 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177508453 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092238529 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080406701 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.077982073 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078963757 seconds)
  done (took 2.154092269 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069758546 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069607505 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070255928 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.072364091 seconds)
  done (took 2.183467928 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.067113229 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.064945441 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068826239 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072041086 seconds)
  done (took 2.177196766 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082902894 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084110028 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114541833 seconds)
  done (took 2.185788975 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081265911 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081351184 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.076636685 seconds)
  done (took 2.14547248 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.107316449 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095023564 seconds)
  done (took 2.103349065 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078236336 seconds)
  done (took 1.984389245 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087813516 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096147958 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137393789 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.105179322 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.137827139 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.123709821 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075440071 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076538297 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.07238654 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070965192 seconds)
  done (took 2.884912273 seconds)
done (took 26.741212459 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077520534 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.367205181 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.357867669 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08566799 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.670331508 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.35544226 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.97930138 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089033972 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.099907024 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066881741 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08364333 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.647419162 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.974578363 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32531932 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.959170264 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.320812181 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.650044586 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067100859 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066319778 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067328789 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.967019734 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066428368 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066987044 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067638845 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647955008 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37294691 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.06787747 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.319484007 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067098693 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070462678 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356055832 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067727597 seconds)
  done (took 16.326971277 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.068808588 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.121719987 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073655734 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085665519 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071472535 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070480204 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072604354 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06994882 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114295164 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067892238 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084326326 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066546214 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.070547769 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067892597 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086726029 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066717403 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068919738 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069836416 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066802746 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067686248 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.08503227 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066376154 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067090189 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067309304 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067126192 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079877596 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067872246 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.065987041 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067327475 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070536067 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071221669 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067770502 seconds)
  done (took 4.30479253 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119580899 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124357805 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071560614 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107368299 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115879902 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068277844 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149934766 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091568177 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11381084 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067215304 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085151414 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066553906 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102331903 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067840088 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087055689 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067701061 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071232719 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069880897 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069599256 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070064338 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088833666 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068727613 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07012384 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069741183 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06977672 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084524922 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071174846 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069949028 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069877226 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074358579 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075903338 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071898874 seconds)
  done (took 4.597296598 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.06794935 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069831415 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075821409 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.079725974 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066615 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068869934 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.070061505 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066812937 seconds)
  done (took 2.497253691 seconds)
done (took 29.647534401 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077420873 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.06747677 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.071082877 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087686032 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074626824 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070287565 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064560511 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074842479 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072316365 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.0721231 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073872993 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06752051 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070585685 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064542905 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072384185 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065990425 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073171446 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071343023 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071832553 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073043562 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069313962 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072387606 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076182472 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071555607 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.071977223 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.071741828 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076286494 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.0730377 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067264298 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.069784313 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06876844 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082081158 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073067983 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.072201897 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065398975 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064758368 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069687266 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067569009 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.071081541 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073650303 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066342275 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072920649 seconds)
  done (took 4.895172092 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086324747 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.09231168 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087149622 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.080856319 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108249853 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.082285588 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091862948 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.079866662 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078024763 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091031285 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.074252027 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07946545 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081555717 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075869865 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078791088 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074814135 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079884203 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074024234 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078288999 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078532042 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091823425 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072055009 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079123911 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080005706 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073753811 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079506574 seconds)
  done (took 4.067849817 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.071101385 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086725473 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090807862 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.140337652 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107680076 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081283596 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080175699 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.091286021 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099294968 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066574411 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070762121 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092199845 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094507112 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073373452 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104996167 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084291525 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078522105 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067948164 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.0728955 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100978837 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089152843 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.085020571 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098958727 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086333188 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065064503 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075500443 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073406382 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082153719 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073700109 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078513123 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070290153 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070105025 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067092299 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078735327 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073114153 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064330954 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088725951 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079508666 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.080809093 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.104784124 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076268869 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068043163 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.097138028 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13203711 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.065966363 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069162654 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070050428 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079219911 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.067592326 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096482836 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084832609 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066120271 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.084779949 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.067792762 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068253962 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082985014 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.067735332 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.109375308 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078874576 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072600078 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087498629 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072791406 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090064728 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068159989 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079814984 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069526214 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069572305 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066846431 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104985544 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075796192 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.119842505 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067103468 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064014232 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.078324591 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079159615 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072776897 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.065853433 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085526541 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077954305 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.069532771 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077713636 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.068490388 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.068890439 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101194009 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.064652188 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.063777861 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064154401 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06815496 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069119681 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.066683723 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078801977 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.065103746 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.069503397 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.081136118 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.066096514 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.066711937 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.068365973 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.066947697 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06538114 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.076336615 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070004414 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.067979373 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.078829734 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.067078396 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.069629808 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.081155161 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.075672481 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.065642832 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.067374595 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.068350305 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.067962944 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.070493073 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.069389508 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.067906544 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.073161904 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.073299035 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.071724413 seconds)
  done (took 11.07221728 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.160986812 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.151264767 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.067136866 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.14641823 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.074059865 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.070466038 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.147719025 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.086316813 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.066954246 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067712051 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066223444 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.094817438 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.090393592 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.101023459 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.070400238 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.066967184 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.091990364 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.099757048 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.149941788 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.144495622 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.090312167 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074544062 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069431349 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068764478 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068070914 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.075830877 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08300135 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.075103476 seconds)
  done (took 4.595967094 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073129069 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082268016 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070982998 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.091116868 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.085389543 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068770059 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069532934 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068341474 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.08393316 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072849689 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066941878 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071193238 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070873912 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067477405 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067656386 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.072924151 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.072799268 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065317449 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070644391 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071086782 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07718267 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.092590043 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.070648882 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068632456 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071688066 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.068352348 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075966664 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.078095977 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067872956 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.09962509 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065415096 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072516748 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082135793 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068906727 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.068397438 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.069217571 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067544834 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066490931 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067275509 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064693073 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064632759 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071838805 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.065221448 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072258319 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080850052 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074345607 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067706804 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071581579 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.068835856 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063490295 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.069989564 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.069725722 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069241471 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075186446 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070441805 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069342962 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069322122 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09689382 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072729781 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.065776458 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.065837445 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06439325 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068303025 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074272616 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.082848664 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.067928635 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.064579943 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.066416211 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.071849284 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082454056 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067485767 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073784643 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.065068996 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068009447 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.068887097 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069500224 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067842313 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.064873226 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066454846 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06661454 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067163034 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066127299 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.066307129 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069043344 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064128923 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.064878659 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066931641 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.067609756 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072631344 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.06567092 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069336231 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.06768233 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.065372074 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.069071948 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.072249853 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.069232411 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08656142 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.074926955 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.066869901 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.064436199 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.081011796 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.068645788 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.065553781 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071799023 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.07096868 seconds)
  done (took 9.44411258 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089177093 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067475901 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.085992829 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094395778 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078539646 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.072884515 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082519071 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.069189339 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084815652 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067353332 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077024434 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066609522 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083121103 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077762132 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07017148 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079181945 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070869311 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089394128 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.08341194 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066820572 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07733821 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081065998 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.081241354 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.086819776 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086437956 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.087783595 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.08054448 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070746588 seconds)
  done (took 4.19705233 seconds)
done (took 40.194908976 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.011783787 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.184624297 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.007549464 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.282525503 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.060847188 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.212590134 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.116218005 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.986978545 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.218747347 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.019660661 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.327848291 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.3665898 seconds)
done (took 69.797220267 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.054488765 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.126552687 seconds)
    (2/2) benchmarking "String"...
    done (took 2.203951548 seconds)
  done (took 6.251944701 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.576668431 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.981435082 seconds)
    (3/3) benchmarking "different"...
    done (took 2.031696127 seconds)
  done (took 8.509305831 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.06634321 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.615746979 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.241229362 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.978221258 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.983674749 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.392708022 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.798540411 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.451724218 seconds)
  done (took 33.379593622 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.328446502 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.243947365 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.716306988 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.761348141 seconds)
  done (took 17.019238272 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.584059085 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.239788408 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.239818379 seconds)
    (4/4) benchmarking "different"...
    done (took 2.236497399 seconds)
  done (took 11.27724853 seconds)
done (took 88.575730271 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.978630665 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.164290424 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.981071863 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.131791363 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.007714437 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.010050422 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.985953235 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.016857629 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.977237188 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.980174751 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.391314286 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.985444766 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.987887236 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.009561524 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.989648209 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.990873282 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.992840808 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.988199828 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.006246837 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.564871082 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.491457211 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.990025428 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.986413983 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.033930009 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.064402539 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.024400862 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.611953234 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.988661972 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.569792268 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.997137557 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.987955869 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.975915911 seconds)
  done (took 210.77841155 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.972572194 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.835149102 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.910850981 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.007598213 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.294310883 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.170810956 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.116757053 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.368508978 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.975901926 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.970371821 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.148930799 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.96823486 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.164498914 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.902172875 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.963501631 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.991488315 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.126394304 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.16119548 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.966777014 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.156284995 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.98493805 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.963311699 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.925734596 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.118318931 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.993821135 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.012835176 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.15533119 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.994030786 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.167420697 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.121767739 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.011532075 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.985730458 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.204207981 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.850252465 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.994540337 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.00881254 seconds)
  done (took 176.574932517 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.156231873 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.997418495 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.046115359 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.117164359 seconds)
    (4/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.983089415 seconds)
    (5/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.730687324 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.702645114 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.983846563 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.97939737 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.980409856 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.986558367 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.984590229 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.046884505 seconds)
    (13/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.979904335 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.44486316 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.993724316 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.980406942 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.980665519 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.431199896 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.989729291 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.98046896 seconds)
    (21/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.98015179 seconds)
    (22/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.980012577 seconds)
    (23/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.044248692 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.397215143 seconds)
    (25/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.116928928 seconds)
    (26/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.984293638 seconds)
    (27/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.990444357 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.118118945 seconds)
    (29/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.991617062 seconds)
    (30/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.971104126 seconds)
    (31/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.098337474 seconds)
    (32/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.985251559 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.058990956 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.117959698 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.992420039 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.061893698 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.988758812 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.465642856 seconds)
    (39/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.980654762 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.981024394 seconds)
    (41/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.979880975 seconds)
    (42/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.984117938 seconds)
    (43/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.043143817 seconds)
    (44/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.981925951 seconds)
    (45/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.079834718 seconds)
    (46/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.072527053 seconds)
    (47/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.980670989 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.994402366 seconds)
    (49/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.050021614 seconds)
    (50/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.675116794 seconds)
    (51/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.984773644 seconds)
    (52/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.982052216 seconds)
    (53/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.981353814 seconds)
    (54/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.981271399 seconds)
    (55/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.98343919 seconds)
    (56/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.11238458 seconds)
    (57/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.982421452 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.008995127 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.573488228 seconds)
    (60/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.986837365 seconds)
    (61/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.982525475 seconds)
    (62/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.982917274 seconds)
    (63/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.981329749 seconds)
    (64/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.982516299 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.99095924 seconds)
    (66/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.020127408 seconds)
    (67/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.77936288 seconds)
    (68/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.178043364 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.374368757 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.788469348 seconds)
    (71/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.987623809 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.646787761 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.04345096 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.983229898 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.061963693 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.982276761 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.984360778 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.951170265 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.981880061 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.062046652 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.080692426 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958820295 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.116485914 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.958865283 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.982839341 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.039433783 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.432160532 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.988766011 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.995357315 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.041268626 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.983214047 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.982697777 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.990489743 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.107241219 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.985551745 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.98234327 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.982926495 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.069604717 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.988738191 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.13424365 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.208809343 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.055525815 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.226495582 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.200243738 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.989759454 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.983614471 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.998105048 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.986033309 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.983725995 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.992738166 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.984674352 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.984061376 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.984993564 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.98486836 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.984135859 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.985986387 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.997860835 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.983432793 seconds)
  done (took 433.043458645 seconds)
done (took 824.520805595 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.705014741 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.766558444 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.613703708 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.654835083 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.626933656 seconds)
  done (took 15.288537763 seconds)
done (took 17.208923447 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.006322331 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.001772666 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.990640384 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.008083266 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.005030972 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.004194907 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.036383975 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.02791057 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.022965946 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.004242165 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.012065417 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.006427057 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.010791082 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.026258614 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.012508152 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.013506499 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.00769318 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.997237889 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.013312546 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.008481993 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.006224521 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.005672567 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.006700198 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.012688715 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.018146092 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.007989724 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.001970074 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.008409303 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.010203878 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.009768892 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.043538614 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.013270893 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.039196716 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.015891531 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.013636816 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.016960938 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.004726433 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.03015912 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.007262061 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.044790309 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.014965409 seconds)
  done (took 84.470952568 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.994949343 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118344428 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.205318796 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.026331711 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.982422831 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.203689299 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.052197065 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.122109466 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.131187137 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.208015334 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.210616825 seconds)
  done (took 25.181215413 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.995170138 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.131707185 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.217413659 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.031286805 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.997782979 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.213531697 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.059639601 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.13129077 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.131372453 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.211255396 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.218640084 seconds)
  done (took 25.273096826 seconds)
done (took 136.846714953 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.370316252 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.018577613 seconds)
  done (took 6.314051034 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.99046814 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.007969073 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.137688215 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.991344539 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.991122759 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.992501098 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.99245211 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.991694761 seconds)
  done (took 18.022632078 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.991244635 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.990716918 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.989977433 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.990832608 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.990879367 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.98960095 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.990868408 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.991008922 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.990847795 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.99153876 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.990450684 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.990906576 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.991309962 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.991438334 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.991315756 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.991858773 seconds)
  done (took 33.781567724 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.991166706 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.991216746 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.99138589 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.990884885 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.991326397 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.991758605 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.992990069 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.990859683 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.990889106 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.991525739 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.991697481 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.991522196 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.991228418 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.99103062 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.992391581 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.991711446 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.991848052 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.992292409 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.993367914 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.992329346 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.992242078 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.992408318 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.996703386 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.9925711 seconds)
  done (took 49.735750632 seconds)
done (took 109.787690435 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.165522323 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.534198865 seconds)
  done (took 8.62751691 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.994288727 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.992975552 seconds)
  done (took 5.980096497 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.993408284 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.992856866 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.992923455 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.992960522 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.992991724 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.993222135 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.993381563 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.993832502 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.992997054 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.993103061 seconds)
  done (took 21.860117054 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.992818586 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.993294579 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.994245112 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.994294599 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.992949828 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.993194544 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.993753913 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.993013252 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.994072626 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.994265573 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.994578467 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.994517747 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.993809794 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.994539422 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.994116019 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.99433085 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.994070412 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.994406054 seconds)
  done (took 37.819796692 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.993075898 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.994549652 seconds)
  done (took 5.91665583 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.995045963 seconds)
    (2/7) benchmarking "second"...
    done (took 1.994598651 seconds)
    (3/7) benchmarking "month"...
    done (took 1.994847708 seconds)
    (4/7) benchmarking "year"...
    done (took 1.994539833 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.994548812 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.994068403 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.995110221 seconds)
  done (took 15.892348248 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.995186411 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.169707105 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.221679608 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.608390266 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.996545249 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.99805825 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.859776844 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.998685565 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.999806128 seconds)
  done (took 21.777365795 seconds)
done (took 119.801582218 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.801341063 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.000165928 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.294244797 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.071905723 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.016126799 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.339896594 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.043404604 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.545895289 seconds)
done (took 44.041809186 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.089589561 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.993245352 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.024929628 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.023669524 seconds)
  done (took 22.972187351 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.99373595 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.31726383 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.020058338 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.936079078 seconds)
  done (took 23.211744165 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.371761043 seconds)
    (2/2) benchmarking "read"...
    done (took 2.351679932 seconds)
  done (took 6.658888277 seconds)
done (took 61.863564341 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.996309506 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.995970306 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.996288089 seconds)
    (4/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.996337354 seconds)
    (5/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.996461158 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 1.996873668 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.996061559 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.996064943 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.996117891 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.996211223 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.998154457 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.997139881 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.996730527 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.996273712 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.997414596 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99750588 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99711281 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.996907231 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.998365572 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.998325484 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.99710331 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.99763451 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.998318913 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.997481249 seconds)
  done (took 49.859696375 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.997598492 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.994436258 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.988380015 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.997430865 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.998166329 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.998313318 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.9978861 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.997705031 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.998270789 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.998850814 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.998734293 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.997899945 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.998016668 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.998456565 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99686837 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.997442229 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.997901576 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99777447 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.997537886 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.998009426 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.998486394 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.998035818 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.998962672 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.998090008 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.998399614 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998319082 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.998515414 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.997896319 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.996648539 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.998718381 seconds)
  done (took 61.862088185 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.998687617 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.999474961 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.998926518 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.999559855 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.000357355 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.999449839 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.998903623 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.999285998 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.000244976 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.000704533 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.998804495 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.000024736 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.999226157 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.999729116 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.999632033 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.000195855 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.000143636 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.000022143 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.999900419 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.999997231 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.999844628 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.000534802 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.999547175 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.000575856 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.000445908 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.000332497 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.000091697 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.000227993 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.001161421 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.999555911 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.001771579 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.988915975 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.000532545 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.000970557 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.001025494 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.000846584 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.001014087 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.00414483 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.007444349 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.001091342 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.999463385 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.002028007 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.001122476 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.001240664 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.001526655 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.001088032 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.001084612 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.001542057 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.00149074 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.002134818 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.001543811 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.002156503 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.002351522 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.001776641 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.002093429 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.00181363 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.001267959 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.002685252 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.002643221 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.001685596 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.002376971 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.00175614 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.001823834 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.002417781 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.002632287 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.002640934 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.00224991 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.00177869 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.002708816 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.004643139 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.002817736 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.001324698 seconds)
  done (took 146.001476495 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.002850435 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.003388135 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.002742577 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.003560347 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.002785863 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.978700177 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.0027975 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972090799 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.003987749 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.002972406 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.00359894 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.973675151 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.004261706 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.003453405 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.003278383 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.003382657 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.003909448 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.002638977 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.004483305 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.004162909 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.993389948 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.004792993 seconds)
  done (took 45.918959125 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.004419029 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.004525979 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.004150867 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.004627352 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.003528157 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.003287112 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.004413482 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.004984137 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.004290469 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.00411414 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.004895658 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004464254 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.004668459 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.004633655 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.004575633 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.005417329 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.004104435 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.004969945 seconds)
  done (took 38.018971422 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.005878318 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.005005494 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.004597217 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.004582699 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.00547115 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.005214614 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.006371142 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.005160582 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.00551625 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.005665816 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.005016512 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.006073474 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.00567075 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.004882044 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.005038821 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.006550074 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.006034366 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.005426043 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.004908632 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.005832609 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.006290908 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.005976558 seconds)
  done (took 46.060780047 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.006116489 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.006067454 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.005822264 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.006319793 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.006163076 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.006532626 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.005933555 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.005736151 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.006071494 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.00633785 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.005842784 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.00760916 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.006906447 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.006114773 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.006976898 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.007119709 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.006503236 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.007108067 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.006860066 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.007913742 seconds)
  done (took 42.070967486 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.006620286 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.00689851 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.00757862 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.007243046 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.007470065 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.007927726 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.007233862 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.007086782 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.007143061 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.008029306 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.007289677 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.007507649 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.007717158 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.008258909 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.003903441 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.982117021 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.003705067 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.983434625 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.008425757 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00404847 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.000673762 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.00810463 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.008790299 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.007724551 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.008861505 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009284536 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008001144 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.008885397 seconds)
  done (took 58.092021325 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.008265826 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.008318372 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.008851158 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.009529034 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.008021105 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.008828681 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.009455911 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.010093055 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.008654437 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.008842529 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.009068504 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.009133857 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.009088296 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.00852614 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.009336551 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.009271274 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.00884662 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.009447027 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.009061905 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.008821224 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.010120167 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.008907788 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.009963622 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.009702255 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.009385211 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.010024847 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.008917978 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.009683105 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.009774739 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.009121427 seconds)
  done (took 62.218367492 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.030101877 seconds)
    (2/2) benchmarking "in"...
    done (took 2.027490497 seconds)
  done (took 6.001771944 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.01013817 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.009979664 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.009741103 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.010151213 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.009737781 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.009760445 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.010313066 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.010542062 seconds)
  done (took 18.024134935 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.011044754 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.013545583 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.011105561 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.010505373 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.010388738 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.017947562 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.01199953 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.011832779 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.012380077 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.012097006 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.014622172 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.014298777 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.01855374 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.015243124 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.010759419 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.011746016 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.01272588 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.013428546 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.012663506 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.999283039 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.014291999 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.011129311 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.012067107 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.011714236 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.012392238 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.014211407 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.019926837 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.013203216 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.011940788 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.011973693 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.017798197 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.011504785 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.011794267 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.013110786 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.01239527 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.012978871 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.01808396 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.012888044 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.01318212 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.011610762 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.013876492 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.014139209 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.016133299 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.019774354 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.012111068 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.01279252 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.013317346 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.012229233 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.013517769 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.016597359 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.021094029 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.013523016 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.012914391 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.0127103 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.014645253 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.013059413 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.013669599 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.014976307 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.018768411 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.019913474 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.01599443 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.032628567 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.021419835 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.01458932 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.012926387 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.023470562 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.036181191 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.014860915 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.015635019 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.014299057 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.021081719 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.013814159 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.014500364 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.014368542 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.027525712 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.0225358 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.014526216 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.016326515 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.015145308 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.014507462 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.015422279 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.014615616 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.01474993 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.014312109 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.024208712 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.037669595 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.015023351 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.014847709 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.016216071 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.016165357 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.018807199 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.017141784 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.015012528 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.015109371 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.016806649 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.018232501 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.014706951 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.015006507 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.015101389 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.023285738 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.016307596 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.015849893 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.018875043 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.022776445 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.016435046 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.016518226 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.016224759 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.015845235 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.023277385 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.016507155 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.015706802 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.016444327 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.017083957 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.020316795 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.016681359 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.019647577 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.023538828 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.02375846 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.017697625 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.020584456 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.020097158 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.018462063 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.02505879 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.039017752 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.017181457 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.019577516 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.021934818 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.027203849 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.020706191 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.01690288 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.019642752 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.016468295 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.016982139 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.017943023 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.0168798 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.017000655 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.017939625 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.016964465 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.01755064 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.017757239 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.020059581 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.018692201 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.019862009 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.018778682 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.021207844 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.01826302 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.019749387 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.024573156 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.019403066 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.018130173 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.018355806 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.020092001 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.020725542 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.018559976 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.018036911 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.018667759 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.018689414 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.019114574 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.019988439 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.018072402 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.019628932 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.019800467 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.022554454 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.0185291 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.019130561 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.018951651 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.018890266 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.017831238 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.020503042 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.019889201 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.021536735 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01989827 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.023575868 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.019452711 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.018708853 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.019173701 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.018876572 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.019187222 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.022249872 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.029323201 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.023588731 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.028762517 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.020501867 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.025572914 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.020245417 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.020693049 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.020942455 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.020191856 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.019467222 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.019648637 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.020454168 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.022416598 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.039025844 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.029930198 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.022015111 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.020434081 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.026222564 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.024233855 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.025459033 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.021416356 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.020543386 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.0223876 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.020637511 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.020921288 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.021461488 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.023622921 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.020934564 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.02067534 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.024664291 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.020685159 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.020947269 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.021168052 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.021779188 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.022122039 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.020847929 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.021172983 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.022249311 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.024241194 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.028936777 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.022751002 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.020937713 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.020544105 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.022858489 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.021073955 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.021612743 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.022870153 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.025053394 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.02207747 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.022227079 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.029612327 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.0229365 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.023249033 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.022340972 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.02230287 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.023652697 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.022172798 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.024982642 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.030171501 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.023871222 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.021798651 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.027679383 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.022861658 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.024521625 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.022636384 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.023924942 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.022942633 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.023919505 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.022565406 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.023553604 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.029540698 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.023052638 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.023392501 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.023803411 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.02602801 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.025085027 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.025637747 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.02333562 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.026092687 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.030574605 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.028948327 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.023870132 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.026600905 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.024849124 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.025113273 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.028984486 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.024489632 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.036065914 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.032370614 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.023360809 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.023474189 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.023209413 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.027307537 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.024520896 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.024367687 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.030412011 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.02541339 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.027010548 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.028672505 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.024845973 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.023913215 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.03052804 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.025198189 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.027001206 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.025868776 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.0265345 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.025538737 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.024568217 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.026875422 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.025044268 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.026226776 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.028621094 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.018105237 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.000207303 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.025365241 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.033948861 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.025872683 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.025827112 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.032269535 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.02624755 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.025913353 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.026638061 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.026354817 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.026234107 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.025643327 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.02409509 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.027957043 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.025364851 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.02852584 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.034907427 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.0291207 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.033749427 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.027314978 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.035509606 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.026114341 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.026082016 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.0269515 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.028944528 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.032773148 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.02572227 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.02579124 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.033732133 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.027281737 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.027416884 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.030581217 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.027141052 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.025631456 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.026967961 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.02817543 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.032068455 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.029537573 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.026717289 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.027261901 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.028009757 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.026610375 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.029379485 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.028420489 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.027203569 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.028461725 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.027275628 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.994672834 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.027318447 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.027668588 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.027991783 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.026701546 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.027700765 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.035336506 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.02813524 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.029480701 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.031681852 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.028418998 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.036119299 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.028448523 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.027592396 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.029285271 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.028503529 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.030674333 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.028530249 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.026283528 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.018179478 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.028179366 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.030568924 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.039673344 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.035838679 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.03174498 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.030007668 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.028531051 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.029206785 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.037124469 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.052703372 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.028477332 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.030807671 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.033461008 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.035804701 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.030871776 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.034510335 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.03217354 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.036034954 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.031154437 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.029482425 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.033092476 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.041528124 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.029538536 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.03007762 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.03052083 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.033269004 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.033123262 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.02950874 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.030594432 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.033919108 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.03167368 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.040695392 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.030820108 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.031743623 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.030910428 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.030253562 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.030508009 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.030360265 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.031466843 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.03161595 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.031153661 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.030965211 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.032941103 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.035088134 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.030641494 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.034521019 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.038892467 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.030668078 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.031106017 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.033698199 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.031304752 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.032535303 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.031261424 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.03181309 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.033670046 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.031428004 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.032356836 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.034484187 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.039672392 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.032957944 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.03107281 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.031849035 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.034730544 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.032200665 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.031441065 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.032297991 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.039974663 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.034736267 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.042313591 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.041105101 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.031902199 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.032381359 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.039614257 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.039195605 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.031925667 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.032092458 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.031662183 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.035303091 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.033134703 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.03330252 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.032646739 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.034640561 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.038395819 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.034023059 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.032610839 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.032897415 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.032472926 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.03506251 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.034432033 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.036199897 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.03207352 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.032698267 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.032380451 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.03383828 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.034201323 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.035302465 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.032711918 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.033699691 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.035459725 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.036292835 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.038264677 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.034575013 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033649237 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.0344264 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.034179083 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.034256197 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.034073801 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.035230526 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.033524457 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.037139915 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.041982775 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.033917463 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.034720156 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.035685317 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.03767316 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.034874363 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.03509173 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.034040911 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.034969428 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.041420869 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.035105381 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.033942157 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.035175973 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.034845274 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.031976388 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.032311509 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.039387768 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.034275032 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.035355716 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.035366313 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.038830451 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.044509354 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.038523117 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.038634082 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.043211352 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.039432603 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.037345861 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.035615418 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.035495638 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.036148978 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.036622506 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.039201736 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.036813157 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.037575324 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.035337464 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.037100226 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.036593129 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.037843614 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.035915722 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.036030869 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.039225909 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.044597143 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.043684445 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.036582635 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.037526773 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.036401636 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.039689467 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.048108424 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.036618345 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.036704355 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.036123612 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.038490577 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.037457882 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.043544499 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.045450043 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.04082943 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.036893309 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.041832277 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.052725767 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.038307376 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.046233316 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.065716359 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.039665584 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.036951921 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.03748711 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.038350057 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.037908527 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.041335226 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.037325035 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.042589136 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.037753266 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.038212856 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.044479336 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.037913078 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.037796941 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.037433362 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.039924408 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.042862968 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.037682533 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.04422013 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.03802466 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.038194022 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.038344678 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.04008202 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.038504451 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.038638502 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.038514357 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.039979091 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.038500443 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.038299335 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.046967223 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.037846371 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.038431767 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.051425227 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.049836893 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.039111854 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.038812815 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.03834051 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.043382162 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.041205625 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.039506301 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.042999775 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.046496965 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.042848843 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.046789303 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.040875795 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.039570536 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.039920819 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.039858045 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.038986598 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.051006164 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.049284773 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.040422891 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.040924302 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.046107537 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.040025123 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.046675988 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.045302335 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.04282427 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.041972157 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.040095293 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.039404996 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.040850592 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.039439382 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.043444576 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.04847261 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.0403165 seconds)
  done (took 1210.396365507 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.03967124 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.039881591 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.040026373 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.041224508 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.040145882 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.040434491 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.040700596 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.041086607 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.040156315 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.040352037 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039541765 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.040093797 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.041217887 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.041106575 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.040677714 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.040992562 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.041091122 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.040660448 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.040645068 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.040905362 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.041992601 seconds)
  done (took 44.825963876 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.041534289 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.041675168 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.040589175 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.041688514 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.041110301 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.041115372 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.041681142 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.041299394 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.04191787 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.040867731 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.041741577 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.042200873 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.041309845 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.04172535 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.041459415 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.041168751 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.041232671 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.042712252 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.042081191 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.0425406 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.041599697 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.042448549 seconds)
  done (took 46.890091651 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.042099287 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.042320788 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.031354151 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.04193004 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.042171962 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.041839206 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.04286772 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.045636442 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.041603743 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.043402315 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.037705 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.050802329 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.042054993 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.046310319 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.043084576 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.042514414 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.188557429 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.043189299 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.042323538 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.042726689 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.030399904 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.048711559 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.042574239 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.044021146 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.042896528 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.04385056 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.043388758 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.042945664 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.043270077 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.044306976 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.047910574 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.043757555 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.044163338 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.04616231 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.044190668 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.045067076 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.04781449 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.043612853 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.044424001 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.043024226 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.053654407 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.066338018 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.043518286 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.043491984 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.050573347 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.04428553 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.043673848 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.04718498 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.051660528 seconds)
  done (took 102.291090362 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.044033273 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.044201681 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.043757599 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.043857194 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.044045857 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.043165135 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.044605846 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.044165869 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.044635423 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.043608923 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.044846968 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.044442176 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.044083203 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.04469623 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.044753196 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.044127629 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.045158845 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.044340539 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.044869596 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.044261314 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.044696356 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.044549609 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.044713611 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.04509728 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.04607488 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.045189066 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.044107789 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.044717937 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.045091157 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.045347603 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.046149025 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.045888555 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.045168722 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.044982453 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.044853231 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.046470411 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.045374592 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.046776994 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.045869482 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.045512751 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.045466052 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.046100918 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.045897339 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.046171596 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.046161433 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.0461495 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.046972061 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.04637557 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.046057516 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.045677315 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.045668058 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.046887395 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.045996609 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.046353995 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.046323734 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.046442527 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.046709857 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.047150584 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.046620472 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.046314065 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.046375281 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.046583212 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.047702401 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.045601596 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.046227024 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.046509377 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.047450179 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.047366075 seconds)
  done (took 141.069856806 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047529355 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.048110093 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.047388908 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047086977 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.047404088 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.047913133 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.047010462 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.047165355 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.047288166 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.047344329 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.047204762 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.048121321 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.047964245 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.047237328 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.048037236 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.047614925 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.047586955 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.04808356 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.048869294 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.047643522 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.047827909 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.048771154 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.048278712 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.048311995 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.048824553 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.048131824 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.04788125 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.048951048 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.048680708 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.04889932 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.04943921 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.048586757 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.048279433 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.048364649 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.049196633 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.049360345 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.049580446 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.049339049 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.049345195 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.050339331 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.049400969 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.050202249 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.049578762 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.022612702 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.049401746 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.048829488 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.049021322 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.047532522 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.049290165 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.049622623 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.050103126 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.049883083 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.049621536 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.049998271 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.050218323 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.049831825 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.050684189 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.049804784 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.050159962 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.050174497 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.050295586 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.050799684 seconds)
  done (took 128.978317711 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.050145461 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.049991419 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.050662264 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.050689498 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.05157063 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.05004494 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.050660565 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.051277118 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.050494513 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.051149279 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.050989379 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.051042623 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051585313 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.050939425 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.051246444 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.051759157 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.051318366 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.051081606 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.052379501 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.051125073 seconds)
  done (took 43.003298836 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.050354468 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.051802024 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.050895175 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.051432496 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.051938267 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.052582598 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.0515584 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05239959 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.051278882 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05260492 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.051686816 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.051649398 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.051387247 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.052476017 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.052641613 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.052197567 seconds)
  done (took 34.813202538 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.051491107 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.052857943 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.052196463 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.05191484 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.05260957 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.052737876 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.051862345 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.05322429 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.052677412 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.054181772 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.053027987 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.052850888 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.053134358 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.053768128 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.052638843 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.053737643 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.052426201 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.054124434 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.021631958 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.053454715 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.053167179 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.052978071 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.053086926 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.053208259 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.053676513 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.053641651 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.053478031 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.053577172 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.054144819 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.054093484 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.053589388 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.053674857 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.053793943 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.053595676 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.054178367 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.053932003 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.053547285 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.054460345 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.051557009 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.05396626 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.053736714 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.054550247 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.053542725 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.05430517 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.053979213 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.054810609 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.051546234 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.054394107 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.054641719 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.05489854 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.0549901 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.054761436 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.05478591 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.054802654 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.054978667 seconds)
  done (took 114.899863341 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.05525837 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.055384746 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.054618346 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.054889292 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.055650937 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.054584735 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.055071942 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.054868779 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.055379277 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.055522505 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.056506492 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.054321122 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.056418081 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.055029207 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.054800833 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.055752618 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.055729439 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.056802966 seconds)
  done (took 38.985385808 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.056254233 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.055810647 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.056228309 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.056036785 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.057026358 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.055485476 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.056663145 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.056808826 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.056293819 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.056779147 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.055972011 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.05643771 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.05639897 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.056365419 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.056653083 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.05685552 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.057096962 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.056673327 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.056501355 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.056369323 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.056965198 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.056984775 seconds)
  done (took 47.230718459 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.057468193 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.057271642 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.072033997 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.078020456 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.077332792 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.092264687 seconds)
  done (took 14.42474013 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057504899 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058227966 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.059217462 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.056333349 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056458237 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057296231 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057552324 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057600489 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057027403 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.057204512 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057243173 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.057485251 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.057559532 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057631679 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055980029 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.057970032 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057154065 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05767156 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.057243996 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057481777 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057582298 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.058523983 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.058408597 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059247369 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.058262194 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.057330812 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058795084 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.058750491 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.058802622 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.058048163 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.057585301 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.058286031 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.058486936 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.057782817 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.057979796 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059025252 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059512867 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059593791 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.058981369 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.058956576 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.058658905 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059164463 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059524555 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059641413 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.060073024 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.05919896 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.059112433 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.059425516 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.059855509 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.060506048 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.060504675 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.059470993 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059388865 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05965561 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059546075 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.060421335 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.058927116 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.059733887 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.059657936 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060406352 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060047223 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.059997569 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060253477 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05993137 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.059676289 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.059507117 seconds)
  done (took 137.861263097 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.060976779 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.061136509 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.060704272 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061079066 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060720141 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.061415274 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.060030313 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.060213487 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061084396 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061234858 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.060989571 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.060261696 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061450831 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.061716834 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061671372 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061322656 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.061133227 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.060450082 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.060759727 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061943524 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.060999369 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061313362 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.061707504 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061842158 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.0614767 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06177964 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.061544639 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.060563767 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.061822139 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061658935 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062383899 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.06088747 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062147281 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.060594954 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.062020403 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062444782 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062532801 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062380014 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.061450925 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062495643 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.06188086 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.061754398 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.062600838 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.062620691 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063138154 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.063074173 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063138818 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063087151 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.062512084 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062521572 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.063308528 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.063480258 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.063432422 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.063092607 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062856252 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.062750215 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062815993 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.06265474 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063846204 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.06266146 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.064086799 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.063729375 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.06313041 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.064283342 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.063532178 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.062478164 seconds)
  done (took 138.087950074 seconds)
done (took 2819.825253535 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.113986416 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.183907793 seconds)
  done (took 16.294176975 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.230608975 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.088002886 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.251346535 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.178334743 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.073600221 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.07153175 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.067794888 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.068858066 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.160173327 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.067838136 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.082681763 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.068013012 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.068646837 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.068539368 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.067583092 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.069266368 seconds)
  done (took 55.883506698 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.07033449 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.072335176 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.068915327 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.068748713 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.082447855 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.228749263 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.091838803 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.071864005 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.086260893 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.103669317 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.088035739 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.074929487 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.076631381 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.075582917 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.161842496 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.118728984 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.128276753 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.145998844 seconds)
  done (took 39.815336701 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.151899593 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.079270296 seconds)
  done (took 11.238644307 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.104522864 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.076624032 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.10417902 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.06935059 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.065573596 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.103482802 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.070675092 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.076159283 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.070262107 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.080685081 seconds)
  done (took 72.824663013 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.07225185 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.073423791 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.370888878 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.080737572 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.076640263 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.093397355 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.070761967 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.101477202 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.07462249 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.068380288 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.073270918 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.364439837 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.082960824 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.072858149 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.498644743 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.084650818 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.075971833 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.101787544 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.103948485 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.075469149 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.077390474 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.073611926 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.232362893 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.772462162 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.07215843 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.075354557 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.07779531 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.06880244 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.068958358 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.07190665 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.072540647 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.070069878 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.07406541 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.072169823 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.078783452 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.075755575 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.561977455 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.090200613 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.078314597 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.162238791 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.115714029 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.079029663 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.853383079 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.075223479 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.070313306 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.077623413 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.768024894 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.167360726 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.073940833 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.241181988 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.408323526 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.088687254 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.22295716 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.233976325 seconds)
  done (took 144.02257764 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.069022076 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.305677277 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.223309285 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.071945468 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.328053204 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.28339029 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.077055598 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.116882242 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.074286083 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.274381302 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.332662618 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.174584999 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.074058284 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.072752028 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.070842769 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.069195566 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.215150384 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.139316672 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.075882137 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.070039373 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.096494745 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.273977586 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.194081308 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.074989135 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.098023445 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.273638007 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.194436382 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.174353162 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.893742834 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.071579341 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.133030715 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.074673583 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.073125869 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.072143697 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.225008206 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.1664291 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.156871957 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.074708338 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.072516634 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.070466114 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.743992749 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273725381 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.16854307 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.197031924 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.323662751 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.287323896 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.685243951 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.071438592 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.696045537 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.23749132 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.279404903 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.281012684 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.180768392 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.076782396 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.357415488 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.071938508 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.071978919 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.29519236 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.292976124 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.147318814 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.077919787 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.074630083 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.072880368 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.311060649 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.07661351 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.165700069 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.077543253 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.075139545 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.166179608 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.175254844 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.30273569 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.295448674 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.105077862 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.394555402 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.562498049 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.276366783 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.140008452 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.295727618 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.077858484 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.078572607 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.157534289 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.922077025 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.336279504 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.316943296 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.274508987 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.10673427 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.724335377 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.073109423 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.261472561 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.266552457 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.31075595 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.318439172 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.312709778 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.438373447 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.074094806 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.074724571 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.388058682 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.191303863 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.027151945 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.424639364 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.304246796 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.567983474 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.100758068 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.421886438 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.205146708 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.078384516 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.721448034 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.075552059 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.280265376 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.115495293 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.077277185 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.077288617 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.266356661 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.985096275 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.075527117 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.796112912 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.136520449 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.080611223 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.281221438 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.079769076 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.321518439 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082311902 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.308818709 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.714378993 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.107189322 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.251333856 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.31970802 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.71605629 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.31771686 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.319431625 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.192013392 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.300114316 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.879394797 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.076948398 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.337968474 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.079328171 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.075889537 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.245294338 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.081165934 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219897043 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.539524191 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.342233326 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.098317477 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.307356733 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.081561235 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.316127227 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.110747264 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.128323402 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.080469665 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.208134007 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.079219063 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.919179595 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.235411661 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.080201278 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.07735847 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.664942087 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.077095906 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.226875336 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.303222698 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.099020847 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.147015956 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.643169555 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.074330471 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.16641061 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.100379645 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.709033583 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.078585338 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.332578463 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.043284143 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.554672056 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.078594655 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.313056343 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.26436101 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.082005288 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.079824406 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.919888098 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.07765557 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.077392599 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.234894169 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.146636366 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.998611664 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.280106206 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.083662712 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.207422178 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.081635928 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.162918019 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.420524441 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.078869263 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.07901989 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.078176769 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.080512173 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.08088901 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.288623935 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.105877506 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.512258607 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.216511791 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.336386861 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.386052726 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.278407019 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.121155403 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.085819729 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.302701558 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.083507883 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.142456108 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.082792412 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.099790112 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308777454 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.082795904 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.286448427 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.318611843 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.13033791 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.126659907 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.083494849 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.08067745 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.991346216 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.229246629 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.169005371 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.082785679 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.080406028 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.194412453 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.203487093 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.262645614 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.907597169 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.239839587 seconds)
  done (took 948.35971839 seconds)
done (took 1290.435195893 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.082301792 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.085179506 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.085532558 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.079822069 seconds)
  done (took 30.347318344 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.082970253 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.082612043 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.083256267 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.08400249 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.083000115 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.081391382 seconds)
  done (took 14.511768561 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.082468687 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.086397563 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.087159362 seconds)
  done (took 23.269920007 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.516512057 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.492661588 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.156994587 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.227148836 seconds)
  done (took 11.407812825 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.087857242 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.083220181 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.083386973 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.085731761 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.083934042 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.083939245 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.085049293 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.084811106 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.083420078 seconds)
  done (took 20.785054524 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.233432598 seconds)
done (took 106.567857123 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.200624112 seconds)
    (2/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.107406632 seconds)
    (3/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.387505225 seconds)
    (4/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.28025536 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.755963649 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.335361251 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.788678318 seconds)
    (8/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.36483273 seconds)
    (9/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.488269488 seconds)
    (10/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.271831406 seconds)
    (11/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.086139106 seconds)
    (12/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.347791518 seconds)
    (13/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.084497704 seconds)
    (14/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 3.879916743 seconds)
    (15/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.090871804 seconds)
    (16/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.103184146 seconds)
    (17/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.634337369 seconds)
    (18/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.510910879 seconds)
    (19/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.82830084 seconds)
    (20/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.419671697 seconds)
    (21/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.103086652 seconds)
    (22/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.014636193 seconds)
    (23/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.294013191 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.107484353 seconds)
    (25/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.400019855 seconds)
    (26/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.093133257 seconds)
    (27/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.26297657 seconds)
    (28/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.18388737 seconds)
    (29/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.222876165 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.223408948 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.094909507 seconds)
    (32/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.172695833 seconds)
    (33/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.149447005 seconds)
    (34/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.389274725 seconds)
    (35/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.469911492 seconds)
    (36/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.281418753 seconds)
    (37/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.18378865 seconds)
    (38/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.148592762 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.308544196 seconds)
    (40/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.172882303 seconds)
    (41/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.496681849 seconds)
    (42/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.292968065 seconds)
    (43/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.492522702 seconds)
    (44/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.386498069 seconds)
    (45/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.31561597 seconds)
    (46/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.088538361 seconds)
    (47/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.332062329 seconds)
    (48/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.507667595 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.209658981 seconds)
    (50/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.685509266 seconds)
    (51/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.811937411 seconds)
    (52/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.331683487 seconds)
    (53/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.40382349 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.404881519 seconds)
    (55/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.295110965 seconds)
    (56/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.167847154 seconds)
    (57/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.220477589 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.339895734 seconds)
    (59/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.528010018 seconds)
    (60/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.051331351 seconds)
    (61/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.195337629 seconds)
    (62/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.797855546 seconds)
    (63/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.068014376 seconds)
    (64/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.52226316 seconds)
    (65/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.408695518 seconds)
    (66/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.10698447 seconds)
    (67/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.088022196 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.087974233 seconds)
    (69/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 8.646932537 seconds)
    (70/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.439536162 seconds)
    (71/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.802594789 seconds)
    (72/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.111970934 seconds)
    (73/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.268127692 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.487880763 seconds)
    (75/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.094410664 seconds)
    (76/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.088779931 seconds)
    (77/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.23450759 seconds)
    (78/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.380351289 seconds)
    (79/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.211766743 seconds)
    (80/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.088069673 seconds)
    (81/341) benchmarking ("sort", Float32, false)...
    done (took 7.859793743 seconds)
    (82/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.365540352 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.101938345 seconds)
    (84/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.913311035 seconds)
    (85/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.310042114 seconds)
    (86/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.232303116 seconds)
    (87/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.342074016 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.090209409 seconds)
    (89/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.900254486 seconds)
    (90/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.312015047 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.185734996 seconds)
    (92/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.634710889 seconds)
    (93/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.169111469 seconds)
    (94/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.236302597 seconds)
    (95/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.107209556 seconds)
    (96/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.088125335 seconds)
    (97/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 4.219662477 seconds)
    (98/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.199789559 seconds)
    (99/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.307401426 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.961584126 seconds)
    (101/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.232156128 seconds)
    (102/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.312761257 seconds)
    (103/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.484337353 seconds)
    (104/341) benchmarking ("sort", Int8, false)...
    done (took 5.039848994 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.934580198 seconds)
    (106/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.190923349 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.991594747 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.096953811 seconds)
    (109/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.496806768 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.102998867 seconds)
    (111/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.293030413 seconds)
    (112/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.09212216 seconds)
    (113/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.170872913 seconds)
    (114/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.475605468 seconds)
    (115/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.089880025 seconds)
    (116/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.470264782 seconds)
    (117/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.09960818 seconds)
    (118/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.984564551 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.489875767 seconds)
    (120/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.36654359 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.059289832 seconds)
    (122/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.098933524 seconds)
    (123/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.546840541 seconds)
    (124/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.281317097 seconds)
    (125/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.101591245 seconds)
    (126/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.091998199 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.16295673 seconds)
    (128/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.516266335 seconds)
    (129/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.092743411 seconds)
    (130/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.488504225 seconds)
    (131/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.269939555 seconds)
    (132/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.107346923 seconds)
    (133/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.167935586 seconds)
    (134/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.01153808 seconds)
    (135/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.263933054 seconds)
    (136/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.871446735 seconds)
    (137/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.337666187 seconds)
    (138/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.484789941 seconds)
    (139/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.34285394 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.343670228 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.186701053 seconds)
    (142/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.091848288 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.324076688 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.42905827 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.12165207 seconds)
    (146/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.207611499 seconds)
    (147/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.10314563 seconds)
    (148/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.90715736 seconds)
    (149/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.509247589 seconds)
    (150/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.180571451 seconds)
    (151/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.103920677 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.321417292 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.31054831 seconds)
    (154/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.300447745 seconds)
    (155/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.19790128 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.805260612 seconds)
    (157/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.515836633 seconds)
    (158/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.408908068 seconds)
    (159/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.180362562 seconds)
    (160/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.192560494 seconds)
    (161/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.111873312 seconds)
    (162/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.486593409 seconds)
    (163/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.114577944 seconds)
    (164/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.108345239 seconds)
    (165/341) benchmarking ("sort", Int64, false)...
    done (took 5.751501032 seconds)
    (166/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.159493291 seconds)
    (167/341) benchmarking ("sort", BigInt, false)...
    done (took 7.099150429 seconds)
    (168/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.306310341 seconds)
    (169/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.1269986 seconds)
    (170/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.203529353 seconds)
    (171/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.917328444 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.994614544 seconds)
    (173/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.267098101 seconds)
    (174/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.167762521 seconds)
    (175/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.203805415 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.30250451 seconds)
    (177/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.234368293 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.204634501 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.48714972 seconds)
    (180/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.870213596 seconds)
    (181/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.570233242 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.116333633 seconds)
    (183/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.429096865 seconds)
    (184/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.060605677 seconds)
    (185/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.251902656 seconds)
    (186/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.253150587 seconds)
    (187/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.331470448 seconds)
    (188/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.937218984 seconds)
    (189/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.267352396 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.231307365 seconds)
    (191/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.180429902 seconds)
    (192/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.103167033 seconds)
    (193/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.19055841 seconds)
    (194/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.213926009 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.104427668 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.152541118 seconds)
    (197/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.286118129 seconds)
    (198/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.435545799 seconds)
    (199/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.11240641 seconds)
    (200/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.155397696 seconds)
    (201/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.226805909 seconds)
    (202/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.404083602 seconds)
    (203/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.699450501 seconds)
    (204/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.349738993 seconds)
    (205/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.222689076 seconds)
    (206/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.095432238 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.115531374 seconds)
    (208/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.095466368 seconds)
    (209/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.377947024 seconds)
    (210/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.416489163 seconds)
    (211/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.202677084 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.094241205 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.225546557 seconds)
    (214/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.405796311 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.345301819 seconds)
    (216/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.324231248 seconds)
    (217/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.263189871 seconds)
    (218/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.208307352 seconds)
    (219/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.230688327 seconds)
    (220/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.110912549 seconds)
    (221/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.09543969 seconds)
    (222/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.379767162 seconds)
    (223/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.580095413 seconds)
    (224/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.100210473 seconds)
    (225/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.236335519 seconds)
    (226/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.320236406 seconds)
    (227/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.107318406 seconds)
    (228/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.415866884 seconds)
    (229/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.398002623 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.098654806 seconds)
    (231/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.420424274 seconds)
    (232/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.10252254 seconds)
    (233/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.098742234 seconds)
    (234/341) benchmarking ("sort", Float64, false)...
    done (took 5.794743069 seconds)
    (235/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.374278493 seconds)
    (236/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.49783255 seconds)
    (237/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.449345323 seconds)
    (238/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.243970336 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.730510094 seconds)
    (240/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.097524206 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 4.315319167 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.397751141 seconds)
    (243/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.175945808 seconds)
    (244/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.097806405 seconds)
    (245/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.33746758 seconds)
    (246/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.003973258 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.126730539 seconds)
    (248/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.097089924 seconds)
    (249/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.49995834 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.130585337 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.183575359 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.227320029 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.186461191 seconds)
    (254/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.116793709 seconds)
    (255/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.275878362 seconds)
    (256/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.373469304 seconds)
    (257/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.211082172 seconds)
    (258/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.991045956 seconds)
    (259/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.829245778 seconds)
    (260/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.199170848 seconds)
    (261/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.481136299 seconds)
    (262/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.390159141 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.809316031 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.444874562 seconds)
    (265/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.980123236 seconds)
    (266/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.583790134 seconds)
    (267/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.339256888 seconds)
    (268/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.517672972 seconds)
    (269/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.108050853 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.229240338 seconds)
    (271/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.234690533 seconds)
    (272/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.006031802 seconds)
    (273/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.124417072 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.115131218 seconds)
    (275/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.535518551 seconds)
    (276/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.213257382 seconds)
    (277/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.386939317 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.200398461 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.125068775 seconds)
    (280/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.117523837 seconds)
    (281/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.499242181 seconds)
    (282/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.229151886 seconds)
    (283/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.68527582 seconds)
    (284/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.102457921 seconds)
    (285/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.160074194 seconds)
    (286/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.15159873 seconds)
    (287/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 4.121501325 seconds)
    (288/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.101175205 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.2690308 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.240203672 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.874086662 seconds)
    (292/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.100930242 seconds)
    (293/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.119471946 seconds)
    (294/341) benchmarking ("map", abs, Bool, false)...
    done (took 3.728083005 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.129592215 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.123192704 seconds)
    (297/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.237615652 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.427162416 seconds)
    (299/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.863313704 seconds)
    (300/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.189736939 seconds)
    (301/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.103519791 seconds)
    (302/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.363748593 seconds)
    (303/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.309961036 seconds)
    (304/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.368669192 seconds)
    (305/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.420390529 seconds)
    (306/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.193240515 seconds)
    (307/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.101014818 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.170093487 seconds)
    (309/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.410905678 seconds)
    (310/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.212348784 seconds)
    (311/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.789821556 seconds)
    (312/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.037086884 seconds)
    (313/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.195794922 seconds)
    (314/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.240852521 seconds)
    (315/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.012553879 seconds)
    (316/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.473300273 seconds)
    (317/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.10793219 seconds)
    (318/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.304322228 seconds)
    (319/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.614819831 seconds)
    (320/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.387850119 seconds)
    (321/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.979231876 seconds)
    (322/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.904375109 seconds)
    (323/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.193944363 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.320787325 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.489642231 seconds)
    (326/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.105005173 seconds)
    (327/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.37655856 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.954119236 seconds)
    (329/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.241662476 seconds)
    (330/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.145717637 seconds)
    (331/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.114629924 seconds)
    (332/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.207555519 seconds)
    (333/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.187779272 seconds)
    (334/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.121382392 seconds)
    (335/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.102323571 seconds)
    (336/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.616655116 seconds)
    (337/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.506396726 seconds)
    (338/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.080143846 seconds)
    (339/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.982515263 seconds)
    (340/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.190799223 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.0081107 seconds)
  done (took 1172.07523318 seconds)
done (took 1174.184424189 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.135943378 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.112978792 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.610320423 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.1275846 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.114774762 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.118244446 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.625570156 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.146888065 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.132478745 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.626647399 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.126933434 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.115340636 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.130528458 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.150727659 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.126950961 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.13032448 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.120843533 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.141615513 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.15039803 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.121175181 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.163088321 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.122495059 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.114913237 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.167959197 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.117139709 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.131658555 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.129735684 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.162714133 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.162564624 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.119393334 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.122115543 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.469347763 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.168854015 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.122378618 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.128149077 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.131693866 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.122571466 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.132814074 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.129107827 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.131515684 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.117117554 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.127186528 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.121089761 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.117953454 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.11660577 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.116720463 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.118616622 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.242524609 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.131411632 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.454206159 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170017432 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.130067119 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.165225284 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.108213213 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.118659474 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.120295998 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.163766999 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.123520314 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.121034982 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.453150474 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.208708866 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.128109259 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.42875232 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.182190257 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.128166541 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.126793432 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.118106657 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.130124849 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.470920964 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.669009268 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.151699214 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.139446148 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.119505499 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.119877151 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.132389975 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.626429891 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.134862176 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.695858956 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.148465286 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.134108594 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.125116859 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.121459123 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.121301606 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.135545481 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.132585289 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.119420602 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.125150036 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.126324385 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.134346877 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.471448247 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.163801472 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.615949556 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.128907292 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.132071506 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.132680601 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.696881342 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.150404056 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.131985111 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.122782804 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.471715365 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.162022265 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.133806075 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.122381213 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.132272059 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.235539919 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.132883031 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.134427085 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.119373685 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.142379206 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.126612132 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.120056163 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.133971588 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.140706033 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.1425961 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.136896707 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.121577261 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.130140829 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.127530636 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.131600692 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.129935079 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.127337847 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.132239905 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.121650587 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.173122174 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.133636164 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.135791882 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.235549575 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.12711349 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.246633907 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.136430064 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.127621594 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.121063034 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.456768484 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.166729093 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.143256184 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.128712487 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.143362856 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.143677538 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.138669581 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.123436816 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.137253087 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.125806209 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.17455215 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.121998306 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.146935512 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.171423291 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.112743418 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.128935401 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.133466409 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.157072058 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.143620702 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.127185726 seconds)
done (took 333.553563118 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.14824845 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.111786893 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.188439509 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.111313275 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.181242448 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.167173305 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.111309875 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.112673969 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.111461319 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.511180457 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.113003702 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.11673844 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.109927081 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.11256941 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.161895656 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.112602655 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.112325898 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.350275082 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.112995538 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.173277516 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.11167691 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.112407808 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.112695418 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.527777483 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.110968154 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.112378476 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.172996283 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.113102073 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.357031406 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.111654195 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.112090552 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.355311165 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.173546133 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.0922132 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.120907629 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.1212809 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.18168421 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.123429339 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.162790894 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.162285541 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.190922397 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.146845298 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.112765276 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.106425653 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.11710338 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.114808002 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.113602274 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.147453532 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.112518447 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.122219445 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.369058172 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.120468483 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.12156025 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.114366019 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.114273928 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.127421603 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.114860137 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.114283899 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.174786908 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.114587904 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.164120465 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.51501514 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.512111707 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.114441443 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.114780312 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.114485589 seconds)
  done (took 200.027403511 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.181931711 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.201396562 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.182196605 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.120093347 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.167233023 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.181120028 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.121124868 seconds)
  done (took 17.19974428 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.122195059 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.116029623 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.139078433 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.138670351 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.115525126 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.256590034 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.127464923 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.120315162 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.142587385 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.116774897 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.450032165 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.138321215 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.120671899 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.114938652 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.127262323 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.144708944 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.118695413 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.116796636 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.214166527 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.19420321 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.120729288 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.123959766 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.144877328 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.127996393 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.115666205 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.116872001 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.116255628 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.123832354 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116504338 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.117066599 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.116361726 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.129939898 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.117976825 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.115538217 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116662345 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.117465625 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.117661981 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.116573548 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.116814082 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.117384414 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.116986194 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.116714509 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.117625334 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.117893439 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.11660757 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.142157142 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.11754995 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.116819362 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.117770755 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.118006813 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.146024856 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.117503241 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.117322265 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.122940746 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.158891306 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.125482021 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.11840236 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.118330498 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.118087746 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.1180391 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.117774216 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.198479074 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.14144819 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.118780171 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.141465332 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.155712711 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.118649674 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.118513034 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.117632696 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.144110017 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.118176869 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.142242297 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.120397052 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.21923881 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.119407999 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.265405884 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.142136219 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.122487904 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.122829682 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.117979615 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.127529413 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.119612136 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.121604559 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.125791652 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.123693982 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.118801922 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.118470442 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.122700954 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.126492027 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.11992203 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.16508107 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.119710893 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.120196915 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.216196466 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.119882136 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.218540002 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.145689455 seconds)
  done (took 229.24170283 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.12617099 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.121507044 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.133217897 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.121436946 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.120419107 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.125787613 seconds)
  done (took 14.786864487 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.12225403 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.124347046 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.119515161 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.119719886 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.120355384 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.120408941 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.121209703 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.121808842 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.124818022 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.120471703 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.120874546 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.122194249 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.119783527 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.120851871 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.12143089 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.121635398 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.121680704 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.12042156 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.121161828 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.121687278 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.368337133 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.120783836 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.12082182 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.125313107 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.126318966 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.122314582 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.130202711 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.121607985 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.121999058 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.127802188 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.125791223 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.121792828 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.124331229 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.129253275 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.125912996 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.124011889 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.125295744 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.122751083 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.122093489 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.122459791 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.123418114 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.122119384 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.122127484 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.12281484 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.124297771 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.129625724 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.1286407 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.131270386 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.12266478 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.123518826 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.123701828 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.122153611 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.123422301 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.12322009 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.126561529 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.129245796 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.128709751 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.122963857 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.122402686 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.127166343 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.126955428 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.122961189 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.126042897 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.1272503 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.130291975 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.124495971 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.126869267 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.127584002 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.123684015 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.123959239 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.124293736 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.123415992 seconds)
  done (took 156.215512796 seconds)
done (took 619.502269907 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.183064392 seconds)
  done (took 9.237181579 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.173494768 seconds)
  done (took 9.316278965 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.432288695 seconds)
  done (took 12.489997997 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.142267144 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.211094726 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.127641134 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.123460459 seconds)
  done (took 30.674018974 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.428476537 seconds)
  done (took 9.481670444 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.136342749 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.122070907 seconds)
  done (took 16.380137398 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.162360901 seconds)
  done (took 9.216465996 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.300713956 seconds)
  done (took 9.383456238 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.133377657 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.125376351 seconds)
  done (took 16.33181468 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.126415018 seconds)
  done (took 9.180305989 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.556927867 seconds)
  done (took 10.695496192 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.131872519 seconds)
  done (took 9.206984161 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.134207746 seconds)
  done (took 9.190603834 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.093750768 seconds)
  done (took 10.1483065 seconds)
done (took 172.985170233 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.132670304 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.128946699 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.129858014 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.129337498 seconds)
  done (took 30.575246147 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.160599299 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.161467914 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.169848477 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.16103489 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.151971495 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.151984407 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.162175382 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.162305531 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.151993318 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.158580055 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.161647003 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.158155794 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.160948402 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.17046421 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.170854781 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.158663717 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.160368171 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.161275169 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.152079879 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.170428488 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.158720034 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.16078282 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.127125333 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.126276267 seconds)
  done (took 53.845864931 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.317309662 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.193026676 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.281653363 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.172599247 seconds)
  done (took 11.021222897 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.126587235 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.19103348 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.178532881 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.171833583 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.17772682 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.229887733 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.1799822 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.262814692 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.255179312 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.263213146 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.13482363 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.149150293 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.153017136 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.172219313 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.230218031 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.126853143 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.128038423 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.235325742 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.16869797 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.38347145 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.128650954 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.181837547 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.178931535 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.180167468 seconds)
  done (took 54.644909966 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.127915285 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.136792085 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.13598596 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.129219005 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.128908149 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.129754803 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.1359284 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.130852495 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.151800008 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.131393522 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.12935245 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.130075316 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.135154528 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.130262176 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.129850346 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.143099415 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.143257054 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.130797569 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.133104625 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.1364576 seconds)
  done (took 44.738375439 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.128683291 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.974907361 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.474766545 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.37877201 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.128826218 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.13204797 seconds)
  done (took 33.276120849 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.14357406 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.146924939 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.136136103 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.153790474 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.179342864 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.140182105 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.190312838 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.296877783 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.141276921 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.189723569 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.151841953 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.137674874 seconds)
  done (took 28.066980615 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.139821136 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.132358915 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.132539786 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.144660576 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.141610157 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.13802682 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.137366818 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.127938962 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.145707424 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.136303702 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.138818969 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.140933249 seconds)
  done (took 47.715308142 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.34278017 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355236276 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.339692564 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.738545922 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.457150276 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115951936 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.414965494 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.341767176 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.80394931 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.84327285 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429733576 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.113022344 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.078133122 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.055383378 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.02840342 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.373459144 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131916498 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.987320051 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.385002144 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.181234046 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133098681 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.130199099 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133462675 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412218699 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458785329 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.138033801 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.343823273 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145834011 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.187080071 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343543761 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.720940654 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.176789937 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.333399757 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.387586253 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469280723 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.295345952 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.134287026 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.320198418 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.180808431 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.165318978 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.1420118 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.141719026 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.66086121 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.142777197 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403285269 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131570938 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.249655551 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.138569824 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.056625593 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.473577457 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250531661 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131544932 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.167927122 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.564263089 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253583009 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.375437014 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137247679 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.320531707 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193706704 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.407104102 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.248427973 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.236518053 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347005015 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060733881 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.508349017 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.26402004 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.136689299 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.139638785 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.834641314 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.377307261 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.216376828 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.479636845 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.905323907 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.137093409 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138083207 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.177159997 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.224001098 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.135324647 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.430969323 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.108410598 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.061622142 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.234453073 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.532201223 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141781469 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.135233588 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.14473617 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.98334745 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.062740872 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.232800607 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.410807641 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.465492176 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.137978928 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137508308 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.158269446 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139001375 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083566091 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.713486409 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.206981184 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.063286311 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.674371361 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.736980777 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.10735759 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.657490759 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184788521 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41044097 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.294569983 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.543932114 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.346912994 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.383610016 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.6699742 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142212518 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.695112485 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218496699 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213756907 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137724966 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.700306056 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.333370969 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.456876401 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.258050998 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.136900677 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.064469026 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.150052508 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341092789 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.741678711 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.200544267 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.137858626 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.14341252 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.138707201 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140631784 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.245407497 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.155563797 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.434502124 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.212960955 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.139741476 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074968932 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.143659452 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.42256661 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.816913668 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2015588 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39305129 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.40905483 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841000551 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.735561503 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.181494017 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.411448678 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212858307 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213718814 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.703721549 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.27107009 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.236681232 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.139091567 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.271076628 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.150671093 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.142335316 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.554241248 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.554466729 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.567434181 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.184869568 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139693895 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.093836593 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.3369622 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.385133102 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194825753 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.172633863 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145039591 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.222710608 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.366319737 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.141013766 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.065483821 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392509101 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386368575 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.436931242 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.551074304 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.198079835 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.219673547 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.150884944 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.354176209 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222068303 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.804457955 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.686223882 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.354791994 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.728466138 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.110275064 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.78206253 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.428648706 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.529784844 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.157448323 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.593842721 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.340736015 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.842099612 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.175286566 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.667098721 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.067504606 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146360005 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.484672742 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.100796757 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.457335657 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.20488901 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.158498068 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.143059878 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.143689493 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149918752 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.051973779 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.255269973 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211024075 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215194207 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069867832 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.798401095 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.185346224 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.1454006 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.14330419 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.463322554 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.974878111 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102365029 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.142762803 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219338783 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.887028921 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.696916385 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.14800868 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146110153 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.755231872 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.149535054 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.029950848 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.207822297 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.893806997 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176304532 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.427903218 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.84896198 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.426312922 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.219804618 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219846818 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.143638562 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14372778 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.844730278 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.153112261 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.845232986 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430077596 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.420925183 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.585858441 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.208993292 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.354610192 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.15932006 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.145572265 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.64831189 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.176566418 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145945735 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.347745896 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.663668597 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.509267364 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.112543376 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.229375973 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.145577715 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.416591926 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.150764341 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.744223847 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.850022798 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.1451999 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.144510546 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.411257575 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.830579885 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.14650415 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120708339 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.153459118 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.358243893 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.350235567 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41533622 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.440363699 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593897912 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.073189287 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.150307699 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.166630397 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.38995133 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.145327546 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.180811996 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.591065459 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.206032459 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.581838774 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.424041709 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.576748871 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.788273122 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.411014445 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.2137928 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.15755954 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.81160689 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.273824357 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.079964933 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265160438 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.072846457 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.887427954 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.44505257 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.164095457 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.418034538 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.131294016 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.48625228 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.448051416 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.421350439 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.2022213 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.175034166 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.146687503 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.190717334 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.147026473 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.361301571 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.266668359 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.15376686 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.705162448 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190256006 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193500659 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.15240428 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.659707554 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176545228 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150850637 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.841365257 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.173080796 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266717376 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220166286 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.911328431 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.785059591 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.17760375 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.106452497 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.79638017 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.418985053 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.209046714 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.604429623 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189807671 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.55295151 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.149621982 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.361766601 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.153797482 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.746153357 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201725934 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.414342766 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108351191 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.362200393 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.347273229 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.179590112 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.155132826 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.075604502 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.312879908 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.034468693 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.130734449 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.153046927 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.831479906 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.593771767 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.381111609 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.621676602 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.983966197 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.152066792 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.468856572 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.550836736 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.792130706 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189898732 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151887725 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.505764331 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.290297841 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.48120021 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.450315734 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158055072 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.176710432 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.364011249 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276355681 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069567117 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.645439174 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.73581428 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.850107128 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.161870536 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.354875217 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.505080963 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.464628269 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19013617 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.223460655 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.55558735 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.422156937 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.223149843 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.077140039 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.151556515 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.545747038 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.551975838 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.246279124 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.391975233 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.45742397 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.807423136 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.770043285 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.600525509 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.568318896 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.604382114 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.549162218 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362796977 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.526582345 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.478862473 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.74183852 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.564345276 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.365700559 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.240701846 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.425317136 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.027082967 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.861983248 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.395937264 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.156816509 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.081710693 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.360376803 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.159748613 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.673314498 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.682739014 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.401573363 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.436954275 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628484413 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.691611935 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.365555365 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.182019925 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.120466824 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.17847809 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.173993233 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.153162558 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.64812323 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.444383279 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166659834 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09632183 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.825916095 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.080509008 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.367069712 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.361607077 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.192647522 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.710683382 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.443024862 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.266357475 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.442460778 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.422815083 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.193679443 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080325386 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.904467117 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.10776928 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.215480175 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.58700178 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170583238 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.157620949 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.357646777 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.084440281 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200307027 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.159633139 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.352211494 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.738006243 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.428863689 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283420262 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.396159545 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.458373717 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.00798199 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.192180619 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427244207 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.08145913 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.788587396 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.84164052 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.197061373 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.226971284 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.154991436 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.158876269 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.427286743 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.517823695 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.267147786 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.87304789 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.192682048 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.17971123 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.521959739 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.257801596 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.158474638 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.161030961 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.653785754 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.392286969 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.156996879 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.132711655 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.36897211 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230865807 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.352823558 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.232205102 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.670595351 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.161428674 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.005407605 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267240639 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.110514262 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.1566917 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.850513854 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.223354912 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.156545127 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.433628457 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.815118192 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.36144553 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.553581692 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.036460758 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.374237361 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203653558 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.160841707 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.287650913 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.447453412 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.463641441 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.157933114 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.426549412 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210158196 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.162900283 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.817781228 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.127223745 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.159057896 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.903982539 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.056666629 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.888383961 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.556802137 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.158861216 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162179901 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1614061 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.084149921 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.158799709 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.335563555 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.135171111 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.163788135 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.5232495 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.495649998 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.259182603 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.163630841 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.160282515 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.164902249 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.371921305 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.673002133 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.176365737 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.859986549 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363445648 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.168108029 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.655825754 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.603207892 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.445679971 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.204476299 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.374337135 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403769104 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.700404256 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.380546234 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.143574463 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.387387059 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.161449687 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432654236 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.433705019 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.160603742 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.372672309 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.770245772 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.455546185 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.513240703 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.474209496 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.227111388 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.38050948 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.071766805 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.164886838 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.163624518 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.424108176 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218705422 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.144329486 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168089589 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.714261228 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.843131804 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.64070797 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316678327 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.511173832 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.001144763 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.923072234 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.163363052 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.08707812 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.161572866 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.187712269 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.151693322 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.088344805 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900407795 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.890786529 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.37339776 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.473153767 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.088233268 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.36546933 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.76073047 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.088979893 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.12969774 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.161650493 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.408573227 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08941111 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.164990606 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.116180531 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.451688151 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.009641791 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.435215975 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.162874298 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105413327 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16855348 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.164542305 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.161486434 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.246883526 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.163576585 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279585155 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.421930974 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.568484407 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.271882796 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.802572717 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.841300203 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107901401 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207230378 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.780045349 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.733929726 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.452807154 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.29671091 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.846069096 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.11429988 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.165397852 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180468353 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.402246925 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.168955985 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.166601402 seconds)
  done (took 2251.139578215 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.174732574 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.236845767 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.22206197 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.235414191 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.255729372 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.227136778 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.238485783 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.238954669 seconds)
  done (took 59.920624477 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.164029353 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.10663899 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.173980269 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.164261388 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.164555675 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.168287569 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.351257402 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.194180635 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.165170746 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.168617414 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.164634802 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.171535174 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.177313629 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.18325413 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.170469835 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.457548806 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.19128282 seconds)
  done (took 81.45762022 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.219643577 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.049054923 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.171601504 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.951762253 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.216440445 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.466783533 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.165977601 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.169904779 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.508120168 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.464200815 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.181135526 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.176503285 seconds)
  done (took 95.858093769 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.166605995 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.166506941 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.166693843 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.166787856 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.16699702 seconds)
  done (took 12.927689611 seconds)
done (took 2807.309960537 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.484986042 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.260398877 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.239460704 seconds)
  done (took 6.594192345 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.309862777 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.357667329 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.471503404 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.478106536 seconds)
  done (took 11.716579419 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.45387707 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.548376667 seconds)
  done (took 7.096127487 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.545975298 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.174182922 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.561086721 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.168484618 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.170435867 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.171867285 seconds)
  done (took 23.609375208 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.167504581 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.167914635 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.167906504 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.167660137 seconds)
  done (took 10.765546798 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.16620159 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.948485467 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.167653836 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.177757073 seconds)
  done (took 22.554865696 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.314931191 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.194023483 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.933771579 seconds)
  done (took 10.538657017 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.792437591 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.620060554 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.034877369 seconds)
  done (took 10.54234713 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.308689827 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.005635752 seconds)
  done (took 8.41026629 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.307475812 seconds)
  done (took 4.402763736 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.005036628 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.480327212 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.644347609 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.675469533 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.750944828 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.383922981 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.493583174 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.442348595 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.571153255 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.564527309 seconds)
  done (took 28.107736854 seconds)
done (took 161.199321783 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.609723091 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.188188693 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.375506142 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.543353075 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.416442036 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.421915643 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.461520843 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.529371612 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.216249912 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.202187187 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.544304771 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.42703416 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.393712529 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.197806712 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.401196833 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.196662621 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.416590333 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.631116311 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.22533338 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.463185812 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.464474852 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.18680275 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.382112769 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.202041742 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.418405053 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.333523572 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.809923838 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.198359631 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.374000672 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.824116041 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.33529986 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.606648795 seconds)
  done (took 179.094281406 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.170389989 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.17049999 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.170189939 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.17128551 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.617355829 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.16996683 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.17116297 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.171554497 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.471862744 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.461011174 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.171036478 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.599759001 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.170871005 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.170467924 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.145983795 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.171087239 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.583394319 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.172086363 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.171231418 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.171128686 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.170817045 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.479548113 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.171328923 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.504075275 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.571777181 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.172541908 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.173019134 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.171331047 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.17226012 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.174300628 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.172929436 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.172331559 seconds)
  done (took 218.478710176 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.171609871 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.173801485 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.173293672 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.172307781 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.172803016 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.172543842 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.174895323 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.172094781 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.921079132 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.922035152 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.173397809 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.175388981 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.176313555 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.172918703 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.18090572 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.173654234 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.179045828 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.180421621 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.176811184 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.179164455 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.17441003 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.028109957 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.173812337 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.044928818 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.17418424 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.17871237 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.174166649 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.169361774 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.178781881 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.178833268 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.17520229 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.175313089 seconds)
  done (took 230.920620604 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.4128888 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.173848016 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.175609739 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.190287821 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.176061991 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.174396519 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.180938291 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.419629243 seconds)
  done (took 22.005906883 seconds)
done (took 652.606208801 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.55482678 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.901512347 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.30556155 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.198158033 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.441115062 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.24214911 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.192961444 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.261779341 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.841058046 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.270385652 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.610534798 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.202379464 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.924519572 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.220880655 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.312515374 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.246110774 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.542400968 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.805972148 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.333305423 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.863936293 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.397594601 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.143702523 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.279674959 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.885026943 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.623577341 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.15796697 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.212657037 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.548483677 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.199341066 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.432972488 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.854687599 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.450263563 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.210314279 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.196894825 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.255137019 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.238546219 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.389070175 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.206186795 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.304876315 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.941528902 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.86334301 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.724824949 seconds)
  done (took 112.875571564 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.183741495 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.181290149 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.18098001 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.181999444 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.189794496 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.181056237 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.181459631 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.182607065 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.181675103 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.181673334 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.182312039 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.189113395 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.181833606 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.190406899 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.182972533 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.181576021 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.182182603 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.190890332 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.182920268 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.182222527 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.182931549 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.182390088 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.179236492 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.18098948 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.154428816 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.182994523 seconds)
  done (took 58.848767514 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.177817932 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.329355257 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.465286414 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.211647066 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.178698619 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.181897351 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.208053713 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.185308986 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.181206184 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.181418478 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.289021719 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.183306036 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.191952381 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.461241493 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.208284062 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.179093665 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.178860044 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.180415711 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.33645671 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.19477619 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.210612264 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.186986906 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.209939465 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.195495531 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.181787286 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.180280478 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.182702494 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.583111172 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.193275676 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.292075876 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.225209112 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.21355269 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.528152529 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.475042587 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.248310181 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.18660016 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.179661342 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.336851575 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.193638674 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.181784131 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.208518156 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.189251375 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.466106031 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.699421959 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.196104255 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.181262709 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.57812781 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.350811786 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.229244627 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.196598711 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.474740313 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.211684987 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.180845148 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.182571953 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.21808362 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.196854505 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.181794767 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.427312361 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.198345705 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.210805858 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.188659153 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.182985362 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.351109997 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.191634003 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.335365624 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.19323319 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.187909097 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.183842559 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.468461939 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.212929309 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.696215513 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.197354045 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.182387956 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.293009567 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.340620862 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.609273669 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.197203296 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.350710733 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.549649862 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.221937792 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.195284408 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.569386724 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.224586368 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.194060643 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.18223973 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.181963078 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.183254179 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.238725838 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.210594488 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.617309161 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.698723299 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.4461677 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.225790074 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.197372239 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.184704759 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.427883256 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.19541031 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.184230935 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.463297805 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.721554825 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.199427895 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.189944962 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.676623662 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.199191064 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.213862945 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.195824354 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.479380771 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.214499634 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.239691631 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.184311058 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.190681908 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.187111532 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.21383318 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.19564772 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.184711669 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.670307725 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.356566456 seconds)
  done (took 269.245823444 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.186549493 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.183429887 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.183692199 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.183641555 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.183613885 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.1836401 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.183575596 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.182123507 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.184992097 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.182513058 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.183683735 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.185227165 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.184718388 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.191702304 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.648975086 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.187149092 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.672803251 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.186877978 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.187147271 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.188286047 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.794407219 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.192934863 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.185441494 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.189215012 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.185134717 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.185083848 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.188440403 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.229111208 seconds)
  done (took 176.921673389 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.187052992 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.256457872 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.204889288 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.235071856 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.203522919 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.188014928 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.208729167 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.20799467 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.193982055 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.187819557 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.188174408 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.215905024 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.196274043 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.330104128 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.223134134 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.218410987 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.26868341 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.195037987 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.187722254 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.18844976 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.236650265 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.204345836 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.218333947 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.246224979 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.203512596 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.237479864 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.205002571 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.188407435 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.188301334 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.291633845 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.206657139 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.216910678 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.224731129 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.208614761 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.276360451 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.278487568 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.271855995 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.218367419 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.19285833 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.189860706 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.188263464 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.190554376 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.225089182 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.198236061 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.184767363 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.268162059 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.20783673 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.177802702 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.208585862 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.190339726 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.201226286 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.193957297 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.223511994 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.29089268 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.237051289 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.21831179 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.212485162 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.208315426 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.190225623 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.264729804 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.197517159 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.280649382 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.209001374 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.191502694 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.191343826 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.194373449 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.23857681 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.227056714 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.269154041 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.198890153 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.265134573 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.245556309 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.205049693 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.190662208 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.191114911 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.239980624 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.281477199 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.247214293 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.254491878 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.229116079 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.201959722 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.191771448 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.193724716 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.219390934 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.199221864 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.280728945 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.284535881 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.198721538 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.191808192 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.191616617 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.191829179 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.214686551 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.249495842 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.234807641 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.276939892 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.226112649 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.228283361 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.200351133 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.204234017 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.197523952 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.22238323 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.199994872 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.20477433 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.530449545 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.228876399 seconds)
  done (took 235.499484402 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.53692432 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.243742597 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.262630334 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.459074717 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.563482026 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.288581819 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.23256418 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.254214485 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.25244819 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.361735133 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.302425476 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.285577997 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.23173143 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.214887034 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.242825395 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.25165801 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.273747682 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.536708259 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.345324638 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.912029387 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.233530259 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.488049067 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.5404722 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.579461044 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.278740255 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.620130322 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.854392764 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.330628206 seconds)
  done (took 71.101076731 seconds)
done (took 926.579939427 seconds)
SAVING RESULT...
DONE!
