cset: moving following pidspec: 6111
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.847855325 seconds)
loading group "shootout"... done (took 1.137806063 seconds)
loading group "string"... done (took 0.663621787 seconds)
loading group "linalg"... done (took 8.719360352 seconds)
loading group "parallel"... done (took 0.170116322 seconds)
loading group "find"... done (took 2.952843792 seconds)
loading group "tuple"... done (took 2.119362847 seconds)
loading group "union"... done (took 14.993737584 seconds)
loading group "dates"... done (took 1.457597117 seconds)
loading group "micro"... done (took 0.221574983 seconds)
loading group "simd"... done (took 4.807190141 seconds)
loading group "io"... done (took 1.091868218 seconds)
loading group "random"... done (took 9.5793998 seconds)
loading group "problem"... done (took 1.528667058 seconds)
loading group "array"... done (took 25.425729228 seconds)
loading group "misc"... done (took 1.897312049 seconds)
loading group "scalar"... done (took 43.973505157 seconds)
loading group "sort"... done (took 3.354954302 seconds)
loading group "sparse"... done (took 12.856206059 seconds)
loading group "collection"... done (took 18.907911303 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.427957853 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.12422367 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129616483 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.113973799 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185234551 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.11975474 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128448599 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.084537065 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.892087662 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13827323 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115147325 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.427993171 seconds)
done (took 5.325010269 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.172022147 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09329741 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083274816 seconds)
  done (took 1.393737503 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.073851105 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064985522 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068180484 seconds)
  done (took 1.422520705 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065438734 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.137974241 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066343537 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067195852 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067379696 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066518048 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066447874 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066526487 seconds)
  done (took 1.760087422 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073928231 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067658664 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065712983 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068049869 seconds)
  done (took 1.49429577 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067580015 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123945568 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065326065 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065309646 seconds)
  done (took 1.538406339 seconds)
done (took 9.086215414 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139955541 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.829750393 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.756767977 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122863507 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246394404 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450179948 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124849562 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183178628 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089464477 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075357835 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122594688 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078500445 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.398599864 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.39906932 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072308952 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17078679 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.650176547 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087168876 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135159708 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.449563866 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074021141 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088029089 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085099312 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071448952 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.357268979 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.154990969 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.665452955 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097043699 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068680565 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094693354 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070842111 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078719235 seconds)
  done (took 10.736237162 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.095887547 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090303907 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069248892 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124342505 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094021064 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070266506 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.076081245 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068739253 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089096781 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124347135 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090079155 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098727836 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.072111408 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069538205 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074041195 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19695938 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080469925 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.08152698 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068369195 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081855615 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10569628 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078416216 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.0789416 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078416134 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132618307 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169685983 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096895383 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098472946 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066477177 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079113361 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115347571 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125294149 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066796533 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065491198 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119561072 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095686258 seconds)
  done (took 4.669890571 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.885915767 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.09852295 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085995057 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074637434 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106638305 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113718249 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121050324 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122606902 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099968742 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069246652 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.15226917 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.669603939 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.172519974 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072075486 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120543912 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.361757183 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095988683 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.071667345 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070290162 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068501882 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070774098 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070228016 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112605085 seconds)
    (23/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064998058 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068600059 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.174944753 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.575268568 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069810922 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068699003 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095859048 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.064785926 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.13861944 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092386363 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069790588 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.539294581 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065507983 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.175696843 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089710815 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094653842 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066908169 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067976829 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078963094 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066632915 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108687848 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079479013 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513810769 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069909725 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.582760602 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.225148037 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073063825 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07181032 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101480417 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064550176 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067835811 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.145415854 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.144043903 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067099636 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272827166 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067855999 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068939064 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068960793 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099236164 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070569692 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068914562 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073147282 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096373406 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.87690231 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090238105 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096862534 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066982498 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.406680694 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074029943 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069556976 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069702403 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083656616 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111009193 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066598385 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067204178 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.111307079 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094837821 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088826751 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069894899 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.06729572 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065864104 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.339765103 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.184758896 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066464155 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066943546 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.476127423 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063932503 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065654573 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.186651089 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093448147 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068139024 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064596166 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065683181 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099662985 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068203522 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.358264535 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069877401 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.493434525 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068936759 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103949008 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120551915 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06835829 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102403448 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.069138098 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065847936 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074211435 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066240563 seconds)
    (110/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085126336 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065200963 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070430386 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06627657 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065351997 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06684713 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069442051 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068780137 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067888376 seconds)
  done (took 23.181847258 seconds)
done (took 40.692863907 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.341602264 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079178382 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.078892146 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079668173 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079580597 seconds)
  done (took 1.921019845 seconds)
done (took 3.286144838 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135198396 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076361324 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064645683 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10092917 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069032488 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102058263 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108666041 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104625766 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069221136 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069068309 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069648453 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105028535 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.10518482 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069072996 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098935999 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103864055 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069263992 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064765663 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069299211 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069311685 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069115822 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.065042267 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069560882 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069178551 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099495791 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069433309 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065194893 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099211763 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069593064 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098918254 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069578678 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069093938 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069064751 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099865775 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069556666 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099277211 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065215182 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.188051398 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069281643 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069633979 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069548826 seconds)
  done (took 4.758480838 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0734419 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083321684 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083224498 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062071091 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071479191 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082535174 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06246432 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083125591 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.093409342 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084791598 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08451454 seconds)
  done (took 2.189070928 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07235386 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085159292 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085403469 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062537771 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073915045 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08421555 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062818188 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08355978 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086532358 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08403621 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083801052 seconds)
  done (took 2.162799023 seconds)
done (took 10.409746943 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.099397198 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06655396 seconds)
  done (took 1.446866764 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.22626492 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.505750531 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.310536241 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093472173 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072705646 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08563379 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202156499 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066918658 seconds)
  done (took 8.033912832 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.106177627 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071055559 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068649507 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068214876 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069419324 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068201567 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067828563 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068467632 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068221855 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068031599 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068323796 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06822559 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069075234 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069531473 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069146818 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068576836 seconds)
  done (took 2.542651572 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105930456 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.070649504 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099852514 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.064171065 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074208638 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.063790722 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071027241 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072965031 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070116101 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072017186 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074523048 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.073501234 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073614538 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073464602 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074505211 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.074956457 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075285441 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072886419 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075603909 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076007211 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074544033 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075589179 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075250021 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.072774158 seconds)
  done (took 3.230624379 seconds)
done (took 16.556888319 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.179029347 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.077569059 seconds)
  done (took 1.550608652 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.070883598 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069888228 seconds)
  done (took 1.450932587 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.075759888 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062096742 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078930992 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070670532 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062091141 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061574878 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078873486 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062801243 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063071715 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063244919 seconds)
  done (took 1.986167564 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065202477 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071064463 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067502777 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065149837 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067594795 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06279333 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065597595 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063296239 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069554105 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062303541 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066464292 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083319716 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065494456 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084257388 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065467584 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066482378 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06738806 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065236615 seconds)
  done (took 2.5407356 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.06337448 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063629499 seconds)
  done (took 1.443860529 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06731481 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063766188 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06489023 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064361311 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062435634 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061566377 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062147383 seconds)
  done (took 1.760130817 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423973083 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121888273 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.343477934 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069658444 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07843019 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258746681 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064401673 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068782846 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068819461 seconds)
  done (took 2.85621987 seconds)
done (took 14.923991347 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085125343 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181060719 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087750557 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405183654 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.093084039 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067132402 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113207018 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177527832 seconds)
done (took 2.551765429 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.28238016 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.251507841 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.402308172 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.124746201 seconds)
  done (took 3.100101139 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336498534 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078226133 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.07727404 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067183685 seconds)
  done (took 1.889690181 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.067121921 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073299637 seconds)
  done (took 1.464554416 seconds)
done (took 8.079351767 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.102017076 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064963855 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.062704146 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.069977406 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064247964 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.075935424 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065107293 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.064492239 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063501074 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064583928 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061978514 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064856764 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064596124 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064560699 seconds)
    (15/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.068226748 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064271608 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064157344 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064263442 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064111808 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064051174 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06433607 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064320155 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063404472 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064385427 seconds)
  done (took 2.949456892 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.082025891 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066018545 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066988937 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066703409 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067523897 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067273956 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066906582 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065981752 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067217763 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.06565822 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067445741 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06717352 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066006717 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067544965 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065514784 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067529532 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066929644 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065887355 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066018722 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067449317 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067067134 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066123858 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067512307 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066885867 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067463484 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06730254 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065538905 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066428946 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066975974 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067899918 seconds)
  done (took 3.360856099 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.068031304 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061466278 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.06203377 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071673922 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061583653 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062020114 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062076757 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061536053 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062052646 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062322162 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060986355 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060302786 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061249145 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060495513 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060475007 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061229783 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065070883 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079325405 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061168665 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060378957 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065117431 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060608798 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060477751 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06095788 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061433525 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060920234 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060608211 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06099187 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060554307 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06148112 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060337484 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064601941 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065375365 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060505468 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070102316 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065127366 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060468929 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064800661 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061635377 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060736874 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060062863 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060084356 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060499999 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061399535 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072378577 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062479736 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.062229978 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061080279 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060475277 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061446199 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061835355 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06395882 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.070242263 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063041202 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061530572 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.062753359 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.06161987 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062588514 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061789092 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061522845 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061569373 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065235827 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063451824 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062468823 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082030609 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063623084 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071885349 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061443929 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062600173 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065185266 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062244318 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080365148 seconds)
  done (took 5.904884195 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.074324722 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07485938 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.081200202 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072397399 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066493001 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063559295 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066978217 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061957902 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070864816 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065725734 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061538573 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065448332 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071040864 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066132674 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062851942 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070768639 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065231039 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064903384 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061367671 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065722686 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062952001 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06501495 seconds)
  done (took 2.843539742 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.141107042 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066989773 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105142026 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070120979 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069090829 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070485813 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066582809 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066404852 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066748944 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06679528 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067115046 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066503115 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069009674 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067101413 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06674161 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066766592 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066626307 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066806335 seconds)
  done (took 2.675277259 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078918572 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066689475 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089702066 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066207178 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066141849 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065884548 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069704205 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070026366 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065789428 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066488285 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070158718 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065774316 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065831413 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066209231 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065500566 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066090174 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066144694 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066293933 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070439617 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0710162 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069631109 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069832736 seconds)
  done (took 2.869472944 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079609686 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064793293 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.08073133 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066504773 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060447907 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060900677 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06649993 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.06543678 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066237394 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064688043 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065593347 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060778229 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066915222 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065252086 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067244955 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065243648 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064966318 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065480486 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065129044 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060553154 seconds)
  done (took 2.675135109 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075087561 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064519364 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063225493 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068581831 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0630917 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063417833 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068870461 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063801067 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063159397 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084897428 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063432131 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063509928 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068849255 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066986163 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063409484 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06872947 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068695821 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068650622 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06393236 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063484311 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085153618 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06349296 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068860095 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063395664 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063740839 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063446563 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063749644 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06703117 seconds)
  done (took 3.230482554 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066139552 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065033224 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065548535 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064753326 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064163917 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064886954 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065700756 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066104376 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06547668 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065937173 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065540889 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06543781 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068629936 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06535178 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065319034 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065354411 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063851726 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065096254 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065681852 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065771202 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065280621 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06510859 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065683921 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066002619 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065589741 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065249827 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065603832 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065510197 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06506049 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065719225 seconds)
  done (took 3.325342098 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.075755041 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072337852 seconds)
  done (took 1.507673525 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.064440347 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079674007 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.06123155 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072590116 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070554624 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065803506 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071252836 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070629259 seconds)
  done (took 1.910291613 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.069059751 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09220361 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062215528 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06261569 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066676669 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.129491019 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075759443 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073896202 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07659398 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065918609 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063907859 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074305998 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061941619 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07553326 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063452872 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071298588 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070065244 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080382484 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075209196 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061013496 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074912333 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063558606 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061147024 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063318737 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062460221 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069350533 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07818312 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074884584 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070692725 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060416567 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080856111 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061162161 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.06225601 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070633673 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06515467 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06116435 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097831538 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061886626 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066265392 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06100531 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073460972 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082133319 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075527479 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079263673 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062950145 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063186407 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060799949 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06310101 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064561368 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070774081 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060863443 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068653254 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060377251 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062856698 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072099106 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061621966 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066938638 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070690561 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074686586 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072311704 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071669356 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078634814 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072159405 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070848992 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063957522 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082551896 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065022975 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076280749 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078253265 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064168037 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076654888 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062470691 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061587136 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062402079 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09690414 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.065085561 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064656003 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062833104 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06273271 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064203775 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072589799 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068279286 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070556915 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066505524 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079210783 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072617037 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062867786 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068634951 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078964465 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065632083 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061965952 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078792744 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066532747 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061788617 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080441949 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07275008 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064252194 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063524982 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065730452 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075140463 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061609283 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059472936 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068727158 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062065184 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062664897 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06497714 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068488511 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060280971 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069963372 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064635478 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061427985 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05890415 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064411469 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060723287 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058593645 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06893852 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059855118 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073853089 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066201091 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074327007 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075092189 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070668158 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076155817 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060499947 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059224959 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077498724 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069118389 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19986401 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.08074497 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062236897 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076148073 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061730626 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064468165 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072323311 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061573844 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063751982 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062480833 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068497867 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.06451465 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06530033 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068979312 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071925445 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075580117 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064458866 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072269419 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063300868 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078858323 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073318807 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067646033 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066676306 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063257168 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073289842 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067534042 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070436471 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060449748 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061967457 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061284548 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071750501 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071163863 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063192031 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068934912 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065877922 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062245508 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061326864 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062569575 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065338843 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064443319 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061975086 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06906276 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070110842 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07512633 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068112939 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070018298 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060476606 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060435225 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062967156 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061505499 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065883603 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070637068 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076802479 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073353786 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.08237599 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061610338 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071230174 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063438763 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078241534 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074424798 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062689353 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066183748 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060231472 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062833129 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070678062 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072505103 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.07530892 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076374918 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066170225 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065613632 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060883938 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076116155 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061869178 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069629008 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070648707 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065857981 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061364542 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.06298654 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070196976 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065900329 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061253268 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077271373 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067381869 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06090533 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075689178 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062057106 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072034408 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060907238 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064877249 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066405846 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063169883 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071097386 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076502372 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060024158 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062049131 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076506399 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062818316 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062577954 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069511424 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076098927 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065637831 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069312091 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072097285 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070895989 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065374867 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070696227 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.06181019 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070260301 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063990234 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07268362 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061041032 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078710399 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059917554 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075853772 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061051329 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07151594 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061179703 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069802801 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061469156 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07733959 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062555418 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060920417 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071892752 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059249391 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06962317 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059634873 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065426076 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066964998 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069643232 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061990373 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069844783 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062432335 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.21185178 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067825064 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071247121 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072228382 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067271231 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061895308 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070546951 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073682084 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070410184 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063227033 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063436042 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062196356 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071184676 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063399969 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062927956 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069676131 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066035317 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067146767 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06332975 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063251411 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062668296 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069791243 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070882414 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079327006 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070258423 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070919359 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072558558 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061519174 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07693078 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061393583 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071536285 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060964905 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067318124 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070895456 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061779569 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080714427 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063190617 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069572602 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073453857 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070516669 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065277742 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079304039 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064784795 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069896081 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069655855 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065897309 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068220544 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063443235 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069690062 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.07151395 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072139348 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062765874 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068976183 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070749078 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063505645 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069890766 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063409718 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070054051 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063276771 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060944274 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066070334 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07306225 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066790333 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067881693 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063482232 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06222124 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063633206 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069608131 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066436931 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070524471 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078630502 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062598435 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064489503 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062943776 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066602008 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081626521 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073715978 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070781538 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065930268 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060723724 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063249064 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063459124 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061683258 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064738775 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060330073 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06087896 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071934431 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063533001 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065554971 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062035107 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062575683 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070638879 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06593305 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062171292 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067852502 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061093899 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066140919 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060723032 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063134226 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065903398 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060609096 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064656976 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071483247 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077485922 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068354179 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069984405 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062490003 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069177147 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07583671 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067910098 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061957777 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070480461 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060009045 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07929351 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070333175 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069662451 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070809659 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062208282 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076936206 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065081368 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070766379 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075926507 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061790518 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066527146 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059694989 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075594796 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064533128 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059651871 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067652833 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067799999 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06561684 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071205242 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.06067508 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067571523 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.214710513 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066607058 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064127665 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063798204 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07105273 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078064274 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062717121 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066097029 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069655167 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070300369 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066074877 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073990434 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069743568 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062487542 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063272038 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064795265 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062221634 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073252612 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061830236 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065739043 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066508195 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061637392 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06824301 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077942257 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071064535 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071173613 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061096881 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060391439 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07882477 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.06516715 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065049664 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069669418 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071572544 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073569744 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071355777 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077945767 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062117908 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067113001 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073782526 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06236346 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061515803 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065594705 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063332428 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070493024 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071460026 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.068978856 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063363077 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068135112 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074934922 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062821444 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065956265 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066457905 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061978145 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.071985169 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069870848 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.074873264 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064599792 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062689969 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066352899 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072027483 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070412467 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.07156615 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063926879 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070066858 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076912615 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070761551 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066609172 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062538136 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066683404 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072340154 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067698358 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062810614 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067721144 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066673107 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070426489 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072730677 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067385789 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062571873 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080072207 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070024795 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070437341 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063082581 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063249949 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0617328 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061055459 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072258477 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061273168 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062988978 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066343343 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063127174 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078875356 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069676522 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077229004 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062447475 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066117487 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061441639 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070991664 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065735225 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062050109 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071676524 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060478642 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076969313 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073279869 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.086815389 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060906167 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.06643468 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068999972 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076441036 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070877754 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070530326 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064644481 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070241044 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062882046 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071623454 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060915968 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05988456 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070701797 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069438645 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072771964 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059970611 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070343012 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06219105 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068715114 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068257502 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061604517 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061654743 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06167066 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069547015 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064333622 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069071959 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064666403 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076637614 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.206528835 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073772615 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071730086 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073636016 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075897242 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074351976 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.070015956 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062490914 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069197401 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069620571 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062982819 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066341403 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065048799 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082762341 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063234561 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063519624 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075519329 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068226961 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061951073 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068826559 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065920146 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071578656 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063073097 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072377668 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065467172 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062017794 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066268135 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065889682 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060060327 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061202594 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06188712 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07148757 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065995441 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061689074 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080700343 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063067145 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070278047 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072864587 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068363476 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063363094 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06022735 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062760265 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074842872 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077283888 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065102655 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070228198 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062802326 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070729923 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060399365 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070067174 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069950559 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070150234 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061513897 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062054271 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076279579 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077033537 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066161527 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070640325 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070699051 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063367948 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083116015 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071993435 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063201757 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072710345 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064134153 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060884517 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060821868 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063535878 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07314596 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061253184 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06423839 seconds)
  done (took 42.430877521 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102395455 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06251899 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061305636 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061366623 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069542266 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062170779 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061304697 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062062072 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062214186 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063749875 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061375889 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064164757 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067708564 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074462402 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069867358 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065429495 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061258054 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062188285 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061966727 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063578677 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.069680316 seconds)
  done (took 2.871623302 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06712342 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066877333 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065919697 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065898367 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064940536 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061727 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067258156 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062803838 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067805753 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063682707 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.068047371 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063248364 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064230277 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.06333096 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06298848 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06316592 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065944484 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065117145 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061522229 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065253056 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063088658 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065343289 seconds)
  done (took 2.881502887 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064761847 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06321971 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070380751 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060817243 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060603198 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.06486369 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061507276 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066830435 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066946205 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067208055 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072047309 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06333231 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061958649 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068196526 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062067029 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063715038 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106763101 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063525603 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063798913 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061188741 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064279744 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070306589 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060862009 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061845183 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065171064 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064396639 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060703186 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063901867 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061715051 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065308276 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062023264 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060455371 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069968417 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069215728 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065077407 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065041595 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062817259 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061849516 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060651194 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060777891 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069675076 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062258625 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060963892 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062407065 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070214753 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060634562 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061943854 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071915646 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062083837 seconds)
  done (took 4.650509329 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.074067807 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116200183 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068581615 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.09629895 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076180738 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069123874 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068177483 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096119503 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062335388 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06310983 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074527252 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074745066 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063876184 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065549978 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068000675 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063534302 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064374035 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062824372 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067007064 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063691211 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066377788 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067658932 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073365407 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074173889 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064597514 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063217431 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063368461 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065178402 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074024421 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067431554 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065419274 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065908066 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074181348 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068919956 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06331911 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063703177 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074709089 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064180938 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063962964 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062522664 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063702713 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065481084 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068274678 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075047565 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064164834 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068796042 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064495087 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062138787 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074494046 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.06385822 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.068080691 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075525605 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065288121 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064530182 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065464352 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074357089 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064190807 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063083732 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064368157 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073893573 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062504787 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064982876 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077510261 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064369205 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067338705 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075080746 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068746981 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065056058 seconds)
  done (took 6.306079425 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072777797 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096333138 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.077023615 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076619787 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071547805 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.07187771 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071629965 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071796664 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071579557 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074754803 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071903381 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.107010784 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068808609 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073545975 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071645581 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071620236 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071976094 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072090217 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071305341 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071540063 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071635531 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076398438 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071802159 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076578151 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074302319 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068238059 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071609556 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07196705 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.077000674 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071543666 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074276148 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071701259 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071760727 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077034166 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074340139 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071499966 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062269383 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071556772 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071578822 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071191579 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068126896 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.077288424 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072328987 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067803452 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072017677 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072055657 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.077022176 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07449833 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073336908 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074842615 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071682 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076798647 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071328559 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072012967 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076802668 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079268734 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076746012 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07712293 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071763127 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077045021 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07688851 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07909404 seconds)
  done (took 6.092561048 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076801096 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067991263 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079681959 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06115064 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061527674 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070457277 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061258384 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061345913 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068034794 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068039077 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069620151 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071358391 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072666403 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070080624 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070545309 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072791827 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070279924 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070364702 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067848182 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070706885 seconds)
  done (took 2.878765683 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.078458798 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080659721 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066877265 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070902873 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066777164 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070412447 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066024721 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066891043 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067359294 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067598579 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071866494 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071821596 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067323018 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070793127 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071825393 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070543349 seconds)
  done (took 2.601782812 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067425961 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070224901 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068070722 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062763709 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064662341 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061824664 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062591668 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060920289 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063767586 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075113615 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061929532 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067461273 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06267785 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061564796 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062795417 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064869444 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064063986 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062193695 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062557803 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066397257 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070450192 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063367665 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064943516 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062121413 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064536553 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07091262 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063707384 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06451776 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062235619 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064896537 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064724613 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068918 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065031872 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063169481 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061775303 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062178627 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062725096 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.065001345 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.065027112 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06281843 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061336361 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067698125 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.063179987 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063196338 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064272039 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064838054 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064029289 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068124029 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062706911 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06476585 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062759121 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.0640789 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062985636 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069515115 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064874758 seconds)
  done (took 5.032050127 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.081121788 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067178767 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061252041 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061189616 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066581859 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066744191 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066392318 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06709771 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067053085 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06143553 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067381324 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066159201 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067209379 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06689803 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06712488 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066986192 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061278279 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066837222 seconds)
  done (took 2.690510607 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.070441866 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068013336 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065991311 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063694383 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063666701 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.068080674 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061305935 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062962592 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063019657 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063539512 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063270746 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062846549 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063137292 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063007138 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067318161 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063273196 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062785106 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06162478 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063149452 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06162611 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.068129906 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061832984 seconds)
  done (took 2.894980172 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.091068448 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.086561031 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128625665 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080534819 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089624027 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072664404 seconds)
  done (took 2.034622305 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096827934 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.099401303 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066047635 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066306522 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071033494 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069315123 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069330379 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069969191 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072989916 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073244452 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069625338 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073094973 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072838935 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075024915 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071371797 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071429592 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06985666 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069925724 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066823562 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077588647 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069805149 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073484364 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069554763 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06955559 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069610536 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07489859 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072809979 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07357187 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069592491 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073639058 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071458428 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06983224 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073149968 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073352488 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066834353 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07318602 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069994492 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077191585 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071567045 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075258434 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066854167 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071572375 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073134147 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073379551 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073352182 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070285064 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073163882 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069888803 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070153758 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079013923 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071559315 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075000026 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071379215 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073727929 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073531815 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078836415 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073635953 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07486721 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071702631 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073484015 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075034209 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071458886 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074795577 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073592494 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071449888 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075142286 seconds)
  done (took 6.305430736 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107893408 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067125015 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069562662 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073363853 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075334072 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06981445 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070115269 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070128444 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069899183 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067552657 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105439688 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070331604 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075400346 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077988918 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07011997 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070256275 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070182301 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075039778 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066961911 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07875542 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069583969 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074624233 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074960681 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075058534 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073428077 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071289459 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069763342 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069374866 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069590721 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069830276 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0729086 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069807989 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075013452 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067258875 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074987425 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069722726 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070000922 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072759018 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069809164 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071786617 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075002268 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077322035 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069477817 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069728207 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073614634 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069657355 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069806158 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067388216 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070065313 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066975725 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073734551 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073849387 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073780009 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075370246 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069858108 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070111629 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069737081 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070090564 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070305815 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072237389 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075508708 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069914408 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078765545 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069888726 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069928993 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075353455 seconds)
  done (took 6.318618094 seconds)
done (took 130.572602806 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.220994374 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.19068327 seconds)
  done (took 1.889196626 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.078219855 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.168869943 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07588775 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075344839 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109509403 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108768234 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.069472276 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.065365129 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075263157 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.06641301 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139330126 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.06954872 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.065878179 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.066021105 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.065720686 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.06604606 seconds)
  done (took 2.86566847 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111821625 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18537112 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082719697 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070923802 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114537867 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077084929 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073404143 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076225035 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077540011 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.071152008 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107572906 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083901094 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076318093 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077672034 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072964936 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076286439 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076105644 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077343808 seconds)
  done (took 3.0969557 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.106493245 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092869381 seconds)
  done (took 1.71185958 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.159363303 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105595051 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145053985 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.345981692 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137757486 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138375125 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141337938 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137618716 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111263566 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134015193 seconds)
  done (took 3.060265001 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.108984253 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10575524 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.30919893 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103075054 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.08333332 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078071915 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075797133 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080610627 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076374902 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077001427 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122670026 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075998126 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073209809 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124607126 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099772706 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107112822 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071478685 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.07889002 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080188979 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071725574 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076655735 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080193173 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178620263 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078816717 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100240993 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.076475506 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077952435 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074871964 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075284488 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078730456 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079835524 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100242342 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078977563 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083609792 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077043267 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097592552 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072559843 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099824968 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074969655 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073287497 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076078249 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079820243 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072666009 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079222474 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075880051 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077923109 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080336922 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.07144611 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076001017 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074979185 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073230525 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077088272 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077149722 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077787915 seconds)
  done (took 6.336907085 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111131466 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109227565 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070890428 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113599071 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105924262 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071258775 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105457355 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101273851 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109834507 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070597826 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070451336 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070253338 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076939128 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080358194 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117144146 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108319907 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072354363 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070864459 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108343097 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.1076618 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069982797 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10245906 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100521669 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106883347 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069635285 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070437555 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069193613 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069797402 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074804122 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.07594784 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069255127 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076478205 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081411934 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075850702 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069038383 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06980358 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06931814 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076384567 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077101572 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077057206 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075342992 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068658085 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069027563 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069711191 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070516749 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068859782 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075435928 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076295288 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075770892 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069386207 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070113464 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069321486 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069506756 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075893768 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074809852 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076482871 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076370979 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069013938 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069547247 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070970401 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077674614 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077415892 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076509425 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070644195 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077658301 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069197004 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.0778211 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081413484 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068961359 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069678532 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069676514 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06950679 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069693278 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07504216 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075271124 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069775725 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069703225 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069426614 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.07766781 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075060177 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069032715 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07486184 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068827031 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069311035 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069957398 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069906532 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074705179 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076181448 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069890069 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068858893 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069291966 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069138519 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068533572 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074551594 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075444655 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075759394 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074689071 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069112103 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074577617 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074121531 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069040046 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073945599 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068255885 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068524361 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068478649 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073963251 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073289776 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075654806 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068084096 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068691516 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074098851 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076428957 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.20901675 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076446883 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07846494 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076943484 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069592717 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079484796 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069984831 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077516511 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070019487 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077862664 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070070494 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075828405 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069526931 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068608052 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069522297 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075548225 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070294783 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069425891 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070015798 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069619518 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075884145 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079223601 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070428877 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075686212 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075937781 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070531707 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075628747 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069600462 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076860553 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069438965 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.06962558 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068800811 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078210599 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069669196 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069742503 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069425102 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077712636 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069517044 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077900154 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074558847 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06920645 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079305676 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077666914 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075211242 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078237005 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070248061 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069698052 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069596136 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072252327 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075189886 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075907643 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07051359 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069668667 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074723776 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077814685 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069127162 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074783895 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075165641 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075565263 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069833868 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069448112 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078951947 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077860381 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075493905 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074936973 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076217839 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069683945 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074958087 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075497354 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069508474 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081053831 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069782881 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079298172 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075890048 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074507986 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075969273 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076934228 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077458081 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077626143 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.0797851 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069027745 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.301986608 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07581828 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069386683 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069737353 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075094937 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069815604 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069769284 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08009663 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069443194 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077830335 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06898285 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075953259 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069055804 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06977713 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079557835 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069200192 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069603905 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074958102 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068751515 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074257103 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07699963 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073900351 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068650558 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068890947 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074644224 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075015295 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068076192 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067875864 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068519971 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073408308 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07280519 seconds)
  done (took 18.723695469 seconds)
done (took 39.213732961 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172744251 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116050984 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210910542 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198976212 seconds)
  done (took 2.31501919 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.104871966 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068443024 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084175519 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.093986873 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06833371 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079914518 seconds)
  done (took 2.058346125 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.206244971 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175681459 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244890217 seconds)
  done (took 2.185808165 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.37584577 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.155851605 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221756989 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508991405 seconds)
  done (took 2.924003256 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.113883308 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.102120369 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078133366 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112218443 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085736287 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063689665 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134439111 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070398969 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100448173 seconds)
  done (took 2.484585653 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13902207 seconds)
done (took 13.699489222 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.105134871 seconds)
    (2/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.232403817 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.219538262 seconds)
    (4/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.227289262 seconds)
    (5/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.186439554 seconds)
    (6/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.108799775 seconds)
    (7/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.201562032 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.173916375 seconds)
    (9/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.124767888 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.077062341 seconds)
    (11/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.191730161 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.188353504 seconds)
    (13/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075517159 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.198675601 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173342326 seconds)
    (16/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.198441177 seconds)
    (17/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.080622325 seconds)
    (18/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.178954505 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.077534259 seconds)
    (20/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070805829 seconds)
    (21/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.176030097 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123901798 seconds)
    (23/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.075235809 seconds)
    (24/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095147186 seconds)
    (25/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066627384 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078338419 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078707948 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.141833626 seconds)
    (29/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.092228822 seconds)
    (30/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066382685 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.125126215 seconds)
    (32/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193564235 seconds)
    (33/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075949054 seconds)
    (34/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.146506722 seconds)
    (35/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067081059 seconds)
    (36/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.200383905 seconds)
    (37/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.242168895 seconds)
    (38/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075557142 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.092132055 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075563839 seconds)
    (41/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.151324242 seconds)
    (42/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155548928 seconds)
    (43/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085279771 seconds)
    (44/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075649855 seconds)
    (45/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.180922849 seconds)
    (46/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.228202473 seconds)
    (47/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083401828 seconds)
    (48/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.195665281 seconds)
    (49/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.190759064 seconds)
    (50/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.152284001 seconds)
    (51/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.256157606 seconds)
    (52/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077617399 seconds)
    (53/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074062454 seconds)
    (54/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067719113 seconds)
    (55/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.077379951 seconds)
    (56/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075627025 seconds)
    (57/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074725064 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087003368 seconds)
    (59/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.080621456 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153062269 seconds)
    (61/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074576794 seconds)
    (62/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078197485 seconds)
    (63/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.079187054 seconds)
    (64/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.198763187 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.199603817 seconds)
    (66/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083580768 seconds)
    (67/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.229400038 seconds)
    (68/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072766724 seconds)
    (69/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.177203662 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.081571553 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.09000127 seconds)
    (72/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141954313 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078017895 seconds)
    (74/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.093879672 seconds)
    (75/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064501954 seconds)
    (76/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.123534873 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140854181 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.284226912 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069111722 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.089021467 seconds)
    (81/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.185269028 seconds)
    (82/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.144143293 seconds)
    (83/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.067219089 seconds)
    (84/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.142356299 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113209777 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075056458 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131655269 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.087397305 seconds)
    (89/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.06864299 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094745221 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074713362 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066344355 seconds)
    (93/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076970732 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068625548 seconds)
    (95/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152440659 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070197599 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091567957 seconds)
    (98/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.229531449 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066444257 seconds)
    (100/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078763637 seconds)
    (101/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.155640684 seconds)
    (102/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066424775 seconds)
    (103/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067044957 seconds)
    (104/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.163007885 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088747905 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.197859326 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.076958025 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066647678 seconds)
    (109/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067141681 seconds)
    (110/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077219527 seconds)
    (111/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.164611075 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.199462121 seconds)
    (113/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.20838078 seconds)
    (114/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075624029 seconds)
    (115/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06641121 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066452805 seconds)
    (117/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.142667609 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.12331318 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073948655 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.126988415 seconds)
    (121/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146627809 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.1702533 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086827785 seconds)
    (124/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079787443 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09175111 seconds)
    (126/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066031756 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069703963 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076600492 seconds)
    (129/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.066722672 seconds)
    (130/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066245 seconds)
    (131/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075396105 seconds)
    (132/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07515845 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.19631887 seconds)
    (134/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073787041 seconds)
    (135/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.066313204 seconds)
    (136/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066383688 seconds)
    (137/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.144108915 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084475285 seconds)
    (139/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199047972 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075353479 seconds)
    (141/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085480428 seconds)
    (142/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071537961 seconds)
    (143/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074243542 seconds)
    (144/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084716862 seconds)
    (145/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073593724 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074328853 seconds)
    (147/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066011656 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075930575 seconds)
    (149/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077793334 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092082135 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.150892573 seconds)
    (152/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070379739 seconds)
    (153/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071135983 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.073461789 seconds)
    (155/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066029746 seconds)
    (156/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.1730786 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07606749 seconds)
    (158/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066949239 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 0.143409395 seconds)
    (160/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066907315 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066325465 seconds)
    (162/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.13992487 seconds)
    (163/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.09300691 seconds)
    (164/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068744217 seconds)
    (165/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.07700022 seconds)
    (166/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.06631598 seconds)
    (167/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081912301 seconds)
    (168/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.196825552 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066347674 seconds)
    (170/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.066688717 seconds)
    (171/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082046207 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073102759 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075318725 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116703626 seconds)
    (175/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066314549 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124953177 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 0.067168462 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.080764625 seconds)
    (179/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065980306 seconds)
    (180/341) benchmarking ("sort", Int8, false)...
    done (took 0.151199688 seconds)
    (181/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064122194 seconds)
    (182/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.187586755 seconds)
    (183/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072935833 seconds)
    (184/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068241103 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.175436545 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.330253861 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.068529687 seconds)
    (188/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.069971213 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067166518 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.140665802 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.070936222 seconds)
    (192/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.23770091 seconds)
    (193/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073740518 seconds)
    (194/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082874754 seconds)
    (195/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.133865868 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075836939 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093610468 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073552188 seconds)
    (199/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069910073 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067156677 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066781639 seconds)
    (202/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.06744641 seconds)
    (203/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.073540231 seconds)
    (204/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06659378 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.065197679 seconds)
    (206/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066798188 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074785055 seconds)
    (208/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074872894 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148313869 seconds)
    (210/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085880741 seconds)
    (211/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077118802 seconds)
    (212/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.195305624 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147340194 seconds)
    (214/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.069487764 seconds)
    (215/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068118737 seconds)
    (216/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071194031 seconds)
    (217/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.219384181 seconds)
    (218/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163653816 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133536855 seconds)
    (220/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.16218961 seconds)
    (221/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170378059 seconds)
    (222/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.222398597 seconds)
    (223/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.157263661 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064983504 seconds)
    (225/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.066389392 seconds)
    (226/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.066866811 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074511376 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086725956 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073522771 seconds)
    (230/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064910128 seconds)
    (231/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068088875 seconds)
    (232/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066831556 seconds)
    (233/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262215547 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066173653 seconds)
    (235/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080309318 seconds)
    (236/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.190752188 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068720703 seconds)
    (238/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079844029 seconds)
    (239/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066920016 seconds)
    (240/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067249884 seconds)
    (241/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066502333 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078384955 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076651478 seconds)
    (244/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.067632924 seconds)
    (245/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.06749845 seconds)
    (246/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068072551 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073770861 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133695202 seconds)
    (249/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067532209 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073648138 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.070158164 seconds)
    (252/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066566751 seconds)
    (253/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06689776 seconds)
    (254/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068498099 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06486018 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.178573178 seconds)
    (257/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066328809 seconds)
    (258/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.154579188 seconds)
    (259/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.06715205 seconds)
    (260/341) benchmarking ("sort", Float32, false)...
    done (took 0.137983745 seconds)
    (261/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081362658 seconds)
    (262/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066913686 seconds)
    (263/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.08657998 seconds)
    (264/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068855293 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066060244 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066448627 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151842659 seconds)
    (268/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066842963 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065765643 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06628681 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.066896358 seconds)
    (272/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.066789013 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.064832416 seconds)
    (274/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067792235 seconds)
    (275/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.151334488 seconds)
    (276/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06637792 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.065903929 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151611032 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.075907085 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066070564 seconds)
    (281/341) benchmarking ("sort", Float64, false)...
    done (took 0.136758638 seconds)
    (282/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067183212 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.131831677 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067444738 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067271015 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149443058 seconds)
    (287/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068081442 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066871668 seconds)
    (289/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065595029 seconds)
    (290/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.066313106 seconds)
    (291/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066086812 seconds)
    (292/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.068549216 seconds)
    (293/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066029079 seconds)
    (294/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.066058222 seconds)
    (295/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.064516546 seconds)
    (296/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065590958 seconds)
    (297/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065390734 seconds)
    (298/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.073645706 seconds)
    (299/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068853163 seconds)
    (300/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065285162 seconds)
    (301/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065300263 seconds)
    (302/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065596747 seconds)
    (303/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072943181 seconds)
    (304/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067268277 seconds)
    (305/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066002054 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.064199248 seconds)
    (307/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067955297 seconds)
    (308/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.247982972 seconds)
    (309/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.077002364 seconds)
    (310/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069743694 seconds)
    (311/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.092549799 seconds)
    (312/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.071649105 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.068778976 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074652075 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068916735 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086319357 seconds)
    (317/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.073999474 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078337082 seconds)
    (319/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.067885558 seconds)
    (320/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069782412 seconds)
    (321/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066938386 seconds)
    (322/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070651662 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085115466 seconds)
    (324/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092537339 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069941413 seconds)
    (326/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066491449 seconds)
    (327/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093194528 seconds)
    (328/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070427676 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091868064 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089331461 seconds)
    (331/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066264578 seconds)
    (332/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068822507 seconds)
    (333/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067201874 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066716058 seconds)
    (335/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.082060329 seconds)
    (336/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068370693 seconds)
    (337/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067538919 seconds)
    (338/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066290545 seconds)
    (339/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066941871 seconds)
    (340/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068766012 seconds)
    (341/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065601865 seconds)
  done (took 36.94134553 seconds)
done (took 38.524898929 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.099731333 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.082447828 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080199062 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076767652 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080927627 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079062436 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.079604611 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077853088 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.079143838 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.079063773 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.078666797 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.06659664 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.075889743 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.0822536 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075728167 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081999864 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079022183 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.081735318 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066695074 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080770113 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092907883 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.078204408 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074783301 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080191463 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.0666024 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076105916 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089870107 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087133967 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073098343 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076098188 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074407595 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084795538 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073923159 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072924436 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075993402 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072523755 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076018133 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073380376 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089240731 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072187332 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066512569 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078475933 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073878203 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074669315 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075326586 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078346855 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.071669074 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079949224 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066115219 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077471195 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089684887 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071261591 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.073118255 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074685279 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071589315 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075758084 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073221106 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.077716416 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071608705 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077495343 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077756931 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074789981 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066051328 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.074843495 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07347043 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.0742173 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065069524 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071174597 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066153629 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066258435 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06540019 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074533148 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.072838487 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071210472 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065492919 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066172044 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065562804 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078241787 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072861082 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075771286 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066587659 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071582721 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.070964683 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066437765 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071131855 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077468732 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065818552 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066762408 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065389956 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080428534 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072443364 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065812037 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077517505 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070894041 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071369004 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066222416 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065462984 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070648627 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074342256 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065876242 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.065328643 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071164108 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071065791 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075162376 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066647158 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070862694 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070926944 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065189547 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075009909 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073520804 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074695025 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079031797 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075112833 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077894135 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066590213 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065234069 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075998389 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066550831 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071149689 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.073899133 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071628963 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074401915 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066454616 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065235367 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071218176 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072243694 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066041093 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066226177 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066057767 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075122362 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07293926 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.064928846 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.065729683 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.074013745 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.07412931 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065071574 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064849662 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074128742 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065596674 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071034176 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.071314818 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.07424944 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064679251 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.065395053 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.219352145 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067711444 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066763048 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072696809 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071780156 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067201004 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075355531 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072669349 seconds)
done (took 12.970254705 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.070429628 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.110062288 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.081639047 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083115019 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079828416 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068057183 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071478381 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085764583 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070635981 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.091046396 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.09481426 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088516801 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097467808 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066129818 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067055343 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068338567 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065681932 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078903828 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083990663 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090391066 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.103103988 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06698377 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.083296054 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086491684 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080645183 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.125915088 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068220413 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06777109 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069797349 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085372199 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092309612 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066948515 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068178686 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085098486 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.082278205 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074991332 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067716538 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073363122 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070516977 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066953192 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069208554 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084677123 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073352403 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073499846 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068298623 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068292571 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.0678186 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074374531 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.08473874 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072686837 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.079051594 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.086252845 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068797643 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067231125 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065454639 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073814463 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067188393 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068055379 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067565272 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067257112 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067612049 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069749777 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072409396 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073356594 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070585657 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073363058 seconds)
  done (took 6.711161288 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.086143335 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093048706 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081691435 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082190001 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066549962 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067347533 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067409337 seconds)
  done (took 2.240282889 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.070090433 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075019427 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079568599 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079453573 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088584931 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077363356 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067848493 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099217756 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066540173 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076146073 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083001684 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080602839 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070663168 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079438591 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068054292 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079936909 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067778512 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074430881 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075605318 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080981014 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072057816 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097082561 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080811031 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068198359 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080607089 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075015238 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069541095 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067830827 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067655217 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066945129 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067225651 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089027212 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073527801 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079391012 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068030365 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066659215 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071844306 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068009093 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071485355 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075887589 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071236768 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067477726 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.0678841 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067380718 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.06811845 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072020423 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068547136 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067635697 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066747721 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074737965 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066491829 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.07395794 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069743607 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072030839 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071843594 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072138632 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074535935 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068104182 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074908358 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073706731 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067295559 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079862293 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079046833 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071287282 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079165952 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075807077 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073985672 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071049571 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067022037 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066814664 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067870653 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078592148 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070668441 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069388972 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068094542 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072083454 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071112556 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082848685 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082683163 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080779244 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069928372 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067595198 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071357223 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082834527 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072480719 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066936261 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068253341 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066963335 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072213423 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067641505 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.071846577 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067531535 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074074966 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069550883 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069980207 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075562755 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06727235 seconds)
  done (took 8.782051849 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.07310046 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070146733 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068492193 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068157885 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068655815 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.06865308 seconds)
  done (took 2.15621215 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.093771006 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067989448 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079871282 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068139235 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089853546 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074341539 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074772662 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069695634 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083943127 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078189872 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074608678 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076660669 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077505105 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069542937 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074116786 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069032633 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073875624 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070921175 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077408089 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07004714 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083792228 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069223109 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069821371 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079490906 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070606683 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068872019 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.06890781 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078279679 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077723576 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069278988 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069365586 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.07055454 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076322423 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069271859 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074050969 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076064332 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067689841 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072995762 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069806675 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070367325 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076101568 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069812759 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069883418 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073740583 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069153724 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076122889 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.0733308 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071121871 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073774813 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07330573 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073144628 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068010863 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071235149 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073201846 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076437013 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069469249 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073058645 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073837692 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069367338 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07576809 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.068196367 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070777171 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069534944 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070315319 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072622717 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07313546 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076196735 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069471448 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069914992 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067600077 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072976394 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067959826 seconds)
  done (took 6.963375957 seconds)
done (took 28.535161819 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.545604127 seconds)
  done (took 2.210371678 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.612807068 seconds)
  done (took 2.322978668 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.662968238 seconds)
  done (took 10.371337513 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.357176739 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.413627821 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737081471 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133796229 seconds)
  done (took 3.390772184 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.755542511 seconds)
  done (took 2.480233327 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.235089518 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22056659 seconds)
  done (took 2.193079559 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.343452654 seconds)
  done (took 2.057870486 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.149551154 seconds)
  done (took 2.858955558 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.239788123 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163169805 seconds)
  done (took 2.12664227 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.546587056 seconds)
  done (took 2.260346754 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.276660259 seconds)
  done (took 5.997686955 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236671536 seconds)
  done (took 1.992761116 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.232648046 seconds)
  done (took 1.95191445 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.051970878 seconds)
  done (took 3.763118238 seconds)
done (took 47.706336312 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.087696886 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087278288 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087511027 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082008762 seconds)
  done (took 2.029222073 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.078131667 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071560487 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074445391 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074827657 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072455384 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073470794 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074066541 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070968187 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072539113 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071517361 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069885936 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071432426 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073912297 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071143889 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073898192 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074895056 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071364086 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071247072 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073592136 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071017175 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074082127 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070930521 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069054208 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070960473 seconds)
  done (took 3.454141943 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.082456646 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.074214679 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076378389 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072066809 seconds)
  done (took 2.033864497 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080334721 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077071023 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086519262 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091063072 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076585144 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077780854 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085029456 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084929006 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066836404 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087968066 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069330779 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067944773 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068031334 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086863515 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084148351 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063529331 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064782299 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077944346 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077509377 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080219872 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069537238 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066570783 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077426936 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.0785604 seconds)
  done (took 3.571834463 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.086275086 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066637622 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082252741 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092217783 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092669957 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067880751 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080008726 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094106144 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12844801 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066943453 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073021132 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066485048 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105102535 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066493892 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.08148063 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109172463 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113183936 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070578855 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099865549 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066698392 seconds)
  done (took 3.444680196 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.079762614 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070658179 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071515298 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066605032 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077859717 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073793155 seconds)
  done (took 2.17537627 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072075779 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.070115647 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070784479 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073261095 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06862588 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068866776 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.068236046 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.067182434 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067205999 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.067923758 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067984389 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068658128 seconds)
  done (took 2.556107061 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.159009243 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070733196 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.07105789 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066894137 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072373397 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067492218 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08205353 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069702728 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085389118 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067691644 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06760319 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.0703728 seconds)
  done (took 2.677979554 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10901169 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112263716 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146029264 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118479614 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11815998 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097733493 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12637335 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095788358 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160887205 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137828725 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117718695 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094364346 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087313632 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070621644 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100391667 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119891648 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137688131 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073971991 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113914121 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165563815 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132480801 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136743904 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.15011697 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117854624 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091558705 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149799901 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098382396 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103270167 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125661471 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127023716 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119879274 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098808226 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072980007 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071831275 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149644787 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10490163 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121315762 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094224122 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106111487 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089188807 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108593596 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070826958 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087923249 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114566413 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087379707 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132243862 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089128627 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116559122 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082186164 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138659723 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122477884 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098037925 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085253252 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10365369 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.297612804 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113942691 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136051443 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109029346 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084732968 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119631247 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104293049 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10122337 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109070841 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081035381 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178022172 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089804489 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113094152 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113141687 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095451427 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096851043 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108514996 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136724352 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126999116 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127324437 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14133814 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096572358 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123336023 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100928089 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130048943 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106509891 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073918683 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12262448 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12989014 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09949808 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102221859 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131742384 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09312417 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078318892 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.10031614 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119287942 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081477781 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113247231 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081823673 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109900869 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134630587 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098269624 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112526663 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11760892 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078993661 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155046744 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109393662 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073353254 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117177938 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112943227 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153382654 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093715836 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075960807 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09822751 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101430504 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.146830903 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104858965 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079488581 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108079481 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135525375 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093192159 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165227895 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094040333 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136255002 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104961928 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084242435 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072948488 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.087556851 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105595827 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101975299 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105844725 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087047164 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.081071837 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084486712 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104537668 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089711551 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07826478 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108540063 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098316165 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072566856 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084448268 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.077836339 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133323441 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076232672 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126956209 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118771338 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077667243 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102219802 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094678253 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104428606 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094319627 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110732458 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129650737 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11116699 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086441559 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088588474 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101788025 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.135075088 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120307977 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.0884264 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.074793332 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09624036 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106351163 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.093359984 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118235507 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0963565 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102025666 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098089373 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132896756 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13370941 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095208533 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096663477 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.384062348 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.127608168 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080808392 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.16147689 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107983775 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122198739 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088235657 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144564212 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119021435 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093011026 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090451659 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103754625 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.107150664 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109235784 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146643699 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099152641 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074943461 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095114229 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.146807708 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078799116 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113171587 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092767622 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.095522901 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122216568 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09579489 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084190953 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070272489 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129948423 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160354785 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071764719 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11659247 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.113515314 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104695673 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123712295 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071909846 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120651994 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141001843 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120788649 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142281295 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148590969 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118592762 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120193446 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115465982 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106932172 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080988639 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126850135 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136093723 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097455196 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093929402 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136050922 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119560497 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137634158 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.117708092 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.282992164 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106246914 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108491167 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103933079 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103068968 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144765821 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121434076 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125448685 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086997475 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107017018 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118847416 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13565928 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083278415 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142734656 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084777807 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118898226 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078915785 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125687151 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080442327 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11286745 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081388201 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101348939 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070750804 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075324096 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142611211 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113601431 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106958326 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100868907 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138613882 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13743665 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08309322 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109346728 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116491527 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102411437 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116940952 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110226929 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089955949 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096389228 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11030645 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086063388 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082775218 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.115849652 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095177105 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127246711 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085293496 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075991613 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141124746 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105623165 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09631705 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078835955 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109131431 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122204472 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09360576 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088290153 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115725475 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105449339 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142392652 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091382349 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098414067 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124645212 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.246315398 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093723898 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071305267 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086507173 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077247172 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128251265 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077034547 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116609223 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070090347 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131009159 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087820309 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094228145 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103448895 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112038998 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128098734 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095662979 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141775887 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090549253 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118979627 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109549734 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095616409 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089805685 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104727296 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102296685 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124184168 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097203383 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123801424 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145225706 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106356046 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142544576 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092860364 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122319356 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107847668 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125344087 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113326108 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149078888 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13910662 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113619332 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113337748 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076258921 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095874 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106481534 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112709157 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175168617 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126743589 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073390357 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107009337 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094800209 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109344356 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106220988 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083843934 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147651775 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102920446 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089434509 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113868315 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091511551 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.26486047 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077900943 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096100943 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101062799 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095039573 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099235211 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116196538 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128597986 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114316759 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143407159 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100174815 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093819264 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119664099 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111732475 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111401276 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086899633 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087315636 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138759935 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119755713 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129093231 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.1017049 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111401382 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112939551 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102103064 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126856262 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109376769 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.12806002 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081539385 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077145081 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069864605 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073311844 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124514281 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109580842 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112980146 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099514973 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073856434 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104731722 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107699088 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073277712 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090479338 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095442991 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100658067 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092630165 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108063898 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114994175 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092885893 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105684541 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101271976 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147859342 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101206158 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089623438 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145415585 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151017641 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089483106 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094131227 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072695802 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080160814 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114701564 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150980754 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.313755105 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078977255 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087837419 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08684516 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087531152 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073091882 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087422905 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090559667 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105622353 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099922785 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113565716 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105370005 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077221962 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10439665 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101055672 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093860523 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105162495 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119644768 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125956776 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.142321839 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111091069 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108667348 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077742929 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.08196846 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077059941 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081073534 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103526405 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080091749 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077651638 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144718079 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093477676 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10614127 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110045695 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09047149 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076739198 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135480666 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070701645 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136573289 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072607287 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083570843 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083680504 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080306495 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09541943 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140502249 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111497409 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11441669 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108541247 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106158426 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141348076 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157147613 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081491051 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144372223 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076963451 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076700376 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07726048 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114854379 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090745495 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116198896 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141449766 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092000175 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10526472 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078195609 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145277051 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.26008914 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105408686 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088684423 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080573612 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143828891 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081167318 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081329755 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091500905 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11258972 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073629006 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105035588 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085847737 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081368689 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143382637 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632040961 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091458072 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07695385 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096893811 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142933274 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128831039 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096345522 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109320383 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.119963654 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101689899 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096730575 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109153903 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.184699106 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075936864 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096228535 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105224692 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099789746 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103702304 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.10023357 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089645437 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093623747 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088159728 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081307999 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109361073 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090633394 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097757784 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108682007 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08434769 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088782484 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131986757 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105297427 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083796485 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089301334 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.107182393 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089413503 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102542408 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070277359 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114456604 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092151801 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118523799 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.0959832 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108123986 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128605193 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091166694 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139539805 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108694608 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124732215 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088706365 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.243023232 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125320058 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.08920555 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079149436 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145345467 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.096635152 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094243445 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104950468 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097712329 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114599139 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118168546 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112317599 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09854502 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080125659 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100602989 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103142181 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086745421 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079928223 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076044638 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077679234 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108434446 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08737109 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085196457 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116249641 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090449823 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104659208 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10215707 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124439899 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085036109 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10255232 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111552204 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093581679 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110814056 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101387025 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129606371 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175787634 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126794874 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130134706 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13548112 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078633926 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07735701 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069927027 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116087363 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080642434 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090631448 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082156182 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135008178 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.08354383 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112797308 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233230798 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081802982 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095501176 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09775792 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071104884 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084305997 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109370793 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088664247 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081700961 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120932364 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084934154 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129376625 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112723944 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10024472 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095201728 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.243524344 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114509151 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105940868 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130103542 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095801429 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.077083372 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115304298 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104586151 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139365834 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074333851 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082226086 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131446744 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104926624 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133529603 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081752994 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150009684 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144753906 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101847646 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135629475 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072864624 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085087189 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0904046 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12701114 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086528567 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112678787 seconds)
  done (took 68.401234185 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.154367763 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14245532 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083004004 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104635128 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188683294 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198413275 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120731526 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.097020627 seconds)
  done (took 3.024222871 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.072195247 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085634318 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081562179 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207073072 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.108662805 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068600078 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.074353922 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082704348 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068371233 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.0680589 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103030272 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068585483 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068964859 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.370433661 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067889528 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.073067659 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068758169 seconds)
  done (took 3.649909541 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.338720796 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.393905468 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.246662952 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.600359528 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141368362 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486118935 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077614073 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083351721 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.568205656 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371657699 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.131627449 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088614571 seconds)
  done (took 18.453623065 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.082625474 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.08376755 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081509558 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077119426 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.081508417 seconds)
  done (took 2.385587349 seconds)
done (took 119.598551664 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.088434758 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.179262858 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069600825 seconds)
  done (took 2.206379805 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.08795605 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083797091 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083036677 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080288534 seconds)
  done (took 2.265649285 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.080423242 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.079964203 seconds)
  done (took 2.084403409 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224726274 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180028366 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092684377 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.087682803 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082593605 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082199324 seconds)
  done (took 2.183958357 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076875604 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.076643098 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.076098649 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.075052166 seconds)
  done (took 2.222726536 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072742921 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070213305 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070348765 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072745577 seconds)
  done (took 2.205271643 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.091288591 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.091352578 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118245577 seconds)
  done (took 2.220645437 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.088559861 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086516487 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079784787 seconds)
  done (took 2.181769289 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.115457252 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101445143 seconds)
  done (took 2.141474499 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085827726 seconds)
  done (took 2.010612936 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.096154948 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102718067 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141770115 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109390677 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143430227 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.129330644 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079669135 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080618029 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076205924 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.075008583 seconds)
  done (took 2.956151989 seconds)
done (took 27.191971392 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.084966502 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374704548 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361769992 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089134859 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675095111 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358749543 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.003859406 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09351983 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103579995 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070482443 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087717941 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652259273 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994224081 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.333006736 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.97934344 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331767948 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655864146 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070780838 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069940186 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070810246 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.988002075 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070516296 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070981071 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070992118 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.653099938 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.37646218 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071335045 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.332120044 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070700722 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074953646 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.359877851 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071194134 seconds)
  done (took 16.567563757 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076273448 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.1282464 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074305992 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08613841 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072095574 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071334328 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073401641 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.071219886 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114519168 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070538207 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087960232 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069671532 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.074050081 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071622085 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090772405 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070263301 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072936037 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073958187 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070275384 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071422699 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089392786 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070083103 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071111469 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071491997 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071038193 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084046811 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071696974 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070945952 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070670413 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075515958 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075173482 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071755835 seconds)
  done (took 4.423736581 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.127621341 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128074427 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07508497 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110874969 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120334762 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071934534 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.154005189 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.09447553 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118164439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070887486 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.088007287 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.07077199 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106469927 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071773926 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091360735 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070951803 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073054605 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071512019 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.07036397 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071423397 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.090229955 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.07072788 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.0707845 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071771269 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071220053 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085817672 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071369832 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070788904 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071037335 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074432702 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075770547 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071364141 seconds)
  done (took 4.697524004 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.075074221 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.075431305 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08206016 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.08284937 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068639845 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070927414 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071807663 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.06886356 seconds)
  done (took 2.550783734 seconds)
done (took 30.193219254 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.084850287 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.072671288 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073040708 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089921813 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075878206 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072454252 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066876548 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076970298 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073501126 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073908206 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075143604 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069385385 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07240404 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067366263 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074975404 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.0686128 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.075324531 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072913418 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.073222905 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07449018 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.07069578 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073925188 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077187625 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072900598 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072895187 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072668631 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077418984 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074343148 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068626401 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.07125185 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070351628 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.08267476 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074849938 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074769819 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068110841 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068241485 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072595838 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070668812 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074902051 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.07748706 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070147261 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077301945 seconds)
  done (took 5.006276927 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.094776237 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095589166 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088056928 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084238181 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109378875 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084446558 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093187266 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081399135 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080130406 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092436397 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076224654 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081414135 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083176694 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078069383 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080951175 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076836185 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082663736 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075743633 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.081242001 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080857715 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.093088024 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.07398995 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081602144 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082008229 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076008222 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082401794 seconds)
  done (took 4.154705845 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07854421 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.093025426 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094738974 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143794929 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.11195719 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084974848 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084420141 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.100275679 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103692664 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070504533 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074943366 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096874958 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099107872 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077491257 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10903841 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.089138684 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.083163413 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072393109 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.077045239 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105753137 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.093210009 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.089390545 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.1028786 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090705379 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069321292 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079996373 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07761115 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086247043 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077575969 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.083030247 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.074538671 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073619906 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071045339 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082911706 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077519521 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.068221083 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092514606 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083519623 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.08612402 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108880882 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080361667 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072361191 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100998392 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136794981 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069824222 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072850132 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07400871 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.08338355 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071609835 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099895089 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088791528 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.070003063 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.089028239 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071648322 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071513842 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08683635 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071829585 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.072041692 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082271722 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07631046 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.09073927 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075128026 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091177909 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069511992 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081742378 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071666171 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071427139 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068989739 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.107127042 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077884526 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123385858 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071247564 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068221676 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.08258189 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081991131 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076769058 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.070152634 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090098089 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.082441341 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073852253 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.082098979 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.073035089 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073099435 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10596208 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069049673 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.068424509 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067978477 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072636594 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073609952 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070785008 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083785503 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06940353 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073546089 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085798916 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.070018906 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.07072712 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072687752 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071059608 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069764835 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.081064025 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073947597 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072097891 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08264952 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071054721 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073618305 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08533252 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079926289 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069761521 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071235172 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072482612 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071899496 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074970169 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.07323304 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072148569 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076941857 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077559011 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.076106607 seconds)
  done (took 11.53255308 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.171690895 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.156897649 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071556403 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.15141492 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078628578 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074820335 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153738728 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091429603 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.071180068 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.072177768 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070328871 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.099261678 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094857415 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.106474718 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074775426 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071085192 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096486183 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104823906 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155627844 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149783145 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09442505 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078839756 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073354017 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.072408005 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072303689 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.080035961 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087272548 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.079344497 seconds)
  done (took 4.756785042 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.080912986 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.087892991 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074684144 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094386556 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.08885291 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070942255 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072460774 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071825728 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087665159 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077826188 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07101444 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07500171 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074742893 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071874667 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071755885 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077380477 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077792928 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070231137 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074596032 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075479795 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081552569 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096289637 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074900204 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070930122 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073332381 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070964544 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077395262 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080439939 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070294289 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100743166 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.06778055 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075112814 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084744874 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071997423 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070256695 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07132478 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070735963 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070568496 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.071281594 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068609752 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068761998 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075346596 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069701519 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076495683 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084590886 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.078013662 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.072115716 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.076226582 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073583711 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068021778 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073976546 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.074051506 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073146453 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079501668 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074402151 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073610436 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071744339 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100859571 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076755808 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069817721 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069445735 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068618914 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072378945 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078365895 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08744748 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072247071 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068792242 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.07066259 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075309979 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084634707 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069911281 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.076123981 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.06754576 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.07107123 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073440251 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073278307 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071940562 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06905926 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070046323 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070786912 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070627207 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070340256 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069823781 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073199046 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068378384 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068670226 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07100912 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071903338 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076842065 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069748363 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07335295 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071927633 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069570917 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073198809 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075694364 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073210912 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.09065776 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079026575 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.071053689 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068366584 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085111219 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072638687 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.070043534 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.076138727 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.075263781 seconds)
  done (took 9.869971805 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096590884 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072026651 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090406207 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097443257 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.081037759 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075635027 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084820978 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071043334 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087178579 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.070009344 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079377885 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068811788 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084128764 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080110292 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072579295 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081217186 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073380095 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091552563 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085832369 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069189074 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.08017469 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083213119 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083554502 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088718303 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088374417 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089436846 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083293313 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.073658658 seconds)
  done (took 4.308971475 seconds)
done (took 41.581653549 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.039784895 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.20911543 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.038337684 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.296590648 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.082271899 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.145410054 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.134740005 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.024457216 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.177322489 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.060959421 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.341057113 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.397079078 seconds)
done (took 69.971689215 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.10700511 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.174930986 seconds)
    (2/2) benchmarking "String"...
    done (took 2.242963905 seconds)
  done (took 6.368428113 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.627825891 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.028651982 seconds)
    (3/3) benchmarking "different"...
    done (took 2.079264284 seconds)
  done (took 8.683856374 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.106562823 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.664798988 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.280026912 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.02757148 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.033198767 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.440928075 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.85678273 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.4994919 seconds)
  done (took 33.754847463 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.234596526 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.217698718 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.774295433 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.814577699 seconds)
  done (took 17.04484369 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.633939117 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.291193293 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.291606657 seconds)
    (4/4) benchmarking "different"...
    done (took 2.284890386 seconds)
  done (took 11.512747345 seconds)
done (took 89.631566296 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.02700548 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.360847973 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.036202216 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.180922063 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.037794421 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.053237418 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.037159283 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.069331475 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.024387207 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.026189583 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.439954143 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.023951714 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.043432164 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.067339628 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.040767831 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.063266728 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.493368886 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.04145698 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.085354758 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.510430295 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.550235199 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.02848237 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.030467104 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.090428445 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.106143813 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.067097851 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.536227947 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.032295224 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.641251438 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.045992553 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.186609466 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.02791794 seconds)
  done (took 212.959461317 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.035531191 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.079388224 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.158483992 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.06607715 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.608949537 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.222355179 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.180799169 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.645576277 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.030626132 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.033412213 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.35752471 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.028964352 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.371435672 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.976842894 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.027103014 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.042116448 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.297023119 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.328319583 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.027566621 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.211677655 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.044812279 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.33535491 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.293880901 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.292357968 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.066011825 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.045860157 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.054026614 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.047341668 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.222147845 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.284368241 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.040605597 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.045872737 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.23638536 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.897824764 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.044595944 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.056979044 seconds)
  done (took 180.695420981 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.218159444 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.046832559 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.099859857 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.170499959 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.781853113 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.767313676 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.038783376 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.037132029 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.037836597 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.044591927 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.03737498 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.108788286 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.875319996 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.052960747 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.032058564 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.040314358 seconds)
    (16/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.039277806 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.596705337 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.035977308 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.039131982 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.034519363 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.098101769 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.406892632 seconds)
    (23/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.03210626 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.173901571 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.038522941 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.043583426 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.171926163 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046499386 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.034579856 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.170419066 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.038867078 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.116421264 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.169978901 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.043165287 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.119691074 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.041712264 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.523059402 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.033693691 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.039457914 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.039062881 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.100242865 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.035505126 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.131845076 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.122736765 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.033993874 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.051308154 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.234134454 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.711092438 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.037878672 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.038940943 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.036986072 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.038148186 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.037443566 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.20367747 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.034123841 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.065044587 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.635941629 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.039781907 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.041243563 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.037530697 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.041118041 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.041570339 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.048295061 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.073496212 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.847464837 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.139649843 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.424386975 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.836408599 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.039062377 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.348875073 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.090510408 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.040918078 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.121239495 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.033836 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.041565982 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.041456368 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.038646058 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.129797023 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.114802163 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.03748321 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.174773327 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.042109575 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.040802108 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.442979649 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.677261797 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.047254523 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.056570319 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.089631298 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.040623415 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.042673237 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.049934036 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.127152985 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.038955474 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.04279603 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.040626416 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.134512178 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.037014263 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.287086516 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.256310163 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.109752729 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.282524498 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.26744285 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.038294188 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.041151347 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.056239615 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.039445828 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.042342323 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.049644294 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.043142878 seconds)
    (110/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.044254246 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.04364013 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.040583893 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.044308749 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.042662604 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.041955167 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.042003097 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.056250728 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.039044762 seconds)
  done (took 440.510143347 seconds)
done (took 838.393081738 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.766801291 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.828533827 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.673764181 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.705537123 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.666673075 seconds)
  done (took 15.602232775 seconds)
done (took 17.56601702 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.08021499 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.059815373 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.048804607 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.107213014 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.065360165 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.055824995 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.090510229 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.090489955 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.074327433 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.055363819 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.110885459 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.060647025 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.076307919 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.078422251 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.131341304 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.080846432 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.061291379 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.054192932 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.114035937 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.058656175 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.062323617 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.058025221 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.058854473 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.108732614 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.136326661 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.064416294 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.056519383 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.102153172 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.067334666 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.102916963 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.114504049 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.079852393 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.09164768 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.134550702 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.112894876 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.139596688 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.063019952 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.123588365 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.061352819 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.145781982 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.131525439 seconds)
  done (took 87.533986933 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.05373577 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.182916767 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.260452055 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.081612156 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.053171227 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.265198425 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.109420965 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.179416244 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.182361598 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.266770328 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.274855114 seconds)
  done (took 25.881334005 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.051460834 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.191077775 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.271265766 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.084454118 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.075436419 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.26795169 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.116284844 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.183554733 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.186168567 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.272410517 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.274482989 seconds)
  done (took 25.950744275 seconds)
done (took 141.335798551 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.423642071 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.07277122 seconds)
  done (took 6.462580845 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.047155833 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.064709125 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.193907246 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.04867515 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.047536519 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.046965905 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.048285709 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.047139181 seconds)
  done (took 18.510130065 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.047927049 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.048431024 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.047763808 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.048378261 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.047768504 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.04780897 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.048163143 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.050992918 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.048034426 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.049198553 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.048959227 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.049134302 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.04938345 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.050638205 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.049158989 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.048787332 seconds)
  done (took 34.748122971 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.049887021 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.049550516 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.049721823 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.050669177 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.049471331 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.051303761 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.05227532 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.050609816 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.049782283 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.04986808 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.051686169 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.05107855 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.052461959 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.051376249 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.051582015 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.052584683 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.052342226 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.051952169 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.053307294 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.052241542 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.053221325 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.052853729 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.057794805 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.051773368 seconds)
  done (took 51.209232888 seconds)
done (took 112.908469375 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.239735602 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.853661823 seconds)
  done (took 9.061820638 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.055411287 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.053135229 seconds)
  done (took 6.152569539 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.052799553 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.053139457 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.051907093 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.051725643 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.051185236 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.05214473 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.051678719 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.051868578 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.051207641 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.052979559 seconds)
  done (took 22.490969421 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.05308383 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.050754438 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.051375585 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.051545358 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.051348283 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.052322652 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.050825366 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.051064822 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.051369592 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.05208998 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.05185615 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.051988982 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.052822014 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.038947942 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.053220836 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.053429652 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.052878768 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.052298557 seconds)
  done (took 38.893410705 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.052744056 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.051540432 seconds)
  done (took 6.075424087 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.051286996 seconds)
    (2/7) benchmarking "second"...
    done (took 2.04790912 seconds)
    (3/7) benchmarking "month"...
    done (took 2.052547503 seconds)
    (4/7) benchmarking "year"...
    done (took 2.051535969 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.051909296 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.05276354 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.052648978 seconds)
  done (took 16.327326087 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.053138579 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.203201075 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.249568796 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.665362783 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.053945512 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.054584229 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.910118337 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.055476366 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.056732533 seconds)
  done (took 22.273397935 seconds)
done (took 123.247341215 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.900229382 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.053990249 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.337670931 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.120425168 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.112283166 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.392523626 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.077636438 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.598887163 seconds)
done (took 44.567926363 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.176240731 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.052138821 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.079460873 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.081120351 seconds)
  done (took 23.185366946 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.068240365 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.381528561 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.076178598 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.029335714 seconds)
  done (took 23.544361123 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.431545907 seconds)
    (2/2) benchmarking "read"...
    done (took 2.405319272 seconds)
  done (took 6.816503854 seconds)
done (took 62.701948029 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.055158866 seconds)
    (2/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.046485802 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.056176077 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.055403307 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.055476259 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 2.056628129 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.055573316 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 2.056709814 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.055831551 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.056023835 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.054791876 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.054701368 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.056306039 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.055667393 seconds)
    (15/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.056285292 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.0563283 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.04173902 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.057731848 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.05682716 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.056935798 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.058420389 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.056429986 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.056451354 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.056779512 seconds)
  done (took 51.298607042 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.054852621 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.05860685 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.057261362 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.056802125 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.056854919 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.057564815 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.056410065 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.056505538 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.058287016 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.057045113 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.057615605 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.057582635 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.056212764 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.057515391 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.05654392 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.058321197 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.057044379 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058605358 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.058805124 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.057905392 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.056572936 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.058333856 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.058299809 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.058493009 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.058936773 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.058062146 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.058474543 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.059590656 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.059651698 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.058805451 seconds)
  done (took 63.708961406 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.059871676 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.058618915 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.058202788 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.058485525 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.058195862 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.058082134 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.058163999 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.058561642 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.059275165 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.059837857 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.058958913 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.058314814 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.057499914 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.059219955 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.057799112 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.059403419 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.059213948 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.058227308 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.060607554 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.059885244 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.058756403 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.057916454 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.058226675 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.05761679 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.057807419 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.057874565 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.060171519 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.058693102 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.059636022 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.057811359 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.0582167 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.058916949 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.05910153 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.058404091 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.059674048 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.059629895 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.06073718 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.060023387 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.060217418 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.059659591 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.061233677 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.061290633 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.060721433 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.059868299 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.060746322 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.060252644 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.061120404 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.061752395 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.059672928 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.061175886 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.059761138 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.061501368 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.060667798 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.060688819 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.048089718 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.060274962 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.060504827 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.06108592 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.060108764 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.061341493 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.061959749 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.061901116 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.061613639 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.061658083 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.060912196 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.060503744 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.063227231 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.027950343 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.061020798 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.063218159 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.060939044 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.061636132 seconds)
  done (took 150.242641736 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.061369281 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.061099254 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.060715196 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.061351737 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060013658 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.060791832 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.063814797 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.062689724 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.063324698 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.064415042 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.063439651 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.062920267 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063561054 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.063870392 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.062900264 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.064031168 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.063196287 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.062174822 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.064257115 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.063971499 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.062941554 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.063988105 seconds)
  done (took 47.361955489 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064112349 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.062492841 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.062509876 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.063171412 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.063825425 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.064464048 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.063098934 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.065118397 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.065152454 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.064827317 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.065050194 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.06517013 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.064512252 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.065783257 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.065348466 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.065570951 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.06604908 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.065681368 seconds)
  done (took 39.144002849 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.066299125 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.064251344 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.063548179 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.065871187 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.064446065 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.065777088 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.064536092 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.065476249 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.065511428 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.065344143 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.066147391 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.06487065 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.06521887 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067380843 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066395645 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.06523668 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.066226854 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.06637935 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.066453635 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066913725 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.065522715 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.066996783 seconds)
  done (took 47.427625354 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.067504887 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.065267785 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.064896933 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.065659562 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.065296844 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.066254285 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.064463737 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.065074668 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.065174559 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.064612581 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.06626004 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.068009706 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.068322578 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.066976551 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.068996226 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.068226276 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.068108454 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.068826545 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068374928 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.068629023 seconds)
  done (took 43.318407182 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06653223 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066444344 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.066629595 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.067709894 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.064931585 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.066108851 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.06599913 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.06515287 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.065991003 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.067410966 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.066826767 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.069139334 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.068003542 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.06696202 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067619988 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.066769638 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067911391 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.067765818 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.069603944 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.068691588 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.068384855 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.069977256 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.068231828 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.067877546 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.069009754 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.068192621 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.068032405 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.068006317 seconds)
  done (took 59.876699633 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.069831007 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.069471263 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.068657362 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.069077242 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.069932208 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.07006581 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.071330393 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.070598244 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.071474409 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.070251289 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.070163973 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.071235637 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.070520967 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.069752803 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.071441365 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.072615845 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.070756356 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.070702807 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.071613405 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.072083198 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.072541725 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072837606 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.07242846 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.07307784 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.072856047 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.072543073 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.072428682 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.073838796 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.07216786 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.072172879 seconds)
  done (took 64.128501245 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.084773771 seconds)
    (2/2) benchmarking "in"...
    done (took 2.093103712 seconds)
  done (took 6.166436375 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.073372375 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.074689668 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.073678028 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.075012069 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.074969139 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.072880793 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.073971023 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.074195166 seconds)
  done (took 18.581315322 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.073920989 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.075530859 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.074390441 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.074214062 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.074585119 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.0824111 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.076023084 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.074205961 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.075235663 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.075975425 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.07805894 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.075253441 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.08367508 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.078075086 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.074000705 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.077248866 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.073815677 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.075962534 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.074824467 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.074374923 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.075910836 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.074617337 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.074265623 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.074016817 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.075513068 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.075951649 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.084074335 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.074533331 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.074565212 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.074283222 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.080118289 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.076418279 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.072905582 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.076576172 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.074752996 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.07503883 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.081958442 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.076629423 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.075619244 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.077066504 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.076375032 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.048613689 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.075732161 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.083639803 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.076826145 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.0763908 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.077083923 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.075192563 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.0793805 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.07959487 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.08639239 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.076463056 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.076915564 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.076852405 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.07685555 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.075976376 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.076431341 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.079025128 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.081747072 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.082966923 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.079061884 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.086572411 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.086184506 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.077440293 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.07651114 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.086744139 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.104449411 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.077525297 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.077701355 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.078765305 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.084428621 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.07618203 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.077764941 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.076362047 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.08982124 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.087409377 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.076159243 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.077630465 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.078943932 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.07705812 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.078242374 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.077463485 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.077269551 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.078409575 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.087751483 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.106054245 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.078751503 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.078886032 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.078759355 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.080923722 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.08172378 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.081968497 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.079959743 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.077813437 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.078360301 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.083291667 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.077628848 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.078870646 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.081564981 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.085660701 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.07744868 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.078767532 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.082529985 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.088886351 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.080380558 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.079107148 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.081099925 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.078844432 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.086426661 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.080588782 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.079475641 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.08150184 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.082105051 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.083257119 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.082141908 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.084657487 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.089832326 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.08679423 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.082432352 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.083002045 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.084431283 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.084400097 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.090060779 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.109053815 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.081182243 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.084841073 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.086008269 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.094169413 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.085457732 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.082383828 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.082841515 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.08134071 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.08133023 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.081452239 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.08338808 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.081281944 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.081909491 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.080550264 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.081233609 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080843303 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.088110033 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.081397414 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.083300045 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.081736068 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.085114532 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.08228853 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.083377377 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.089271512 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.08449062 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.081820829 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.083060918 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.083847145 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.086864986 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.087583022 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.080951691 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.081277981 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.07876249 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.08417786 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.085771711 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.080403263 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.080371178 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.082767791 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.085363247 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.084969479 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.080107921 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.082286574 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.080585611 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.079803751 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.082886207 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.080741951 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.081614936 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.080762161 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.084390882 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.083685258 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.080896259 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.081024026 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.081027731 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.084782831 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.084629373 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.090168114 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.082836422 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.090920362 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.081654743 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.087417051 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.081987918 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.081108049 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.079871427 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.083746024 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.080444797 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.082291786 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.081417051 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.083757442 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.103773533 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.091235136 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.082803529 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.08378717 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.089434615 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.085832193 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.085120964 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.080637052 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.083291793 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.086372856 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.076868561 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.076922302 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.078534064 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.080643671 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.085381924 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.0840142 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.084069752 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.082526375 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.082687375 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.084583527 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.084101399 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.085287852 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.082992561 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.085842091 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.084667399 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.087296667 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.088433387 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.083158023 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.083011937 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.080389225 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.081532176 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.080559439 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.083731861 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.084086857 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.084088936 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.085516152 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.082345422 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.087677462 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.086518113 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.084748886 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.083415968 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.082796258 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.082776723 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.085816208 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.086128769 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.091730146 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.084052938 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.082545045 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.087288011 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.082450008 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.083793907 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.082169153 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.082171563 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.083364043 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.081075537 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.079954414 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.082736151 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.090888584 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.080005278 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.080294491 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.080187826 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.082709258 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.083437008 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.079947035 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.078767182 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.080172465 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.089954164 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.088781553 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.080788539 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.084636462 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.079435088 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.082417455 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.086250835 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.079508275 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.092549722 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.089964282 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.082155645 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.08159536 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.080086273 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.082929197 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.082313822 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.081746495 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.086377317 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.08385973 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.084168937 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.087688078 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.082103246 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.059447351 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.073718602 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.07883204 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.084387677 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.081835083 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.081690111 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.081367782 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.081996 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.081760617 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.080596987 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.08207529 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.086352085 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.082231262 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.082062176 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.082943209 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.089277699 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.082620282 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.083278991 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.089037585 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.083001691 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.084038668 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.082487021 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.083615941 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.085690989 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.084553054 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.0839118 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.087896921 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.082804508 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.087270121 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.094747182 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.085236747 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.091911255 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.084932843 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.094027215 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.0830893 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.084549839 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.081987236 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.086673374 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.093331133 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.084460462 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.084693736 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.090678303 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.089036327 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.086488025 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.088584236 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.084684036 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.08381397 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.086452807 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.087094701 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.090462495 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.086244801 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.084876907 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.088573229 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.08463171 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.083656928 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.086870724 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.08493582 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.08628219 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.085084885 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.082727883 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.081991734 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.081956135 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.083669698 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.077916847 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.07954386 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.077986045 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.086084323 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.078124555 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.081438602 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.082353692 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.08058171 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.087714524 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.078849606 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.079217046 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.082676333 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.078990553 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.084046166 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.078309116 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.076869582 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.078488013 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.079342611 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.083736694 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.087688541 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.084765238 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.082454421 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.078286187 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.075982302 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.076775784 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.086233537 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.101035221 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.076401736 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.076804779 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.081236573 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.083508719 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.078341877 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.084130062 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.076552161 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.081605639 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.075211961 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.076323894 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.076925785 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.085322146 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.074787855 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.074776958 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.074534895 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.079784413 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.079035488 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.075984859 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.060284789 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.075920544 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.078593257 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.084828201 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.075400734 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.077566108 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.074837849 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.073848965 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.074202414 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.075269502 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.074077162 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.074758224 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.073050126 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.074028295 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.074272629 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.078647762 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.075455154 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.075888867 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.082592571 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.073485984 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.070622556 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.077610748 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.062700308 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.0763266 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.073633766 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.075758883 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.078961199 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.075211436 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.075164989 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.052323874 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.079301701 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.071200729 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.074779486 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.074681469 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.077524406 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.076435696 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.071436546 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.072517804 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.079061923 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.074875709 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.083474974 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.080793424 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.071909961 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.075477222 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.080793922 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.079397006 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.07297732 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.07415619 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.071584349 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.075007045 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.072847751 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.073016704 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.07178452 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.074404086 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.075815108 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.07218742 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.073919603 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.071340805 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.071954071 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.074083757 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.072697822 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.074741705 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.070701332 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.07152569 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.074638324 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.070141779 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.070830989 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.072125534 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071241356 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.072511159 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.071065052 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.072125318 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.075314542 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.071079041 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.072131713 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.071607262 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.071421249 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.07215551 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.073114484 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.074659251 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.072094732 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.073133933 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.078782564 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.07165331 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.073082365 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.073398163 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.073104835 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.06924309 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.07081294 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.06979671 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.072572906 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.078145307 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.071465013 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.071302434 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.072458523 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.071198331 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.075709201 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.070593355 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.074120096 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.069697471 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.072597312 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.071315346 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.073563604 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.080578161 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.07346092 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.071628803 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.075666769 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.07370356 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.071779979 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.069857962 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.068342653 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.072180562 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.072351856 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.074351983 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.070557341 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.071382558 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.070072243 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.072415971 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.067231935 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.070625185 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.071438046 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.070824652 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.075002598 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.077206801 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.077363591 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.07006631 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.070821314 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.072592961 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.072260524 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.081605685 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.070145644 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.069798006 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.069956281 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.068904026 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.072071827 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.074106717 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.077881573 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.0730514 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.068721088 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.072923673 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.084005469 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.071515957 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.079104177 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.094778791 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.073132656 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.069005762 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.068917932 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.072386106 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.067960442 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.074474381 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.068107091 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.076507674 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.066955176 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.069721889 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.075727766 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.070177394 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.071859773 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.069031368 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.072163329 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.073921247 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.069215396 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.076713444 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.070746201 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.070750202 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.071598474 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.074323062 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.071532072 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.070332466 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.070991714 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.070911891 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.070655789 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.068904616 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.077384674 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.069550769 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.071282893 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.082868955 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.081203126 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.069623086 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.070882105 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.069207676 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.07462389 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.072237113 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.071137611 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.073626097 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.07779425 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.074127726 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.076734247 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.066966238 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.071422801 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.070906833 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.071596071 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.071919934 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.080232914 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.079932913 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.073731279 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.075874791 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.075013755 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.071298453 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.078292979 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.075552522 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071472684 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.071584204 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.070514634 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.071550741 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.073670694 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.072823029 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.073691344 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.07840654 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.071913635 seconds)
  done (took 1241.108776772 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.072390317 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.071918783 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.071184717 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.072152521 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.072526122 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.072440179 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07339461 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.073439525 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.073010369 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.07535972 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.072786794 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.074083498 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.072468899 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.073303435 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.074806098 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.074724772 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.072760328 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.073245186 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.073586815 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.074201225 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.072995315 seconds)
  done (took 45.534510798 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.073140399 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.075993429 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.072423662 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.074229563 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.072892078 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.072979814 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.074828745 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.0736366 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.072719878 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.073169999 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.073416434 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.075553635 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.074223989 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.074162946 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073594535 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.073977495 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.073452118 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.075146447 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.074031792 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.072376528 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.072327958 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.075222195 seconds)
  done (took 47.620302742 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.074741245 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.072741723 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.07324161 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.073807297 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.075696872 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.07473152 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.073127223 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.080019534 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.075519195 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.07604208 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.078345524 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.079228407 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.075418673 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.080209354 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.074381677 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.074360315 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.220324935 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.073178253 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.07461298 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.075187918 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.074202639 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.077851497 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.078647363 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.073863561 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.078010869 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.074686661 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.076965882 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.074425102 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.076530304 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.078146805 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.077437 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.079151455 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.076716186 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.077657071 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.077999345 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.077961706 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.079219671 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.073426232 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.07694089 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.077454795 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.083083563 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.099989881 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.076568531 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.075451022 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.082786274 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.074151187 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.077100112 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.077770849 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.081287312 seconds)
  done (took 103.919095698 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.077014557 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.067670649 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.052916549 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.077095317 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.075532452 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.078892258 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.062245671 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.077505805 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.077249086 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.077870781 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.078985298 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.076331234 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.077469835 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.077854429 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.077308074 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.078512003 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.078832904 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.076328807 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.067069665 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.07532125 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.078630396 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.077592989 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.076502481 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.078179905 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.079368342 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.079070138 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.077679925 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.076367893 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.075832082 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.080464291 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.075976074 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.076490851 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.077238609 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.077374444 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.518646884 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.079307195 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.07689406 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.076646872 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.078094635 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.078950947 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.077161513 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.076440922 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.076419321 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.077443847 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.079088924 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.078117111 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.07683431 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.079046457 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.083254132 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.079456498 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.079131355 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.078161261 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.078095355 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.079488082 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.069163547 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.078925638 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.079374894 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.078044266 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.080691697 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.07575206 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.079833263 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.077312321 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.078609292 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.078448453 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.078345612 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.076466322 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.077786968 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.076434868 seconds)
  done (took 143.667173763 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.075152775 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.076409468 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.076904555 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.076151183 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.083174188 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.07512774 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.074873975 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.075125688 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.077215372 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.073510911 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.075194709 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.076115071 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.074453408 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.078625919 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.074781607 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.074352591 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.075615925 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.074978714 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.074903755 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.073015067 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.072793766 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.07438202 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.075260011 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.074723981 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.074397832 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.075284362 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.074110547 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.075439408 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.075439952 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.07451174 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.073401484 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.074947318 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.075046888 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.077497275 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.075727294 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.074718859 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.075353305 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.077615956 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.07433635 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.074544759 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.076264997 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.073697696 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.075019993 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.075119307 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.074565906 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.074150286 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.075172317 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.078532591 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.076913567 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.076430873 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.075500871 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.076286578 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.077055796 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.077197808 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.076941296 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.078316769 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07610911 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.077832279 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.076205013 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.076002505 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.076253801 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.079370268 seconds)
  done (took 130.701590043 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.078400923 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.078449919 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.07872045 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.078580582 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.079393443 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.079775202 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.078149832 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.078678974 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.081613438 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.078924599 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078922101 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.079490225 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079858085 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081807734 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.079261902 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083174607 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.081618278 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.080227012 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.081524242 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.079017667 seconds)
  done (took 43.597200814 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.080258821 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.079602666 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.083062468 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.080438213 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.081561231 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.082488355 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.082474467 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.080210348 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081295845 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.081635933 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.081032456 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.086005491 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.081654486 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.081790274 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.082082676 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.082275247 seconds)
  done (took 35.310071707 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.084582446 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.083097813 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.080174362 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.081812579 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.084578773 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.083938311 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.082671295 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.083434159 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.082498842 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.085493284 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.084236808 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.083691795 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.082663403 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.083444019 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.083126118 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.084418178 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.081767577 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.083513973 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.084074931 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.081716821 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.083659086 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.083888063 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.082097828 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.085981631 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.080875266 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.081916799 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.082530532 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.083488572 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.086190751 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.084166128 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.082973926 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.083714732 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.083831912 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.085353216 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.083127378 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.081324338 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.082813395 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.083814868 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.084041028 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.084812997 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.085458251 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.083555225 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.085231483 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.085026713 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.08420299 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.082438725 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.085104881 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.087018404 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.084720595 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.083427525 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.072701152 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.081630675 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.084528485 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.083752837 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.086107181 seconds)
  done (took 116.599923475 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.078265105 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.087818636 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.084299768 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.083946868 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.084388461 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.086449623 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.081691489 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.083143647 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.085276146 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.084887409 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.088661594 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.086138949 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084687457 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.083741536 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.083925746 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.08697747 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.083363088 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.082258016 seconds)
  done (took 39.521529847 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.08454146 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.083060943 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.085750645 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.085158072 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.084067931 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.082053239 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.086718623 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.085738935 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.085043378 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.083125933 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.088992616 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.087754671 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.08441718 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.085968138 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.087248322 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.087448849 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.087856083 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.089399812 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.087713333 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.086967773 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.08998804 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.086788733 seconds)
  done (took 47.899011671 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.090714088 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.090196192 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.086675267 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.108204621 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.105908164 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.117067221 seconds)
  done (took 14.605305256 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087453436 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08495665 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.08983188 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089174303 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088766047 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088382313 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08700707 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088009888 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088261738 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090922491 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088259985 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088991915 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08676987 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088397411 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08790459 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08837351 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.07995161 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.086453186 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088001783 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091663738 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08635517 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088651598 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089893214 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.089441242 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088059603 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090370713 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087746859 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089219128 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089608275 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090423445 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08848962 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088650777 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085387215 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090968169 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084747132 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087974243 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088651072 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09045884 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.093399238 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09311104 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.0904207 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088934238 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.092177741 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090936372 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090112408 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087723091 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090925784 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090267657 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090088465 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08944209 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090234999 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090046889 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088889988 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087286606 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.090413629 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089532513 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089946319 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08916551 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09103638 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089950432 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090248536 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087895104 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088880707 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089797491 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088735292 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090775369 seconds)
  done (took 139.883610227 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093781359 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.089170512 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089821626 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090279083 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090743463 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086222983 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088347637 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090817555 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.088786223 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.09465198 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.09001392 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091947109 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.09130062 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091131724 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087839833 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090609471 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08800095 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087967881 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087887634 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090667223 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08954577 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091039842 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08947652 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092440643 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091083746 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089575233 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091682584 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090761128 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090034144 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087594424 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.090073505 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091155704 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092146527 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.097042613 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087824537 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091015538 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089288489 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092794139 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.096547714 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091834917 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091403832 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087277951 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.091173989 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092014311 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089323934 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089672355 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088060298 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.088270515 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.092944601 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088447694 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.094002501 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.091631157 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.093258854 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091809518 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.091928093 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092686298 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.090363944 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.088518555 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08884427 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.090409331 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087678135 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088539775 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.093978787 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.087255093 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.091253891 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.091185892 seconds)
  done (took 139.987144739 seconds)
done (took 2883.1947437 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.162471123 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.219126974 seconds)
  done (took 16.390992165 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.257588093 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.154156605 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.278193794 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.210327114 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.128377651 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.101398157 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.079336939 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.078363903 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.166521337 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.099746806 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.071750214 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.095559267 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.094525687 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.096710928 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.095080796 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.095073236 seconds)
  done (took 56.126351897 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.098755829 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.100234169 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.093077782 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.096900016 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.109242244 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.172539837 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.115568883 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.103235039 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.111225916 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.130346017 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.117769218 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.103125268 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.104112442 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.105176838 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.183131545 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.140476589 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.152765287 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.170987858 seconds)
  done (took 40.224515279 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.17534198 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.126156856 seconds)
  done (took 11.324332202 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.115189594 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.101933626 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.112516919 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.111075035 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.100325376 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.097629445 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.128359401 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.130462414 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.100021619 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.098023013 seconds)
  done (took 73.12130178 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.101454131 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.100471154 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.360245276 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.10800393 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.105600588 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.124323851 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.102614738 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.128702529 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.101361437 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.098461788 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.108937254 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.363138052 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.111123682 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.100735534 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.523810583 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.111423202 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.105738851 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.129610825 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.128026014 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.104272134 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.104940343 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.102998997 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.228296866 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.788793498 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.100802929 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.077536862 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.105090558 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.099515355 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.096644472 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.101314104 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.102817355 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.10007427 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.103350803 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.101035872 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.106781905 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.104043593 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.597264408 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.118128306 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.107142951 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.181694881 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.14181808 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.105839882 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.93013674 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.103618004 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.102498294 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.106595223 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.770933971 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.186528388 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.101885137 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.263028822 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.413815284 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.114931109 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.256792541 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.244648238 seconds)
  done (took 145.40895605 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.103986855 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.337384044 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.252241599 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.102960979 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.353244244 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.313020731 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.094227765 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.146168629 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.104109818 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.303739602 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.323735457 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.197561353 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.086740464 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.105966772 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.102925068 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.102963733 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.25103803 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.169874422 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.105676541 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.100539379 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.129590958 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.303505076 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.224645141 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.104413191 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.129159651 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.308513343 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.224938458 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.206527043 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.921138989 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.103123959 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.163253901 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.106700474 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.104973807 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.103095249 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.254700737 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.194709694 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.18793825 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.107900017 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.102218691 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.103247873 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.777897868 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.302180541 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.198469538 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.227699973 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.34788478 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.316862769 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.721156527 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.104151972 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.729145605 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.271712757 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.308682274 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.308781977 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.225156813 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.107083652 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.65784795 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.103714568 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.10513871 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.324788675 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.323070581 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.200796356 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.108356074 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.105502223 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.104916918 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.340625519 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.109703303 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.195726699 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.108251458 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.104588988 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.196577356 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.206824999 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.329644807 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.324340933 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.135105586 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.425610495 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.596057487 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.307351262 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.17176342 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.325771589 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.107496776 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.106274784 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.182433419 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.94401406 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.362869672 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.343344414 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.302039078 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.137825859 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.755893225 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.10536778 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.291411794 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.295778854 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.342048237 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.342810214 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.339139631 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.472721547 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.10687773 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.105959041 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.429165817 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.221445968 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.057277447 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.456668617 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.336319426 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.603651466 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.133086707 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.434351189 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.23264899 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.109337276 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.755754641 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.108952476 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.311625881 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.145095326 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.109097375 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.110120568 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.296662724 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.014222286 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.109222679 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.812243795 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.166349094 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.113234102 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.312022377 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.111521631 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.352968838 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.112130999 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.341667627 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.707294469 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.138422386 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.330797569 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.347642938 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.736880101 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.349023316 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.352363673 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.219722873 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.328796084 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.830355673 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.109934728 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.369636512 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.112192826 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.109896158 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.278323841 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.113356039 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.252007816 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.112106947 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.373422969 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.129186595 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.336364538 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.109429323 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.345380226 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.14050192 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.155465072 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.110099779 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.235583219 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.112290453 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.944233188 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.264407901 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.110820529 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.108679121 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.851968796 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.109864269 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.255186441 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.330872448 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.126888181 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.17605601 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.673158894 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.103489109 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.180919392 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.127928139 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.367726342 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.112616325 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.357401312 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.082300265 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.59551126 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.109754808 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.344631138 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.290162879 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.110594718 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.109255213 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.949900774 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.108912288 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.106297347 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.264430691 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.54957396 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.029573479 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.305895284 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.110920687 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.235542456 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.112036408 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.186879956 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.453230625 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.106541351 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.106533377 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.110276016 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.108045799 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.109378635 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.366108515 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.134445152 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.540951834 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.244841813 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.36166352 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.414678602 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.303302893 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.146534606 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.11235747 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.331574009 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.111878815 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.167278332 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.113383636 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.129395713 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.338323137 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.109659102 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.314056685 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.344195593 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.099100354 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.156213544 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.112787269 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.111192629 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.024408549 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.255234016 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.195993484 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.112916468 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.110470001 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.225791801 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.227508637 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.287826214 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.941952833 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.246326712 seconds)
  done (took 953.910894956 seconds)
done (took 1298.51699045 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.097204763 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.111745706 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.114150018 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.11163163 seconds)
  done (took 30.465221129 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.112904817 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.111878395 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.110004852 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.111711862 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.111469603 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.107751777 seconds)
  done (took 14.696399669 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.110767654 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.113180139 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.116830705 seconds)
  done (took 23.371322305 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.53090379 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.504305606 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.180832523 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.248558453 seconds)
  done (took 11.493968269 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.115098755 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.089112568 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.098562731 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.111588456 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.112287373 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.110013809 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.112366895 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.111928885 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.114079936 seconds)
  done (took 21.012893804 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.31594581 seconds)
done (took 107.387243038 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.255007962 seconds)
    (2/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.109168524 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.256289209 seconds)
    (4/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.640810515 seconds)
    (5/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.216044955 seconds)
    (6/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.88084412 seconds)
    (7/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.041051088 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.238379017 seconds)
    (9/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.113882593 seconds)
    (10/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 9.440273914 seconds)
    (11/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.200378313 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.216744949 seconds)
    (13/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.126812215 seconds)
    (14/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.442929929 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.117900693 seconds)
    (16/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.515378774 seconds)
    (17/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.111666144 seconds)
    (18/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.165757714 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.133933698 seconds)
    (20/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.190321914 seconds)
    (21/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.206800613 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.244360821 seconds)
    (23/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.694539337 seconds)
    (24/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.885534274 seconds)
    (25/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.288878804 seconds)
    (26/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.128409227 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.131272372 seconds)
    (28/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.364382779 seconds)
    (29/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.498943043 seconds)
    (30/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.386385303 seconds)
    (31/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.820743958 seconds)
    (32/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.119445008 seconds)
    (33/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.124234512 seconds)
    (34/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.187585406 seconds)
    (35/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.240672131 seconds)
    (36/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.329677615 seconds)
    (37/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.114565989 seconds)
    (38/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 4.204943878 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.515097789 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.126236153 seconds)
    (41/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.395506521 seconds)
    (42/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.205020072 seconds)
    (43/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.073738247 seconds)
    (44/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.127016704 seconds)
    (45/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.205840045 seconds)
    (46/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.490752429 seconds)
    (47/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.95453676 seconds)
    (48/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.181779995 seconds)
    (49/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.263690025 seconds)
    (50/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.311074008 seconds)
    (51/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.116172882 seconds)
    (52/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.21554535 seconds)
    (53/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.340599521 seconds)
    (54/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.155953828 seconds)
    (55/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.244381381 seconds)
    (56/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.126165757 seconds)
    (57/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.211140958 seconds)
    (58/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.516123531 seconds)
    (59/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.118632511 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.139557778 seconds)
    (61/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.125421285 seconds)
    (62/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.859051041 seconds)
    (63/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.537434259 seconds)
    (64/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.515134796 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.411355235 seconds)
    (66/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.214371027 seconds)
    (67/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.463128206 seconds)
    (68/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.510037457 seconds)
    (69/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.269506285 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.359703475 seconds)
    (71/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.461551687 seconds)
    (72/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.367342165 seconds)
    (73/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.117689621 seconds)
    (74/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.188433385 seconds)
    (75/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.197419545 seconds)
    (76/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.118957024 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.32104406 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.93708419 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.922162804 seconds)
    (80/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.360436175 seconds)
    (81/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.41190263 seconds)
    (82/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.200889022 seconds)
    (83/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.229995032 seconds)
    (84/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.352336575 seconds)
    (85/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.243824777 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.12749766 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.238425596 seconds)
    (88/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.210817821 seconds)
    (89/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.115726943 seconds)
    (90/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 5.442971155 seconds)
    (91/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.128673467 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.447170418 seconds)
    (93/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.266421454 seconds)
    (94/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.016929493 seconds)
    (95/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.122520696 seconds)
    (96/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.178761853 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.988787822 seconds)
    (98/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.519176931 seconds)
    (99/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.432010266 seconds)
    (100/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.278013342 seconds)
    (101/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.616200271 seconds)
    (102/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.307208577 seconds)
    (103/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.116122319 seconds)
    (104/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.377084922 seconds)
    (105/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.312552238 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.528781603 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.245280148 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.433310841 seconds)
    (109/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.5176506 seconds)
    (110/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.118722091 seconds)
    (111/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.450425816 seconds)
    (112/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.495346328 seconds)
    (113/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.864094407 seconds)
    (114/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.87035391 seconds)
    (115/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.527906256 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.410480531 seconds)
    (117/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.368613986 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.120533391 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.179779753 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.905045256 seconds)
    (121/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.205498196 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.121495602 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.023769675 seconds)
    (124/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.725184131 seconds)
    (125/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.136325549 seconds)
    (126/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.331314212 seconds)
    (127/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.389479078 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.413665718 seconds)
    (129/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.492758639 seconds)
    (130/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.326029406 seconds)
    (131/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.120800995 seconds)
    (132/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.131102247 seconds)
    (133/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.305531124 seconds)
    (134/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.267403735 seconds)
    (135/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.445067735 seconds)
    (136/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.317725539 seconds)
    (137/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.206581275 seconds)
    (138/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.049375632 seconds)
    (139/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.370941661 seconds)
    (140/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.138343975 seconds)
    (141/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.372722806 seconds)
    (142/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.209466191 seconds)
    (143/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.128121799 seconds)
    (144/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.315773445 seconds)
    (145/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.256321137 seconds)
    (146/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.218126371 seconds)
    (147/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.203397915 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.363039234 seconds)
    (149/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.12181243 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.975992665 seconds)
    (151/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.155526878 seconds)
    (152/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.318928324 seconds)
    (153/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.202481158 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.325075846 seconds)
    (155/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.206790535 seconds)
    (156/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.196018563 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.338348583 seconds)
    (158/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.35166764 seconds)
    (159/341) benchmarking ("sort", Bool, false)...
    done (took 2.341359137 seconds)
    (160/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.258732237 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.519092133 seconds)
    (162/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.269325298 seconds)
    (163/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.084815394 seconds)
    (164/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.559916599 seconds)
    (165/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.825411251 seconds)
    (166/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.542296046 seconds)
    (167/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.220747144 seconds)
    (168/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.344343605 seconds)
    (169/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.122421631 seconds)
    (170/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.008210837 seconds)
    (171/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.42518251 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.147291357 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.135636286 seconds)
    (174/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.250757773 seconds)
    (175/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.390625895 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.124471841 seconds)
    (177/341) benchmarking ("sort", Int64, false)...
    done (took 5.819926633 seconds)
    (178/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.435990531 seconds)
    (179/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.442819552 seconds)
    (180/341) benchmarking ("sort", Int8, false)...
    done (took 5.071971445 seconds)
    (181/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.200346682 seconds)
    (182/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.121055067 seconds)
    (183/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.226687377 seconds)
    (184/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.4448884 seconds)
    (185/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.12517618 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.991941989 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.530747549 seconds)
    (188/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.836842391 seconds)
    (189/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.419402589 seconds)
    (190/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.249059164 seconds)
    (191/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.185178731 seconds)
    (192/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.211680242 seconds)
    (193/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.221798144 seconds)
    (194/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.249276055 seconds)
    (195/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.126298786 seconds)
    (196/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.141655834 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.891708048 seconds)
    (198/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.150770325 seconds)
    (199/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.497903458 seconds)
    (200/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.411912592 seconds)
    (201/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.127322118 seconds)
    (202/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.35392985 seconds)
    (203/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.429043365 seconds)
    (204/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.222663278 seconds)
    (205/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.278748693 seconds)
    (206/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.885228196 seconds)
    (207/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.135232756 seconds)
    (208/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.223986968 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.147188733 seconds)
    (210/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.482225187 seconds)
    (211/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.12949492 seconds)
    (212/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.540034363 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.128204538 seconds)
    (214/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.212196367 seconds)
    (215/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.224557975 seconds)
    (216/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.22737963 seconds)
    (217/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.380777363 seconds)
    (218/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.406074443 seconds)
    (219/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.254841815 seconds)
    (220/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.233972752 seconds)
    (221/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.611042395 seconds)
    (222/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.121799069 seconds)
    (223/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.895197042 seconds)
    (224/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.152944419 seconds)
    (225/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.574931855 seconds)
    (226/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.598113204 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.26887467 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.14964157 seconds)
    (229/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.15116127 seconds)
    (230/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.200179621 seconds)
    (231/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.122722899 seconds)
    (232/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.134231196 seconds)
    (233/341) benchmarking ("sort", BigInt, false)...
    done (took 7.171930937 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.354157088 seconds)
    (235/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.725365 seconds)
    (236/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.214861521 seconds)
    (237/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.507963958 seconds)
    (238/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.811107856 seconds)
    (239/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.424091749 seconds)
    (240/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.342703649 seconds)
    (241/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.537524857 seconds)
    (242/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.751190411 seconds)
    (243/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.422708574 seconds)
    (244/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.609012437 seconds)
    (245/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.229665049 seconds)
    (246/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.124983143 seconds)
    (247/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.233899827 seconds)
    (248/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.256625053 seconds)
    (249/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.121752205 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.14901419 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.199173726 seconds)
    (252/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.436463064 seconds)
    (253/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.127048821 seconds)
    (254/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.090831932 seconds)
    (255/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.212465148 seconds)
    (256/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.131310093 seconds)
    (257/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.261015122 seconds)
    (258/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.838789499 seconds)
    (259/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.877237599 seconds)
    (260/341) benchmarking ("sort", Float32, false)...
    done (took 5.776912668 seconds)
    (261/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.997929972 seconds)
    (262/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.917613208 seconds)
    (263/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.234114585 seconds)
    (264/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.258356302 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.390280078 seconds)
    (266/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.511246134 seconds)
    (267/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.132731465 seconds)
    (268/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.207796073 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.248830901 seconds)
    (270/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.485349972 seconds)
    (271/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.262054449 seconds)
    (272/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.402290394 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.146236927 seconds)
    (274/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.129361415 seconds)
    (275/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 4.669545271 seconds)
    (276/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.833413244 seconds)
    (277/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.31446321 seconds)
    (278/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.134626882 seconds)
    (279/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.152814135 seconds)
    (280/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.43681171 seconds)
    (281/341) benchmarking ("sort", Float64, false)...
    done (took 5.848505523 seconds)
    (282/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.472318413 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.263127811 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.128173003 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.658762624 seconds)
    (286/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.130774967 seconds)
    (287/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.131092001 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.549613548 seconds)
    (289/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 3.762567201 seconds)
    (290/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.133104916 seconds)
    (291/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.36888418 seconds)
    (292/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.200852961 seconds)
    (293/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.427622419 seconds)
    (294/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.54616575 seconds)
    (295/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.134209078 seconds)
    (296/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.757153171 seconds)
    (297/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.247788395 seconds)
    (298/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.212711981 seconds)
    (299/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.603237116 seconds)
    (300/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.322323167 seconds)
    (301/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.906175165 seconds)
    (302/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.492746671 seconds)
    (303/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.153934205 seconds)
    (304/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.326592401 seconds)
    (305/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.555958078 seconds)
    (306/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.270528493 seconds)
    (307/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.211647202 seconds)
    (308/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.144438603 seconds)
    (309/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.134657457 seconds)
    (310/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.24506562 seconds)
    (311/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.148282374 seconds)
    (312/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.869800718 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.251328322 seconds)
    (314/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.229233463 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.133174869 seconds)
    (316/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 4.914366726 seconds)
    (317/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.443164271 seconds)
    (318/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.017438871 seconds)
    (319/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.544259886 seconds)
    (320/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.301893272 seconds)
    (321/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.333990177 seconds)
    (322/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.26513692 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.187570869 seconds)
    (324/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.03085591 seconds)
    (325/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.468528855 seconds)
    (326/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.292096637 seconds)
    (327/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.17633628 seconds)
    (328/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.40472305 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.849265439 seconds)
    (330/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.03681257 seconds)
    (331/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.392249849 seconds)
    (332/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.236500536 seconds)
    (333/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.449515903 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.469642078 seconds)
    (335/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.263512253 seconds)
    (336/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.265418529 seconds)
    (337/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.643773308 seconds)
    (338/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.402568521 seconds)
    (339/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.21120994 seconds)
    (340/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.149694733 seconds)
    (341/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.222437065 seconds)
  done (took 1179.675965473 seconds)
done (took 1181.814472424 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.156533411 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.132103627 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.593001617 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.143354824 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.134159087 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.138589318 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.628759401 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.161284781 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.151867773 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.627358651 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.144383472 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.134022775 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.151466576 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.172118015 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.148268957 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.147795156 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.141156571 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.160618906 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.170076266 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.13657823 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.173908155 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.142497405 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.136023236 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.186889841 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.13598166 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.150132908 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.157201138 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.189807271 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.187850588 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.139156893 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.144792267 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.489676377 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.178111634 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.14345833 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.149145207 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.151016354 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.141497444 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.154356501 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.15601965 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.151877748 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.137616698 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.150024682 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.141357026 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.139137394 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.137981994 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.136374766 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.137605361 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.261998585 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.152429285 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.474498621 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.186551438 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.154708704 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.188414944 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.140961242 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.140509831 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.140941856 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.19106782 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.142937874 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.144127713 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.47355021 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.223293248 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.154335016 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.473360932 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.19190835 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.146297793 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.131006341 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.12531979 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.15596384 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.488387552 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.660670758 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.16872949 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.157966525 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.13767132 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.141356227 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.152978663 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.625694513 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.150322877 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.696161713 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.160313596 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.151715932 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.143358659 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.141269128 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.140082301 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.1541554 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.157726758 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.138293066 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.144821202 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.146718914 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.155336607 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.493051842 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.176957149 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.624543054 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.144281569 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.159425455 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.157362497 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.696281016 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.161682551 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.155769518 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.142670903 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.492683042 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.173956531 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.157152277 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.142646525 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.152600627 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.254998774 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.161263121 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.159540974 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.13929935 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.160344589 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.146625549 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.117927965 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.152382953 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.161387946 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.178318223 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.160631463 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.143158566 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.151144685 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.144617282 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.15750249 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.148417275 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.146445952 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.154439751 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.140329394 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.19371944 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.160693047 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.156944557 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.256613951 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.145721963 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.265873465 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.158511596 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.147635213 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.142420194 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.477674592 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.179934519 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.162590387 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.147459238 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.16565195 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.166625652 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.157242052 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.142957312 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.156543496 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.145249476 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.193148855 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.143407089 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.168487017 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.195860163 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.157423298 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.146308539 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.159259243 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.177786428 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.161356073 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.14653029 seconds)
done (took 336.471642948 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.182130251 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.130257074 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.220501143 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.145802575 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.214224606 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.198929939 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.142897095 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.145833348 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.145812371 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.558417427 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.144093134 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.151014728 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.143966709 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.143886301 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.193493078 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.145783446 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.14563154 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.378613385 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.143813854 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.206654578 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.146689723 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.142098241 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.147241773 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.533615709 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.147746955 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.144774968 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.208275432 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.144108995 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.387708614 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.147390272 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.144849823 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.388339039 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.216823434 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.154258922 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.154158609 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.155660973 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.214958154 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.153679101 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.197037031 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.196178905 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.224643169 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.18153794 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.14734649 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.14870304 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.149003693 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.148045858 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.145854568 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.178575413 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.145846109 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.153140623 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.38097737 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.151207842 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.154517023 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.149107216 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.146715335 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.156970406 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.150058841 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.146509181 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.20261012 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.145579012 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.195983491 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.537779847 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.531375786 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.149755973 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.147748335 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.146866469 seconds)
  done (took 202.18422503 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.217527487 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.234276343 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.213962734 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.155952267 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.201265265 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.216975191 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.153788272 seconds)
  done (took 17.455012759 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.158587409 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.149473941 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.174029965 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.172270773 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.147430761 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.29239628 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.160236155 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.153166825 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.175349136 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.149293632 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.481393137 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.175746662 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.157783675 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.150883493 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.161194514 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.176725235 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.155325878 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.149778533 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.247473328 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.230986102 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.154117287 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.156894857 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.179877572 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.163543401 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.150097058 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.151371166 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.147338368 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.159383239 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.148074257 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.138089584 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.142294695 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.16432673 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.149584701 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.15104902 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.14794508 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.150865627 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.14816311 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.148065363 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.149532204 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.151891108 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.150370402 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.146539093 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.151945259 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.149815469 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.151053683 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.174851353 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.150861793 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.14971623 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.153047181 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.151977941 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.180610451 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.152688784 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.148217763 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.158322709 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.193888617 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.159382779 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.149221659 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.152100846 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.15252966 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.150327416 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.15383186 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.232962682 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.178455304 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.150386444 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.179291773 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.191532358 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.151995555 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.151872222 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.149488242 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.180881609 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.151191225 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.173240381 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.151544338 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.251713406 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.150816239 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.294024003 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.177048043 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.157460897 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.15925231 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.156358897 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.16187744 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.153875066 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.156563157 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.163547937 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.158370678 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.152931926 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.151246096 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.155458112 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.16460846 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.153570744 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.201738205 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.15502242 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.154583015 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.255406585 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.154141554 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.253337604 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.178999584 seconds)
  done (took 232.531681173 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.159384912 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.157688336 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.167960895 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.155762224 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.155496064 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.158696682 seconds)
  done (took 15.020889108 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.155664464 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.159235897 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.156095504 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.152939007 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.151059748 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.152817327 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.149727596 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.158626123 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.157929308 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.150244489 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.152999112 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.151354866 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.15547614 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.15159914 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.154395721 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.153310258 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.157611105 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.156818386 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.154092301 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.155221349 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.39964783 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.153079233 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.153486462 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.15587895 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.155894712 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.156984764 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.165837946 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.153022439 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.154717915 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.159125399 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.15977473 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.155583682 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.156121972 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.163456039 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.157731484 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.156151189 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.15798974 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.154332972 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.155167479 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.157979019 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.152880531 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.154743993 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.154681247 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.15579755 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.155129908 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.161581144 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.153808716 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.165351222 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.157287151 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.15398291 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.154252183 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.154487339 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.15346455 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.153707375 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.156734971 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.166046785 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.15967948 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.154325928 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.152526816 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.159320301 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.160889395 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.157878941 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.15846198 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.157129473 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.162639602 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.154695171 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.158399859 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.158152682 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.152615963 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.156224967 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.153023869 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.154200038 seconds)
  done (took 158.556265356 seconds)
done (took 627.807464755 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.269366797 seconds)
  done (took 9.336929051 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.292633085 seconds)
  done (took 9.460141001 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.327729077 seconds)
  done (took 12.402555475 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.18960233 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.165774768 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.158060245 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.157542278 seconds)
  done (took 30.752441885 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.415440894 seconds)
  done (took 9.48626551 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.164658473 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.152839389 seconds)
  done (took 16.459703098 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.182195625 seconds)
  done (took 9.25230369 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.245077819 seconds)
  done (took 9.353074257 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.179539603 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.158914209 seconds)
  done (took 16.431019651 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.15937254 seconds)
  done (took 9.231163069 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.91705375 seconds)
  done (took 10.071901966 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.162446061 seconds)
  done (took 9.252242201 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.218874548 seconds)
  done (took 9.289282931 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.981775361 seconds)
  done (took 10.054166587 seconds)
done (took 172.905521795 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.164385708 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.15640639 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.158308887 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.155127213 seconds)
  done (took 30.705276682 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.195353554 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.192159329 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.201309244 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.193661372 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.180227901 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.18475541 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.195900918 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.194518936 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.182219058 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.192194902 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.195538423 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.186572614 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.193917589 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.203307355 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.205115244 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.18953216 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.191730258 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.193796302 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.182922771 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.203858733 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.190610591 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.19078806 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.156695989 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.156882763 seconds)
  done (took 54.627208359 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.354061201 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.223953173 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.316024058 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.205926569 seconds)
  done (took 11.170513281 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.160317633 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.223453869 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.212776261 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.204177873 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.210881857 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.262051111 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.213808706 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.290797425 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.287154077 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.282099053 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.164552276 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.17810193 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.186424328 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.206885544 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.26283438 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.158462166 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.158923227 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.275164701 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.222895382 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.338640578 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.159936773 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.211027229 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.212422319 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.21378645 seconds)
  done (took 55.369608107 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.165736916 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.16417218 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.166439495 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.162634825 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.160822808 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.164538637 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.163654264 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.164520313 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.186986452 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.162866676 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.159716589 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.159466194 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.168547583 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.160050217 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.159470435 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.175839198 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.175415869 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.159431892 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.164372761 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.169134678 seconds)
  done (took 45.387978828 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.162962602 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.009017314 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.505290506 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.412666355 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.161431236 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.160525216 seconds)
  done (took 33.48662281 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.173391211 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.180382967 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.168108134 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.186542262 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.202667299 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.171344534 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.222177932 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.320924839 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.171546711 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.213620466 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.178015401 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.165573272 seconds)
  done (took 28.428777467 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.162764476 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.165938717 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.164932577 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.173241381 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.172962114 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.169790304 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.167413626 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.16207121 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.175990515 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.181514432 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.174879969 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.173256002 seconds)
  done (took 48.120752368 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.37680247 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.385846267 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.381636168 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.541454992 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.463552771 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.142033447 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.442721969 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.376164931 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.895676532 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.860595818 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.451520774 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.141703186 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.103441199 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.084725634 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.078776555 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.40401698 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164548145 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.017902956 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.422709189 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.209263064 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165619618 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.164688644 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.170463966 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.446307653 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.48840743 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.160559226 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.379577683 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18392659 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.166002866 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.396223258 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.582366774 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.203555347 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.370215124 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.419699104 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.501622179 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.323720312 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.166468843 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.141184041 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.193616254 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.201059865 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.174251387 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.177309097 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.707782381 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.176715286 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.441916457 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.166679645 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.27851452 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.171793852 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092313037 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.496897935 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.273227996 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.167033513 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.201926241 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.603204394 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.291099006 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.410481969 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171566644 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.141450021 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209623915 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.446539359 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.401286368 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.17016084 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379514193 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089963585 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.552862929 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.284101341 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.168490167 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172857985 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.866902055 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.407442042 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.24983217 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.521819085 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.918361967 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.16714258 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.168773279 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.212824655 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265322369 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.154855995 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.461117924 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.171011629 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.095191585 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.267050549 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.568072686 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169549802 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.169365067 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176226712 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.016815973 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.084346357 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.269454281 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.450343466 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.485783036 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.171349124 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.137484025 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.189008663 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170694422 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.117752053 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.52293387 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.220879471 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.09489653 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.73574639 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.604354065 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.119764283 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.47221419 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199932484 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.446528565 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.30902002 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.574844991 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.380886925 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.417132553 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.699467584 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.175060543 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.786841838 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.255670526 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242999444 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.169581463 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.732325758 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.151260784 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.47079192 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276198327 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.168505819 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.093947357 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.18214123 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.371419855 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.583894411 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.213893593 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167825655 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.167470544 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.169797848 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174004816 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.33496769 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185797396 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.464262463 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.240309934 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.168376879 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107988836 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.174750804 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.45111272 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.493350344 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.219005821 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.420737437 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.434040386 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.871883087 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765469139 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.219171072 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.442059047 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.246035003 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245443609 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.756834677 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.303318873 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.268634038 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120882437 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.304511346 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.174782307 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.178203624 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.226505877 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.579338588 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.606269719 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.213500202 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.170924853 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.123064387 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.148800889 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404348872 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.245351915 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.197312221 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.176324774 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.255735905 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398684258 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.171198632 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097401816 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.417917072 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.411232847 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.461711411 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.579686256 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.230427304 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.240948431 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.183317422 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.384744413 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.263372399 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.823492364 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.723596101 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.392949363 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.551071017 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.125250964 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.811483125 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.445495334 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.549391518 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189853312 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.623624461 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.157380948 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.656472943 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.193892978 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.703503333 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.101653013 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179174775 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.520406429 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.128907473 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.484870261 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.27621259 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19314491 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.173953118 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.176973054 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182607279 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.085322607 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278074069 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242487931 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2466758 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.100391953 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.628469646 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.203976724 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.17585389 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.171760824 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.520595557 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.956866107 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.126787071 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.1757277 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253681512 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.304298301 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.722220029 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.180398411 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181819183 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.771738501 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.179322595 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.06039924 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.318647841 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.936840288 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.203393356 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.460825755 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.867714105 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462985423 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.248988714 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251246957 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.172748621 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176737583 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.876600467 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.186452741 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.879441118 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.461099868 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.45155587 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.613409221 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.239429797 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.388709781 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.1933415 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.180637294 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.668989516 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.18619339 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17961469 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380650206 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.693598248 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.525635314 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.815065111 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.262374012 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.176413898 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.4474083 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.181980671 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.604678591 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.859778799 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.184169992 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.19222502 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.403922881 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.863162331 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.181769527 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.158571166 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184345291 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.393793832 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.383564316 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.450494464 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.472302813 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.628498658 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107318068 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187912499 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.216676573 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.424876478 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.177062982 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.212769317 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.625887918 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.243153455 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.607559142 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.46266703 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.590609681 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.805117149 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.444240756 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.241770139 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.19241149 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.834944967 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.306418024 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.109853113 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299158303 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.108167964 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.931972297 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.466987708 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.197293666 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.446265679 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156689046 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.514770805 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.477486408 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.454453221 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.22100277 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.210997594 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.157363808 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225601331 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.182974472 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.163079349 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.290668864 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.185280697 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.535613281 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208849881 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230294192 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18660838 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.708343372 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199204679 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187687083 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.879550497 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.204326622 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.303641946 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253820085 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.93430729 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.62776686 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.198887079 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.065717656 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.830183926 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449000594 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.236106811 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.6670946 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.2193411 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.586390475 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.185336691 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.396085469 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.18751931 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.555330669 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.222190394 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.45406811 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137033526 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.393048735 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.392445133 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.208620834 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.185563269 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109155621 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.293913046 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.050414134 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.166276208 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.186386332 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.869075556 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.621859465 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.193551055 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.647942651 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.001535015 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.18764191 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.532033146 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.567439791 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.600194818 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211267948 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188949027 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.523956885 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.305691102 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.492425818 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.455252155 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.191959648 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.211215097 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.397386819 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.311024809 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107582051 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.672228617 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768501527 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.889611491 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.195868312 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.389573356 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.527779093 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.264087263 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.211940248 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.261339772 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.593030413 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.455455782 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.252370874 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.114156814 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.187171173 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.582080402 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.589215691 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.281837968 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.42932743 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.499898011 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.4288289 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.652001692 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.442744269 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.594908386 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.587347593 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.582799755 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399537244 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.559340377 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.50864782 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.070062666 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.598725875 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.400026991 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.292941794 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.463358151 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.059350747 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.897698005 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.429008506 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.196175536 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.117963057 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.395677725 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.184548877 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.2728395 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.750444634 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.436946931 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.465009501 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.659366732 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.727131123 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.173705509 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.209811534 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.158945593 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.211433122 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.210671841 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.188968008 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.677458171 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.477382231 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204005324 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133012431 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.860160224 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.117625755 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.404586822 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.17866045 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.218259792 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747857724 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.46317854 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.28463354 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.474173224 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.23237673 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.215627375 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.118944713 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877302611 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.133314963 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.257912355 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.614323211 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.206731724 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.195214127 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397505938 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.121123856 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.239288052 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.19683951 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38920154 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.772285548 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.460750506 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31656198 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436477103 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.48822946 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.035473584 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.211458709 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46211319 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.121378754 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.646165301 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.86510088 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.235128978 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26513247 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195519963 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194384603 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.464028022 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.537558306 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.287679435 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.726930899 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.217056023 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.213536709 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.525465145 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.276726772 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.195300322 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.197209717 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.499784276 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.419143253 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.194791428 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.185052653 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.403553018 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264467386 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.391651809 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266266991 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.708646384 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.196451275 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.049119983 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28483764 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.138440456 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161613615 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.95378655 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.250851339 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.191425203 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.459605322 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.81356243 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.396488047 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.589056012 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.058224554 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.183864669 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.228510211 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.198331577 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.193157381 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.579039877 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.498490267 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.194016542 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.462237647 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.241210159 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.200194974 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.857583103 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.165467177 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.19570585 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.941465472 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.075094708 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.92387911 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.593212133 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.32586312 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199628341 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201215299 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.121890765 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.165799326 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.32944478 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.216434215 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.196261995 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.562524534 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.519936143 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280727381 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203016238 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.200549962 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.202852611 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.409963544 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.710837168 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.214098018 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.896141706 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402038573 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.205070217 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.686725133 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.651277536 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.240624405 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.225748863 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.180437454 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.428541393 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.737995901 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.188393044 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.171863058 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422773098 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.20131416 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472242787 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472713742 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.196048962 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.411356398 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.632990171 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471162364 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.549533264 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.508554306 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.261620628 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.191701159 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.088669183 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.196290672 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.203565993 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.463386287 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.253473315 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.199534396 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208268588 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.756098525 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.939132515 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.669762958 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351087919 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.549761933 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.969566957 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.95200272 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.203412605 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.125542029 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.199348874 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.223924825 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.203434793 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.125275152 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.879117787 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.919817055 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.415110814 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.51111237 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.12983269 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.403788905 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781147284 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.121932578 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.166593319 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.196330722 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.46316404 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.128571786 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.204297227 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.155152555 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.491678458 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.744738489 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.463341083 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.20129806 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.145273707 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.203268886 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.206094316 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.204988414 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285799342 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.201799993 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318840653 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.466513 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.598161323 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.299492399 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842250862 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.948917471 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136041743 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243787753 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.818139952 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.772669537 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.496956693 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.323549488 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889388281 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.144721788 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.202671533 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215965196 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.477755665 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.204672214 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206061365 seconds)
  done (took 2261.908634862 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.223160289 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.266088506 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.26852419 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.221231631 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.440335314 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.246759316 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.307599843 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.261042372 seconds)
  done (took 60.348490522 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.203785533 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.213674921 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.20746431 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.201156639 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.200668483 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.203056301 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.390584461 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.223713903 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.201126264 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.203350891 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.20134581 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.202659631 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.203152774 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.207323283 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.20260982 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.464465068 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.219050286 seconds)
  done (took 82.103286503 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.242265099 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.985509 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.208748669 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.854009347 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.218773314 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.52893446 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.20420182 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.204008752 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.288576753 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.492954795 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.219456833 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.214704564 seconds)
  done (took 93.77716018 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.206171388 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.203729336 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.202782476 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.205298224 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.206798395 seconds)
  done (took 13.138017408 seconds)
done (took 2820.70061433 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.439742148 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.291692333 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.271221327 seconds)
  done (took 6.678046069 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.349421739 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.397940863 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.510455633 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.514105798 seconds)
  done (took 11.889927445 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.485556655 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.594082344 seconds)
  done (took 7.19533342 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.559604091 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.215004851 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.583065061 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.201655793 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.205007601 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.20485121 seconds)
  done (took 23.734197138 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.205780878 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.204162785 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.207883593 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.202378659 seconds)
  done (took 10.937854816 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.202148938 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.974165726 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.2010056 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.213833862 seconds)
  done (took 22.70944929 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.41322062 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.241740388 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.970812728 seconds)
  done (took 10.741418114 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.825163628 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.656658744 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.811499304 seconds)
  done (took 10.410581825 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.385979431 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.189850193 seconds)
  done (took 8.693682277 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.346499044 seconds)
  done (took 4.464256444 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.030148112 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.516472583 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.672573983 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.210737559 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.870185663 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.623066886 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.708934033 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.513083618 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.722645742 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.695777943 seconds)
  done (took 29.681586518 seconds)
done (took 164.05046289 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.854088591 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.256951924 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.472254067 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.665226072 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.484739621 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.471281132 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.486235209 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.662531995 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.305673612 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.289315558 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.619332317 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.477723631 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.450992404 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.254241862 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.459253296 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.25668435 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.469392366 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.701996333 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.302271956 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.563369207 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.521381824 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.275151103 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.479733213 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.285080642 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.472943822 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.399741201 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.888326546 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.255718819 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.454788789 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.886027801 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.401354152 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.696808278 seconds)
  done (took 181.659127219 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.132863325 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.22771706 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.230382977 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.228861299 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.664170721 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.22909451 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.230688366 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.22961685 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.570844189 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.535250022 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.231184274 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.663309365 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.229606845 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.229325336 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.231767045 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.231052 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.679716323 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.179073462 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.229736856 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.232109765 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.229028329 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.519606698 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.232991013 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.562138773 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.665996527 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.229358203 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.230537043 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.233231857 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.229789438 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.231028068 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.23444647 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.236252859 seconds)
  done (took 220.396226235 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.231453395 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.232501835 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.239255023 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.233651736 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.231328086 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.234068854 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.233333076 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.231929135 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.113054158 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.107990779 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.230940164 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.230119198 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.23251932 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.228311668 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.233201282 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.231679796 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.231341844 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.232996861 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.233497481 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.238385219 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.236874276 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.966981048 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.235852651 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.997205518 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.23377728 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.235575132 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.233558668 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.237004246 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.23692144 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.240824432 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.233415954 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.232415582 seconds)
  done (took 232.874837816 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.471867499 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.23121971 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.231505643 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.243666483 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.236345088 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.232263575 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.234822056 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.482143797 seconds)
  done (took 22.509553304 seconds)
done (took 659.594250501 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.592260253 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.955242832 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.371110506 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.257600191 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.523368982 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.307139155 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.251093534 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.32225236 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.90154386 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.332576349 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.679048585 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.261570445 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.016776804 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.28333892 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.369322412 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.315347085 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.605113867 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.871320617 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.393010993 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.921700501 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.465371826 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.217778833 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.337100981 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.943538261 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.696131817 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.233479303 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.288452976 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.60904171 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.257106502 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.496946339 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.922228227 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.533538575 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.269644864 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.256177961 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.309900125 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.297575435 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.461810645 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.267598946 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.365576551 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.000806721 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.898372196 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.782925972 seconds)
  done (took 115.587249086 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.24531986 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.240952394 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.243733219 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.237470821 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.247578429 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.237877988 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.238796127 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.239384443 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.242019274 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.239365544 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.241989864 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.247087584 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.241766825 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.248396397 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.240146643 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.243899168 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.240227798 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.248249854 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.238237049 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.241287345 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.235722805 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.239463375 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.23775555 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.243897501 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.225704541 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.240985077 seconds)
  done (took 60.423314877 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.241464848 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.394919918 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.531783619 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.27239261 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.241663794 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.241473363 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.268605545 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.24653636 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.239386595 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.245190769 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.353444889 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.241263065 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.253811568 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.527213164 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.272721655 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.238460237 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.241444856 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.243971599 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.399493137 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.256367238 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.273618268 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.246618585 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.274407578 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.254093718 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.243699281 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.240623091 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.247017535 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.693565989 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.250422506 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.35356792 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.308498557 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.27500572 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.629550934 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.537420827 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.310285693 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.244749842 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.239280582 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.399825901 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.252719674 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.243466859 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.271524223 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.250171566 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.530014564 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.740823458 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.261175637 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.242418177 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.691336147 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.413606307 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.290465408 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.258497401 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.53699445 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.27629977 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.243578232 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.244372645 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.279281325 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.258251013 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.244599403 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.525051481 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.261331823 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.27412962 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.247424289 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.244514699 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.406012343 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.253134113 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.397199178 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.254819067 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.251969549 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.244944892 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.536099787 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.277750505 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.768001021 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.260052464 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.241130713 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.354995045 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.399198472 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.717791937 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.258176653 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.404825168 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.648086821 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.283438024 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.256095208 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.681906211 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.285606277 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.254171057 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.245583963 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.244919956 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.241626715 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.288990703 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.273745067 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.685963086 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.76999637 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.544077634 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.286054868 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.259171867 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.247267619 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.524284478 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.253784171 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.240633997 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.527374868 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.795273008 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.261042455 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.252723643 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.751009961 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.264454645 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.275458264 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.263803675 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.547809956 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.279602488 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.2889786 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.245416915 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.254874254 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.248509181 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.276957378 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.261964829 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.245772036 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.745167888 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.424433801 seconds)
  done (took 276.961112038 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.249733184 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.249827881 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.247444833 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.244638194 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.246441993 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.247630794 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.246616921 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.248094479 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.249382266 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.245437047 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.24701806 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.252493365 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.248190942 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.249585894 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.282304912 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.247317958 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.73809834 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.245578415 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.249300496 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.247499832 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.814494985 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.25591244 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.248365858 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.24900342 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.249074764 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.250884376 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.250481168 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.281070608 seconds)
  done (took 178.245394307 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.245954796 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.296729594 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.260971868 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.297959814 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.264087915 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.24815466 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.272112256 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.263539254 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.255433673 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.247686411 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.250060872 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.275481502 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.256447637 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.320520523 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.278077258 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.278428358 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.32428478 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.255699457 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.250025311 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.249449589 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.296924615 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.263587073 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.276472645 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.305249353 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.265581546 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.300672129 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.261497654 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.244100875 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.247979622 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.341040191 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.23817295 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.27890872 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.288553902 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.267006954 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.347093394 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.341392208 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.329734251 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.276970524 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.252971892 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.250117388 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.249423386 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.248570573 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.301603728 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.263544335 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.252552086 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.341310068 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.266755862 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.250573123 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.268547416 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.253783803 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.261206902 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.270295759 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.283361739 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.353108795 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.295367664 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.278923806 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.274836853 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.266371772 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.252448083 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.323517715 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.25359614 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.342767653 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.268574889 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.25069858 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.252681838 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.25492606 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.300448011 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.284979206 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.333110713 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.259178862 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.327331677 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.304150056 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.263427835 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.252431675 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.250834053 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.301110938 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.338716092 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.292448783 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.31471991 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.288930569 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.26479005 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.25210518 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.251104081 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.252119 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.262103732 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.342057182 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.318036088 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.258760636 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.254259735 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.25497038 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.252249244 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.2784917 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.309586949 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.29653188 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.335595004 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.287152757 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.291870547 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.233243919 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.26267194 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.259280033 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.287013836 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.266649401 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.267843742 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.592824965 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.286320401 seconds)
  done (took 241.736317966 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.609484369 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.269944873 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.325421937 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.538290185 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.632705642 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.367156065 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.293896145 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.309934594 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.313754931 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.422190604 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.362096017 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.343904017 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.292200194 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.278005736 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.300788392 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.314927779 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.33124325 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.603365737 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.413364551 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.046443267 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.290960409 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.583039263 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.610736976 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.637580152 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.34382967 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.679548611 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.926306731 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.393218004 seconds)
  done (took 73.002018011 seconds)
done (took 948.102736656 seconds)
SAVING RESULT...
DONE!
