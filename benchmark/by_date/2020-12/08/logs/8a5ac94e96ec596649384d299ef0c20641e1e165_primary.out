cset: moving following pidspec: 10650
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.814070436 seconds)
loading group "shootout"... done (took 1.103812392 seconds)
loading group "string"... done (took 0.673541988 seconds)
loading group "linalg"... done (took 8.581676897 seconds)
loading group "parallel"... done (took 0.169359932 seconds)
loading group "find"... done (took 2.90422685 seconds)
loading group "tuple"... done (took 2.120662788 seconds)
loading group "union"... done (took 14.866761595 seconds)
loading group "dates"... done (took 1.449350581 seconds)
loading group "micro"... done (took 0.219853663 seconds)
loading group "simd"... done (took 4.796281795 seconds)
loading group "io"... done (took 1.080113758 seconds)
loading group "random"... done (took 9.523208977 seconds)
loading group "problem"... done (took 1.518825078 seconds)
loading group "array"... done (took 25.241796225 seconds)
loading group "misc"... done (took 1.877942375 seconds)
loading group "scalar"... done (took 43.451615404 seconds)
loading group "sort"... done (took 3.323599916 seconds)
loading group "sparse"... done (took 12.683945956 seconds)
loading group "collection"... done (took 18.339493847 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424430548 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123807634 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.127941661 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.114524796 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185768418 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121308491 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.129815751 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085605877 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.881564015 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138176001 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115956214 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426332436 seconds)
done (took 5.313654655 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166679425 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.090136952 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083107627 seconds)
  done (took 1.38694164 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.0718986 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063400616 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067439479 seconds)
  done (took 1.41602312 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065424138 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134722583 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066216518 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066708455 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066795294 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066534058 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066500756 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066207537 seconds)
  done (took 1.750485773 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072000478 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067757227 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066065241 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067571876 seconds)
  done (took 1.491305706 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066072391 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121932696 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064792446 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064842265 seconds)
  done (took 1.533762414 seconds)
done (took 9.046709466 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.138945883 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.819387983 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.762086157 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.122873254 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246439406 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.44932017 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.123899821 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183013209 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.088858575 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075522418 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121821547 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078162102 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.398600106 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.399804183 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071343294 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175544574 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.656915579 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.089291384 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135538305 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.449295728 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073780316 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087680082 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084350646 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071298643 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.345397281 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151814074 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667173667 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.099688499 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070326724 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096080355 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070661131 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078000412 seconds)
  done (took 10.734396485 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092446253 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090099106 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068656753 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123889635 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093831602 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070078788 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075833631 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067962977 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088566682 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124010624 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090278522 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098639043 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.071970595 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069483601 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.07389092 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19711629 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080336336 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081443039 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067867377 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081137501 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105054423 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.077798867 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078315594 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078253505 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132192654 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.16950639 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096765985 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098271173 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066057545 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078777356 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115504421 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.12476792 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066586902 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06514912 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119349397 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095248893 seconds)
  done (took 4.645685876 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.885684436 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096277522 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.082785028 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074421343 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106513468 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113977298 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.120640363 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12229303 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.099326596 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069014056 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.149096797 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.668808457 seconds)
    (12/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.096576415 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.168941813 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071615287 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.118995052 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.358683992 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.049016708 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070082183 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068032387 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070686643 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069771619 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112136809 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066019747 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.177522923 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.578672104 seconds)
    (26/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.083412583 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.0685342 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070340209 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095399006 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065369917 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138191205 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091481161 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069185122 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.539523988 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065238184 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.175988199 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.08933741 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.093884072 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066680658 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.06776214 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078680479 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066298124 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108622917 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079246987 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.513244766 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069766606 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.580744581 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224213977 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072986475 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.0720419 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101577433 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064644787 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067554074 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.862080017 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.147367775 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066956095 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.271919824 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069646059 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06845322 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069135485 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099032489 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070908275 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068706604 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072708325 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096747625 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.794022473 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089934274 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098319856 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069005203 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.399379079 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075459916 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068760963 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069500187 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.08354475 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110455326 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066494063 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066416211 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110532595 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.095248919 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088461607 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070226746 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067197112 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065819332 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.32031727 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.153057077 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066176718 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.067226509 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.471715301 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064007957 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.184331703 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069159326 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093134412 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067709706 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064358932 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.0644437 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065348065 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099671244 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067886464 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336405654 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067185351 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.487089591 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069093715 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102768884 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.11909255 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06747236 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.100927066 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068135194 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06492074 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073691001 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066115302 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064848032 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069703514 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066120627 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066433266 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069345479 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06857505 seconds)
    (117/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067693344 seconds)
    (118/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064684746 seconds)
  done (took 22.662861177 seconds)
done (took 40.151704267 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.378431785 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.078268702 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079213436 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.078803118 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.078583872 seconds)
  done (took 1.965942948 seconds)
done (took 3.335712247 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132477118 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075210413 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064584119 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100349546 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068454324 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.101236709 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108638772 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.103922519 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.06877501 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068714041 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068612469 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104744523 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104757229 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069478998 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.09830718 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103870015 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069346716 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064238559 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068934124 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068793441 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068534577 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064621478 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068898744 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068794486 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.098712379 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068932697 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065168623 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098821476 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068932267 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.098454091 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068965289 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068673555 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.06922863 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099509081 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.068705463 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.098821987 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064533302 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.068991845 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069303858 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069112594 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.187172002 seconds)
  done (took 4.73266488 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070858503 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081469549 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082988525 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061963485 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071361931 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08218104 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062199961 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081594423 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091465296 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08216621 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082329463 seconds)
  done (took 2.167769533 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070174849 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082584435 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084467163 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062432753 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073497787 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083666821 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062713339 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083059189 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085689789 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08322435 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08298119 seconds)
  done (took 2.152607294 seconds)
done (took 10.347929603 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09611645 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.065613729 seconds)
  done (took 1.443269225 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.222559952 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.501608986 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.278997805 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092784914 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071932579 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085479386 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.199617497 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.066871408 seconds)
  done (took 7.988846764 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.102477539 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067287814 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067691437 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069938304 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068350003 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068235968 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068918055 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069916346 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069096025 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06773743 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068393498 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067426467 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068278676 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067917582 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067845933 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069316639 seconds)
  done (took 2.525823989 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102751697 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069108636 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.098975108 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06215507 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071638682 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062557026 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070967493 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072635959 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070085201 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071509631 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.071975593 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071275931 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.070821564 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07066709 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072135704 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072714232 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072589652 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070669597 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073275168 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073563012 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072318443 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073306365 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073520981 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07183563 seconds)
  done (took 3.174937515 seconds)
done (took 16.435092483 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.173631106 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074934878 seconds)
  done (took 1.540035461 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067594163 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067927892 seconds)
  done (took 1.446133338 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07258901 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060775911 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078291197 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070360288 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061446446 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061125959 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077016506 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06159646 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061824072 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061645221 seconds)
  done (took 1.975796229 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.062721124 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068327746 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066569257 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064740906 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067331993 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062915412 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065372274 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062876302 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069125338 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062164315 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065755598 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082615958 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065116481 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083075328 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064845298 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065845929 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067365968 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064700318 seconds)
  done (took 2.525501969 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.060806928 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061728942 seconds)
  done (took 1.437533421 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064192377 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061886964 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063753491 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063935429 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061695251 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061456589 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061973528 seconds)
  done (took 1.747529229 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41874881 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12200687 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.339457497 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068945433 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076677892 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254090742 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063666019 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068398199 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068572773 seconds)
  done (took 2.835513924 seconds)
done (took 14.833458925 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08204051 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.179518815 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087334906 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.402229707 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091489428 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067497838 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112725232 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.177563053 seconds)
done (took 2.539571037 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.275854272 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.243877793 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.400427755 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125918287 seconds)
  done (took 3.09055001 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333955688 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078548926 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076509876 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066429679 seconds)
  done (took 1.887249436 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064602058 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072822446 seconds)
  done (took 1.462209705 seconds)
done (took 8.054938949 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071346344 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061876489 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067489037 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064232804 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.063812798 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.074509483 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.093202553 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064230499 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061660313 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064307315 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.064127288 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06445495 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063912881 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063745759 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064066618 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063967131 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064235208 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.062047637 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063697633 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063871558 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064618225 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063057848 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063907737 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062100516 seconds)
  done (took 2.932932117 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079216481 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065440921 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066821291 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066631622 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066825542 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066978135 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066441888 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065291614 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066950455 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065093184 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06677704 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.066911526 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06513694 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067165719 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065496882 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067368941 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066735157 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065849597 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065202367 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067109046 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066481251 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065911762 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.06717065 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066773755 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067331453 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067306277 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065247104 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06614518 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066611987 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067653662 seconds)
  done (took 3.351614563 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066415756 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060437251 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060524239 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069652997 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060032349 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060508849 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060731467 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060285143 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060871095 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06146738 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060807208 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060139428 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060918205 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060174522 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060081788 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061081873 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064689147 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079121724 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.0606869 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060141979 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064374146 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060470623 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060424198 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060580916 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060784841 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06051717 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.06016177 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060998688 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060502358 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060878074 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060346743 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064256233 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065631511 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060248407 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070329074 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065136384 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060211987 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064548666 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061394029 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06033605 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060328314 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060411298 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060471284 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060156982 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070465086 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060288763 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061528461 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.0607228 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060889695 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060149297 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060404745 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06228859 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068968512 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061767541 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060017255 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061124797 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060091036 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060866883 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060215291 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060258845 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060113772 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063734491 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06185941 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061178248 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080055653 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061632928 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070266409 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060266636 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.06105487 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064207012 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060637472 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077661427 seconds)
  done (took 5.845572092 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071491494 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072093625 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079081354 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070712115 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06481436 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061451367 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065232402 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06129794 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0707994 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065578232 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061415691 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065213167 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070520872 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06569263 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062476182 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070538007 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065045646 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064808404 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061154098 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065347565 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062842409 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064979635 seconds)
  done (took 2.820570878 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138163214 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066080138 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104775518 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069840837 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068499782 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070110162 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066070033 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066496487 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066330303 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067046929 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066839967 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066148813 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068261944 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066804775 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066742972 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066432691 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066261405 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06681268 seconds)
  done (took 2.665121186 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076435724 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065644604 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089308751 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065770083 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065875999 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065786686 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06933203 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069517166 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065580699 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066010359 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069692521 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065245554 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065488427 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066232701 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06557103 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065922656 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065416742 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065786712 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070310853 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069415021 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069678745 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069585489 seconds)
  done (took 2.856901378 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077263741 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064595699 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080689003 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06654653 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060998861 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060729201 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066494237 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065355957 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066313212 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064699663 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065268894 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061066023 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066973408 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065392499 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067299563 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065325648 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065159064 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065771389 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06491857 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060722663 seconds)
  done (took 2.671021251 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07200682 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062865857 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063397844 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.067662096 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062839219 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062910575 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068839419 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063331456 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063543342 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084586866 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063389742 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063292532 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06869036 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06664316 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063241003 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068669726 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06838587 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068589313 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063300286 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063357903 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084805496 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063254376 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068456179 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063711197 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06310209 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063090949 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063557441 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066557067 seconds)
  done (took 3.216731552 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064013862 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063449651 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063597604 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063982263 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063614705 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063863065 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.063687755 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064152799 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063892883 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065682162 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065405038 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065158737 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067702425 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064536365 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063613275 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064366511 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063909501 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064205971 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064398941 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065575343 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064949345 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06469252 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064788469 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065442986 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065318446 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064402395 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065172073 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06565701 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064821554 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065451909 seconds)
  done (took 3.295964908 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072823016 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071275565 seconds)
  done (took 1.501456517 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062071666 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077184181 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060000883 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072166388 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068160451 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063745989 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069023293 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06871183 seconds)
  done (took 1.893299385 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066744307 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090205243 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062297438 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06241229 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065473852 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127023836 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074235985 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073747182 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075628244 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064364309 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062878083 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074468799 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063259365 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076778768 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065224155 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073109366 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071069787 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081050137 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076525676 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061790438 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075936838 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064773401 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062109371 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06450406 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063473693 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070750734 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079317026 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076011323 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072356332 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.0616342 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081950755 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061525856 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063695168 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.0720498 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.066780367 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062142086 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098653034 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061437885 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065976042 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060914086 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073495571 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08150333 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075456105 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078999973 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062643326 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062940857 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.06032396 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062714416 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064274575 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070213967 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060980297 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068513455 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060426939 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062449142 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071436687 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061885231 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066239386 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070687283 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074809406 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071475344 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069754292 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076220962 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070055614 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068846967 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061938662 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080878932 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06296648 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074110063 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075958248 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062546876 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074325761 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061102783 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059843428 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060940889 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094360229 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062883394 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061949184 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061079476 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06125121 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062947996 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070754688 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06656025 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06850957 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064434642 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07690183 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070151767 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06115533 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066952465 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078480395 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064166323 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061031871 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077674522 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063862707 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06006494 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.077739586 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070040881 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062210861 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061387587 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064020616 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073575704 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061377238 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059076474 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06897961 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06182786 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062780522 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064270624 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068178385 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060283154 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069943955 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064545625 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061634905 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05890381 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064160117 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060485274 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058810144 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068920384 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059930652 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073481791 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066680001 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.073715751 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074003969 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070067254 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075578186 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059908823 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058542182 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076947682 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068992223 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.197507144 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080529743 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.06222551 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.076028612 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.06275807 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06519784 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072846575 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062687564 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065103157 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062719681 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067778417 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064087207 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064640112 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068197304 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071300583 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074961587 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064179594 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071971846 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063073298 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078377252 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072619968 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.066824441 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066252609 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063149529 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074812266 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069102267 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072266595 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061866068 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.06304875 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062515179 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073268717 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072394849 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064116223 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.06975521 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066706289 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063028957 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062710913 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063678023 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065447197 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066206165 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063180181 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070529896 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071495704 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076420813 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070054624 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071554512 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061572033 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06198222 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063574512 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060602894 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065808121 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070602974 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076285697 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072893207 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082158257 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061197679 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071416443 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062708599 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077711559 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074331268 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062613926 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065787161 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060129614 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063077409 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070415263 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072410955 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074676132 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076107901 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066076163 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066030308 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060579016 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076286945 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061667686 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06949536 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070314029 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065441836 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060923762 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062935486 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070370284 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06542278 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061489377 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076615882 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068512021 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062469125 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.0769084 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062266954 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073186801 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060812429 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064962533 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066349744 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062806459 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070481623 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076405356 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060270419 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061979455 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076390803 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06286789 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063372181 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070425424 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077247326 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065624568 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069375899 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071498719 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07072334 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065313631 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070499067 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061918919 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070470132 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063876271 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072471198 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060486689 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078282261 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059784379 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075553267 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061364734 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071312684 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061211256 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069719855 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061598083 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077170446 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061953964 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060736434 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071492648 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059038234 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069529685 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.0599521 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065318307 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066569157 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069407846 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062199859 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069601232 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061730936 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.210305915 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06778717 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071048504 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072728976 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067026167 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062614866 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071893946 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073089347 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071317566 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064264614 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064121051 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.061907397 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070507557 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062565922 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062684746 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069785532 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066254283 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067134044 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062551289 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063072395 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062849758 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07020498 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071130601 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079033331 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069939492 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069075065 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070781967 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060675519 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076410037 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061605916 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071719283 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060477366 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067150008 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071374389 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061864212 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080262067 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062500666 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06948622 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073951894 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070528588 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064968531 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079285214 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064150746 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070202778 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069824976 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.068079075 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068005517 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062782853 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069679481 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070636277 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072199681 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062595205 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.06919876 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070411021 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062887769 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068885979 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063050113 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070257785 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063151185 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060373011 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065951038 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073007084 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065779207 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06695676 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062072978 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060521008 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061810068 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068133341 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065996645 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070327263 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076644258 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060356772 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062874099 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061266019 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064971006 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079745033 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070943404 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069120059 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066267919 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.0611006 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063049011 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06344369 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.06152177 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064852533 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060858722 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06134098 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072040909 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063277421 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06576808 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061732375 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062301434 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.0707971 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066049291 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.06187841 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067658627 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060934627 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066288186 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060611765 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062484944 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065634633 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060754173 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064837833 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071573296 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077219064 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067388606 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.06997385 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062252147 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068997686 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076343682 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067447187 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061659248 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.0700796 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06056271 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078958503 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.07046913 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069580534 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070432678 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061758593 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076642059 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065033907 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070220485 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075343603 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061282174 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066026215 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059124269 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075408297 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064332419 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059821271 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067969292 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068052961 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065653512 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07132638 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060338949 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067484212 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.212323741 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066279414 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065712388 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06525838 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072480624 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079655497 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063965298 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067581402 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071223317 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071260018 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.06766662 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075552229 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071370941 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064099149 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064559152 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066388949 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063780569 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075072475 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063292418 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067417774 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06728069 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062293038 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069367241 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079915748 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072238476 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071111735 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061248669 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060553307 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078846247 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065007719 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064648936 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069536142 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.07080356 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073481765 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070484696 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077975518 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062360936 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06709954 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073676287 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062229229 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06108234 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06549208 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062922558 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070939304 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071365335 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069002668 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063468529 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067746419 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.074952041 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062251071 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065748175 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066213082 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062089638 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072086835 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.06989539 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072867653 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.06285755 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061405103 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064608269 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070301638 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.068824114 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070079181 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062655396 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.067929306 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074638803 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.068748959 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064650168 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.06078703 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064263233 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070532344 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065833419 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060885985 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065742321 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065065256 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068254836 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070492105 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065505236 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061015958 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077864933 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069815035 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070495503 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063302048 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063093752 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062053068 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061277089 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07268007 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.062763649 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064466339 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067283976 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064893344 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080567355 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071605289 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079322664 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064428182 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067766084 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062501143 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072944782 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067572779 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063087955 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073952724 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062420721 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078795087 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075469111 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.08896519 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062070732 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.067258079 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069193228 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076112363 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070644558 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069848272 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064162118 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07059015 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063402823 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071629339 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060414066 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059845496 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070678075 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069222588 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072909735 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060322004 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070530716 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062236883 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068347796 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.067973803 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061676588 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061761274 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.0615494 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069097238 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064755054 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069750116 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064850689 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076762167 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.205427169 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073879922 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071639169 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073462048 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076037989 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074768987 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069839328 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062634653 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06912766 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069272265 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062599055 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066721315 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065016422 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082847259 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063304364 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063074636 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075360473 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067630658 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061413007 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067543528 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066209319 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071785824 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062229677 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072173031 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065379422 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062603827 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065746169 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066228514 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06029452 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060905196 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061531548 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071139431 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065476337 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061623871 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079973521 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063051122 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070172902 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073113192 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068048856 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063778631 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060609425 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062219417 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074556931 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077239554 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.06468144 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070278253 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063241021 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.0704744 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060213015 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069958367 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069270359 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070042151 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060988596 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061667136 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076580268 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07636477 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06634759 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070628855 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070634773 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062846633 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083033385 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070614442 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06260702 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072305126 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064169159 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061106063 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060580578 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063096943 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07325314 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061423518 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064105441 seconds)
  done (took 42.340353807 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098742589 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061938967 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060917546 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06150052 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069632573 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06249457 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061277838 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062199831 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062393699 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06390032 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061230971 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064194206 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067344941 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07439274 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070223094 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065244388 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061564065 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062137455 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061144121 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062313322 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067952016 seconds)
  done (took 2.864996931 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064783099 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065045981 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065355833 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065797154 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064973305 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061573677 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065730226 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061223792 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066046659 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061817525 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065889562 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061483912 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.062110122 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061699572 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062413859 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062685834 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065930489 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065031813 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061724918 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065202699 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062908303 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065408252 seconds)
  done (took 2.862204455 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062898419 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061993129 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070134674 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061253255 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.06082153 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064203087 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060802031 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065339001 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065214536 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06543322 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07005829 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061798764 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060569473 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066592666 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.06076767 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061667968 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103321844 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062301947 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061993799 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06091997 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064009417 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070170893 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061142639 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060682867 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065125693 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064027541 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060361217 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063435261 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06170914 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.0654164 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061929095 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060444126 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069797824 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069305548 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065310896 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065946801 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062827222 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061920833 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060801868 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060548244 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069539709 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062668775 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060786375 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062559636 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069740604 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060764522 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060632133 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069832587 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060848175 seconds)
  done (took 4.621216511 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071217223 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112417629 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066428309 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.093920076 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073725087 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067208549 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066410918 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095357557 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062530672 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063184589 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074423576 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074863873 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064082451 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064927737 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066779736 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063687058 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064316772 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062863391 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.06623439 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063361003 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066475517 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.06793983 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072934245 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.073802833 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064484773 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062987726 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063108654 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064808485 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073444138 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066772812 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065162505 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065334371 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074043671 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068247828 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06333029 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063302368 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074783915 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064266832 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063787157 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062098005 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063664298 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.06547272 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067855401 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074824604 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063981493 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068619151 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064472813 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061664449 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074055949 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063563228 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06780505 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075037133 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064891834 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064445121 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065059785 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073792008 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064882584 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062733749 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063956353 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073875331 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062011733 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064754723 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077149411 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063239963 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066755468 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07476611 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068802403 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064683404 seconds)
  done (took 6.267877897 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070758519 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096107314 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076763491 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076364665 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071234177 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071541757 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.0713857 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071594055 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071821626 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.075098937 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071196622 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106096513 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068063073 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073335953 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071094639 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07145152 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.07153286 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071387446 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07122106 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071161891 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071090167 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076011515 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071765722 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076349619 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073884464 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068090833 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071171777 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071135724 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076599507 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071155623 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073779678 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071429644 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071163895 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076365933 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.07378226 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.070839976 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062206971 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071233701 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071361303 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071116544 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068553278 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076835705 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071271791 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067708517 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072045222 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071480937 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07690918 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074534151 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073111904 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07514695 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071736593 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077301785 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071642932 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.07182092 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076913523 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078670619 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076610887 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077001215 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071952294 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076855799 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077124514 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079036182 seconds)
  done (took 6.07530291 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074332371 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067938535 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079800719 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060730826 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060955122 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070303137 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061551344 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061722597 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067926523 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067878605 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06974829 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070477515 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072249563 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069668922 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070694303 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07198389 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070327645 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070370338 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067832964 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070276445 seconds)
  done (took 2.873638425 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076233495 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.07953486 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066702824 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069863217 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066642441 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070550089 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065990987 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06694156 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068209326 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066921943 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071754828 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071462098 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067345973 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070301824 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071365287 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070543159 seconds)
  done (took 2.601916085 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064609207 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068925794 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067537333 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063148276 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064427963 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062076717 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062279617 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060817031 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063904191 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075334525 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062317302 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.067465324 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062590833 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061697573 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062169104 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064848609 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064057242 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061938041 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062680634 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066833994 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070294437 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063067327 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064592483 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062353285 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064517424 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070572392 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063381961 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064377031 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061788053 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.065005231 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064615476 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069111539 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064525797 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062788967 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061607392 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062295584 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062911451 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064834336 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064907444 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062647342 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060756396 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067163802 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062867508 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063908381 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063895069 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064891369 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06395416 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068070327 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062588796 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064605156 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062653762 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064226305 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062559899 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069317057 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064301673 seconds)
  done (took 5.027953553 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078379557 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066487385 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061300966 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061170235 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06579794 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067080624 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066315315 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067082521 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067040536 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060856805 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067047825 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.06638632 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066985443 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066136769 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066875543 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066218141 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061112835 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066763652 seconds)
  done (took 2.687499641 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067338941 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066508626 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065787805 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.063154128 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063209231 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067775187 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061279233 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062495851 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06240448 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.063758007 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063291657 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062647254 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062766657 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.063002107 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067225894 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063038472 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.063442549 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06166418 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062906906 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061475941 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067632613 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061479659 seconds)
  done (took 2.89410327 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088345729 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084787961 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127289753 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080257309 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088873488 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072531606 seconds)
  done (took 2.033455585 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093829391 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098661366 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065961929 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065782657 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070908399 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068649079 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068830534 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069337392 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072168448 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072974466 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069054437 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073327836 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072556373 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074360611 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070932202 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071004752 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069528513 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069381557 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06628711 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076441022 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069121836 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072658681 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06925443 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069029309 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069048304 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074516193 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072294372 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073219993 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069291448 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072531571 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070941755 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06906701 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0727491 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073066324 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066002561 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072656846 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069314316 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076833992 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070917084 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074537227 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066284702 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070725662 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072670984 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072471127 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072729692 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069460976 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072426736 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069196204 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069612305 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078009638 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071228115 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074658255 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071128453 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073127945 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072717943 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07808019 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073169988 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075074927 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071034619 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073211365 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07472133 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07110754 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074494748 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073211029 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071095419 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074765915 seconds)
  done (took 6.267263509 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104235154 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066870808 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069753834 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072919238 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074214544 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069268444 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069534521 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069351475 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06950622 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066853803 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104264836 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06983503 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074716841 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077592477 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069487751 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069816174 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0696593 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075639792 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066970046 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078375095 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069342015 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074412169 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074459797 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075985547 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073277923 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071692857 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070230652 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06979782 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069283887 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069088199 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072712697 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069516633 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074239755 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066863012 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074560045 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069336746 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06938982 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072625969 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069038103 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070896647 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074765696 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076760896 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069266418 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069317199 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073218778 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069334077 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069409961 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066794666 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069402383 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06661367 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073294923 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073466124 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073406162 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074514184 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069827776 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069700613 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069460292 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069682369 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069725266 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070870013 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074074839 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069317666 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078366733 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06914687 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069452563 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074521996 seconds)
  done (took 6.285959152 seconds)
done (took 130.089064368 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217786771 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.189674838 seconds)
  done (took 1.884937046 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074822507 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165722403 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.074683957 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074923791 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108451995 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107339364 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.068950227 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.065345107 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074891765 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.065488921 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.1395093 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.069277911 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.065290037 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.065520149 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.065795069 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.065538558 seconds)
  done (took 2.851242568 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.10780265 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.183674409 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.0823637 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070448806 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.113666089 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076841857 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.072802267 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07534824 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077021172 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070145144 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106553514 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083700958 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075755469 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076631166 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.07233936 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075491384 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075323125 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077025943 seconds)
  done (took 3.078048014 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103252927 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092069163 seconds)
  done (took 1.705568239 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154782453 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105452972 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144008525 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343582553 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135785134 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138003052 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141001866 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.136424678 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110414096 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.132773405 seconds)
  done (took 3.04632159 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.105893769 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105603296 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.308181908 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102321507 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082652468 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077284199 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075145499 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079854532 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075781998 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076857271 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.121495748 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075217153 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072826679 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.123819729 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098753194 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106577511 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070940181 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078140634 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079979329 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071201732 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076437787 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.079628561 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177438263 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078250024 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099765915 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075303336 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077427887 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074892054 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074599604 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078069643 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079012546 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099370951 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078851005 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082878949 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076805819 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096702136 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072104304 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098512752 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074535201 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072770761 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075149063 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079612372 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072848686 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078085815 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075862876 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077953737 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080201011 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071475737 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075706362 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075365045 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073236776 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076961216 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076588229 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077794795 seconds)
  done (took 6.299989919 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107688747 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108822375 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070536168 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113189409 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105844154 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070558671 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104930925 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100584467 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10861037 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070144489 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069518589 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069821989 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076594026 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079831208 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116471857 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10788911 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071876135 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070230456 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107378091 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107238486 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069901478 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101802776 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100076423 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106355678 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069172764 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070579432 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06889566 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069226837 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074314865 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075880365 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069641201 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075932297 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081149565 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075797315 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068871887 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069130175 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068864256 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076226531 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07670545 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076576097 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075156626 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069008935 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069343756 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070209666 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069929367 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068826172 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075532207 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076198487 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075623978 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069245396 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06970893 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068915769 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069662603 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076056153 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07548065 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076487743 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076270624 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069458764 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06903441 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070848083 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077213434 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077064501 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076620576 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070101404 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077213614 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069395114 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077478027 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081445174 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069482381 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069622138 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069132561 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069229707 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069946472 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074797561 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075429949 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069858965 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069104405 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069334497 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077548297 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07481069 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069143727 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074386961 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068533214 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0690362 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069840976 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069825956 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07440838 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075778778 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069398675 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068549261 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069021771 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068970889 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068242741 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074422022 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075337021 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075451863 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074272676 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069310955 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074036404 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073583544 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068666264 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073612422 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068170926 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068295037 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068333049 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073910299 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07282486 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074873764 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068252963 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06751709 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073162996 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075727661 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.20792786 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07588541 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078337363 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.07659234 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.06976584 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078974176 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069851262 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07732454 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069738662 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07728587 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069766034 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075560998 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069403404 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068401796 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06925872 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075072989 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069934508 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069440453 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069843629 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069127886 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075210751 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078599636 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070140712 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075217147 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075159152 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069515405 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074815323 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069387334 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076654286 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069082897 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069929747 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068524079 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077718899 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069451957 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068937378 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069075461 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077683392 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069335211 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077352211 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074783705 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069072629 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078835588 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077306731 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074779398 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077211503 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07005552 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069888069 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069191122 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072041366 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074654485 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075947031 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069908094 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069866171 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074482858 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077471274 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.068900932 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074723121 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074988169 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075632098 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069296937 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069494965 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078211519 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077660212 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075638654 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075107638 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07580678 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069491003 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074484986 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075501136 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069356363 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081220233 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069554933 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079471672 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075602619 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074302279 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075742082 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076789496 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077335064 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077815978 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079896536 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069207445 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069067026 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075395068 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069178688 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069239759 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.307297174 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069747999 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069677813 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079874756 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069458395 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077525265 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068318413 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075515057 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068350201 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069559632 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080079686 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069272965 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069423049 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074641882 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069088428 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074182671 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076941684 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073994586 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068373604 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0688926 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074367636 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074641405 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068212337 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067881563 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068901215 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07283195 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072676588 seconds)
  done (took 18.660748102 seconds)
done (took 39.05287067 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170060381 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.11526967 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210120241 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198286223 seconds)
  done (took 2.308253579 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100691418 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.06565449 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080924923 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.089671503 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065768715 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076129725 seconds)
  done (took 2.039329828 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.200831998 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175953156 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244485801 seconds)
  done (took 2.173285285 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367043501 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.149643282 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214454652 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.497798539 seconds)
  done (took 2.884089367 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110095267 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100917894 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077653351 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111032523 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085425625 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063110408 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.132968978 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070238381 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.099848953 seconds)
  done (took 2.470009773 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.138600059 seconds)
done (took 13.602382913 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237722027 seconds)
    (2/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.21246015 seconds)
    (3/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.187565055 seconds)
    (4/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.177077223 seconds)
    (5/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.103515843 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.155259994 seconds)
    (7/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.207304452 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.106767102 seconds)
    (9/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.216979435 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.122926644 seconds)
    (11/341) benchmarking ("sort", Float64, false)...
    done (took 0.137419186 seconds)
    (12/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075827008 seconds)
    (13/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.215085525 seconds)
    (14/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074702386 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.156727998 seconds)
    (16/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093885785 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076425879 seconds)
    (18/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.178260573 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13239336 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.077955289 seconds)
    (21/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.206400346 seconds)
    (22/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066445711 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078683234 seconds)
    (24/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076599633 seconds)
    (25/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149489425 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.197875821 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075147208 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.066952489 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07439061 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.121119656 seconds)
    (31/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074543721 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.174524552 seconds)
    (33/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.138885458 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.088488527 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090799049 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.091756777 seconds)
    (37/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.237500136 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073397661 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073669756 seconds)
    (40/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074935023 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130457955 seconds)
    (42/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.259128215 seconds)
    (43/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.17930031 seconds)
    (44/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.226438337 seconds)
    (45/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.184260042 seconds)
    (46/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.094463329 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.136001126 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.17739853 seconds)
    (49/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.171558683 seconds)
    (50/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.078374424 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.091558256 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078639794 seconds)
    (53/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266370091 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.194114334 seconds)
    (55/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.091955975 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.091866407 seconds)
    (57/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070765712 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.076308717 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086043535 seconds)
    (60/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.075477231 seconds)
    (61/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069738944 seconds)
    (62/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.072548545 seconds)
    (63/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.217885979 seconds)
    (64/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.066085096 seconds)
    (65/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.195739629 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.151612134 seconds)
    (67/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069253438 seconds)
    (68/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.109015828 seconds)
    (69/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.082697614 seconds)
    (70/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076645789 seconds)
    (71/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.178570499 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.066095225 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.074038292 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06713037 seconds)
    (75/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.141738612 seconds)
    (76/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.160270038 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.07325052 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.236676131 seconds)
    (79/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070307003 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.227493872 seconds)
    (81/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.099870775 seconds)
    (82/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.20177434 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075576699 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087640784 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.170610687 seconds)
    (86/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07931766 seconds)
    (87/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.149422947 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112118124 seconds)
    (89/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.177224296 seconds)
    (90/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066490349 seconds)
    (91/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070012034 seconds)
    (92/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069464194 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066059863 seconds)
    (94/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094060925 seconds)
    (95/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081852354 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.117913042 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.0789321 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094228397 seconds)
    (99/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.143481623 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067482725 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092214258 seconds)
    (102/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.083712841 seconds)
    (103/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.095067882 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090660071 seconds)
    (105/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138204297 seconds)
    (106/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073958878 seconds)
    (107/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.164127651 seconds)
    (108/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.078799177 seconds)
    (109/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.200731476 seconds)
    (110/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.084268809 seconds)
    (111/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073051275 seconds)
    (112/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.146034678 seconds)
    (113/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065626816 seconds)
    (114/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.1552778 seconds)
    (115/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.158362296 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074540638 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.163155826 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.066972535 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096424694 seconds)
    (120/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066996861 seconds)
    (121/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075166252 seconds)
    (122/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084762577 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.066432273 seconds)
    (124/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066634667 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.08851703 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.155779646 seconds)
    (127/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179738331 seconds)
    (128/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.227862724 seconds)
    (129/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.193835472 seconds)
    (130/341) benchmarking ("sort", Float32, false)...
    done (took 0.138503247 seconds)
    (131/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074659697 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075882252 seconds)
    (133/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.236396823 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.077087288 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069869138 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066042126 seconds)
    (137/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.083172541 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066228895 seconds)
    (139/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.152620032 seconds)
    (140/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.161717508 seconds)
    (141/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.139004014 seconds)
    (142/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.07371293 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.091304515 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076190365 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084329301 seconds)
    (146/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078482198 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.162986775 seconds)
    (148/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.066674304 seconds)
    (149/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067755789 seconds)
    (150/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068316031 seconds)
    (151/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065628471 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074242528 seconds)
    (153/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066384881 seconds)
    (154/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074064789 seconds)
    (155/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.189782172 seconds)
    (156/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076092596 seconds)
    (157/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.066725173 seconds)
    (158/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.066289869 seconds)
    (159/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.068847195 seconds)
    (160/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070181981 seconds)
    (161/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.083113354 seconds)
    (162/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.199071404 seconds)
    (163/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078043844 seconds)
    (164/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074851696 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.07568207 seconds)
    (166/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079881918 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 0.141633356 seconds)
    (168/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066230038 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065820704 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.084800427 seconds)
    (171/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.066487879 seconds)
    (172/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065515358 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.083544619 seconds)
    (174/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066540903 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072569887 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074703142 seconds)
    (177/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065710568 seconds)
    (178/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.075871586 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 0.066410651 seconds)
    (180/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.22392121 seconds)
    (181/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.186417322 seconds)
    (182/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085882677 seconds)
    (183/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065023097 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.321578411 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093013872 seconds)
    (186/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067104338 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067118393 seconds)
    (188/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08391682 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06694634 seconds)
    (190/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077447083 seconds)
    (191/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070342904 seconds)
    (192/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067442062 seconds)
    (193/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075065978 seconds)
    (194/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.166702741 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.075636982 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.13255336 seconds)
    (197/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.140517425 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.171153995 seconds)
    (199/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.068563039 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.064920115 seconds)
    (201/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074872327 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073372896 seconds)
    (203/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06663845 seconds)
    (204/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.067457172 seconds)
    (205/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066499577 seconds)
    (206/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.208847428 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146904611 seconds)
    (208/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067062938 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.066320206 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147814929 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073715519 seconds)
    (212/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067238477 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.066076149 seconds)
    (214/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.067894486 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06449135 seconds)
    (216/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067754238 seconds)
    (217/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067097222 seconds)
    (218/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073306279 seconds)
    (219/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.066796626 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.085619762 seconds)
    (221/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068327875 seconds)
    (222/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067357018 seconds)
    (223/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.081826483 seconds)
    (224/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067187251 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124820319 seconds)
    (226/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.07651254 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073955163 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.073774643 seconds)
    (229/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076008587 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067281202 seconds)
    (231/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081097133 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066671122 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.07747135 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068851522 seconds)
    (235/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068671905 seconds)
    (236/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070261242 seconds)
    (237/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066898729 seconds)
    (238/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146411289 seconds)
    (239/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066866396 seconds)
    (240/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068700371 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078053244 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076792544 seconds)
    (243/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.132613079 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073675993 seconds)
    (245/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07326054 seconds)
    (246/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.0661969 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066226679 seconds)
    (248/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067396533 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073488905 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069966727 seconds)
    (251/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.064892503 seconds)
    (252/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06728061 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123278533 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07323377 seconds)
    (255/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069934234 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064879586 seconds)
    (257/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.142891518 seconds)
    (258/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074952793 seconds)
    (259/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.195363196 seconds)
    (260/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068057442 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091428372 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122777717 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067921845 seconds)
    (264/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.068668068 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067161693 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.065972808 seconds)
    (267/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066389747 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066178058 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065705619 seconds)
    (270/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066553908 seconds)
    (271/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066586889 seconds)
    (272/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067958744 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.065142926 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147728848 seconds)
    (275/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069576156 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.09910934 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06657078 seconds)
    (278/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081553405 seconds)
    (279/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088375949 seconds)
    (280/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073745753 seconds)
    (281/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.148784466 seconds)
    (282/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067255654 seconds)
    (283/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067124462 seconds)
    (284/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.073987177 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065899263 seconds)
    (286/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065427269 seconds)
    (287/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.06471915 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.066134651 seconds)
    (289/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.066143906 seconds)
    (290/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.188868553 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085193379 seconds)
    (292/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.066015686 seconds)
    (293/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066891699 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073486498 seconds)
    (295/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.065226721 seconds)
    (296/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.078297281 seconds)
    (297/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065517954 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066252518 seconds)
    (299/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.065910921 seconds)
    (300/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065880962 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148224057 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140602501 seconds)
    (303/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.064930351 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169399802 seconds)
    (305/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.068256202 seconds)
    (306/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065849511 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.065108959 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.166922701 seconds)
    (309/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069661803 seconds)
    (310/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.066863445 seconds)
    (311/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.250188755 seconds)
    (312/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19693743 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068491817 seconds)
    (314/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070487836 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.174264795 seconds)
    (316/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.06769505 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143039452 seconds)
    (318/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067597977 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078873371 seconds)
    (320/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067360829 seconds)
    (321/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067334099 seconds)
    (322/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067057909 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126299403 seconds)
    (324/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.066271343 seconds)
    (325/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073647287 seconds)
    (326/341) benchmarking ("sort", Int8, false)...
    done (took 0.150435217 seconds)
    (327/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067301652 seconds)
    (328/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153515089 seconds)
    (329/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.066024163 seconds)
    (330/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066679017 seconds)
    (331/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067159424 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066896447 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066426857 seconds)
    (334/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.069665611 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066327392 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.06660752 seconds)
    (337/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067203935 seconds)
    (338/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.066276947 seconds)
    (339/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067274863 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068645924 seconds)
    (341/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067247889 seconds)
  done (took 36.854148428 seconds)
done (took 38.43785592 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090431986 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079298441 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078105493 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074417224 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078476825 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077302632 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078317323 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076327373 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078164126 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077118621 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.077192078 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065735344 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074005469 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080708544 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074632524 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.081455096 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078488213 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.08159498 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066832854 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.080776492 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.092829838 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.07830024 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.07488803 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080069898 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.066644877 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075264759 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089463392 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.087116397 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073089171 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075890915 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073732417 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084650664 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074053832 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072730391 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.07529551 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072306992 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.075524936 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.073400302 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089032736 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.072134631 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066362712 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078589784 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073945898 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074334916 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075475533 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078470039 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072040222 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079539781 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066515859 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077693935 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089266482 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071773049 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072474012 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.075174043 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071552185 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075642271 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072908497 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07728509 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071468768 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.077902585 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.077919064 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074970256 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066358085 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075337429 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.073470776 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073895821 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065098382 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.0709941 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065772359 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065944925 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.065681333 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074607169 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.073022968 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071117925 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065187249 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.065959894 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066099913 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078031814 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072313927 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.075117787 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066813412 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071558545 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.071173014 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06635235 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071310629 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07795665 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.065526667 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066010786 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.06544035 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.080641156 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073012772 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066091574 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.077657523 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07129419 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070745478 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.06626957 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065612256 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071107966 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074417666 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065890426 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.064885826 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070963035 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.07082836 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074674038 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.06663015 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070911073 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070870275 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064834318 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074954183 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073311654 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.074480985 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079123826 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075684228 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077707103 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.066453033 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065300985 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.075494627 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.066553573 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07093041 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.074151142 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071486568 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074500789 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.066662106 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065661906 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070873398 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072563942 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066112994 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.066400372 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066123173 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.075161794 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073077865 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065602538 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.06535954 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073783335 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074376941 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064585009 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064473548 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074329064 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065730544 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071307762 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070917844 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073621347 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.065044203 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064893913 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.214644823 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066685064 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066525722 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072343404 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072326883 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067068086 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.074902934 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.072572063 seconds)
done (took 12.921620369 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.06705074 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108138201 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.080333644 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082774242 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079485347 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068136872 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070963925 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.085619142 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070604604 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090718342 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094625394 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088500953 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097221866 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.065812829 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06735069 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.067543445 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065266478 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078524658 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.083621498 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089710221 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.101942002 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066318688 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082700531 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085863858 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080856654 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084581187 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.10822643 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067901415 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069651897 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085636501 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091861425 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066458133 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06762207 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08424451 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081859217 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.075090493 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067961947 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072793079 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070058823 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066834831 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068395277 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.084588892 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.073171578 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073480268 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068198174 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06829819 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067206162 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073864372 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.084148469 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072210909 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078638617 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085105029 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068333202 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067200671 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064936877 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074008741 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067096632 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067625573 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067694679 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066681231 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067700263 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069543395 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071826904 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.073333796 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070392351 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.073033175 seconds)
  done (took 6.692912332 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082747038 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092862867 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081364472 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081826364 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066452467 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067617661 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067356396 seconds)
  done (took 2.237482919 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067954898 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074910053 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079244424 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079580783 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08874381 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076808489 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067586294 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.09878561 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06638709 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07571673 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082769596 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080357886 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070701843 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079511185 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067862652 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079318413 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.06794763 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074270011 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074630506 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080488896 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071258919 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096518309 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080623924 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067922998 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080888061 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075059259 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069625295 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067750482 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067678071 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067057797 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066957354 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089344071 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073895627 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079368367 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.0682709 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066444466 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071528574 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068045886 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.071438711 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075892028 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070591269 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067145723 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06761561 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067683693 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.0683352 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071665901 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068190883 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.066751068 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066560235 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074439768 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066697362 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073927578 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069321457 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071886665 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071828539 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071316365 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074362119 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067288012 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074587652 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073303254 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067135759 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07924446 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078604698 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071098067 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078749339 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075473058 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07378751 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070533721 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066545583 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066146155 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067659681 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07827956 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070187422 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.06947711 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068479361 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.071957048 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070911483 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082309474 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081958744 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080052278 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069304627 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067480603 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071083792 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081883566 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071879612 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067056177 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068174384 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066464624 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071892082 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067536476 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072005236 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067357861 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073700782 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069559785 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069963246 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07549817 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067344543 seconds)
  done (took 8.754394071 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069703909 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.0689704 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068160618 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068088901 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068681204 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.068931159 seconds)
  done (took 2.14754978 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.090587657 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067917854 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079495002 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067917442 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090230787 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074127075 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074467689 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069591033 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083954011 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.077861686 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074024071 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076315253 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076499625 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069210019 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073788984 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068884308 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073771199 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07050217 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077292128 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069916721 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083463115 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069518466 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069694006 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079749551 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071025241 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068449818 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068609681 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077634946 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077043101 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069370806 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068993083 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070693922 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075829701 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068998921 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073838591 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076011543 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067761213 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072767808 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069644225 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070189215 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075833584 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069360331 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069858683 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073020672 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069138902 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076161988 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073132908 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07094444 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073840192 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072797927 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072711182 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067857484 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070359297 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07338073 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075873885 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069138312 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073116437 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073503685 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.068812882 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076388497 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067487196 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.07067639 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069290708 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070414018 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072300197 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073000491 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076041468 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069802472 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069736225 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067540548 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072921214 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.06784231 seconds)
  done (took 6.94228942 seconds)
done (took 28.464535599 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.557245395 seconds)
  done (took 2.230325157 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.607654336 seconds)
  done (took 2.323035629 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.355730007 seconds)
  done (took 10.070550594 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.347942843 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.411419946 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737322893 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132915162 seconds)
  done (took 3.37938726 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.753102358 seconds)
  done (took 2.479709046 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230600246 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22018531 seconds)
  done (took 2.185663064 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339170718 seconds)
  done (took 2.055117062 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.144273982 seconds)
  done (took 2.85633767 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23451724 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162887485 seconds)
  done (took 2.122315286 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540004686 seconds)
  done (took 2.258950443 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.269741044 seconds)
  done (took 5.99418035 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232374096 seconds)
  done (took 1.996479913 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.229047535 seconds)
  done (took 1.954665814 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.049867204 seconds)
  done (took 3.769477706 seconds)
done (took 47.406658274 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084645228 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086976695 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086628771 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081823399 seconds)
  done (took 2.033978299 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074814972 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071227894 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074529656 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074817577 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072779564 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073292967 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074157357 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070767189 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072404489 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071372662 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069847318 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071337029 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073761277 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071350861 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073383683 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074731624 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071111107 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071028729 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073305991 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.070970437 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073658967 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071132893 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069697516 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070870422 seconds)
  done (took 3.458030138 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079178889 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073681031 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075962325 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072849728 seconds)
  done (took 2.031719682 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077721792 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077029162 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086263234 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090883556 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076557555 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077668238 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084500496 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085318126 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066554415 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087896595 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068866127 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067823386 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.067937736 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086664776 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083884717 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063281795 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06473296 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077979776 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077009746 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.079793909 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069484728 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066692927 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.076952159 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.077949777 seconds)
  done (took 3.568471033 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082785768 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066547187 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081788536 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091567389 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093024812 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066562037 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080081833 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093363706 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.12855373 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066885498 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07272816 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066705714 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105397815 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066505516 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081548523 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109174504 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112331819 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070354071 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099708323 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066600519 seconds)
  done (took 3.440384235 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076837112 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.0701405 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071430387 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066389707 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.07813142 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073725407 seconds)
  done (took 2.182216372 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069133158 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06866566 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070959365 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.072718575 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06867745 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068774626 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06822056 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066878433 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.066950389 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068002308 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068247621 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068253457 seconds)
  done (took 2.563179453 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.154803281 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069871415 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071127291 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066500475 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.071797379 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067695366 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082227488 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069572731 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085764018 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067328958 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067537429 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069818263 seconds)
  done (took 2.683771079 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105287164 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112230435 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144658907 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117412024 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116645082 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097199092 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1258607 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095342851 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15965573 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137125899 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11654705 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093774399 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086799276 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069997848 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099601847 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118457547 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137016343 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073137598 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113153936 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.164907175 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131824688 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135394305 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148509206 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116654248 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090925301 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148626954 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09869219 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103231923 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124942282 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126269811 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118996225 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098606607 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072778475 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071846504 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14964563 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104314844 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121070182 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093507194 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10560913 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088801854 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108035636 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070183481 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087502404 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113853569 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085352279 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131682776 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089045124 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115211245 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081280393 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137080395 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120630921 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097092236 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084676522 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102920498 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.294367022 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114102791 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134902775 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108129078 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084007326 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.11921647 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103933679 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100881698 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107951571 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081212943 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.176369727 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089459485 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112166788 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112500134 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093976298 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094980351 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107540308 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135701227 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12648652 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.125887242 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138672666 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096191421 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122671096 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100020978 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128618073 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105469121 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074186482 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121524302 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129713017 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098541512 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101342103 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130461492 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092740827 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078325348 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099632507 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118946097 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081167533 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11285787 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081295302 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109276185 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134138245 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097870647 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112108408 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117224391 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078880584 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153619031 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108925396 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073040394 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.116229265 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112067772 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152364174 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093322032 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.236306719 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101575774 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104860165 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149442376 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108509869 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081274231 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110595493 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13851838 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095591382 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.169270141 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097063706 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140907376 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112357513 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088074233 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075766492 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090906117 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112025692 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107513485 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113066172 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090587009 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084289061 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087728953 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112733291 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09215399 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08102767 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114010342 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.102777687 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.07580017 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088991143 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080418472 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142265212 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079347821 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138390266 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125653145 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079685054 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106210819 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098648976 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10832602 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098510764 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117453891 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139416714 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.1171991 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090605272 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094437682 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108359625 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143597239 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127633584 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093046443 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.077202267 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100852902 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11200989 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097803764 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125944916 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100661689 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108986238 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103109131 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13914407 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141651912 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098443345 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099238822 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.2704984 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124135195 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077624831 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155507975 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105242988 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118569317 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085665533 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140394447 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115014299 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089907977 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087619062 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100858925 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104144631 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106162536 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142650896 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095801021 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073134523 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092604453 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143849113 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076727798 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110398803 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091347998 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093201327 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118328871 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093722253 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082504498 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.070137016 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128680196 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.158711925 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071246786 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114810933 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112718178 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103031283 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122073501 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.07041413 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119351502 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.13850636 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118555777 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140304019 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145895787 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117860842 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118724202 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.114466636 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.105998731 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080320202 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.125966836 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135847514 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096663916 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092605429 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133316858 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116244286 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.13335564 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.113844089 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.276843116 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.106000247 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108542737 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103064312 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102828442 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143469006 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120830126 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124710191 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086187929 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105966157 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117665263 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134046109 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082686304 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142131445 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084621674 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118014198 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.07814178 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123203756 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080117489 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.111159105 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080002508 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10028115 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07023663 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074814116 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14103921 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112648168 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106101643 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100385124 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137565683 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137035815 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081950013 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108726218 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117230034 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101973056 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116171806 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109788422 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.08973089 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095616033 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109989247 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086448454 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083008954 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11564911 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094791168 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126973537 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085310849 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07593721 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140526713 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105200889 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096783174 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078918651 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108710651 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121928247 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093368412 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088440628 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11569808 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104478599 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139734543 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090071472 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.09690212 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.12267583 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.244781428 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093728272 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071179565 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086997966 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077408923 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127888133 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077243637 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115555432 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069852957 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.129830176 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086863032 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093998037 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102723076 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110916352 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127506567 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095221295 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139921245 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089884938 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118168463 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107581016 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094057903 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088909315 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10380222 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101444856 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122867467 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096546512 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123268745 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144159314 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10546065 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142184164 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092621307 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121941111 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107166873 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124509347 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11225091 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147274469 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138333471 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112298002 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112533886 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076350689 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095668755 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105987992 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112019537 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.174430278 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125759697 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072989007 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106746526 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094835503 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109465463 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10541582 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08304136 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145450863 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100225939 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087302287 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110101094 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088723401 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.264293164 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077649272 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096922655 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101788328 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094842558 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09881727 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115576837 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12783951 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11335052 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142696962 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099922551 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093462224 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118474491 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110767544 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110270738 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086811606 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086955066 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137277689 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11840568 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128488323 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100065091 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109858082 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111467321 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100664922 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125012009 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108708981 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.127423884 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081489403 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076744216 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069395306 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073254186 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124369541 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109181728 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112898209 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09900443 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073038537 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10440422 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106605796 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072970603 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089407023 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094487076 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099667068 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092373081 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107873939 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115229603 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091980231 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104845648 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100199591 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147429283 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100579357 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089268966 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144331152 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150272905 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088953787 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09310799 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072666528 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079866955 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112551689 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146831257 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147167423 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.076881124 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086067832 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084533501 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084617948 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.071422162 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.08746894 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088328726 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102883771 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097706639 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.110567506 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102424611 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075038593 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101074099 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098505663 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.090183887 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099552062 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11178419 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118010833 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.131315722 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106549283 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101655609 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074118572 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.077606942 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075065173 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07770681 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.097995555 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.07734414 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074725538 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133322088 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.089323083 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100079967 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102872008 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085673133 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073583977 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125802391 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068810426 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126881591 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070412283 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07908489 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.07977651 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076881736 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089407893 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126729471 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103638975 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105144704 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10193519 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099863798 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129729634 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14631971 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077197385 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136122015 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074201103 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073973619 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074967302 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108226443 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085189099 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109813978 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128885974 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087733463 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09766392 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074823423 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133421947 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.369774668 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10723964 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090974272 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083276197 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146525016 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083175285 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.083554474 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093697666 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114834058 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07531902 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107284834 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088243104 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083380004 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144240041 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633329585 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092992135 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078146615 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099064846 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145776734 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130501507 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096606177 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110691207 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120733594 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.101712422 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097322245 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109592555 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185919689 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075986663 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096640575 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.105470789 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100190573 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103544006 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.100362202 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089461759 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093446574 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088312836 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081088771 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108989082 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089883142 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098230264 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109160031 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084859541 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088247396 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131596286 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105206267 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083034758 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089380174 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.107611284 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08988331 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102296812 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070621133 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114792808 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092558657 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11804079 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.095603497 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108492497 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128377236 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091147391 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139211434 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108007928 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123848453 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088391343 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.24586617 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124724031 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088887527 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078860057 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144775501 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.095649182 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094016439 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105336243 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097747014 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114774953 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11801378 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113066924 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099030204 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080020992 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101238283 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103578007 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086494458 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080023443 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075914031 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077299761 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108297258 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086454129 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.084840252 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115651487 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090272633 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10445789 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101095973 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.123771659 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08459491 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102097744 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110704009 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093464947 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110947704 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101095569 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128923404 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175489891 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125649729 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129972767 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134893038 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077594492 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077075656 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.069788913 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115562131 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07997748 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089835391 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082122577 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134195014 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082895616 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112527534 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229660981 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08133669 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094788767 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096901604 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071088996 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083964119 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108212848 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088611486 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081660379 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120204901 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084039007 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128859591 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112194635 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09967615 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094922845 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.247524755 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113764653 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105765287 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129337226 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.096116546 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076736578 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113498658 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10403867 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13874203 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073939028 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081700676 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130016444 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104538082 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132927635 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081634289 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149362701 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144820383 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101286365 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135167387 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072418525 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084604714 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090365021 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126464671 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085545034 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112661431 seconds)
  done (took 68.031264652 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150973919 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.142468011 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083025217 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104507241 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187093781 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197509708 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120005323 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.096993615 seconds)
  done (took 3.026271045 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.068499379 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083311176 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081846103 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.205996767 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.108825139 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068526591 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073902331 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082385836 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068375388 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.06760132 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102189088 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068157866 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068326367 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.367971684 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067391992 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072268512 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068247761 seconds)
  done (took 3.643506483 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332512033 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.402841168 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.238491744 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.632920408 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.137681625 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485580836 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077057165 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082849082 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.568786396 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371848769 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133965308 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088756045 seconds)
  done (took 18.483890161 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077960813 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.080626035 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.080254503 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.077281459 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.076308321 seconds)
  done (took 2.379417812 seconds)
done (took 119.275314287 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085606524 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.178061742 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.069396243 seconds)
  done (took 2.21284148 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083365785 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082392322 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082484293 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079906578 seconds)
  done (took 2.26572859 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076323741 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077954274 seconds)
  done (took 2.084012794 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224502008 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.179376433 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091943292 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084075592 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.08203885 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082029012 seconds)
  done (took 2.192019218 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073334616 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072989581 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073466121 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073769008 seconds)
  done (took 2.223460607 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069175038 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067645746 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069987041 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072177923 seconds)
  done (took 2.211016216 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086788914 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087890965 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117846431 seconds)
  done (took 2.224968329 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084893656 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084851272 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080181357 seconds)
  done (took 2.185573846 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110368826 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098542143 seconds)
  done (took 2.141557607 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081522886 seconds)
  done (took 2.018313614 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091113379 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.10128655 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141206404 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108580815 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141638915 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128189452 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078774615 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079612293 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075309268 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074501143 seconds)
  done (took 2.953719691 seconds)
done (took 27.232459718 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080007147 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375551534 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361012529 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088478944 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675372121 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358864805 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.000344654 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092916572 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.103373326 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070356446 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087296349 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652575987 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.995487198 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.333728331 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.981019505 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330959841 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655378301 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.07049834 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06982397 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070508467 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.987142025 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069995269 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070528468 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070686526 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651868609 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375950008 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070693502 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331785609 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070034172 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074122941 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.360202304 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071116963 seconds)
  done (took 16.56680823 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071810822 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124724379 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073856577 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085930012 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071789618 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071405984 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073096834 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070436534 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114150439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070657028 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087633888 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069892125 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073710453 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070998358 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090206716 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070049307 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072802265 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074068292 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070411243 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071073337 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088793853 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070110542 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070906602 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070888261 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070491965 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083320427 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071142835 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070523385 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07092474 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07421081 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074782442 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071891354 seconds)
  done (took 4.420640505 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124456232 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128210874 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074865014 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111127196 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119630225 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071888711 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153668999 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093522452 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.117755545 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070812558 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087878029 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070125402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.107217496 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071296486 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.091047369 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070592451 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073102796 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070960184 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070093893 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071040268 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089163766 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069769761 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071031507 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071355696 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071050971 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085246851 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071120567 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070534039 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070559265 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074068416 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075632441 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071377788 seconds)
  done (took 4.696281412 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072047029 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07331947 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081729861 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082467996 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068132363 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070652566 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071650423 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068972367 seconds)
  done (took 2.547760448 seconds)
done (took 30.195459293 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080531279 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069640603 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.07260481 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089030775 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075969665 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071872551 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066672069 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076574961 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073509171 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073487823 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075267997 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069116064 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072580454 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067146108 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074198657 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068447311 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074826741 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072401234 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072793053 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073994364 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070810043 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073490214 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076527446 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072564392 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072444459 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072608591 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077159606 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073743216 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068640819 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070836526 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.069994615 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082400012 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074579458 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074636131 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068042841 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068211886 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.07259651 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070457531 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074241047 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077169756 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070022437 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077193498 seconds)
  done (took 4.997967568 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090127629 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095569298 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087921667 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084004035 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108831195 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084495827 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.092284909 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081206003 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079690919 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092055721 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075902543 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081676856 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083504624 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077864924 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080550433 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077069907 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081853788 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075682793 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080971965 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080271619 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092955519 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.074041801 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081043897 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082164118 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076153772 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082438075 seconds)
  done (took 4.147130522 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075056884 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090300015 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094365369 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144426632 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111774858 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084959838 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084016093 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.099668603 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103931834 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070086423 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074243323 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.09611822 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099514035 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077671702 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10839689 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088515137 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082976002 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.072269394 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076990363 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104903438 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092617604 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088691375 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102966975 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.090561639 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069555086 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079504458 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.077689426 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086191497 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077600373 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082492247 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073990041 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.07369009 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.07081801 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082885517 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.077300924 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067908856 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09208417 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082928185 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085620089 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108396181 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.080246667 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071436727 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100694444 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136146159 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069689744 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072413797 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073652292 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082410255 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.07124414 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100056645 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088198072 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069381058 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088767528 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071382125 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07135909 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086761844 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071482716 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071778463 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082471508 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075711311 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090502432 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075016594 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091369807 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06945943 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081607555 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071236846 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071792206 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068698433 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106340936 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077422048 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.123145983 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.071193006 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067979219 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082429687 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081589416 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076531076 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069749273 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089571814 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081810777 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.0737573 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081857183 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072693556 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073254261 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105617747 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.069060668 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067855277 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06770655 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072118087 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07292402 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070428315 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083341575 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069011673 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.073691424 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085480174 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069871544 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070485809 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072166525 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.071113525 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069052456 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080733193 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.07375805 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071613124 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.082620431 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071015808 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073409684 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084618287 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.07952215 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069830543 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.071198561 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072357431 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07161539 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074143259 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072953477 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071881041 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.077164279 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077406433 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.0756931 seconds)
  done (took 11.496703092 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16613467 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155749011 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071261438 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150379819 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078465383 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074719062 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153132275 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090528414 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070766234 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071853969 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.070106075 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098844272 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094769749 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105885094 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074788792 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071542133 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096561108 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103907752 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.155544084 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.149215724 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094230719 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.078198639 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.073695769 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071755842 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072299265 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079182473 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.087028015 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078319964 seconds)
  done (took 4.754958381 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07759631 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085600797 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.075386882 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094351966 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088587675 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07072953 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072692206 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.0721677 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087813229 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.077873069 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070623084 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.075138321 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074233951 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071504861 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071778248 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.077015074 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077374902 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069623812 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074650938 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.07526638 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080922026 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095908145 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074715968 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070493167 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073474827 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069952291 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077048749 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079898671 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069948943 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.10057738 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067751807 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074764602 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084851571 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071187131 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070446011 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071466335 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070898331 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070410242 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070768982 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068719551 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068249658 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07518452 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068768438 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076295234 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08421866 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077766872 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071966717 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.07601924 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073316731 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067443431 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073542704 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073726036 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072670076 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078568745 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074003164 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072948705 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071724817 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100105931 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076122968 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069977714 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069314877 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06843787 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072040398 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.07793253 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.08692035 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.072048657 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069045198 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070233761 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074994823 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084519634 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070150005 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075500045 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067292669 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070420229 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072618129 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073073453 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071404061 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068922941 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069798274 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070589406 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.070416795 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069958308 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069639856 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072952808 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068481372 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068741614 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.07074774 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071658469 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076846683 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069028 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07313751 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071827296 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069113339 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073319866 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075248935 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072794437 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.090069266 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078862962 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070954284 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068316133 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084641598 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072579607 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069561976 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075771521 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074510661 seconds)
  done (took 9.8491372 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092737656 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071590027 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090379715 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096865719 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080189037 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075695037 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084511922 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071160807 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087447762 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.06988232 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079430103 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.069339406 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.084024475 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.080021706 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.072003009 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.081009412 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073054961 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091276202 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085013309 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068834779 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.080177995 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083494564 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083212013 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088482522 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088057073 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.089505981 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082663625 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072844767 seconds)
  done (took 4.293681976 seconds)
done (took 41.499635363 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.045203871 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.212132231 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.03604592 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.29529986 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.088977831 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.164476429 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.157810456 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.029103585 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.031956745 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.087584502 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.345856934 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.42312769 seconds)
done (took 68.949474164 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.083395038 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.176120014 seconds)
    (2/2) benchmarking "String"...
    done (took 2.247250987 seconds)
  done (took 6.387215735 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.630121199 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.030082211 seconds)
    (3/3) benchmarking "different"...
    done (took 2.078860165 seconds)
  done (took 8.696560395 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.170027954 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.671582237 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.282336471 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.029382147 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.03547511 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.418441602 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.849758628 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.502277199 seconds)
  done (took 33.749213751 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.246064652 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.222494677 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.789374916 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.830456337 seconds)
  done (took 17.09852249 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.636371734 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.29412342 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.29346622 seconds)
    (4/4) benchmarking "different"...
    done (took 2.292768486 seconds)
  done (took 11.536130527 seconds)
done (took 89.784106891 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.03450446 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.36856832 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.044520497 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.186914684 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.080674174 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.061558665 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.045349812 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.074849664 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.033245475 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.035690122 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.441461769 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.034491158 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.031421267 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.073026222 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.037391189 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.090468056 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.418993995 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.047648557 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.087831227 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.52909561 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.55444997 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.046274815 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.032894083 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.241333498 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.114233365 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.052424123 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.512310237 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.03402475 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.742004921 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.049118707 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.039341444 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.037453394 seconds)
  done (took 213.173506595 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.032521536 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.120338728 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.190779646 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.063571412 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.603706912 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.227612244 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.178783275 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.637088315 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.036794939 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.040367063 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.37921894 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.034052929 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.353884204 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.979987101 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.029753638 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.046873876 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.350950563 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.332482599 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.033879603 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.21212035 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.034753329 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.210225773 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.146277145 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.325852448 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.060121206 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.087363027 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.059116295 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.059241278 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.218629528 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.318132102 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.041633576 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.080827159 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.23822618 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.899310113 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.041847387 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.045099117 seconds)
  done (took 180.713518841 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.204021587 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.043339781 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.097840439 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.173793856 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.789937701 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.751344845 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.036800224 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.034768397 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.037623949 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.044652308 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.039395514 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.107000487 seconds)
    (12/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.037849295 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.867096204 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.0590237 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.041268638 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.024709372 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.487343899 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.043096668 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.039407471 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.039648531 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.103795262 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.412666803 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.175293808 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.040861453 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.052323416 seconds)
    (26/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.039990302 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.046828109 seconds)
    (28/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.175286661 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.041865074 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.175398696 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.041957303 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.117381798 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.178101723 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.053360618 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.122222255 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.047875653 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.530758851 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.043065344 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.040142793 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.041582209 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.10381377 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.040976722 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.153028476 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.131650732 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.040652942 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.052785039 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.109850583 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.721677828 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.044181438 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.041378365 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.026008132 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.04069794 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.042105726 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.406322756 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.043536422 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.066875005 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.662634844 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.048102416 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.042374333 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.04450584 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.042110851 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.042056936 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.048727321 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.081859772 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.846721725 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.738907497 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.434269141 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.855593439 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.045048484 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.162952222 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.103014243 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.046768778 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.121727897 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.041387341 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.04243136 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.042217269 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.043551832 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.135353638 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.126663729 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.044218606 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.177635101 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.046311079 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.04293632 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.262606922 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.509216025 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.225259047 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.057043765 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.106660894 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.043753696 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.043143008 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.060873518 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.20517936 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.044889524 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.044131328 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.043680843 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.04361072 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.202157915 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.044659671 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.28165339 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.269055216 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.11932611 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.296203768 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.263165539 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.046392577 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.043636443 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.058739785 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.045282384 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.043903366 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.057006952 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.044945374 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.04430132 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.047438555 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.045647313 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.044923185 seconds)
    (115/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.046501287 seconds)
    (116/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.057055779 seconds)
    (117/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.044687425 seconds)
    (118/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.04434049 seconds)
  done (took 441.316271215 seconds)
done (took 839.423596524 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.778854397 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.805340725 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.693120695 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.728915367 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.697968194 seconds)
  done (took 15.678027672 seconds)
done (took 17.655755891 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.077520328 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.061706644 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.051341122 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.114430523 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.070048589 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.058282818 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.092701784 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.093199441 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.07719112 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.057217432 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.10879401 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.06277673 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.078314252 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.080646345 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.133791502 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.0866947 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.062969382 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.055344224 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.115963479 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.062517742 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.063823673 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.059634661 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.059872886 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.114811654 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.141927547 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.070962574 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.059497296 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.106884535 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.06971556 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.107731712 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.10544547 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.082984945 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.09407275 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.135258299 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.120603771 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.141429542 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.069464513 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.130205211 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.065981046 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.147104599 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.116258779 seconds)
  done (took 87.640116013 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.059429069 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.189849605 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.270034014 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.091075761 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.058838416 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.270194526 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.115648148 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.186500178 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.188773254 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.271183538 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.302424591 seconds)
  done (took 25.984566269 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.059178281 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.192852709 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.289003947 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.095706253 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.08234046 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.273278755 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.123543354 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.186061072 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.192862458 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.276871077 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.284887387 seconds)
  done (took 26.042874376 seconds)
done (took 141.645320641 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.436430845 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.082689678 seconds)
  done (took 6.497159942 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.052315742 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.067446713 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.204175516 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.052161904 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.05283979 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.054135549 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.054207297 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.053556933 seconds)
  done (took 18.569060749 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.052866146 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.052408913 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.052154235 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.052548111 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.052077239 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.052339796 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.053462317 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.052888666 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.052524985 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.053206569 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.053068528 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.05325321 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.053585779 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.052309993 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.053992817 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.053340825 seconds)
  done (took 34.824537956 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.053663505 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.053765878 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.054223401 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.053580698 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.053898244 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.054226834 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.056446451 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.054062552 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.05418918 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.032432107 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.040144263 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.053630494 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.054439531 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.053472411 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.054758396 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.054416447 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.054998225 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.054941443 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.055439163 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.055569545 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.054489437 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.054848754 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.059395489 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.053813747 seconds)
  done (took 51.255712519 seconds)
done (took 113.136620711 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.260767896 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.627573694 seconds)
  done (took 8.869384777 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.058910456 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.055130562 seconds)
  done (took 6.160488585 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.05472724 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.054589768 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.054994064 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.054760591 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.054520725 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.056004965 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.054843335 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.05591074 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.044240205 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.055144526 seconds)
  done (took 22.520773317 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.055530806 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.055918566 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.055909305 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.056031133 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.05639754 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.056448888 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.056520926 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.056594581 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.056217467 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.057086401 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.056317732 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.056311399 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.056658493 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.056561722 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.056525029 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.05754345 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.056584838 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.056815495 seconds)
  done (took 38.998371348 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.057347298 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.057057198 seconds)
  done (took 6.097302815 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.057280829 seconds)
    (2/7) benchmarking "second"...
    done (took 2.056615418 seconds)
    (3/7) benchmarking "month"...
    done (took 2.056969148 seconds)
    (4/7) benchmarking "year"...
    done (took 2.056907425 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.05695252 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.057024612 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.057248181 seconds)
  done (took 16.382027447 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.058498129 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.205112721 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.25606955 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.677466469 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.05782386 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.059213247 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.929636245 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.058741131 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.061114522 seconds)
  done (took 22.346895173 seconds)
done (took 123.359734502 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.859296444 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.058039132 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.342355801 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.127982121 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.130302687 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.349868494 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.095012735 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.599630117 seconds)
done (took 44.548380292 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.149225558 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.057277045 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.089415696 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.089026431 seconds)
  done (took 23.219128063 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.056674882 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.395920764 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.081562725 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.036907494 seconds)
  done (took 23.567329622 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.435838304 seconds)
    (2/2) benchmarking "read"...
    done (took 2.416199034 seconds)
  done (took 6.840005605 seconds)
done (took 62.76396664 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.032713144 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.058097239 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.05795193 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.057871202 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.057448792 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.057952722 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.058497711 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.05907572 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.058889861 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.059225829 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.059689602 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.058834768 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.05874062 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.058010659 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.058502241 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.05927099 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.059735645 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.058647182 seconds)
    (19/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.058553379 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.059056701 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.059013717 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.058999884 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.057843167 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.059140978 seconds)
  done (took 51.358953744 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.058758881 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.059348083 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.058675388 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.059339102 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.060447547 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.060288054 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.057260212 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.050436056 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.055918064 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.050148004 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.060721319 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.06087384 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.059709655 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.060016585 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.059886229 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.061090035 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.060242593 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.054548893 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.060478254 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.046943378 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.060877787 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.060356421 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.061464425 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.061563007 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.061681685 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.061126636 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.061646454 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.061802843 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.061293704 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.062320341 seconds)
  done (took 63.755479136 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.060046366 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.06134321 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.060563916 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.060604449 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.061415398 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.061267258 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.061048362 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.060344364 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.061698617 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.061437627 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.061874689 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.06113449 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.062013634 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.061687697 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.062173444 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.062066966 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.06189335 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.061084177 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.061415071 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.062470167 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.061747821 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.062017997 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.062322607 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.062011685 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.049070385 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.062587945 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.062513765 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.06304734 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.062687045 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.063054973 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.062378623 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.062687051 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.06315288 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.062893854 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.063107817 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.062707449 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.063509245 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.063576301 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.062830333 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.063215409 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.064116693 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.064537499 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.064506152 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.060986725 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.063850162 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.064309593 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.06511534 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.064528476 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.063754761 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.065107868 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.064316939 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.064451569 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.064716205 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.064742312 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.064542596 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.064274652 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.065379611 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.065111664 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.06514545 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.064781742 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.065459799 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.064793494 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.06551254 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.064892182 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.06471744 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.064359568 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.065062094 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.065573342 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.06558282 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.069283773 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.065468637 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.065990622 seconds)
  done (took 150.534104881 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.065635809 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.065729559 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.066032569 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.065473859 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.0656474 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.066335855 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.065825028 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.066025382 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067292724 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.065822662 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.066111577 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.06643948 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.066717191 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.066207009 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.066183113 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.067006625 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.066384804 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066614328 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.066699602 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.067760916 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.0673205 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.066857622 seconds)
  done (took 47.451598098 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.066560786 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.066748808 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.067820211 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.067066365 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.066974065 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.066864902 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.063732937 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.066614115 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.067789439 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.066552797 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.067113932 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.068354141 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.068083868 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.068051002 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.067923828 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.067809317 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.068071138 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.067432216 seconds)
  done (took 39.202498125 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.068620105 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.067942707 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.067539338 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.067643533 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.06817463 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.068803268 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.067735259 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.068226763 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.067641898 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.068526619 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.068812157 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.068380823 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.068351681 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068705904 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.067334097 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.068238665 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.068370006 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.070736192 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.071331184 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.071419909 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.070834874 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.068988521 seconds)
  done (took 47.505831219 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.069047634 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.069116173 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.069253386 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.069069705 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.069543289 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.069889791 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.069103883 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.069281437 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.069628031 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.069505686 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.069071175 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.069699489 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.069666131 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.069969441 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.070325488 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.069684098 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.069816085 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.07052486 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.070081945 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.07025591 seconds)
  done (took 43.38729194 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.070950517 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.071595577 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.071928244 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.070500529 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.07079998 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.071470486 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071428044 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.071304475 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.072172322 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.072019324 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.071968717 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.072184232 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.071838547 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.072245208 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.071516524 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.071636427 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.072533417 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.07178067 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.072258812 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.073280896 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.073200917 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.072406676 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.071832974 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.072298386 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.073134281 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.072331361 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.071812229 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.0729815 seconds)
  done (took 60.012699904 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.07265666 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.074217495 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.071952895 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.07192243 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.072519809 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.072118051 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.071356487 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.071183589 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.070713264 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.071852109 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.063831618 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.070359429 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.073608721 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.072636965 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.072719807 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.072815592 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.071942745 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.072573743 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.073644796 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.073537699 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.073655844 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072743739 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.073779249 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.074071048 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073911276 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.073643253 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.072992111 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.07362843 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.072936368 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.073248402 seconds)
  done (took 64.170163782 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.094222159 seconds)
    (2/2) benchmarking "in"...
    done (took 2.092257544 seconds)
  done (took 6.185094172 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.074315816 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.07328685 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.074495713 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.074367548 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.074022024 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.074665521 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.074584978 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.074380447 seconds)
  done (took 18.592925482 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.07471927 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.079700396 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.075039612 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.075995546 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.075238981 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.084099707 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.0753003 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.078245151 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.079587621 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.076447593 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.080842342 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.081611318 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.084498327 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.082207832 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.076114948 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.077061137 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.078642252 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.080595102 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.078509469 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.076112464 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.080661559 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.076295988 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.075688382 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.076781281 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.075383948 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.081502601 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.089091203 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.079778282 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.079500162 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.076634921 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.085718823 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.07744736 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.076516986 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.080790612 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.077377624 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.076791894 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.085655679 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.077633653 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.077470773 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.075829818 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.081319627 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.081627609 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.083277388 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.086998978 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.078015266 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.077497439 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.077170471 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.07797371 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.07816374 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.084299318 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.086413626 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.080649455 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.077721785 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.078030046 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.082502725 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.079232501 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.07956616 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.082792525 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.087844813 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.087743369 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.084112144 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.101266727 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.08924115 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.080062042 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.079201436 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.090339063 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.104354476 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.082874596 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.083336722 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.078436589 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.088621282 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.079300452 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.078714287 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.078797598 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.095030168 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.088482076 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.080206364 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.078970264 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.079466852 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.080276128 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.083606413 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.080776599 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.081927292 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.081151486 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.092295773 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.107788537 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.080262881 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.080804796 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.083791286 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.081648572 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.085532574 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.085381389 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.080229167 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.080036038 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.083131037 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.083187993 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.080820426 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.081757205 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.080981535 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.091291632 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.081426022 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.081311415 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.086513678 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.091495723 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.081256306 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.082485771 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.085104158 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.082524858 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.092072505 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.081785369 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.082494948 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.081893971 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.068298179 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.086777596 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.081865643 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.087396478 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.076342346 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.091471173 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.083700279 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.088470935 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.08854705 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.086161246 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.094657309 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.107382624 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.082888425 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.088262134 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.089766446 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.094700246 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.087865326 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.06842746 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.086992714 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.082045892 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.082354032 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.087046899 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.082726397 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.083731578 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.082870375 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.082865357 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.083436001 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.083634503 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.083926327 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.08622044 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.088036883 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.084313352 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.089346783 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.083897364 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.088482 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.092751536 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.083500848 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.08450809 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.083960132 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.088462916 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.085391749 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.086501117 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.083932116 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.083309755 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.084046054 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.084731123 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.088532201 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.084814245 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.08457341 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.085423762 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.088627332 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.085034554 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.085069519 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.084741795 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.085587026 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.085819219 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.087614498 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.087188751 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.089973584 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.086293948 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.092322565 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.085367717 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.085166627 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.086370199 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.085785898 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.08521622 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.091369504 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.099033921 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.091822377 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.098512015 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.08624329 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.095632631 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.08632206 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.089956211 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.088818169 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.086419183 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.086329677 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.085861352 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.086817492 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.092003099 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.109749039 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.099612665 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.091162377 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.08745974 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.092059877 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.091648558 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.09403286 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.087553322 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.090520985 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.09103497 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.087074711 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.087554388 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.08827747 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.09136239 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.086788085 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.087625114 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.093299902 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.087942482 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.087994134 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.090488482 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.087320043 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.092407452 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.087433241 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.087371799 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.088946695 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.090806839 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.097347742 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.091710824 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.087585403 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.089039601 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.093079547 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.089009225 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.090926254 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.093339591 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.093711122 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.087272636 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.089701685 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.095743387 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.087779128 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.088775367 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.08890774 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.090037493 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.092693401 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.089259848 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.09422898 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.097686227 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.093098312 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.08599687 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.095174789 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.087865106 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.093270796 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.090809115 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.092682928 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.090226342 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.094140405 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.09046318 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.09024108 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.099509857 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.090437249 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.094038068 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.090154133 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.092787558 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.091447942 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.094939393 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.091451554 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.097197116 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.100354541 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.098971787 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.091747081 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.095258505 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.094581438 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.093107154 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.096130173 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.093894053 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.106776861 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.103764603 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.092419401 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.091588692 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.091117569 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.096123178 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.091720858 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.091996595 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.100813234 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.092226012 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.092244461 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.096772652 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.092246085 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.092439162 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.099736746 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.094819579 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.096758586 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.095937827 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.098228424 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.095224457 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.093106912 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.061122037 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.092927673 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.096890146 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.096414624 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.09211937 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.095853298 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.092270239 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.103321879 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.093707448 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.089079213 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.095960596 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.09716822 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.092861687 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.096687542 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.093040456 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.095892787 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.097157577 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.093062358 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.094642756 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.093980056 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.100127442 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.107184959 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.099909328 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.102429781 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.097494735 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.106354483 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.094190859 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.093970006 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.094884306 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.099437373 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.102764951 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.094019042 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.093037502 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.103347192 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.094643816 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.095385545 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.0990243 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.09393772 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.09407435 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.095239484 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.095794002 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.102138217 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.100135378 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.094214 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.096154737 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.094870628 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.094601557 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.099817655 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.099747362 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.098166368 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.095883948 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.0942472 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.095687718 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.09474543 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.096135239 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.096049474 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.094889516 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.094858974 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.105454671 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.095957387 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.096437525 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.100605376 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.09696073 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.107675064 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.096710151 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.096885372 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.096668713 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.096625275 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.098947279 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.096263404 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.096854219 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.096926009 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.096626803 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.09783592 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.110361324 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.106673605 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.099892765 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.100971254 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.097968448 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.100171223 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.109188966 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.122881507 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.09802648 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.101662306 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.10189867 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.106332939 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.102835188 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.106026174 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.103701867 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.107370828 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.101012211 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.097672269 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.102673483 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.113689219 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.098670632 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.097509178 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.097979501 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.104872453 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.100800778 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.098803466 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.098788749 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.102799375 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.099545499 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.111903243 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.09906365 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.099853153 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.098853295 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.097326936 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.099439694 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.098464352 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.102876001 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.1018834 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.099078825 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.099838003 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.102923044 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.1071373 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.098897271 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.104759412 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.111809104 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.099626811 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.100410185 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.101298891 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.099970994 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.104018807 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.100709453 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.099592587 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.102311135 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.099946607 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.100171357 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.10592003 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.11198529 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.103580339 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.099767578 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.10036837 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.106101434 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.100293211 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.10116199 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.104265403 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.111330917 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.106669931 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.114905979 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.113481969 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.101107185 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.102672964 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.110969487 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.110007248 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.1016347 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.099641571 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.100913741 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.105334856 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.105449344 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.104333738 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.102278806 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.102789376 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.109474065 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.102235375 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.101850915 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.102837771 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.101008228 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.105437999 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.106545522 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.109341841 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.098157605 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.101923866 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.101154517 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.106189906 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.105877434 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.107761554 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.102826866 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.10258948 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.107046627 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.106558265 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.107336489 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.103089756 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.102601398 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.106919611 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.102879441 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.102586221 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.102678352 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.102561803 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.10372477 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.109581926 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.110813228 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.103462101 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.107791862 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.103410156 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.108256229 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.10264799 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.102589365 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.103132825 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.100866725 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.10913312 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.100361206 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.100804892 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.101054337 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.100877109 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.107761933 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.104413555 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.106530568 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.100284158 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.100434991 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.101022373 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.106157148 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.112148784 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.102918887 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.104031487 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.107370307 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.105849937 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.103716879 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.098443947 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.099079641 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.098847824 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.099520812 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.105698788 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.101819665 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.104211273 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.09997657 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.103439349 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.099736246 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.10268899 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.098814704 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.09885188 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.105897482 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.109990823 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.108779145 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.09846379 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.10266134 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.100198113 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.103260474 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.109793755 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.098976753 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.098012543 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.09935718 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.101596909 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.099299068 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.107803666 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.108572994 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.100091972 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.093499219 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.101521084 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.11475089 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.099278027 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.106201287 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.127798332 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.095806993 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.094957353 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.096679524 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.094488384 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.094299428 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.096685171 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.094458343 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.103228311 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.094060923 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.092799006 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.102849623 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.09292419 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.09400699 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.094004164 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.08586768 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.102399001 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.094761281 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.102213282 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.09365131 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.093817711 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.093770276 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.096972594 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.093160258 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.092905413 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.093422867 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.097709341 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.094988869 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.09353897 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.104513827 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.093639394 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.097543734 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.110086474 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.104369255 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.093314851 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.092820776 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.094381299 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.099004947 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.096380384 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.090665672 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.097661091 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.100614775 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.097259741 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.100195164 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.095103241 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.094674666 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.096214943 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.091074026 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.090394482 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.105272119 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.104071052 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.091339927 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.091665223 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.100479747 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.091139404 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.100819987 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.099674006 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.094275798 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.096066386 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.092602232 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.091241781 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.091205037 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.091508147 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.097462963 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.099991784 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.092754824 seconds)
  done (took 1249.918731607 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.090481488 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.091264917 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.091361678 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.091528497 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.090807219 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.091842512 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.091740105 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.091525476 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.091857956 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.091255832 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.091424696 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.092296259 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.092637747 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.092259677 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.092820088 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.09250948 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.091695861 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.092720111 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.092986648 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.091663728 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.092995178 seconds)
  done (took 45.945380146 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.093922927 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.092787561 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.092160177 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.092376294 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.091779316 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.092733844 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.093377964 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.091941452 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.0928669 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.092839722 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.093960053 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.092686702 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.092670907 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.09225801 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.094257771 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.092364846 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.092404283 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.092247144 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.092624484 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.093668897 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.092184292 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.09309998 seconds)
  done (took 48.058713972 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.093762311 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.095015366 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.081881386 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.093756419 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.092730155 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.09431826 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.094969303 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.089093452 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.093347004 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.094395547 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.105970186 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.094865062 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.077286884 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.096505775 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.076580076 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.094293423 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.230477746 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.085532702 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.085374012 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.084485385 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.086620624 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.091368079 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.084066159 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.081759634 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.0838309 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.084936002 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.082832112 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.083158465 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.082662075 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.083955534 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.08917447 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.083066972 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.085658209 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.08744572 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.083025665 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.082867365 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.085541418 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.082153326 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.081962063 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.082130613 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.092678501 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.104517451 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.081351099 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.082050416 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.091330836 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.08021707 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.079588675 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.086526761 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.089300741 seconds)
  done (took 104.44856516 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.079781674 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.080427382 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.079956495 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.080519498 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.080642226 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.079123896 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.079267648 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.07921904 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.080208245 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.07928358 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.079117528 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.07889611 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.07922414 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.079909434 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.078713825 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.078587357 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.078994209 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.078311094 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.079325091 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.078084 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.0784971 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.078466749 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.078727239 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.079358216 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.079406449 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.07887598 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.063557126 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.078597872 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.079630078 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.079188859 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.07909316 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.079522268 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.08058194 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.080585747 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.079208239 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.078988024 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.078809623 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.080184712 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.078113729 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.078662308 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.537201253 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.079309874 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.08053084 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.078996565 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.079183769 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.07907207 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.079239068 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.080113057 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.078909673 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.079388985 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.079238205 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.079091807 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.078997644 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.078249046 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.077937627 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.079206066 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.079126183 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.078211156 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.078318124 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.078558473 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.077958227 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.079874258 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.077648376 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.078095089 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.077550966 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.07757958 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.077506031 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.078083892 seconds)
  done (took 143.825888972 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.077534513 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.07799282 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.07898433 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.078431387 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.077561116 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.077412348 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.077134677 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.078305785 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.077414813 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.077822622 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.077130032 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.077653892 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.076281795 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.07778733 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.077181066 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.078500421 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.079024638 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.076695105 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.077540813 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.07908932 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.077229561 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.078215908 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.076862886 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.076451015 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.076499012 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.077466462 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.077469119 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.077463024 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.075460443 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.076611884 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.07735015 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.076128942 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.076161853 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.076652526 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.077541689 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.079848558 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.076893457 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.076064661 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.077244546 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.077191319 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.076199804 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.076026651 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.076803589 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.075817315 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.075879129 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.077021716 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.076197662 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.075824342 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.075874185 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.075392443 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.076702017 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.075621959 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.076117035 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.076339151 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.076076033 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.076223836 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.075439419 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.076616057 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.076755206 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.076428246 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.076862721 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.075657494 seconds)
  done (took 130.774378878 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.075537906 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.076521893 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.07412371 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.075236714 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.075543483 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.074609478 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.076947378 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.075104234 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.075005419 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.075476366 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.074686039 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.075778477 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.076323716 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.075116133 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.075117735 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.076440823 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.076441845 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.075302736 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.074923487 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.075193013 seconds)
  done (took 43.508894153 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.075828936 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.074670584 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.075299955 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.074473828 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.075473474 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.07691727 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.075145596 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.074324514 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.075091084 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.076607665 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.074011788 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.074083585 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.073813377 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.074842937 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.075051869 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.074090375 seconds)
  done (took 35.199569147 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.074091223 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.074558963 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.076436019 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.075675319 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.075250081 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.075356982 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.075753301 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.076368251 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.075399298 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.074846435 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.075013859 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.063107517 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.07610346 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.075512252 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.072448601 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.076475884 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.077191057 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.075936621 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.075154987 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.075689909 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.076477883 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.076547159 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.075888035 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.075659025 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.075849062 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.076099026 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.076563181 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.07601007 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.07624939 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.07592107 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.076376718 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.075889641 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.076332422 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.075757834 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.076860481 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.076673631 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.077384625 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.075907427 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.07586289 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.076284358 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.076285673 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.077960402 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.076725124 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.07664169 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.077604827 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.078124408 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.077120692 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.076669721 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.077216049 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.076479086 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.077255078 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.077527431 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.076997349 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.077698786 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.07760445 seconds)
  done (took 116.179128747 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.077073918 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.077912634 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.076131836 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.077752713 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.079457706 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.076957421 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.076859134 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.07756136 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.077106448 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.080326083 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.077479267 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.077377862 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.078006762 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.07854788 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.077870124 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.076869325 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.078050028 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.078789381 seconds)
  done (took 39.402741624 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.078624978 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.078533877 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.078460459 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.077976512 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.079415055 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.07890376 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.077745118 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.07862995 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.077987418 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.078909235 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.079388848 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.078899864 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.079211193 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.079154544 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.0804121 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.078922362 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.078547345 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.079560834 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.080138506 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.08022159 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.080192142 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.080154567 seconds)
  done (took 47.745300408 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.079221003 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.079583478 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.092998601 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.098566292 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.099480095 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.109806787 seconds)
  done (took 14.56319304 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080206133 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079509519 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.082947105 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080164917 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081001931 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.079986135 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.081308198 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080653212 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081939985 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080333095 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.080959289 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.080961877 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080856116 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08299994 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081997723 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080829715 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081253885 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082628488 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081205842 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082381021 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081544732 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081246231 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082918843 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082788576 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081692047 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.081764196 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.081144055 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084318159 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081930355 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082278731 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.081818528 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081942763 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084753197 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082120838 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081697855 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08182045 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083661646 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084066624 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.081997009 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082856269 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.08212737 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085037012 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082323516 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08236226 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08225008 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0837235 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084646132 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.08207751 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08246183 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08325012 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083262636 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085300962 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084865386 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084138256 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083086829 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084559228 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08562094 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083728432 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082821034 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081647004 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080949471 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084651482 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084433411 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083534054 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082233064 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087622745 seconds)
  done (took 139.451861429 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083279604 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.083015374 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.083204924 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08416 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.08275073 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083560703 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083192308 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084527564 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.083424763 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.08451356 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.084726087 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082277011 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.082792181 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081916782 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084952406 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.080569174 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085599307 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08343437 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084134828 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085347755 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085915949 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.085528394 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085137796 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0852125 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.085008421 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086570823 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084860614 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085108927 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085228701 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.083211086 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086859027 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084411205 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.084715764 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.084205539 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08239558 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085202662 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087031371 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.085029664 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08248443 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088732972 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085694249 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.087826763 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085351528 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086346627 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08715627 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080682965 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.078077489 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.081703898 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.080519404 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081186527 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.078964791 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.079419044 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.081545903 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081868481 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08052576 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.080663095 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080434352 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.079493569 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080854235 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080509502 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.08006983 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.080232489 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081628038 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.079993837 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.080990234 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083106322 seconds)
  done (took 139.509489973 seconds)
done (took 2892.68270727 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.108509617 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.145049903 seconds)
  done (took 16.256754959 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.243594333 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.120751165 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.265433639 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.192966608 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.091628459 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.088230724 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.077437449 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.081283263 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.173986943 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.078616225 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.103747022 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.078045635 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.080622694 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.078873024 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.085386493 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.080291683 seconds)
  done (took 55.921776212 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.08293853 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.081060179 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.08481735 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.075308983 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.092826969 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.153321761 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.101781483 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.082948515 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.092994746 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.110927436 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.099970288 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.086049694 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.086769239 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.086082848 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.171976241 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.123993462 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.137444918 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.151388983 seconds)
  done (took 39.897978864 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.159224389 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.087552476 seconds)
  done (took 11.249865053 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.107536568 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.078517283 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.101621885 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.079152491 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.078542984 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.107149165 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.079505514 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.080093604 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.090909167 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.099309276 seconds)
  done (took 72.938335738 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.080699173 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.081280479 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.384928432 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.085658683 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.085526522 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.102651564 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.078813243 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.110737237 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.080365968 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.075858085 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.086617768 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.388596722 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.09094247 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.080207123 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.428641751 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.089372507 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.083375928 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.111503119 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.107251928 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.082840235 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.085745325 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.086927935 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.242712289 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.77502806 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.084546609 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.082660486 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.086644146 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.078130445 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.077180569 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.08079956 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.081830807 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.079608662 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.086367236 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.082776983 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.085406314 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.083440661 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.576959373 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.099180084 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.090997659 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.160569325 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.123364191 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.085795861 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.907373993 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.081316866 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.078214283 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.086504895 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.76158781 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.212747063 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.080458959 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.324087245 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.439038434 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.09406918 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.254599651 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.239874795 seconds)
  done (took 144.592280596 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.078959708 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.315215871 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.23145715 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.078973959 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.335593629 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.287183149 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.080931621 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.1239636 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.083072641 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.280415945 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.329041853 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.180899826 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.080380274 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.077256359 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.08236954 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.076102899 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.225836533 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.14649901 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.08370711 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.080025068 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.105345483 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.277636852 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.19945807 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.084100839 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.104949622 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.287206488 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.198529752 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.182708614 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.853771775 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.079306597 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.140995019 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.08216676 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.0799289 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.081576749 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.231948409 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.174317715 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.165010426 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.08314481 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.080166055 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.080413867 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.756225198 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.279847837 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.174249255 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.188598543 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.329367325 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.293396079 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.692155472 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.080841533 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.706120562 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.244369678 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.283312214 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.286959554 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.19700674 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.08230686 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.37158519 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.080774712 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.08196748 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.302222765 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.300511468 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.179917021 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.082700665 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.082286756 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.080299479 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.318406361 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.084912916 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.17268399 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.084198086 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.082054673 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.17661266 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.179663166 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.30401272 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.301686164 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.11116586 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.417982661 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.581628661 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.284800393 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.143860181 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.300293146 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.083387208 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.080588492 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.16147798 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.919344316 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.333512445 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.322672975 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.281481914 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.111432668 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.734217087 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.082418054 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.269888152 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.27199632 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.312326357 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.332037806 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.31827547 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.442776124 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.085126127 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.083944059 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.387715718 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.197214213 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.034056079 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.434348671 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.311250173 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.618799202 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.110190116 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.368252545 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209524677 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.08420521 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.732170259 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.084471472 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.288079817 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.12277577 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.086289829 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.08707125 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.273927227 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.988317896 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087597453 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.792739371 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.145437326 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.089625849 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.288217829 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.08419048 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.328948121 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.087429879 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.319892744 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.693510867 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.114598163 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.258817183 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.333122261 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.720127607 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.368534929 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.327668936 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.197722045 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.306058995 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.900665623 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.084292604 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.346619491 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.086670141 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.086272337 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.259891264 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.08765079 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.226926197 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.086661906 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.350600762 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.107729318 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.314841174 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.088207853 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.323100217 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.118039687 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.138047526 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.092352357 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.21084638 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.087290173 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.036408376 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.244292208 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.090146964 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.086541904 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.67885583 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.086363165 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.239594044 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.314092002 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.108686839 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.155804198 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.653768434 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.085765486 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.170453759 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.109077814 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.364131327 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.088431093 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.335816166 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.067440196 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.563461349 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.089623919 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.321552009 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.271408786 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.091949613 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.087908525 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.932291405 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.088833386 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.088789892 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.24415306 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.499490493 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.992505525 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.286187483 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.091874127 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.215910227 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.09477971 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.16657787 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.429574243 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.087174986 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.088685931 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.087311016 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.089735575 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.08949461 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.299202051 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.113891325 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.522158263 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.225019774 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.345088732 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.394009795 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.289333299 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.127923269 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.096730237 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.310864945 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.090801172 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.149920225 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.09165898 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.108599719 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.323113473 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.091286859 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.294210577 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.324206384 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.980314258 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.140690158 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.094100481 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.09087709 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.020654373 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.233209748 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.176312138 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.091459427 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.092331697 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.203037488 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.21103317 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.2726295 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.909069491 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.235303388 seconds)
  done (took 948.590485973 seconds)
done (took 1291.454707976 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.09200179 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.092382596 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.094608242 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.090305239 seconds)
  done (took 30.38075999 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.092964889 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.093518309 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.094973181 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.094993459 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.093321285 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.093278074 seconds)
  done (took 14.575507185 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.092592417 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.092589826 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.094168891 seconds)
  done (took 23.292136066 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.517394783 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.498697482 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.170122529 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.237419849 seconds)
  done (took 11.437828557 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.097692588 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.094352796 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.095756885 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.095269016 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.092898958 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.094948414 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.096752581 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.096865814 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.093530036 seconds)
  done (took 20.878852926 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.217904703 seconds)
done (took 106.79833366 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.233957119 seconds)
    (2/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.195631982 seconds)
    (3/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.296660801 seconds)
    (4/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.471629018 seconds)
    (5/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.10389165 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.222355829 seconds)
    (7/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.093225246 seconds)
    (8/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.298991278 seconds)
    (9/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.386915836 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.409593235 seconds)
    (11/341) benchmarking ("sort", Float64, false)...
    done (took 5.820841401 seconds)
    (12/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.108895772 seconds)
    (13/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.498521767 seconds)
    (14/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.173184253 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.094172408 seconds)
    (16/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.109093585 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.107917077 seconds)
    (18/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.220946319 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.224274595 seconds)
    (20/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.109772651 seconds)
    (21/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.31623512 seconds)
    (22/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.172997578 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.112883637 seconds)
    (24/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.104966061 seconds)
    (25/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.094594435 seconds)
    (26/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.316894013 seconds)
    (27/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.108575134 seconds)
    (28/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.291552704 seconds)
    (29/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.179760046 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.324160998 seconds)
    (31/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.109275573 seconds)
    (32/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.190870204 seconds)
    (33/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.234227584 seconds)
    (34/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.495685914 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.047579615 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.343426749 seconds)
    (37/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.410927981 seconds)
    (38/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.184944679 seconds)
    (39/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.327484263 seconds)
    (40/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.110592133 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.22264702 seconds)
    (42/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.11279048 seconds)
    (43/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.34110926 seconds)
    (44/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.492197766 seconds)
    (45/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.246438713 seconds)
    (46/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.798118722 seconds)
    (47/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.226576443 seconds)
    (48/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.095441364 seconds)
    (49/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.626400286 seconds)
    (50/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.175170571 seconds)
    (51/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.952179173 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.520356804 seconds)
    (53/341) benchmarking ("sort", BigInt, false)...
    done (took 7.097886075 seconds)
    (54/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.288224887 seconds)
    (55/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.098336811 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 4.203543043 seconds)
    (57/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.230191101 seconds)
    (58/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.342185226 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.330396181 seconds)
    (60/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.829537298 seconds)
    (61/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.260812249 seconds)
    (62/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.491118502 seconds)
    (63/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.349478372 seconds)
    (64/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.506476648 seconds)
    (65/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.446682076 seconds)
    (66/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.100526021 seconds)
    (67/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.159641648 seconds)
    (68/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.774526892 seconds)
    (69/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.208033202 seconds)
    (70/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.857186326 seconds)
    (71/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.309624076 seconds)
    (72/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.8732541 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.177778024 seconds)
    (74/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.80752965 seconds)
    (75/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.369925792 seconds)
    (76/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.379647465 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.108265057 seconds)
    (78/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.097470565 seconds)
    (79/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.248708833 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.112548263 seconds)
    (81/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.097465555 seconds)
    (82/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.531785782 seconds)
    (83/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.111862982 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.101766579 seconds)
    (85/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.112529337 seconds)
    (86/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.238489812 seconds)
    (87/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.46082719 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.222965302 seconds)
    (89/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.177134355 seconds)
    (90/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.217100697 seconds)
    (91/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.362657673 seconds)
    (92/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.161608869 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.430602126 seconds)
    (94/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.833347247 seconds)
    (95/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.786257 seconds)
    (96/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.241482805 seconds)
    (97/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.101421142 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.08556207 seconds)
    (99/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.211982001 seconds)
    (100/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.098504813 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.884777389 seconds)
    (102/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.186169725 seconds)
    (103/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.140386971 seconds)
    (104/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.526934638 seconds)
    (105/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.185005676 seconds)
    (106/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.253016448 seconds)
    (107/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.207539966 seconds)
    (108/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.10978789 seconds)
    (109/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.419764375 seconds)
    (110/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.309454479 seconds)
    (111/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.204124604 seconds)
    (112/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.100089669 seconds)
    (113/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 4.221582406 seconds)
    (114/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.82624822 seconds)
    (115/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.877635852 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.127580311 seconds)
    (117/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.213695231 seconds)
    (118/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.102170504 seconds)
    (119/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.103963062 seconds)
    (120/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.384373532 seconds)
    (121/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.11061015 seconds)
    (122/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.286350876 seconds)
    (123/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.413479527 seconds)
    (124/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.321224893 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.488848941 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.130513018 seconds)
    (127/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.25824496 seconds)
    (128/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.505636227 seconds)
    (129/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.013468633 seconds)
    (130/341) benchmarking ("sort", Float32, false)...
    done (took 5.787923583 seconds)
    (131/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.116078946 seconds)
    (132/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.11881695 seconds)
    (133/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.103599965 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.406745218 seconds)
    (135/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.373798026 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.454686338 seconds)
    (137/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.48861527 seconds)
    (138/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.795036934 seconds)
    (139/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.064024712 seconds)
    (140/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.229805516 seconds)
    (141/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.230360529 seconds)
    (142/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.409853896 seconds)
    (143/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.982782893 seconds)
    (144/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.129785794 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.109549006 seconds)
    (146/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.111178682 seconds)
    (147/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.45269198 seconds)
    (148/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.260033414 seconds)
    (149/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.109662347 seconds)
    (150/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.485509414 seconds)
    (151/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.198336075 seconds)
    (152/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.197656301 seconds)
    (153/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.241066094 seconds)
    (154/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.126346534 seconds)
    (155/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.143139019 seconds)
    (156/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.445607378 seconds)
    (157/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.102482967 seconds)
    (158/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.302501419 seconds)
    (159/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.205549615 seconds)
    (160/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.238486731 seconds)
    (161/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.701949174 seconds)
    (162/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.518127908 seconds)
    (163/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.900552081 seconds)
    (164/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.120097121 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.34987922 seconds)
    (166/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.963998021 seconds)
    (167/341) benchmarking ("sort", Bool, false)...
    done (took 2.332586453 seconds)
    (168/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.381404965 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.433202912 seconds)
    (170/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.037967619 seconds)
    (171/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.86791512 seconds)
    (172/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.285629927 seconds)
    (173/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.343337435 seconds)
    (174/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.106277454 seconds)
    (175/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.125208878 seconds)
    (176/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.118947906 seconds)
    (177/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.392088058 seconds)
    (178/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.11143419 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 5.827055091 seconds)
    (180/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.49248417 seconds)
    (181/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.107146558 seconds)
    (182/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.127300486 seconds)
    (183/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.73931847 seconds)
    (184/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.990928818 seconds)
    (185/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.890130694 seconds)
    (186/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.5223207 seconds)
    (187/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.314270629 seconds)
    (188/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.243220743 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.425970024 seconds)
    (190/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.109353135 seconds)
    (191/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.286417123 seconds)
    (192/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.397126085 seconds)
    (193/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.124368142 seconds)
    (194/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.20490586 seconds)
    (195/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.131627301 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.206035228 seconds)
    (197/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.554183527 seconds)
    (198/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.110007828 seconds)
    (199/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.228560267 seconds)
    (200/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.267270627 seconds)
    (201/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.116829732 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.109648567 seconds)
    (203/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.106641391 seconds)
    (204/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.523390406 seconds)
    (205/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.371205274 seconds)
    (206/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.839569793 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.104663393 seconds)
    (208/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.375083456 seconds)
    (209/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.428035997 seconds)
    (210/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.13314824 seconds)
    (211/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.241060431 seconds)
    (212/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.109129019 seconds)
    (213/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 3.996600986 seconds)
    (214/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.235722218 seconds)
    (215/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.123462045 seconds)
    (216/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.107238145 seconds)
    (217/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 4.209752429 seconds)
    (218/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.219708484 seconds)
    (219/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.370664128 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.264355389 seconds)
    (221/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.153758293 seconds)
    (222/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.110383547 seconds)
    (223/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.238633984 seconds)
    (224/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.866425272 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.028172664 seconds)
    (226/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.329555671 seconds)
    (227/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.269934305 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.12344436 seconds)
    (229/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.909817776 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.596494872 seconds)
    (231/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.991392126 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.438924136 seconds)
    (233/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.844690839 seconds)
    (234/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 4.078139441 seconds)
    (235/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.298350822 seconds)
    (236/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.648560753 seconds)
    (237/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.34040653 seconds)
    (238/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.131088892 seconds)
    (239/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.371443082 seconds)
    (240/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.63046776 seconds)
    (241/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.759442915 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.426435487 seconds)
    (243/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.125295636 seconds)
    (244/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.139001942 seconds)
    (245/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.136292734 seconds)
    (246/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.246493112 seconds)
    (247/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.42693523 seconds)
    (248/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.132355496 seconds)
    (249/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.15146335 seconds)
    (250/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.21464771 seconds)
    (251/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.208884317 seconds)
    (252/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.384874061 seconds)
    (253/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.076558825 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.560212823 seconds)
    (255/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.212036797 seconds)
    (256/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.225612881 seconds)
    (257/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.215845376 seconds)
    (258/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.892550752 seconds)
    (259/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.673266288 seconds)
    (260/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.368965129 seconds)
    (261/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.905472339 seconds)
    (262/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.13704675 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.209538439 seconds)
    (264/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.866510066 seconds)
    (265/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.280877648 seconds)
    (266/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 8.624980904 seconds)
    (267/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.006003052 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.654416362 seconds)
    (269/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.24457331 seconds)
    (270/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.923414351 seconds)
    (271/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.320564378 seconds)
    (272/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.136888965 seconds)
    (273/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.158302284 seconds)
    (274/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.151323065 seconds)
    (275/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.610498144 seconds)
    (276/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.24952973 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.57355669 seconds)
    (278/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.599437813 seconds)
    (279/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.142995869 seconds)
    (280/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.139019986 seconds)
    (281/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.127470168 seconds)
    (282/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.129202916 seconds)
    (283/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.872865412 seconds)
    (284/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.303404949 seconds)
    (285/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.530917938 seconds)
    (286/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.267775167 seconds)
    (287/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.251848948 seconds)
    (288/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.043616442 seconds)
    (289/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.463227724 seconds)
    (290/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.136917902 seconds)
    (291/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.081485121 seconds)
    (292/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.233178947 seconds)
    (293/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.46356556 seconds)
    (294/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.152933285 seconds)
    (295/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.345015266 seconds)
    (296/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.149023703 seconds)
    (297/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.561831488 seconds)
    (298/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.411190602 seconds)
    (299/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.129050116 seconds)
    (300/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.486714009 seconds)
    (301/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.135624522 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.267968904 seconds)
    (303/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.425366306 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.128334852 seconds)
    (305/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.19358382 seconds)
    (306/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.230215596 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.38834815 seconds)
    (308/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.6173925 seconds)
    (309/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.219124352 seconds)
    (310/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.129892848 seconds)
    (311/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.243562004 seconds)
    (312/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.128321183 seconds)
    (313/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.454348437 seconds)
    (314/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.220979037 seconds)
    (315/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.047272507 seconds)
    (316/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.483445079 seconds)
    (317/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.26861925 seconds)
    (318/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.437430241 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.95548583 seconds)
    (320/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.262195715 seconds)
    (321/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.463730811 seconds)
    (322/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.574954364 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.13653744 seconds)
    (324/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.24513955 seconds)
    (325/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.141713233 seconds)
    (326/341) benchmarking ("sort", Int8, false)...
    done (took 5.079486735 seconds)
    (327/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.430286733 seconds)
    (328/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.129865951 seconds)
    (329/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.41053533 seconds)
    (330/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.349612925 seconds)
    (331/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.445346944 seconds)
    (332/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.347078943 seconds)
    (333/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.327073 seconds)
    (334/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.424395023 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.369320812 seconds)
    (336/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.267089745 seconds)
    (337/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.587918359 seconds)
    (338/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.333454879 seconds)
    (339/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.363200099 seconds)
    (340/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.135008853 seconds)
    (341/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 4.11868021 seconds)
  done (took 1177.968203493 seconds)
done (took 1180.075163773 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.156548751 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.133880852 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.648129497 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.142205377 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.141030193 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.136656039 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.659270816 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.165622179 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.152372909 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.659489396 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.144310939 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.132878914 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.1492551 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.168796758 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.146986174 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.148912226 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.138822147 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.164352571 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.167429466 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.140770857 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.185639388 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.142740764 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.13310916 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.187129618 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.134480989 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.149064563 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.153652889 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.186395898 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.184572602 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.136900358 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.139399135 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.502155283 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.189475824 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.139810914 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.147018623 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.149278893 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.141262947 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.151359332 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.153438887 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.1500844 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.137898148 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.140843714 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.140346605 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.138244815 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.134951593 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.138599412 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.137802183 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.260210572 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.148911082 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.480892699 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.202815704 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.153636326 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.181894803 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.138379689 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.13717425 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.139134202 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.18707736 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.141597341 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.126769645 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.482866055 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.234854905 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.150067364 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.482600277 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.210445282 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.145509835 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.145727592 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.136071091 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.153918273 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.501639733 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.706678375 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.168514008 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.156528228 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.138649817 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.139213349 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.149167782 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.659912299 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.15618236 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.728775184 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.165387408 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.151082014 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.14334066 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.141912763 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.139285027 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.154231838 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.154980767 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.139448115 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.142312845 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.143476663 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.150243808 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.501435355 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.192831662 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.651195012 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.145669548 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.158995432 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.16097655 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.72743915 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.169176418 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.156553639 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.142451242 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.504610468 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.184870845 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.159013779 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.140270466 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.153060564 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.255078521 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.156830303 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.158739604 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.140516759 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.163136502 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.146578346 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.13930531 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.152993326 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.163290317 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.172607943 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.157438393 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.138314261 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.148864907 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.149896775 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.159702622 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.149081105 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.1445347 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.152239514 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.144994481 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.190281682 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.158031876 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.154413135 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.259020154 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.14405103 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.264814365 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.155190765 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.148044414 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.148483896 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.487296696 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.188634307 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.164200285 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.157494664 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.160768697 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.163549891 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.160446259 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.142714918 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.160376207 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.146525749 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.193314797 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.142296805 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.166552361 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.20249201 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.155559476 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.146767179 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.159966481 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.177887103 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.16319453 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.14611234 seconds)
done (took 336.90693065 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.188513699 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.141103415 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.21966249 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.141854478 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.212201932 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.204011501 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.14306335 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.147478557 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.141802204 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.524165538 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.144103097 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.155594482 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.138233931 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.142173096 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.19334006 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.144054916 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.142312349 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.375010217 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.148444191 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.201690619 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.143262096 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.145812005 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.143923496 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.531863798 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.142332787 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.1428207 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.201674931 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.14508487 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.385180136 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.144231055 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.145986689 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.387398442 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.204839157 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.158140352 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.156331394 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.152652837 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.222009738 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.153009971 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.190492392 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.198699781 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.220312518 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.164619054 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.145628078 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.147060153 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.1460302 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.145720528 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.144977822 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.178368545 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.146274996 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.150817306 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.377306729 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.154347449 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.151027429 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.144923417 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.143732845 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.162961731 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.144945857 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.146915794 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.203887543 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.147247747 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.192545586 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.532947119 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.528559731 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.145013215 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.145036818 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.145105938 seconds)
  done (took 202.058832213 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.213970297 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.239999196 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.215201639 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.15115168 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.20745379 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.212275118 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.149388267 seconds)
  done (took 17.451247023 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.157606077 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.146851411 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.171823652 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.1711915 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.149316109 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.298437793 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.162402312 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.152979277 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.171998373 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.14771163 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.48915286 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.17014029 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.155912858 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.147169706 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.160269419 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.178235178 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.155915621 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.148058852 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.24600984 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.227948606 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.15690147 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.163750014 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.177695936 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.160601936 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.1502166 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.149886157 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.150730597 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.154722629 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.149415499 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.14833404 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.156396377 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.163488356 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.150195833 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.149559175 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.150142468 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.149049165 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.150416481 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.149690475 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.150011516 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.146855301 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.149381188 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.148523457 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.149478016 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.149918256 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.15044517 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.173752079 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.149278787 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.150201485 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.149218055 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.149713391 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.178374763 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.150415221 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.149568407 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.155517112 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.191379074 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.158428551 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.139354348 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.147981956 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.152143641 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.15256633 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.15115233 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.230267217 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.174760246 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.150834268 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.173655853 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.187263571 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.150472685 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.151039472 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.151287337 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.175447203 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.149882044 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.172784411 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.150448828 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.256890052 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.151242966 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.294415021 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.175199792 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.154214444 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.155472516 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.151941948 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.158475865 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.151076521 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.15405704 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.158456238 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.158011753 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.151986831 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.151424817 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.153835516 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.159398105 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.151693349 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.195682457 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.153817859 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.155530999 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.250525015 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.152610145 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.252937546 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.178274112 seconds)
  done (took 232.443580522 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.156860249 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.154281119 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.166395765 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.152833944 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.153440584 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.157697458 seconds)
  done (took 15.00891008 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.155273019 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.157024878 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.151794296 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.152176819 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.153486914 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.15361556 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.152081757 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.155463453 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.159395846 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.153925024 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.154141218 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.1524233 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.154557243 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.154479125 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.15449365 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.151531294 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.153964963 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.153170797 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.153217557 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.152494675 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.397997564 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.152344597 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.154324539 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.161137565 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.159807017 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.153129435 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.160899511 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.153799927 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.154192634 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.160305186 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.158538119 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.154276492 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.161458821 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.16029585 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.159821371 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.16261973 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.160233892 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.155500288 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.154818034 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.15522356 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.1528358 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.154721967 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.124462347 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.15178542 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.156531762 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.164908513 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.159578772 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.164014051 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.155472211 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.155914325 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.156171793 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.153869853 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.155508872 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.155412764 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.16195191 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.162431826 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.161315268 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.157168292 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.156253312 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.163430592 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.159454603 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.157753211 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.160022588 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.160886628 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.162915211 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.157525539 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.162002121 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.160620106 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.156745612 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.155638449 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.156392957 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.15608354 seconds)
  done (took 158.56935931 seconds)
done (took 627.591946919 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.255613058 seconds)
  done (took 9.325628537 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.192317845 seconds)
  done (took 9.367194933 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.745814073 seconds)
  done (took 12.823531064 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.174924715 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.206003902 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.1717031 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.158609021 seconds)
  done (took 30.795076637 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.448508978 seconds)
  done (took 9.522161715 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.173698024 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.153688135 seconds)
  done (took 16.466321946 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.191315122 seconds)
  done (took 9.264524466 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.173565478 seconds)
  done (took 9.269879176 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.174929446 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.178908387 seconds)
  done (took 16.443790282 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.160401878 seconds)
  done (took 9.232770299 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.938175546 seconds)
  done (took 10.089931489 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.165157384 seconds)
  done (took 9.256241159 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.177112354 seconds)
  done (took 9.249514853 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.212910303 seconds)
  done (took 10.285881555 seconds)
done (took 173.466215378 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.165390125 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.155042496 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.154477803 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.153937974 seconds)
  done (took 30.700729112 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.193204449 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.194307678 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.201440002 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.19221739 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.182726883 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.183641364 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.192697618 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.193498758 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.183686763 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.191303815 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.194462135 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.19072692 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.19250568 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.202232517 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.200942517 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.190483049 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.193412005 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.193559052 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.183288115 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.203210329 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.19358975 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.192153967 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.159395704 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.161173915 seconds)
  done (took 54.633831568 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.349368589 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.223993012 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.313291518 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.204397599 seconds)
  done (took 11.164595099 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.157888856 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.223127576 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.210811556 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.205401217 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.20921074 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.263081204 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.211513093 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.29431617 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.287806792 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.288483501 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.166975987 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.180402833 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.183454714 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.206546659 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.262592285 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.159003214 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.160210662 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.278318362 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.222938089 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.414662444 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.160514633 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.214175906 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.21055967 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.212967116 seconds)
  done (took 55.459200904 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.161263365 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.168921167 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.168343077 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.160411022 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.161516868 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.161763035 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.16825051 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.164154936 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.183336485 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.164367863 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.161977479 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.162386058 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.167551922 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.160927226 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.162051198 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.175080294 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.177165032 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.163656059 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.166258452 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.169807386 seconds)
  done (took 45.405503546 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.160087154 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.007054036 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.507973473 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.41067361 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.161521411 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.157816647 seconds)
  done (took 33.481098554 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.173360286 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.177664765 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.167123191 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.185229632 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.208381352 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.168662087 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.222511156 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.320843941 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.164978636 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.220321137 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.180525186 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.168979658 seconds)
  done (took 28.43633114 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.164430765 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.161399031 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.161512008 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.173531961 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.173786955 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.168749663 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.169234193 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.159513363 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.173427075 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.179779438 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.168688899 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.173980938 seconds)
  done (took 48.106337871 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.377105966 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.390157811 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374034813 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.765941534 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.476556179 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14738027 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.447800151 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.377831008 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.904390885 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.872058918 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.45390356 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.146375935 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.107109963 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.087070401 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.083769612 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.406609624 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164903323 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.020980403 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.415465114 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.208288802 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164071811 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.164042608 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164745815 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.44688657 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.489642012 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167904402 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.376439711 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.179960331 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.162441478 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.429302848 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.772870628 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.219556328 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.366602404 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.42459832 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.507425531 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.318204503 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.164946327 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.344408193 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.20841374 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.198286586 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.173801498 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.175743692 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.708884968 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.177921116 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.437565781 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.167093877 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.26268231 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.188217267 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.089746111 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.507651187 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28016798 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.164198453 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.199296042 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.599020248 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28437441 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.408200511 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171066935 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.336839349 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221519367 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.453605495 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.373690917 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.166725818 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.379057225 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.092162993 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.549618551 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.290552268 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.167911909 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.170048628 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.866781188 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.409336195 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.246922291 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.525030647 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.932743822 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.167400656 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.169668702 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.214257994 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.264398116 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.163602124 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.462655369 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.164109072 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.092653079 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.270543964 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.5711536 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17363069 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.168162491 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.174740072 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.015543819 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.093914754 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.264221006 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.448373172 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.491444068 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.16756538 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.167877284 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.189256755 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.170609662 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115489374 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.735951291 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.23412113 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.096722889 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.733617438 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.77391503 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.135148059 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.655486556 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.211289708 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452405272 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.326849474 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.573494594 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.376483667 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.413075912 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.705600389 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.172019071 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.729567985 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.250530981 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24457547 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167790471 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.73342109 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.349362027 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.489573586 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.285671302 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.169009785 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.096439617 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.180686815 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.372450388 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.786203813 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222123357 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.165863296 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.173540098 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.168082276 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.172767552 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.277731483 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.184580096 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.467169594 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.248504255 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.16980295 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.106892114 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.172810983 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.454801976 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.859883115 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224820684 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.423115174 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.441855102 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.871348756 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.768587014 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.118120095 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.43397523 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.245343793 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.243899067 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.742952047 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.306321451 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.266859186 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.169032282 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293831206 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.175360924 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.174681224 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.585053798 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.583161501 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.600659604 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.214782906 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.171284611 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.123448237 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.339158241 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.41334334 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.233821152 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.196544913 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.177458677 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.256362084 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400364722 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.172714891 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.099016397 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.418481351 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416372548 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.462164455 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.589198647 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.232085929 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.243343985 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.181437775 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.385315248 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.253386619 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.829920346 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.717202239 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386425188 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.746101681 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.138333573 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.821997566 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.471527787 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.557630768 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.194145581 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.626331475 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.343262839 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.865156836 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.203636055 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.704597871 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.103797696 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181647609 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.513726624 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.13499348 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.492471116 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.266809965 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192352968 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.178723653 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.178395952 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18351828 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.092596363 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.281979589 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246125611 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250394511 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103742591 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.841084551 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.213474021 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.179410145 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.176677805 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.537353506 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.995124799 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130451794 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.177098759 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254479223 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.259196767 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.729153107 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.179880099 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.180983924 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.782392274 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.181342242 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.768854696 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.295422542 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.944564861 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.20419238 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.473936738 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.881732158 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.460398848 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.253843677 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252286427 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.178564702 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180462024 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.879814391 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.188065431 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.881609201 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.466159092 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.459609122 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.624802731 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.239037157 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.391008796 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.193742875 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.18132418 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.677684042 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.203921063 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183573991 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.382963436 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.698404658 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.543068667 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.824519554 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.265591355 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.179257252 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.444213416 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.189078892 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.78501944 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.869150962 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.184905918 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.179515605 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.428601452 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.864146058 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.182728464 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097179005 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185758443 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.393203645 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.382947149 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.453643186 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.475344443 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.632697603 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1068087 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18559842 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.210489808 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.425222791 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.181492871 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.217723461 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.627848995 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.248669029 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.607581198 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.468812743 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.607984454 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.818002267 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.444249033 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.248369471 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.193693042 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.835226046 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.310215979 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.116015898 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.299848413 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.108319291 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.875612292 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.472590249 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.200690068 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.447540053 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163156802 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.517395398 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.483299642 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.480780415 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.229920095 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.209568675 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.183228091 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.220343386 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.181805229 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.369908027 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.299454275 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.190646338 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.725209075 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223347006 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.230545627 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.187987739 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.68887926 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204937846 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184227807 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.881880421 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.206755207 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304349434 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257386338 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.937125646 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.816690401 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.210150794 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.139689401 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.838066463 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.450416207 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.243585683 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.653424643 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226458828 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.58919389 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.184760459 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.39907306 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.192533645 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.780168679 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.22931046 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.455085166 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143085997 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.394954675 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.386503066 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.212883778 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.189115053 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.112700488 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.287906204 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.08759886 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.164679914 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.189844242 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.869049937 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.613338883 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.400161916 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.650429221 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.008917962 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.18919611 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.513667638 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.578215883 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.828657625 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216070131 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189504969 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.532890774 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.319575915 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.521946886 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.484305082 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195794069 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.214335674 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.400634125 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314727124 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.107906442 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.677986471 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.768793164 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.888178405 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.198978306 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.391618196 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.537881246 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.477681278 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222121016 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266282365 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.591972801 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.452583151 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.260621663 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.114303776 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.188130225 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.585631826 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.590292887 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.284891488 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.429440136 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.501070191 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.842064688 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.801733794 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.640685387 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.594078426 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.604392759 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.589289369 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39944835 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.555592288 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.519572711 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.783791488 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.602175211 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.402512753 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.286906814 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.464331803 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.060705749 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.897380513 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.435431534 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.196706935 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.121942029 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.398963737 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.200321695 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.638604291 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768455319 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.440988844 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.473745753 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660305939 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.732694977 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.378547766 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.212986069 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.15959403 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.215838275 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.211729346 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.192565667 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.685936162 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.482861785 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206492059 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135805967 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.860532148 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.121281408 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.406540404 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.383977463 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.226135439 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.750019827 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.47861962 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.29054448 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.478056729 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.425219931 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.225304838 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119341235 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937097772 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.13732795 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.260119687 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.616580175 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205996415 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.195110424 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397107482 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.12150281 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.238378966 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.197468255 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405181168 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.780356671 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.458664096 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.321737608 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.434627319 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.49500686 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.045760277 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.214475652 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.467641144 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.120301325 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.833180667 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889879304 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.233198237 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263805926 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192794224 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195838787 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46361211 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.534962735 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.291265498 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.913824826 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.222711964 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.217258014 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.544252023 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.280798035 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.196063915 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.197991995 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.695700031 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.424427051 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.195316936 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.164390966 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.406076133 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278159956 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.391430284 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.267130712 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.71040767 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.199682607 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.051080404 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28905719 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.151021296 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192704324 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.883758726 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.253514212 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.192613561 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.462022507 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.831004844 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.399818875 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.591950264 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.108864518 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.388461144 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237114892 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.199686942 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.199596895 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.584368517 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.500872208 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.195457926 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.465425968 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.242360364 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.202200747 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.858944658 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.162920863 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.197221137 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.873306258 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.097983055 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.924917814 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595399588 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.244403919 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184597858 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202825308 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.125521836 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.197862087 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.366918231 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.181038245 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.197276063 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.56316325 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.533960147 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.28221077 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202519177 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.199860386 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.206740285 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.411866969 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.710637484 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213948384 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.900037426 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.400915839 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.207217144 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.691696 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.638257433 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.45994673 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.225516912 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.388082551 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447898811 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.739595173 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.38783642 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.181428136 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.42189406 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.201145601 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471795781 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.473193757 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.184327808 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.411770237 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.80894286 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.485908191 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.554178567 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.507138924 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.264838707 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.392093712 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.112790639 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.201976754 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.203353097 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.46366197 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254171928 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.199787392 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208380262 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.757224987 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.882922134 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.66818593 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355633562 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.534573498 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.031298314 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.954976301 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.20168059 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.127796427 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.198497179 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.22216309 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.203473576 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.126006046 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.938199424 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.959495884 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.41325885 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.512348966 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.126830882 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.40433958 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.799605509 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.125859357 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.168585185 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.214017929 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.444944753 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.129882297 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.202894345 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.156028318 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.487756773 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.932235097 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.468914955 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.200996127 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146052802 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.202912083 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.205741592 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.200929771 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.285289305 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.201528907 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.318642996 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.464264945 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.600668711 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.304826415 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.842630449 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.874739943 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.137203199 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24158416 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.762420305 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.772562826 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.492995495 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.327904146 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.937463071 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.132287459 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.207951045 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21962102 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.465016011 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.205358876 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.206607546 seconds)
  done (took 2271.387365424 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.268326096 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.256340576 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.241704806 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.261503689 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.299863308 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.282149597 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.25066987 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.326637232 seconds)
  done (took 60.302756219 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.2036042 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.161988206 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.207733137 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.202523988 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.199928689 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.204582447 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.395327542 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.232403385 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.203432131 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.206402714 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.205092821 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.207398118 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.204692469 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.200997511 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.206854422 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.504855243 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.224922586 seconds)
  done (took 82.097477623 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.239551541 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.029275968 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.20655163 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.893784921 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.259593217 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.546728265 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.210719201 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.208735865 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.321367915 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.503654215 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.25179248 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.221119375 seconds)
  done (took 94.036879499 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.205371869 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.206201961 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.208744787 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.170905827 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.20773421 seconds)
  done (took 13.118367438 seconds)
done (took 2830.465040838 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.45427377 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.300351466 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.278620203 seconds)
  done (took 6.698028183 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.350548488 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.398643378 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.512850774 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.535175385 seconds)
  done (took 11.922270036 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.498146366 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.574016842 seconds)
  done (took 7.190417805 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.57713164 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.213306424 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.594013058 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.209513629 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.207324297 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.208279669 seconds)
  done (took 23.745667744 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.20894005 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.207189932 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.206537178 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.208019966 seconds)
  done (took 10.952089639 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.206386858 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.983839201 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.202491689 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.211842175 seconds)
  done (took 22.723667838 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.347174858 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.237489481 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.971052129 seconds)
  done (took 10.67608251 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.832795732 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.756395688 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.816219021 seconds)
  done (took 10.526854494 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.388610854 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.192017543 seconds)
  done (took 8.700946532 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.350957101 seconds)
  done (took 4.470605679 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.041617083 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.522879298 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.677749413 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.721293421 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.783416616 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.422761849 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.527290379 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.476180701 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.604450597 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.644024605 seconds)
  done (took 28.544239373 seconds)
done (took 163.110305757 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.646448732 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.231967073 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.423742176 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.586400501 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.446497768 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.41890507 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.503205236 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.57819301 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.258669319 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.246065669 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.585358835 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.445487001 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.455085182 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.237156116 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.462083024 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.234641404 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.444217896 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.668489668 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.272638406 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.491423801 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.517023049 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.230728874 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.425745268 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.249690573 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.444586253 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.371773299 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.842760756 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.234665771 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.42901545 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.853279253 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.369759426 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.634920187 seconds)
  done (took 180.362822631 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.096968913 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.211047882 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.209671628 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.209345182 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.551970749 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.207309378 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.208738216 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.210170114 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.552357154 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.541219604 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.210702523 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.534236159 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.210303817 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.209904913 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.211489384 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.210239166 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.647930307 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.121668764 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.210290314 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.208845491 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.211335753 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.41027153 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.211007398 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.431101412 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.643696441 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.212460572 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.210172793 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.208949156 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.209962233 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.210570174 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.212410566 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.210094835 seconds)
  done (took 219.282809549 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.212358749 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.210494645 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.210776245 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.210875636 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.212928787 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.212873357 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.211785825 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.212314216 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.958464774 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.945759035 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.212242486 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.212014853 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.213492292 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.209684845 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.213069339 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.21199699 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.211228919 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.212345334 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.215664828 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.211465695 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.212204488 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.091751107 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.213294082 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.124617961 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.213817028 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.216894068 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.213054999 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.212590923 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.211288413 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.213322084 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.214756506 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.212062951 seconds)
  done (took 232.198352466 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.457427876 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.21571549 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.217914403 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.229915409 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.216241874 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.216709949 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.216823815 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.461574221 seconds)
  done (took 22.360155587 seconds)
done (took 656.342678684 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.575971956 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.941736651 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.351718602 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.242428399 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.495886532 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.280024858 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.236755051 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.305321553 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.884698288 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.310498066 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.660732561 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.242184328 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.982643707 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.26463736 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.356211064 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.301111431 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.605744129 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.864873115 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.368029293 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.899347486 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.435564417 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.186969006 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.320449883 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.933614484 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.67374209 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.204201945 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.250786062 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.610821031 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.244520139 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.474625313 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.899098545 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.494951275 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.251358183 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.224770449 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.30107123 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.264092487 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.435517516 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.248102141 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.329876896 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.986682848 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.889137015 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.768869794 seconds)
  done (took 114.727994421 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.228350645 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.227400009 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.205228594 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.219605201 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.23547707 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.227438771 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.227137371 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.228390728 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.225743925 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.2270294 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.227107724 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.235668899 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.228509152 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.237043262 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.227085451 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.228508885 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.22831713 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.235366653 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.22825877 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.227625953 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.228130054 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.229231075 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.22383702 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.228024891 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.227692025 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.228959488 seconds)
  done (took 60.061679959 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.221261437 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.400880063 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.510043341 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.2505111 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.22196924 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.226515196 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.251218068 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.22819496 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.223621086 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.22378786 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.334855545 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.227036239 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.236118764 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.50729321 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.24939949 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.22340105 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.22174897 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.223741536 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.410873543 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.239052901 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.254097647 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.227880378 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.251886656 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.237138579 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.22692316 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.225837857 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.227592569 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.641594653 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.234253047 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.334818704 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.26778403 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.255980671 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.568864381 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.51883167 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.286962556 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.231611809 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.223337492 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.381010996 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.237433398 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.225288054 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.251454382 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.231822662 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.515446257 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.747254556 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.240555455 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.224888345 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.63974259 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.393002266 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.272940935 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.236964299 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.521264616 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.252591508 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.225467631 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.225735132 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.262445522 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.235577329 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.225960673 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.506896648 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.23906797 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.25372158 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.229213323 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.225236069 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.41923026 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.235724601 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.410102602 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.236570703 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.234886236 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.228500731 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.516160975 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.252951642 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.751372115 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.24417538 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.227270625 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.337641093 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.411373132 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.664209552 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.237674309 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.420297146 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.590044967 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.26171465 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.237020201 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.627233394 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.265572374 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.236891584 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.228549181 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.228248735 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.228772056 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.271787578 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.254857299 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.668908831 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.75529008 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.529458747 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.262676777 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.238635289 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.230432868 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.511095562 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.237000577 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.227036093 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.510622589 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.775487987 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.244381037 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.236888938 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.734161677 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.24665092 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.25906781 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.236944556 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.53097231 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.256746572 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.272230749 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.228510795 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.23418494 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.23283204 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.259199484 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.235351008 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.230827829 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.721335819 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.400362928 seconds)
  done (took 274.750714558 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.232563399 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.225272914 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.229607687 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.226158775 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.228890871 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.230727726 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.227547308 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.227839246 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.231313037 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.228459397 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.227503625 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.229174121 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.231078249 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.229138043 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.261622262 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.231355885 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.716261905 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.215048082 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.227263501 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.228365024 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.802270705 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.23431678 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.229567982 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.22700725 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.228989512 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.229411647 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.229767727 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.258734855 seconds)
  done (took 177.673334265 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.231401964 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.276440542 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.239596448 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.277168624 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.240604489 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.23187854 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.252875863 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.245996136 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.219806157 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.2318005 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.231996068 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.256740441 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.23562598 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.303914476 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.254359858 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.259711274 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.304909515 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.232230777 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.232276445 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.232546479 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.278097119 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.241029473 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.258389911 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.282765699 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.242583713 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.276596896 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.241437799 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.233347265 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.23417785 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.318627438 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.250541908 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.260010846 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.262270774 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.249490859 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.319796125 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.319901907 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.307530975 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.256567464 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.235839351 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.232159241 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.232513809 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.235595387 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.280396474 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.241724336 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.232367109 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.323051447 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.250998974 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.232693263 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.253714782 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.23331991 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.24374245 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.245074499 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.254122724 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.32314547 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.275691376 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.25655366 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.253724847 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.252282748 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.236166147 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.305550568 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.236706166 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.322396621 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.251971919 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.235628053 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.237221004 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.238943799 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.282395052 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.263886386 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.308461103 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.238473404 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.306782877 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.283110968 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.24385191 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.236184888 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.237155842 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.280147399 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.316695679 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.284205858 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.290060692 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.265700713 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.24283257 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.23656282 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.237244165 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.261690136 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.240871519 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.321573836 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.322380421 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.238763163 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.236320064 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.235515632 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.235185057 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.256759469 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.288416591 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.270672356 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.313397005 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.264779828 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.265328019 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.239635161 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.246785276 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.233970471 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.265514196 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.239181443 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.247040766 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.566939199 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.27185775 seconds)
  done (took 239.74065588 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.614949617 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.282807125 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.302783553 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.496905789 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.622773403 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.366275063 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.270852556 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.290458552 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.293073508 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.40743223 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.341618339 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.32730267 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.269283775 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.255121609 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.283782789 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.291735227 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.310727633 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.574590303 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.37712929 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.065984479 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.271629463 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.534962867 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.572947637 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.619187568 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.325228047 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.67635678 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.929341202 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.37055553 seconds)
  done (took 72.497376122 seconds)
done (took 941.583499071 seconds)
SAVING RESULT...
DONE!
