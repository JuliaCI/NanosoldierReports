cset: moving following pidspec: 25165
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.828844913 seconds)
loading group "shootout"... done (took 1.117218163 seconds)
loading group "string"... done (took 0.669135155 seconds)
loading group "linalg"... done (took 8.625313945 seconds)
loading group "parallel"... done (took 0.169289381 seconds)
loading group "find"... done (took 2.924863306 seconds)
loading group "tuple"... done (took 2.107770482 seconds)
loading group "union"... done (took 14.840079832 seconds)
loading group "dates"... done (took 1.450174966 seconds)
loading group "micro"... done (took 0.220542942 seconds)
loading group "simd"... done (took 4.780372736 seconds)
loading group "io"... done (took 1.081949814 seconds)
loading group "random"... done (took 9.493937332 seconds)
loading group "problem"... done (took 1.516396236 seconds)
loading group "array"... done (took 25.193766757 seconds)
loading group "misc"... done (took 1.873288798 seconds)
loading group "scalar"... done (took 43.375844301 seconds)
loading group "sort"... done (took 3.323918774 seconds)
loading group "sparse"... done (took 12.6824539 seconds)
loading group "collection"... done (took 18.34826475 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.424787039 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124795805 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128891444 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.11371159 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185672371 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121469331 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130304115 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085795281 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.905258882 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.138167025 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115515933 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.426468431 seconds)
done (took 5.338109975 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.168821472 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09064855 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082986324 seconds)
  done (took 1.383129419 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071841213 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063779708 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067782261 seconds)
  done (took 1.413945846 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065795528 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134926772 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066439598 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067282793 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066878239 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066430684 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066911802 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066642748 seconds)
  done (took 1.749201673 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071967755 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06772043 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06596512 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067852238 seconds)
  done (took 1.487993827 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065460922 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121655621 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065144408 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065196576 seconds)
  done (took 1.528645918 seconds)
done (took 9.030881958 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.139990748 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.814791428 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.77205272 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.123800011 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.247705016 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.452102959 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.124888353 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.1837037 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089251966 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075793577 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121736168 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078134892 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.399168985 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.401556628 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071737085 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.177628119 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649319581 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087183319 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135614366 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.448287627 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073952252 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.088010806 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.084451857 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071493401 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331000415 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155612512 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667721871 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.096666674 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068677345 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095037944 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070770538 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078788269 seconds)
  done (took 10.724279589 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093073329 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.090609063 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069122363 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123745755 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.093990787 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070227506 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075739942 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068076419 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088983219 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12430652 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090188916 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.103467498 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066442202 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069364898 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074445438 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.196840357 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080250334 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081565615 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068335574 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081353125 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105756642 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078669055 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078692085 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078564335 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132192413 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169287995 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097011301 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099164409 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066167904 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079166014 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115450433 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.124994699 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066973259 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065797389 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119792138 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095421264 seconds)
  done (took 4.653509028 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.885421812 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.096184638 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083336111 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074591421 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106405874 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113690637 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121157203 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.122777654 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100194514 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069565451 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153157058 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.667886179 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.164050384 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071858725 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.119508061 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.356321451 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06747086 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070907407 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06835019 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071358196 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069882243 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112586334 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066046763 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175391953 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.586391872 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07062145 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069113334 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096480874 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065754545 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.139169461 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.093153455 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07005348 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.544863356 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065664523 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063892606 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088277063 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094771241 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067514587 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.095039151 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068251546 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07891734 seconds)
    (41/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.06479025 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06625731 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109237767 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079239824 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.51397522 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.07010609 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.582250139 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.224814207 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072890698 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072457711 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10179442 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064788136 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068236706 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.843140911 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145463596 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06687408 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.27280577 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06824325 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068536519 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06921039 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099615019 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070364787 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.06864243 seconds)
    (64/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.084167184 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072734595 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.09627343 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.787927241 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090561945 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096492989 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067211283 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06383509 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.405846738 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073667987 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069434303 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069621535 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083597679 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.110788854 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066814418 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066963321 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110176575 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.094807778 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.08838891 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070070942 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067180832 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066199661 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35733202 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.162668342 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066667104 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066972583 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.473947784 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063627234 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066162235 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067666558 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091246913 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065761927 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063004099 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064352032 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098099017 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069621303 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.349986579 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067440903 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.452295663 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.066865334 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100794649 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.116224242 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065540437 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.097227673 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.065842832 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.062941982 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071341686 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.063650151 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063142147 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.067612036 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064135719 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064590643 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.067133033 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.066151453 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065644055 seconds)
  done (took 22.545597145 seconds)
done (took 40.028051236 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.328731519 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080568996 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080803843 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080534831 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080174283 seconds)
  done (took 1.937303158 seconds)
done (took 3.390660814 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.13410477 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076167736 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065028192 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101150812 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069043703 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102192302 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.10839493 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104043484 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.06921947 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069084908 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069110167 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105604225 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105210062 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069311726 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098424991 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103912 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069468991 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06465129 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069164077 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069026066 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069166121 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064885599 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069304986 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068986742 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099360916 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069146876 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065028103 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.098989909 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069028802 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099032776 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069114271 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069266324 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069280652 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100646845 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.06904077 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099675364 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064961105 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069018134 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.187052587 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069615127 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069554219 seconds)
  done (took 4.764396264 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071218825 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082262599 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083566105 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062551158 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071435069 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08315787 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062800871 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082568664 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091260798 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082912997 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082565266 seconds)
  done (took 2.189210752 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070633561 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083140996 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084350826 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06233103 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073492135 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083859155 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062527826 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083057385 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086290757 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083752484 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083476192 seconds)
  done (took 2.17019406 seconds)
done (took 10.432738397 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096714743 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066140754 seconds)
  done (took 1.460293109 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224109489 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.505201484 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.307971183 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.09477964 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.072668458 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086102297 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203219663 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067421705 seconds)
  done (took 8.045707423 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.100502107 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070680431 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.073536522 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067974423 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068468027 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067609884 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068143109 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068134172 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068270904 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068271669 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068562603 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069477005 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068946949 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068719734 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067982084 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069697628 seconds)
  done (took 2.54636211 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.104295508 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.069328926 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.099861606 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.062757657 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07224705 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06272388 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.071088392 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072965087 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.070435751 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071395884 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072166997 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071879126 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071610776 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.07212729 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073178639 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.07405294 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073922396 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071153681 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073347068 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073614625 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.073166281 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073261723 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073962478 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07198752 seconds)
  done (took 3.206165584 seconds)
done (took 16.577163489 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175076692 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075653872 seconds)
  done (took 1.558355723 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068576576 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06918444 seconds)
  done (took 1.462688847 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073558503 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.060886153 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078832243 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070904686 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062074927 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061414179 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077828843 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061845869 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061331691 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062054808 seconds)
  done (took 1.994195267 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063196476 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069087042 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067032607 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064986741 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067266783 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062863916 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065522596 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063163575 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068987165 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062552114 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066282175 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08334313 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065523251 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083484546 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065420178 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065964263 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068209492 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065399635 seconds)
  done (took 2.54423471 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061334042 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061740766 seconds)
  done (took 1.453629025 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064914637 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062365393 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064496418 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064424915 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062435422 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061504667 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062229392 seconds)
  done (took 1.767480797 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.420490358 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121644175 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.342875067 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.069594118 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07743515 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.254376268 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064472063 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068702868 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068637051 seconds)
  done (took 2.858635023 seconds)
done (took 14.981200931 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082312172 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180752614 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087189321 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.403283367 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091335409 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067121806 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112555103 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.17677404 seconds)
done (took 2.553882633 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.277658602 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.247684074 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.401691803 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125304933 seconds)
  done (took 3.110615627 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336200875 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079547184 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076659429 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066865431 seconds)
  done (took 1.904804085 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065089962 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071267396 seconds)
  done (took 1.474327381 seconds)
done (took 8.120785633 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071732157 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.09182866 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06195231 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.067408564 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.06494602 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.074607845 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063504596 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.063593369 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064499146 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.062232767 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064193268 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064121799 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064336323 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063778917 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06397623 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064511939 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064366182 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.063608216 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064188011 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061864563 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064421213 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064514264 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.063191031 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063904678 seconds)
  done (took 2.947252815 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079772428 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066166603 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.0666597 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066676422 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067422326 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067172649 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066913144 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066058644 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067062426 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065282108 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067297956 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067390188 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.06528874 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067675 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065666521 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067657559 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066829868 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066428808 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065968408 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067601816 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067236043 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066281706 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067447531 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066965901 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067153221 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067120156 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065501863 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066282281 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067127641 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067548549 seconds)
  done (took 3.373191789 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066241518 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059945872 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060411863 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070066929 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060474214 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.060994101 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061050497 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060213075 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061000659 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.06143615 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060818733 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060444548 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061370654 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060287498 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060126719 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060567127 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.06498478 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079818841 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060386914 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060147431 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06485576 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060978675 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060174544 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060547667 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061082677 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.06037421 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060442777 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060699837 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060870644 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06162462 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060721563 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064548928 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065097753 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060596872 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070191884 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065402057 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060312909 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064669643 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061191353 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060397159 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060171391 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060036769 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060303489 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060326908 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070441027 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06068482 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061662142 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061305232 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060879828 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06059449 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060946318 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062314625 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068938421 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062182866 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060540865 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061840675 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060034056 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060872871 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06012768 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.06022189 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060423704 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.064137541 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062070759 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060938145 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080018078 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061908849 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070745026 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060589762 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061129573 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064201889 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060684043 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.07807919 seconds)
  done (took 5.868573151 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.071452513 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072723697 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079040538 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.070596325 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065084436 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061500989 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065840872 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061621033 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071130807 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06557604 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061853733 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065065929 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070525488 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065681859 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062487281 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070485987 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065357817 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064353184 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061379974 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065777958 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062666866 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065266273 seconds)
  done (took 2.832880109 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138792493 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06639091 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105635456 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070176605 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068773397 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070266784 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066221314 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066353392 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066267696 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066783137 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067317403 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066609854 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06923256 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067091575 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067261924 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066657212 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066365617 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066899284 seconds)
  done (took 2.679678311 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076837229 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066355494 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089216884 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066134512 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066156185 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066061698 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070050555 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070584282 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065984499 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066434432 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070003157 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065808327 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065955039 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066322191 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0659018 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066164675 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066022561 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066839335 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06998332 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069683521 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069649328 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069695434 seconds)
  done (took 2.87784219 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077361716 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065262729 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080787455 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067000617 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060744329 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060705713 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066631642 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065287011 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066373382 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064772461 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065334684 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060877911 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067309568 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06538688 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067449005 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065668278 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065577049 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065460681 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065009873 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060971765 seconds)
  done (took 2.687093379 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072257448 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062966469 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063201469 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06810424 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063354809 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063182863 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068573499 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063554874 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06303732 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084831571 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063123442 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063305673 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069062804 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066814259 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063519601 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068722217 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068738566 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068470239 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063446517 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063505355 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084733646 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063425359 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068571493 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063306293 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063815338 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063251509 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063798752 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067371478 seconds)
  done (took 3.232111924 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064397719 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063351049 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063963866 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064337544 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064180732 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064105417 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064054738 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064031538 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06386934 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064382459 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063607216 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063467962 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066730024 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063627306 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064019475 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063862491 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063772917 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06383446 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063691168 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064159066 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063959626 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063651488 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063846625 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064085207 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063812281 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06358252 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063879453 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064122026 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063540277 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064103639 seconds)
  done (took 3.289052806 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.072872654 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071649606 seconds)
  done (took 1.513090913 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062346456 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077842458 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.06007159 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072687957 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068653183 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063733706 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069396841 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068894611 seconds)
  done (took 1.907495187 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066651632 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090406603 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062447524 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062886888 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065195792 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.1274974 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074382397 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.07327396 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075587232 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064896915 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062753074 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074705686 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062020516 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075190192 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063781913 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.07115014 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0695848 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07980065 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074943539 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06048286 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074820918 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063442737 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061045748 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063122834 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062146527 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068740139 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077752308 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074901758 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070342887 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060082238 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080449623 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061111986 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062221336 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070337885 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065759564 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061127448 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097715392 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061919821 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066602309 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061168722 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073369488 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082091958 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075943257 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079340198 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063355579 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062876219 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060953996 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063697044 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06467142 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07032458 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061300709 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068839789 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060633173 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062829345 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071663661 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061515507 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066342095 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070521514 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075333019 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071694938 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070253116 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077180933 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070978681 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069026655 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062447765 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080990871 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06319168 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075153956 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076117597 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06265927 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074475255 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061231497 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060103246 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060843242 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094314647 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063003016 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062645679 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06160751 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061029677 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062712195 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07110854 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066512987 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068653405 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064879238 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077282683 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070679365 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061486039 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067891485 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079510959 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064615708 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061412864 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077922544 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064603943 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060504908 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078695398 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070919619 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06276306 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062179626 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064301533 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07466902 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06243153 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059938025 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069703378 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062676727 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063014251 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06501582 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069006866 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060657747 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070594436 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065644182 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062666041 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059507832 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064712117 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.06171666 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05958338 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069825082 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060565853 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074645131 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066813117 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074558597 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074694123 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071091682 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075883946 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.06035097 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059107259 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078015074 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069755481 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199904154 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.080654795 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062316269 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075688451 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061870032 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.06343601 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071711471 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060629948 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.0637682 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061329595 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066462477 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063321123 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063094706 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067290894 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070160623 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073248685 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062585578 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07010425 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061561226 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076849041 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071365498 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065731216 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065020124 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062174162 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072879845 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067872736 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070899001 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06050558 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061692238 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.061596813 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071565209 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071385797 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063178318 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068494773 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066033159 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061838961 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061629642 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062510635 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064744048 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064646386 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062295861 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068925437 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070465211 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074723137 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068042821 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070277593 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060606148 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.060750434 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063067254 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.060507676 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06596264 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.07059488 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077288994 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072962085 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082096399 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061717695 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071046388 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063572038 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077800326 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074577755 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062864993 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066048386 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060328742 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06309486 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070445324 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073201514 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074812733 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076299678 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065763526 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065672625 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061202756 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076146164 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061988568 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069838122 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070670205 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065751828 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061672959 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062882818 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070303439 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06578926 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061149075 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076578507 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067429914 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060909364 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075414399 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061972472 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071970179 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060695257 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064983825 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.06698211 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063225765 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07083633 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076807593 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06029888 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062167863 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076979052 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063493103 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063153338 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069757466 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076686629 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06593783 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069422715 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071979593 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071644062 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066409613 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071096539 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062226891 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071020658 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.06429441 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072742615 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061113348 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078549312 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059840384 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076577372 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.06162641 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071884554 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061933941 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070079657 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061983178 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077345844 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062573114 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061437508 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072601471 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059424339 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069953893 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060002474 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065267288 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066915187 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070126985 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062542823 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070254791 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062183919 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.211639973 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067362251 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071105589 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072111862 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066776478 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061631476 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070663357 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073010972 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070290108 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.062957967 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.062922232 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.06185897 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071006356 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063055695 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062760515 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069618639 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066038331 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067118912 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062964981 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063212759 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06370351 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070143427 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071054186 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079138861 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070224706 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069262951 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07073856 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061038071 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077493062 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061795326 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071839874 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060583783 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067956522 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070534502 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061647715 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080429197 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063891718 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069188047 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074039829 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070155962 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065578427 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079453085 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064428084 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072281238 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069367018 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065748923 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067992273 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063264341 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069637914 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070920206 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072104449 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062649792 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069380903 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070951301 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063268782 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069355728 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063241619 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07007055 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063382839 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060641963 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066616225 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072909411 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066286645 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066622302 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06193152 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060314648 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061850558 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068578491 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066320075 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070304172 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077307397 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060817521 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062971205 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060902895 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065332951 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079630136 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071289055 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069695194 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066298429 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060727494 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063712284 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063821774 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061666247 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065184601 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060896963 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061202068 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071949037 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063184556 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065597388 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.06149007 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062100319 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071264094 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065978219 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062110359 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067742343 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061460229 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066807394 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060427164 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063051847 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066226261 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061216612 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064968421 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071964265 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077838771 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068035171 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070528363 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063049112 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069083212 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076742833 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068065717 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062716109 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070687106 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060604451 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079319321 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070938227 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069666573 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07089201 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062408672 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077674462 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065232415 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071250584 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076045887 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062113509 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066614369 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060293088 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075732985 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065069214 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059795401 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067764702 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068278493 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066187039 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071717004 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.061076515 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068399755 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.214252903 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066042714 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064156851 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064059357 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07067955 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077908313 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062539207 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066242806 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069568698 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070087052 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066000289 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073689606 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069919699 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062755438 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063430169 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.064944933 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062901573 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073175572 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062042577 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065626069 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065928476 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061174831 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068313564 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078292085 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071182193 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.0712296 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061291973 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060755849 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079153621 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065010881 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064933747 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069626247 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071251726 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073903713 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071221532 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078392797 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062281478 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067211047 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073604374 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062415941 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061462178 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065345369 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062892774 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070656126 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071617866 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069223688 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063623461 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067936867 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075008156 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.06304293 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065880354 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066539419 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062420213 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.0720474 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069884054 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073106508 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063067278 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.060947424 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065022727 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070503969 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069609808 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070666006 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062559398 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068761073 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075234841 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069572447 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064511684 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061196425 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064982733 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070906934 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066246427 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061099487 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066302917 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065259068 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068425467 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071110374 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065763624 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061230629 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078139251 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069787724 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.0710335 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063784891 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064066401 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062358873 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061293637 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07269957 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061087137 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063394357 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065714648 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063049947 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078931772 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069652321 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.0771577 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062595394 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066325415 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061252027 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071250102 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066596202 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062071628 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072014019 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.06081378 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076964737 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.093136697 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067390274 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.061363134 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066450264 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069200085 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07698775 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070893318 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070412576 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.065115041 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071241617 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063380186 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072446007 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060841767 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060351468 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071310564 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069822606 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073535839 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061063414 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07149456 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062739801 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068991032 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069053566 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062622256 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06179131 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06208948 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069250278 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064843612 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069747099 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064530152 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.076344504 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.206600693 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073496126 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071613775 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073132985 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075584584 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07424798 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069896045 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062591016 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069133441 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069275015 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062668913 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066743965 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.064693013 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082650433 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063101722 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063144896 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075957529 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068031816 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061774298 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068016898 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065989895 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072075188 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062461006 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072884848 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065630413 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062433524 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065801706 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066134454 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060322104 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061027415 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06137081 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07145237 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.06576512 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061503557 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080115532 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062896358 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070194794 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072541682 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068531379 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063219044 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060396622 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062689844 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075039825 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076968205 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065280262 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070011066 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063182451 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070621601 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060226306 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069969474 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069683823 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070647525 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061174809 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061994949 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076295099 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076978851 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066412012 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070726948 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070816682 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063292115 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083009759 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070802635 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062926953 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072424822 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063963415 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060906029 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060981786 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063019778 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073258616 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061366567 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063946208 seconds)
  done (took 42.322769051 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.098659895 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062518827 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061664835 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060939762 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069340384 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061946055 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061549202 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062192877 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062170002 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06411568 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061162634 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064086017 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06760073 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074446377 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06989772 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065287328 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061388853 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062230357 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061110477 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062166267 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067892746 seconds)
  done (took 2.873907309 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064915108 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.065207223 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065319956 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065833205 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.065027008 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061429879 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065380506 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061701991 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065936991 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06179231 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.066030997 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062162851 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061728216 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061888921 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061689048 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063122299 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066355467 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064737356 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061287474 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065403755 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062859797 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065377734 seconds)
  done (took 2.872013898 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063259338 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062097521 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069776651 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.060865525 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060799995 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064414131 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060495227 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06528975 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065273335 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064926259 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070205119 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06185738 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06079667 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066640536 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060862769 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061797661 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104298697 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061984441 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062390858 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061289036 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063854055 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070201142 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060877853 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061497733 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065483774 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064496154 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060696993 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063659856 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061465642 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065564633 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062597995 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060196932 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069835525 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069336839 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065594081 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065540584 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062705452 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061822708 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061031523 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060751374 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069684629 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062524015 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061239219 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062687411 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069562042 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060830642 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060603974 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070280226 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060897641 seconds)
  done (took 4.635327947 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07180303 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.112883228 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066900717 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094590932 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073713758 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066918467 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066669082 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095294617 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062235444 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06241729 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.07448571 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.07524761 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06395153 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064980668 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066719528 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063778635 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064426798 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062926106 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066882762 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06312619 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066836264 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068125683 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073418949 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074434518 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064858412 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063038462 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063243081 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064964385 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073945173 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067240149 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06522945 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066047244 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074192097 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068902743 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063679303 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063763792 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074988386 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064069201 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064149002 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062270096 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063299894 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065019251 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068137293 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074800562 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064496526 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068618028 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064014959 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062222555 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07424622 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064062433 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06831965 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075224853 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065220164 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064610123 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065544089 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07431293 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064097685 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062910835 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064073359 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073699041 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062666203 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064569256 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077881163 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063698431 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.067146281 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074946862 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068848481 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065046832 seconds)
  done (took 6.29199521 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.07017521 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096341451 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076758147 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076576533 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071379496 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071906821 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071663639 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071619908 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071194202 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074607851 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071640366 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106094545 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067966262 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073041122 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071692425 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071215765 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071903661 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071614176 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071842603 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071711915 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071966431 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076556707 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071694176 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076354612 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073716171 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068397644 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071118922 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071412601 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076443217 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071234255 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074004476 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071162804 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071445375 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076753696 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073662089 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071130011 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062085616 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071647269 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071208269 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071771419 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067849799 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076917241 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071211595 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067800177 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07155849 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071614582 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076710381 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074483427 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073315545 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07487121 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.07221916 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077086743 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071630614 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072016343 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077131278 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079207153 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077129959 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077417274 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072052598 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077048862 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077798573 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079838219 seconds)
  done (took 6.092205951 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074355397 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068161018 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080453115 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060893777 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060897252 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070614114 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060885183 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060892853 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068046655 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067743707 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069568805 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070789143 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07241859 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069481676 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070383546 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072389658 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070095533 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070467716 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067992765 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070410779 seconds)
  done (took 2.881456219 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076238164 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080034784 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066816988 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070286855 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066876618 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070579163 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065873417 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066896231 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067261634 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06755829 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072023884 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071691488 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067319309 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070688411 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071348873 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070105099 seconds)
  done (took 2.613609794 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064616308 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069318092 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067608214 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062659309 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.064011612 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061740282 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062906658 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.060831774 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063694125 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075226699 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062376312 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.065329195 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064994621 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061183498 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06179887 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.064806898 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.064085552 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062127112 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062619988 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06623153 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070670633 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063086307 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064856081 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062154477 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064752902 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07033019 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.06361618 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064162435 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062006199 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064775549 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064306795 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069033148 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064315155 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062682351 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061456691 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062297887 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062884389 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.0650772 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064747511 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062628522 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061433095 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067673828 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062807353 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063253144 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063623083 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064724278 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06382894 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06774394 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06273713 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.064789898 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06252602 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063937627 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06264475 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069606409 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064252538 seconds)
  done (took 5.035155374 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078190093 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066372259 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061053313 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061849452 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066275969 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06700955 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066259478 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066710468 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066947477 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061144054 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066593795 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066141464 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067059687 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066490033 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066847626 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066597143 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060821613 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066347031 seconds)
  done (took 2.69612785 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.067693704 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066782999 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065739255 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062840843 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.063416697 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067769236 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061282489 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062459914 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062802145 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062973183 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06317217 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062596843 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06294066 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062658444 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067115003 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063144827 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062656054 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061263924 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.063016761 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06104158 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067907577 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061632088 seconds)
  done (took 2.900903271 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.087894478 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.08536821 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127219509 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080305467 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088576824 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071862003 seconds)
  done (took 2.04081513 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.093298314 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.097991713 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065965243 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065769091 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070773842 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069220531 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069160104 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069138466 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072580987 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073001665 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069079319 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072884567 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072697505 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074692195 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070809983 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071283725 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069543574 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069578964 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066500904 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076692737 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069495775 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072624106 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069396074 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06934233 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069150617 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074348114 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073057638 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073016848 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069209521 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072899973 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071193969 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069088469 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072971141 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073117002 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06699829 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072801245 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069308933 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076640453 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070809241 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074610235 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065944241 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070822493 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072473754 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072350624 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072565921 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069136666 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072518986 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069402248 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069834239 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078356372 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071735307 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074911092 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070935874 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0731718 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072993522 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078443617 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073440619 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075018088 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071381316 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073411945 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075001445 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071338132 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074649496 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073695266 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071099514 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074883627 seconds)
  done (took 6.286960934 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10406442 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066392258 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069466209 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073241487 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074750897 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06961498 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069745557 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069781726 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069308953 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066964848 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104418615 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070007168 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075190758 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077830487 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069843311 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069671755 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069595971 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074786686 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06691622 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078280052 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069181724 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074519838 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074669702 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074278629 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07269698 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071416013 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069533613 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069006643 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069645062 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069157193 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072774635 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069412975 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074466399 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066836475 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074866433 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069783822 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069221103 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072530809 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06968714 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07172022 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074828252 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077384025 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069483375 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069545082 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073132742 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069386869 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069866792 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066997568 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07020373 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067165597 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073318204 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073278023 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073316213 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074893026 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069835891 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069648626 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069769406 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069506403 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069565895 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071343963 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075126282 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069566262 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078529934 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069897558 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070172317 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075119146 seconds)
  done (took 6.305780861 seconds)
done (took 130.403115734 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.216189726 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.18996986 seconds)
  done (took 1.896137977 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075160279 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.166200244 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.07486985 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075296409 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108445131 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.10760242 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.075894627 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072596366 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075046985 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073053409 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139283012 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076706431 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072753422 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.07260674 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072886395 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.072628309 seconds)
  done (took 2.923000126 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.107932102 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.183534237 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.082568619 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071180306 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151566731 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077262859 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073176259 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077210904 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076875173 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.070877216 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107463196 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083590393 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076167032 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077294198 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.072527512 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076249889 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076657187 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077201597 seconds)
  done (took 3.136302324 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103938969 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092746791 seconds)
  done (took 1.718137062 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.154990518 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106321081 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.144935584 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.345025661 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137322036 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.138684661 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.14244299 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.137505554 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110016802 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.134541405 seconds)
  done (took 3.067133276 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106433356 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10528532 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.307613095 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102439168 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.082609622 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.07767787 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075516279 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080295765 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075883291 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076796734 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122184061 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075288364 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072670612 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124197755 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099185597 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106882337 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071417754 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078724716 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.080431184 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071231724 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076392625 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080689235 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177887063 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079005968 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099879264 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075758052 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077320531 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074872621 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.074752269 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078261694 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079303191 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099715392 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078737419 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082550292 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077444446 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097472786 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072200979 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098594618 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074635439 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072748232 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075986363 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079524681 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.072579994 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078878284 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07561506 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078246887 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080245256 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071399795 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.075478574 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075034727 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.072703505 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076768215 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07686703 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077605893 seconds)
  done (took 6.316895448 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1075974 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108586679 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07056717 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114047032 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105295991 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070342957 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10453583 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100549181 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108616239 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070358698 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069750579 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069901571 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076561066 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079981366 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116924213 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.108608054 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072058067 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070415156 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107605254 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107400872 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069340819 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10201903 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100136017 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106586251 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06901073 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070390256 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06887629 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069352319 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074140078 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075197622 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069515486 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075989321 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081028037 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075831285 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068825145 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068726029 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068868598 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075808438 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076683398 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076721269 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075155181 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068697737 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068830754 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06927858 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070121302 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068363548 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074692056 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076066786 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.07536196 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068921013 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069874227 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068869632 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069294253 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075948257 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075028121 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076419425 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076564961 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069226594 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069103764 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070968727 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07753423 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077192497 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07673838 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070052487 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077718992 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069082097 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078056377 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081603812 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069713102 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069770881 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069160156 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069692786 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069841089 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075330887 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075187412 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070054343 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069168267 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069151842 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077486937 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075080351 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068837185 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074104367 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068360882 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069653273 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069726239 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069680577 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074750117 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076272355 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069861885 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068888716 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069400596 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068915643 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068673037 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074533488 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075914914 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076328536 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075518657 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06946037 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075511806 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075811205 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069378713 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074791367 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068468275 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068907122 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06859176 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074023748 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073392112 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075931072 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06834168 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068379997 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073649654 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076084901 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.209736979 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076168927 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079053221 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076646104 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070068615 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079142599 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069674144 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077587306 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06963732 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077651444 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069786057 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075543855 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069616444 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068791056 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069669261 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075627018 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069689557 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069540614 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069380939 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069439921 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075560195 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079111924 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070073177 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075750801 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075408293 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070018314 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07590366 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069603585 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076677563 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069802172 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069998096 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068789051 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078507655 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069506418 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069367522 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069419678 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077731159 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069736326 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077770597 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075084233 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068939022 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079111081 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077229421 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075036741 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077942452 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070419944 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069326857 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069221949 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.072193412 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075152207 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075937252 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069729952 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069387921 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074675756 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077840633 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069216991 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075446764 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075464103 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075535673 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069721635 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06940913 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078535177 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077445769 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075660743 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075420254 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07598689 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069721217 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074810867 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075133983 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069218774 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081224713 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069510117 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079608357 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075982086 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075117028 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075864178 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077225232 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077673806 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078456545 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079976577 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069173972 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.301805774 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075210788 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069089005 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069585179 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075040134 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069641223 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069763804 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080139867 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069941079 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077726095 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068970785 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076267063 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068877013 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070609094 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079862201 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069374922 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069712905 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075100173 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069105765 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075190194 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07755215 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075135204 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06923138 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069310972 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075225784 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074915278 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068342068 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068079868 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068352067 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073358998 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072988718 seconds)
  done (took 18.714908026 seconds)
done (took 39.311969624 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169884844 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115314231 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210695032 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199073347 seconds)
  done (took 2.314787099 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.100655698 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067097441 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.082293462 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090506594 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.065898238 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.076329453 seconds)
  done (took 2.040505292 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202028061 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.17629057 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244944014 seconds)
  done (took 2.16947007 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367734521 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150601353 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.214979885 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.499720309 seconds)
  done (took 2.894748165 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.110705161 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.100605162 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077929901 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111595524 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085362197 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.063494503 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134058821 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.070353283 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100727138 seconds)
  done (took 2.478435369 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.139116008 seconds)
done (took 13.632580688 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.1022922 seconds)
    (2/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.076037332 seconds)
    (3/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.125444393 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.237187301 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.225325395 seconds)
    (6/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.187291086 seconds)
    (7/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079558015 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.17931645 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.123641331 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.092264265 seconds)
    (11/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075854355 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.211036394 seconds)
    (13/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.076876275 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.165029329 seconds)
    (15/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.222726609 seconds)
    (16/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.195593389 seconds)
    (17/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.176552735 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076969302 seconds)
    (19/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.113177547 seconds)
    (20/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076551965 seconds)
    (21/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070360655 seconds)
    (22/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.188532867 seconds)
    (23/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.198365392 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078267509 seconds)
    (25/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.084398595 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.118994598 seconds)
    (27/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.150631577 seconds)
    (28/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075339332 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079189173 seconds)
    (30/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.144542632 seconds)
    (31/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149513391 seconds)
    (32/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.230261157 seconds)
    (33/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.195275868 seconds)
    (34/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094847006 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076164315 seconds)
    (36/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.145529602 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.200585596 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075576516 seconds)
    (39/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.140206037 seconds)
    (40/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.083202328 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.181637153 seconds)
    (42/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069767115 seconds)
    (43/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084540779 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093140849 seconds)
    (45/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.07012699 seconds)
    (46/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.074388738 seconds)
    (47/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.199196323 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073309112 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077123666 seconds)
    (50/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.13790012 seconds)
    (51/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.232958115 seconds)
    (52/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.164253822 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092112056 seconds)
    (54/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068321396 seconds)
    (55/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.202099845 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090121475 seconds)
    (57/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.141890132 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086051404 seconds)
    (59/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088732099 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.088370976 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135049051 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.25927807 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087596816 seconds)
    (64/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.138850384 seconds)
    (65/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.206482423 seconds)
    (66/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.217062778 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.076178476 seconds)
    (68/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.249721166 seconds)
    (69/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070129565 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075408314 seconds)
    (71/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065605965 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.08669534 seconds)
    (73/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.082456559 seconds)
    (74/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.169022835 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.080964725 seconds)
    (76/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064220663 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.280771004 seconds)
    (78/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173236314 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.068337007 seconds)
    (80/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.137664255 seconds)
    (81/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069563282 seconds)
    (82/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.185084779 seconds)
    (83/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074371492 seconds)
    (84/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.229736242 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075315353 seconds)
    (86/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190892679 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074334349 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125243149 seconds)
    (89/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067284398 seconds)
    (90/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089999108 seconds)
    (91/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.161302739 seconds)
    (92/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.066569374 seconds)
    (93/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067222863 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067261924 seconds)
    (95/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065797372 seconds)
    (96/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090480133 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090769507 seconds)
    (98/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.083807167 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071525633 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.157341478 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090589947 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.089038358 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.093222133 seconds)
    (104/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.075199484 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.066566141 seconds)
    (106/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190967146 seconds)
    (107/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.073202364 seconds)
    (108/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.080205473 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.067031941 seconds)
    (110/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.077737778 seconds)
    (111/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066612047 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066432016 seconds)
    (113/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067351735 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066318527 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.074432884 seconds)
    (116/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.078318372 seconds)
    (117/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.06696912 seconds)
    (118/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.22141163 seconds)
    (119/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076017807 seconds)
    (120/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066955636 seconds)
    (121/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.087944117 seconds)
    (122/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.084269679 seconds)
    (123/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.065188547 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065176016 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066516454 seconds)
    (126/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067245234 seconds)
    (127/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.189916014 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076852128 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070049343 seconds)
    (130/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.068045624 seconds)
    (131/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077877099 seconds)
    (132/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.197314557 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152624656 seconds)
    (134/341) benchmarking ("sort", BigInt, false)...
    done (took 0.262717384 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075783537 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.162950218 seconds)
    (137/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067292778 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123533763 seconds)
    (139/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.069723838 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090838993 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.111928487 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086801091 seconds)
    (143/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.070059639 seconds)
    (144/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.153901424 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.074341355 seconds)
    (146/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.065915186 seconds)
    (147/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.066603072 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076248046 seconds)
    (149/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075251131 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075628859 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 0.147627252 seconds)
    (152/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.066142746 seconds)
    (153/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084677669 seconds)
    (154/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073719957 seconds)
    (155/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.194130045 seconds)
    (156/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075078434 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066361454 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066440434 seconds)
    (159/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066313583 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073853934 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075992739 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066271384 seconds)
    (163/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.142833508 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.067910343 seconds)
    (165/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066366959 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.148790569 seconds)
    (167/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074012198 seconds)
    (168/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.066858812 seconds)
    (169/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066760708 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068025235 seconds)
    (171/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.067409033 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.156706676 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129728316 seconds)
    (174/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065590469 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066252111 seconds)
    (176/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066671545 seconds)
    (177/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.165813864 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.065868634 seconds)
    (179/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.141761881 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082632246 seconds)
    (181/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.196935663 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.177559883 seconds)
    (183/341) benchmarking ("sort", Float32, false)...
    done (took 0.136004394 seconds)
    (184/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.077085582 seconds)
    (185/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.161097329 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151053492 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074001969 seconds)
    (188/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.218346313 seconds)
    (189/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.068420003 seconds)
    (190/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.160692239 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063881471 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.066934176 seconds)
    (193/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078214318 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083717196 seconds)
    (195/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076866878 seconds)
    (196/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064893321 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.143445018 seconds)
    (198/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.072119219 seconds)
    (199/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064722005 seconds)
    (200/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.072278128 seconds)
    (201/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068202431 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.174563371 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083454796 seconds)
    (204/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.077282623 seconds)
    (205/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072447132 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065309034 seconds)
    (207/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092241375 seconds)
    (208/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063943592 seconds)
    (209/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06669948 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065826613 seconds)
    (211/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065934023 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.06513381 seconds)
    (213/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077612919 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151805372 seconds)
    (215/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066621543 seconds)
    (216/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064980448 seconds)
    (217/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.06709417 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.072099532 seconds)
    (219/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.072512687 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064735854 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071360036 seconds)
    (222/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.072712503 seconds)
    (223/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.151665278 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.088751366 seconds)
    (225/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071122313 seconds)
    (226/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064506465 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066493019 seconds)
    (228/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.081421419 seconds)
    (229/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.064313715 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.065286533 seconds)
    (231/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067421781 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.065435519 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065774194 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.064911763 seconds)
    (235/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.147788313 seconds)
    (236/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.136209962 seconds)
    (237/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.0654849 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086637662 seconds)
    (239/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064842647 seconds)
    (240/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067344256 seconds)
    (241/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067187904 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.074115867 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075766651 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065783884 seconds)
    (245/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.064498938 seconds)
    (246/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.066550836 seconds)
    (247/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.072387325 seconds)
    (248/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063139087 seconds)
    (249/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.064453465 seconds)
    (250/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.069405222 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.128411739 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.065360275 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.092075292 seconds)
    (254/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072968843 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072363504 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.0899911 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.149307376 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072067192 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.067716355 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073883098 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.064504778 seconds)
    (262/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073397529 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.066533316 seconds)
    (264/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067299543 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064251537 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063006082 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.063982729 seconds)
    (268/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064470297 seconds)
    (269/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.071230128 seconds)
    (270/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.222899075 seconds)
    (271/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065733791 seconds)
    (272/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064353841 seconds)
    (273/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.064634104 seconds)
    (274/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064466292 seconds)
    (275/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075511426 seconds)
    (276/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064522094 seconds)
    (277/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.139217752 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.167252784 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064487621 seconds)
    (280/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.078082478 seconds)
    (281/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.182802125 seconds)
    (282/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07105988 seconds)
    (283/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066571319 seconds)
    (284/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091736692 seconds)
    (285/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064670567 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.062960144 seconds)
    (287/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.07551513 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065320003 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.063677808 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.136691786 seconds)
    (291/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066853988 seconds)
    (292/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079266037 seconds)
    (293/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.071003619 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.064928835 seconds)
    (295/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064006445 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14254454 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.145393981 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064761765 seconds)
    (299/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06545485 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.121614874 seconds)
    (301/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.063316856 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065145668 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.112338358 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.167433345 seconds)
    (305/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.066272131 seconds)
    (306/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067732041 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065261761 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.139026959 seconds)
    (309/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.064412556 seconds)
    (310/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065207478 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.423670823 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069600611 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.069377008 seconds)
    (314/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069604368 seconds)
    (315/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.069170846 seconds)
    (316/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080420349 seconds)
    (317/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076235711 seconds)
    (318/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077355558 seconds)
    (319/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069702652 seconds)
    (320/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074039169 seconds)
    (321/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069815731 seconds)
    (322/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.069035759 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 0.142692908 seconds)
    (324/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.069568369 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.20616414 seconds)
    (326/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.069491365 seconds)
    (327/341) benchmarking ("sort", Int8, false)...
    done (took 0.154482931 seconds)
    (328/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068886049 seconds)
    (329/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.069198451 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080526759 seconds)
    (331/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.068388042 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068391731 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.069150728 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154794064 seconds)
    (335/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.068742693 seconds)
    (336/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070744883 seconds)
    (337/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.07504316 seconds)
    (338/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.196513188 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085914076 seconds)
    (340/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.067734604 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.067445545 seconds)
  done (took 36.673418072 seconds)
done (took 38.260048291 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.097290553 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.083551927 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081863382 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078844585 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.082472875 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080257018 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081400119 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.080151332 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.081815707 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.081791587 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.081041345 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.069043245 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.077817117 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084859834 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077934399 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084923283 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081081382 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.084157894 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068595591 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.082060103 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.095094063 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.079627647 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.076752264 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.081764638 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067782442 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076646411 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091437001 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.089201125 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.074201311 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.076997364 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074940546 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.086042639 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.075297242 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07387288 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077059758 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.073378889 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.076804802 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074613225 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.090771744 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.073543941 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067848161 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079605712 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.074786736 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075505768 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076075559 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.079278174 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.072916508 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.080821412 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067200169 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078551973 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090524977 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07233862 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.074112263 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076188385 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073015001 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076431193 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073818081 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.078219171 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073372463 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.079367871 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079610771 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07664802 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.06762996 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.07591907 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.074660029 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.075102581 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066410308 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073016352 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067658036 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.067845906 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067211881 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076128805 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.074233473 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07245479 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066587222 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.0676924 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066793013 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079971578 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073546562 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077247671 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067674904 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072794899 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.072639622 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067715975 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072500113 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.079592695 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.066541009 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06764233 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066713574 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.082116366 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074094239 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067434565 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.078984946 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072469146 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072590902 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.067775529 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066997586 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072562905 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075323503 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.067233275 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066196451 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072644131 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072638811 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.076921453 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.067897015 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07255915 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072478422 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066314043 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076091069 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074572094 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075843577 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080690311 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075832179 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.079105278 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067455762 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.066293496 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.077107605 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.067961371 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072560759 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075320342 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072405217 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.07544243 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.067509838 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066386416 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.072031755 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073755556 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067123395 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.067774373 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067361752 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076296371 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074205941 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.065945763 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.066751883 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075503392 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075677512 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066285577 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065850438 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076352503 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.066901598 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073136117 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072879398 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075660283 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.066640863 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067531779 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.213173382 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066968908 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066755495 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.072617621 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071670442 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.067638006 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075857073 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073695126 seconds)
done (took 13.252767027 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067569715 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.109593869 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.081399572 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083856158 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079924525 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06905904 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.07176203 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086744576 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071783598 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.092381545 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095828685 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089539023 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.098314959 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06706229 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.068693951 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.069367824 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066742443 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.079881394 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084819987 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091156805 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.10406039 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067828896 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.084119378 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.087499828 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.081680389 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.085794055 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069060221 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.11063853 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070522617 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.086226487 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093338692 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.067321838 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068855788 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.085672421 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083383295 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076533883 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068957445 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.074005808 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.071131612 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067878425 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069616921 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.085206997 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07391788 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.074336527 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.069083806 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068792761 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068321795 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.074568786 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.085192921 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073660732 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.0796933 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.087026593 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069551794 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068165213 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.066590135 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.074883768 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068154784 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068564354 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.068260019 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067847969 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067999958 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07020401 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.072681065 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074313921 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071360494 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07405437 seconds)
  done (took 6.825787761 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083987097 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093870174 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08242046 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.083405233 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06752332 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068030528 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068340671 seconds)
  done (took 2.307415989 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068931587 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07577117 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080290511 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080326043 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089425286 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077432092 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068761319 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099639126 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066904947 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076504232 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.08354253 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081404943 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071605785 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080524404 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068747606 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.080285393 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.069032646 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075381667 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076057857 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081883055 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072397928 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09859079 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081760761 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069426132 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081623128 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075617244 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070660222 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068955879 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068931542 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.068049107 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067937844 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090356766 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.075241326 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081080664 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069327875 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067778884 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072695045 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069391469 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073081858 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077197983 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.072076498 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.068165683 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068838433 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068230152 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069255122 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072665406 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068895118 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067868537 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067300667 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075679831 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066862932 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074432478 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070510868 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073262031 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073123706 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07272054 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075001242 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068384679 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07555921 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07443719 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067660064 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080446699 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079269842 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071566183 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079474655 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076333221 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074360487 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071309326 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067549922 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067228403 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068488714 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079433292 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070822128 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069891037 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068758993 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072933685 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071567843 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083492622 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082781457 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081454336 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070080806 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068068176 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071592306 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083332355 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07284932 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068068368 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068912331 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067349382 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072992325 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068146174 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072705926 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.06807759 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074673243 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070316617 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070166464 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076070558 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067886138 seconds)
  done (took 8.911748439 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070542965 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06990382 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069026544 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068831402 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069126699 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069079073 seconds)
  done (took 2.212379127 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09104563 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069154713 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080424952 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068479411 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090739719 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074841685 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07521999 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070250482 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084698052 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07917667 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075094042 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077357454 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077982033 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070312 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074933163 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069544564 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07484596 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071477982 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078430632 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070600397 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.084629352 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070265816 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070882839 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080706649 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071628063 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069653966 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069976604 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078963181 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078210707 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.070173006 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069740586 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071336538 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076743541 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.07016469 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074889846 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076899223 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068457224 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.074130668 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070977956 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071643707 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076884409 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070203632 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.07076223 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.074085163 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070053334 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076942387 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073646133 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071823857 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074552333 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073727186 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.074078639 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069105244 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071495905 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073739774 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076872139 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070157155 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073861513 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074587521 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070210588 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076734079 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06839485 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071581641 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069853814 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071384243 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073119711 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.07381579 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076736614 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070208214 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070667102 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068329005 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073564375 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068425326 seconds)
  done (took 7.072122336 seconds)
done (took 29.078692673 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552695103 seconds)
  done (took 2.289140018 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.617525655 seconds)
  done (took 2.394455462 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.387675771 seconds)
  done (took 10.165110238 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.34425114 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.404616537 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.741193553 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13407599 seconds)
  done (took 3.435144757 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.755310457 seconds)
  done (took 2.547233272 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230546633 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221943186 seconds)
  done (took 2.248367272 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.335759429 seconds)
  done (took 2.119003007 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.155357974 seconds)
  done (took 2.933879196 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.23510589 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.164059692 seconds)
  done (took 2.187180864 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.541743476 seconds)
  done (took 2.325732502 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.417577467 seconds)
  done (took 6.206175537 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.233688789 seconds)
  done (took 2.060956803 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230380049 seconds)
  done (took 2.02332769 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.054385737 seconds)
  done (took 3.841869386 seconds)
done (took 48.572623502 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.084777317 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087575107 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087958132 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082322436 seconds)
  done (took 2.101812765 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075292625 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071648573 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074591317 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074794769 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072737061 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073502627 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074107682 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071051602 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072712249 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071546964 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070283833 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071791478 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073920527 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071349972 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073726355 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075356174 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071440541 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071248177 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073666784 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071532786 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074445571 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071338986 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069502388 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071211522 seconds)
  done (took 3.532377451 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.078999093 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073101427 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076382282 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072109512 seconds)
  done (took 2.10117016 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07784918 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077123875 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086592588 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091051755 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.076905784 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077955812 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.084626507 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.08527578 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066931389 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.08852046 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069376162 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067911701 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068409428 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08691963 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084259333 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063614454 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.065059322 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.07854228 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077857911 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080079964 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069991511 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067402869 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077629668 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078498735 seconds)
  done (took 3.648613042 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083524255 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066719306 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.082640029 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092139933 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093372536 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066846512 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080004424 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093917541 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128758704 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066927497 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073203782 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066994315 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105835526 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06715032 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081827637 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109966416 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112837993 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.071039779 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.10041828 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067308469 seconds)
  done (took 3.519762647 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077343097 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070736907 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071484252 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067093529 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077951316 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07405986 seconds)
  done (took 2.251467937 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069425844 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068922088 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070981352 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.073221966 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.06941187 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.068858613 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.06848671 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.066930274 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067322065 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.068221814 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068548566 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.068376084 seconds)
  done (took 2.6335549 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.154687856 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.069659304 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071193676 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067324549 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072239629 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068094332 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082454743 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069582715 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085363837 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067787685 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068128674 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070292445 seconds)
  done (took 2.752791453 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105344762 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11278269 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146565438 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118061474 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117783536 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098058592 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126269628 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095952289 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161060043 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137505963 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1172191 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094691783 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087738895 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070811701 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101185551 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120374132 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138203766 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073849083 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114181384 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165529461 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133056546 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135752589 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148967358 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117658202 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091347547 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149397758 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098531124 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10370405 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12556354 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128535546 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120170369 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099257901 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073046277 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072524598 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14982267 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104208761 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121290889 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093964605 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106024379 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089546904 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1084727 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070866539 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087857775 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114959817 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085934305 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132300453 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089114895 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116541621 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082337215 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.139038136 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12542048 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100782885 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087265643 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10635324 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.294593111 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113554551 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135438247 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108590181 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084466046 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.120875253 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103860968 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101710963 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109000231 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081546675 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178086377 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09020084 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112965772 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113330126 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.095659336 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096507813 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108899593 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.136748174 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12669579 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126569965 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139273733 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096530173 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123227608 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.100662413 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129908091 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106106289 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074312333 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.123370082 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130567837 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100156172 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102024616 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131331618 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093171672 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078307772 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.100192261 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.11950757 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081756853 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113203441 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081897342 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.110037669 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134449475 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09890046 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112579923 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117274004 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078928481 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156079143 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110117418 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074369564 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119005481 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115832162 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159162278 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.256804306 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.078506859 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101429293 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105416392 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14886636 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108463737 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081643041 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111761572 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141555395 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096060541 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170636795 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097191289 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14251602 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114116449 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088849136 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076526632 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.091174054 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113572064 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109136471 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113851465 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091713055 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.085385069 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088353678 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113201565 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093337806 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081906795 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11432166 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103128268 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076124351 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09010897 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080696157 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143002925 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079169935 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138762266 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126598239 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080218116 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107355682 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099091522 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10978765 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098519202 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118383 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141776194 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117787677 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091335671 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094771226 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109304934 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144615664 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128136056 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093912883 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.07823358 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101167079 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112554617 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099011323 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127131129 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101235421 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110991877 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10439695 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144128217 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147401566 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102594604 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.265159458 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10880233 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.124610964 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078576302 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156827316 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105679805 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119507485 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086059444 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14196864 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115342923 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090770581 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089103621 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102230758 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105427114 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107158786 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144329562 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097198059 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073627366 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093872679 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145614866 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078210196 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111415687 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092023707 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094622386 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120030497 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095115824 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082933079 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069752412 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129596417 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159473133 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.07153653 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115370936 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112233947 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103784731 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122744141 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070333348 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11981454 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139414979 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119590034 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14213279 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147926786 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1171362 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118926498 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.11450365 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106153189 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080293181 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126280018 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135624962 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097620559 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093765743 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136999573 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119251422 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137966004 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.279760505 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11601529 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105929369 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108821602 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104290957 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103095125 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144345416 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121831538 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125379871 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086722414 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106885292 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118881072 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136408963 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083645589 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143136973 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.085105622 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119361726 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078402443 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124414993 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080455594 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112594807 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080911265 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100749262 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070931617 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075209263 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141556949 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113032806 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107527246 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101610614 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138245968 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137589482 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081786998 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109461854 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116760955 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102271267 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117781903 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109921537 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089801426 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09664199 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110000038 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086524742 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.082758207 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.116272081 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09542142 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128558567 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085323165 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076236917 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142274469 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106176581 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096982226 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079126121 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109064062 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122299274 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094414653 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088605422 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116098461 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106047018 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143304784 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091908427 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098692153 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.286508439 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081834234 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093707095 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070863131 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086686793 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077573316 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.128141703 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077211027 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117207335 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070159582 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130731785 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087884852 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093767205 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103186173 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112818412 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128887697 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095818342 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141444083 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090975608 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118986771 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108863398 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095693048 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089886199 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104046612 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101914519 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.123749302 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096690679 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124502918 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145836213 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106276634 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1419049 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092883648 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122757264 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108147759 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125307361 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113354913 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14883851 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139073712 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113627931 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113163798 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076029204 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095665126 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10640411 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112981899 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175808925 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127365685 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073266176 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107497158 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09615598 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108993479 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106154608 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083438015 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14823435 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103380509 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088977724 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114776891 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.250366547 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105691976 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077659042 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096269146 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101295865 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095191599 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099215284 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116135806 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128832625 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113834257 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143542901 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099997279 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093912991 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118958886 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111500541 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111048258 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087137287 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088013532 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13853773 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119584222 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129716695 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.10113696 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110640616 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112413318 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101169256 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126810535 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109240472 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.128045611 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081495631 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076927698 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069236607 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.072944397 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124178198 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109593185 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113062727 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099650393 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073437491 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104867956 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107572224 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073109654 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089973503 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095521619 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100337067 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.09282577 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10796059 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115429231 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092203314 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10536035 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100369328 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147703444 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101554514 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090091251 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144754601 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15189482 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089101658 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09416738 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07265249 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08028617 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115428694 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151427452 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.312604459 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07943054 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087848213 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.087389254 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08761337 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073053884 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087629524 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090206133 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105401484 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100110571 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113996013 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105545375 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077046202 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104231637 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10037114 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0933418 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105369022 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119787705 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12588543 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.14207553 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111333242 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108085853 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077819226 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081681855 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076985153 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08122002 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10323845 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.08081749 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077689452 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144698025 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093694885 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106194297 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11029652 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090035977 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077097744 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135554641 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.07108028 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136092197 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072436699 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083650618 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083793709 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080354872 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09504695 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141266814 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111075809 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114344104 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107212951 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10599891 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142070042 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156576949 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081767763 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144559399 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077112205 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076741137 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076989761 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11564617 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091420337 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115742015 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142179125 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092401224 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1054589 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078614372 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.305987891 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097428618 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105179015 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088177415 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080212443 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143762139 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080703938 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081737932 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091891983 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112463279 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073927523 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105579471 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086112513 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081389244 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144181883 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631643341 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09158141 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.07681215 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097140786 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142893015 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128955001 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096133739 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109341452 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118850425 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100911328 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.096504656 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109408097 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185085308 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075612012 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096207574 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10484349 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100111793 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10340043 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09965424 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.089041457 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093355874 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088178291 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080925475 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109031647 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090630842 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097528844 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108162028 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084234423 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08811939 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13179474 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104800931 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083468501 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089803387 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.106872082 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089881942 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102513333 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070853707 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114547797 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091896166 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118685906 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.096398943 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108552038 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128538078 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091401303 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139723417 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108778474 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.285411528 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089164578 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07986947 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126552664 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.089629825 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079083961 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145843801 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.09604654 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094360635 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105269452 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097292787 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114665782 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11873471 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112536028 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098341085 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080590197 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100784413 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103624053 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086225532 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079927051 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075830945 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077363473 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108930458 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086680456 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085039525 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115877722 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090582458 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104351029 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101229008 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.124507288 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084987791 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102637621 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11159469 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093775507 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11060682 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101308889 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129519827 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176040485 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127404149 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129960247 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135537902 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078040121 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077019954 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070029153 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116211531 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081052359 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090685678 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0825531 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135084339 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083457794 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113096686 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232093249 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082085916 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095476591 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097869751 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070941928 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084692522 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109162534 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088906006 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081500552 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121100515 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085315011 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129663308 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.274256798 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100836395 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095912678 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08247676 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114498116 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106005204 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129224276 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09631708 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076343274 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115693778 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104254501 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139495331 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074397307 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082118028 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130201819 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105338907 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133760419 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081297776 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150982344 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143703978 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101197817 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1351255 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072653586 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084950182 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090211264 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126732052 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086357419 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112851243 seconds)
  done (took 68.823074038 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.150874517 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14491821 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.082936119 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.104826787 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188109834 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198268941 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.129271571 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.107719418 seconds)
  done (took 3.075613513 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069580997 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.083922214 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.081702804 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.207145389 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.109097883 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.068268863 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073887718 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.082805737 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.068712667 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.067976572 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.102520953 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.068512361 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.068789649 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.36869634 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.067196484 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072804923 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.068297952 seconds)
  done (took 3.680830798 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.334798131 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.468194042 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.246918188 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.764128387 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139923968 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.485676955 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077696654 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.083263713 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.569887031 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371996208 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133481478 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088920375 seconds)
  done (took 18.719672837 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.076513744 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.079624126 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079503709 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075974467 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075472172 seconds)
  done (took 2.337652115 seconds)
done (took 120.995513286 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084609079 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171790951 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.068703496 seconds)
  done (took 2.228838795 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.082749515 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.081877144 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.081579664 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.079797185 seconds)
  done (took 2.289425875 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075412911 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077289698 seconds)
  done (took 2.109030582 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22206809 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177346918 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090599879 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.082768784 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.080437057 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081156436 seconds)
  done (took 2.213008291 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072541316 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072174797 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073217655 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.077215481 seconds)
  done (took 2.250424756 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.068334967 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067057776 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.06936217 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.07213079 seconds)
  done (took 2.232732523 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086280877 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.086862342 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117598235 seconds)
  done (took 2.245078583 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084007447 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083692585 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079261097 seconds)
  done (took 2.208629753 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.109599372 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.097391938 seconds)
  done (took 2.163306576 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081237475 seconds)
  done (took 2.043895141 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.090962843 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099121713 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.140655657 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107764116 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.140743179 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127397267 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078289369 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079076625 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075018331 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073697374 seconds)
  done (took 2.972432407 seconds)
done (took 27.491410897 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.079517536 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.369437209 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36129505 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088214095 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672602488 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357650399 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.014572917 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091977998 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.102151243 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069285754 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086239963 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650141795 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00385805 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.32682533 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.989125383 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.325864195 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65270213 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069935408 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069152126 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069557838 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.997163108 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.06917637 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070069463 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069916636 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.650732775 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375002325 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070378104 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326089205 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069205546 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073305923 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358833352 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0699985 seconds)
  done (took 16.57893708 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071170063 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.123816342 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073698068 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08515075 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071200202 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070804661 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072326545 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070086428 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113191336 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069568547 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086315689 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06887378 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073368748 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070703105 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088967116 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069439649 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07140252 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073516821 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069866961 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070234122 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087578685 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069905831 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070017917 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070573248 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069846615 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08245106 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070343089 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069264131 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069727912 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073577838 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07442576 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070987007 seconds)
  done (took 4.422488463 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.121864072 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12685991 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074270669 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109935615 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119229116 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071047854 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.151583753 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092587342 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115900965 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069498168 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087027925 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069689269 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104487157 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070873904 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089844885 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069802576 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.07272689 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070353878 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069660083 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070403274 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088015223 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069345776 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070177276 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070522322 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07025787 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084351212 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070622134 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069974964 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069503009 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073594763 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074773774 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07063677 seconds)
  done (took 4.692476546 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070852868 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.0727084 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081134886 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081874969 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.06841845 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070322528 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071113081 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067923205 seconds)
  done (took 2.571739551 seconds)
done (took 30.251669569 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080224941 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069292385 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072275826 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088619261 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075247169 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07102501 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066006765 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.07577891 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07236148 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072722607 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074516499 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068350315 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071201486 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066628056 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073375513 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067509516 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073733928 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.07158643 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.071678294 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073183894 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069963947 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072815877 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.075697531 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.071936482 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072093398 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.07237357 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076242823 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073144211 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.067587058 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070318214 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.07012406 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081681469 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073586423 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.07392167 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067713309 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.067223235 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.071692901 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069760113 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074031124 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076379421 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070087977 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.076272606 seconds)
  done (took 4.992915668 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089328145 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094736572 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087288314 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083979154 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108434484 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083345215 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091749937 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080986923 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079263975 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091162006 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075373913 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080917259 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082340768 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077213531 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079600685 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076376245 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081030206 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07508063 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080028268 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079707443 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09217578 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072762993 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080071598 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.080992976 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.074759826 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081273935 seconds)
  done (took 4.152894178 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07436677 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089739392 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.093534828 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142129036 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110261412 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.083898614 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083446521 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.098668192 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102209348 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069117217 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07333671 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095513825 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097543093 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076162409 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107264563 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087289522 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082025509 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07116702 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076120918 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103979769 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092578163 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088386492 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102367235 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089846271 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068582326 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078654196 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076701811 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085490306 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076801527 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081897768 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073904071 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072724793 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070195276 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082066259 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.076423582 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067469933 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091328477 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082318839 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084859717 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.10787923 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079302054 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070783867 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.099356053 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134636748 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069084582 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07166414 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.07300911 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081983175 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070405649 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098513844 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087337753 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.06902552 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087747404 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070293046 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070355525 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085685389 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070898415 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071388603 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081395765 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075109176 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.089969562 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074112685 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090473459 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068624637 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080837021 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.070780164 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070649694 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068455304 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.104637564 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076546077 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121734256 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069982011 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067031175 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081524063 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080488529 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075367619 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068703532 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088864039 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081060318 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.072754718 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080885148 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071740879 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072125699 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103864527 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068270284 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067247308 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067263017 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071224854 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072483159 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069868076 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082474617 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.06824218 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.07209592 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084437178 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068762183 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069647443 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071778317 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070315681 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069055554 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079947396 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073085688 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.070819627 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.0813816 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070009226 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072272689 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083912551 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078842238 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068858248 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070331171 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071721902 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070671409 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.07332117 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072648508 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071098519 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07670545 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076533342 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075096788 seconds)
  done (took 11.42247132 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.163777621 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154414802 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070024149 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149098387 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.07757864 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073784467 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151259865 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089114711 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069813387 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071229876 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.0691302 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09724146 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093221904 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104523054 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073824014 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070362489 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095837343 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.102950833 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.15374962 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148201219 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092977961 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077462699 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072422163 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07137186 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071494863 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077976072 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085858456 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077586717 seconds)
  done (took 4.742337444 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076834366 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.085332418 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.073769245 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093765095 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088494026 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070234319 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071909971 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071091541 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086848293 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076825409 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069845598 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074151061 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073553246 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070681481 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070596392 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076529506 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.0761581 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069219353 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073249751 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074856337 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080140371 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095420522 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074037771 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070251807 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072371419 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069584135 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07685629 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079378647 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069175084 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.0999082 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066857721 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074107103 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084216212 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071459841 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069313799 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070245122 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070326235 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.069846614 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.0704684 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067702106 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068146003 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074545022 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068620242 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075790946 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08438099 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076780249 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070695078 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.075535603 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072616813 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066984007 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073094148 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073011718 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072681174 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078296003 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073913228 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072607668 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071486841 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100164043 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075843628 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068780102 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.069117778 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06798863 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071127712 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077419278 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087193392 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071714677 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067817508 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069991091 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074376604 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083458806 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069291477 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074869714 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066509372 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.06968891 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.07213381 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072638638 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070772693 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.067868528 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069303939 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069529734 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069574809 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069920257 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068799354 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072128628 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067599425 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068185047 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069867958 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071160535 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07626822 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068480045 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07259357 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070870632 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068524825 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072572821 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074893386 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072337779 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089116291 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078373453 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070248216 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068274819 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084118667 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071522287 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069193744 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075699202 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074214875 seconds)
  done (took 9.807285572 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092523255 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071166112 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089121437 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096236607 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079794961 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07464919 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083933898 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070443238 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085782931 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069087775 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079111945 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.067954587 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083622647 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078682783 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071286974 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.08035863 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07250025 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090270888 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084579407 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068328233 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.078967762 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082536578 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082356864 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087523873 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087153977 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088367355 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.082072092 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072176095 seconds)
  done (took 4.289804201 seconds)
done (took 41.396476849 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.07533749 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.234019923 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.064807721 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.316197464 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.114922962 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.296355423 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.298079009 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.061429037 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.240973821 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.09214425 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.375973838 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.432030152 seconds)
done (took 70.659877055 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.09494858 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.203541145 seconds)
    (2/2) benchmarking "String"...
    done (took 2.256900157 seconds)
  done (took 6.451949859 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.660841826 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.062366253 seconds)
    (3/3) benchmarking "different"...
    done (took 2.110613886 seconds)
  done (took 8.81574289 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.171442955 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.700981109 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.313922116 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.059878751 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.066083608 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.474646583 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.87019396 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.527984755 seconds)
  done (took 34.002661989 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.255117542 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.261764635 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.815491336 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.850600212 seconds)
  done (took 17.219124381 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.673734739 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.325511238 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.324473482 seconds)
    (4/4) benchmarking "different"...
    done (took 2.313795379 seconds)
  done (took 11.684442251 seconds)
done (took 90.532888291 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.050463939 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.35695523 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.072926638 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.216462766 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.113283587 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.092925146 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.076361005 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.102989677 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.062948792 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.062853267 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.487176632 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.062434144 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.065369895 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.101283558 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.062465291 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.063260766 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.325192105 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.074443809 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.116899818 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.654491544 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.575587112 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.075954577 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.077758956 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.112824818 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.079830893 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.068054681 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.60754037 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.059884926 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.683886194 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.063156961 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.068049457 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.067887703 seconds)
  done (took 213.747764012 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.063727851 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.929718122 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.994710537 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.100775497 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.374168123 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.255942229 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.203079357 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.46694591 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.068740993 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.082406133 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.231275779 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.064313955 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.255369897 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.010650594 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.059519388 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.156730619 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.229294536 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.247534588 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.062217721 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.241348638 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.084757209 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.058582568 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.021294882 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.196863866 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.081818194 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.12103081 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.093043136 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.082536229 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.251528689 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.211881034 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.073205205 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.073257788 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.199821559 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.931605136 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.088376086 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.072628458 seconds)
  done (took 179.733451558 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.240682244 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.08547949 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.129774299 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.300287611 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.822033677 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.800101207 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.066857834 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.067198702 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.06543881 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.074146366 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.068243809 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.135441644 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.426545422 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.080003492 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.069012597 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.067996552 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.539347633 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.070798966 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.067045804 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.067020182 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.131288979 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.440269075 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.20377696 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.070479344 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.079214699 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.204941795 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.076944611 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.068440007 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.204902831 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.070879809 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.14647136 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.203818827 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.078399783 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.14849256 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.075591942 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.561978215 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.069799964 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.069353687 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.069440326 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.071589964 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.131557021 seconds)
    (41/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.06986167 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.069693691 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.153115923 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.159201362 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.069160491 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.083216353 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.138398246 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.758085498 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.07241503 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.069273832 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.070228992 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.069571194 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.070437929 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.424226773 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.071275994 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.096278204 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.673602511 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.072999742 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.070160071 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.071383049 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.07012762 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.072098347 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.077628719 seconds)
    (64/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.069015761 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.108279307 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.86889359 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.264621866 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.458256143 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.875619029 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.071375078 seconds)
    (71/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.071294152 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.311795996 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.130603172 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.074712748 seconds)
    (75/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.150530407 seconds)
    (76/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.071310407 seconds)
    (77/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.072876494 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.070873826 seconds)
    (79/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.071231972 seconds)
    (80/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.230756912 seconds)
    (81/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.221155238 seconds)
    (82/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.074020354 seconds)
    (83/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.207258734 seconds)
    (84/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.074959676 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.071236811 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.664210374 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.503465311 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.073765373 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.084515923 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.12970683 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.071767398 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.073009559 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.079758612 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.202162168 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.076274162 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.07238489 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.073408308 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.157913257 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.073319933 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.091667913 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.297751402 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.146964422 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.323201573 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.303517044 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.07501732 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.072465018 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.087837951 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.074832378 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.072831593 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.08432836 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.073456122 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.073150866 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.076907272 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.074657383 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.073946285 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.075249424 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.08703366 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.073867991 seconds)
  done (took 444.133727049 seconds)
done (took 841.898523868 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.720571725 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.812772799 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.702892655 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.729295594 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.709458888 seconds)
  done (took 15.676206744 seconds)
done (took 17.681865121 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.107019164 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.090385676 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.079016826 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.142324025 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.100761872 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.085233844 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.120768527 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.121111324 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.105450796 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.085870031 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.136298233 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.090843874 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.106732335 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.109570727 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.163138121 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.116029427 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.090797354 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.083165269 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.143821365 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.092038723 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.090372503 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.077209501 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.088191596 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.141363395 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.170119854 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.098577377 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.087322139 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.135621505 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.100799333 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.135182305 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.146508696 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.100975462 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.114350063 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.159816438 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.148043811 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.171366383 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.096990386 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.157587484 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.09544613 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.181237739 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.145626832 seconds)
  done (took 88.815509874 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.086650334 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.219014256 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.3010529 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.118061743 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.085387674 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.295445943 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.148338269 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.21249656 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.217582881 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.301927471 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.305947266 seconds)
  done (took 26.299905862 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.084701151 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.22036833 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.321308245 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.120659028 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.108879668 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.298272537 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.15329795 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.213474437 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.22292238 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.314150378 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.312636665 seconds)
  done (took 26.383960935 seconds)
done (took 143.504295658 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.456381365 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.106971982 seconds)
  done (took 6.569186841 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.063021983 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.089162792 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.209364498 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.074908868 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.080514152 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.081487358 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.081390735 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.080580566 seconds)
  done (took 18.766440771 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.081573319 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.080609098 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.081663935 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.082088673 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.081756205 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.078982435 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.081241489 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.080309853 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.08259462 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.082079381 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.08355996 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.082178118 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.081932726 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.082974165 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.08320657 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.082253705 seconds)
  done (took 35.31601026 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.082721242 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.083143472 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.082691203 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.084065824 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.083647669 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.084051157 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.085498921 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.083658791 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.083745946 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.08378798 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.083572373 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.083744971 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.08407947 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.083973983 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.084318088 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.08307712 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.084351991 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.084302965 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.085379276 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.085418133 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.083995899 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.083089044 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.088986164 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.084561476 seconds)
  done (took 52.029786844 seconds)
done (took 114.699162972 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.274084407 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.654250441 seconds)
  done (took 8.939131876 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.088607005 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.08482719 seconds)
  done (took 6.249289572 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.085135135 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.084685259 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.085145148 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.085274488 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.084961795 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.085118149 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.085527965 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.08518702 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.084916708 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.085123692 seconds)
  done (took 22.862117376 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.0857782 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.086076137 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.085793674 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.085491765 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.085728093 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.084946594 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.085661441 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.085914647 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.086098776 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.086260703 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.085967181 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.085141406 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.085690167 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.086114472 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.08717776 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.086288707 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.086042054 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.08629325 seconds)
  done (took 39.558841183 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.086333802 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.08681534 seconds)
  done (took 6.185320726 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.087135101 seconds)
    (2/7) benchmarking "second"...
    done (took 2.087277201 seconds)
    (3/7) benchmarking "month"...
    done (took 2.086760127 seconds)
    (4/7) benchmarking "year"...
    done (took 2.086500256 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.08717319 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.087358997 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.086607823 seconds)
  done (took 16.620100485 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.087649691 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.24353262 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.295439331 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.696173887 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.076027829 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.089436277 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.948059738 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.089807357 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.09148077 seconds)
  done (took 22.618039606 seconds)
done (took 125.047362497 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.919366768 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.08838931 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.359628071 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.160412968 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.140484633 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.385272522 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.103539054 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.630316969 seconds)
done (took 44.8045209 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.197627491 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.084812454 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.117346259 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.118837667 seconds)
  done (took 23.335332013 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.088294603 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.405704841 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.109375784 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.03645031 seconds)
  done (took 23.675984145 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.46545849 seconds)
    (2/2) benchmarking "read"...
    done (took 2.439205148 seconds)
  done (took 6.921517128 seconds)
done (took 63.150216343 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.088399596 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.087686249 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.088742185 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.08804861 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.088752184 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 2.089397014 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.0891093 seconds)
    (8/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.08908025 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.088749782 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.08962768 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.08922822 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 2.088994056 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.089233394 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.089542808 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.089807053 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.089287032 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.090159599 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.090417484 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.089548135 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.062326189 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.089570095 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.089908876 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.089663678 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.089875768 seconds)
  done (took 52.129890143 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.09050633 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.090166084 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.089604908 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.089693576 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.089797335 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.089367097 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.091088027 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.090155033 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.09092862 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.089972198 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.090231874 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.09139162 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.090892204 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.090670918 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.090571212 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.090692186 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.090355856 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.090280012 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.090169956 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.09130611 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.090771504 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.091977179 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.090254658 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.091397762 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.090596558 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.091802968 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.091531652 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.091960892 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.091042687 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.091123043 seconds)
  done (took 64.736281128 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.091265408 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.091244624 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.090748136 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.0920256 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.092578144 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.091960673 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.091634343 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.09265429 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.091590898 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.091910357 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.092234689 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.064266812 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.091960918 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.092023009 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.092470659 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.092654943 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.092114171 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.092215854 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.09344658 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.092555919 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.092924365 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.093920815 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.093490724 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.093654445 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.09343323 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.093845673 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.093225087 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.092975244 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.09293675 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.094205142 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.093363207 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.093370358 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.093324251 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.093736044 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.093384157 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.093286517 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.094387087 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.094281932 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.094449316 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.093876388 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.093956787 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.094279963 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.094601232 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.094115463 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.094095268 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.094936229 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.094802256 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.095029665 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.094940398 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.095059702 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.09499345 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.095272111 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.094883211 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.09523202 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.094473199 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.09606585 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.095507727 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.095110843 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.095634256 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.095683388 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.095871958 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.09516295 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.095850184 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.095275805 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.096665483 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.095226433 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.09653262 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.096611134 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.096472136 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.099634387 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.096209618 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.096025665 seconds)
  done (took 152.759135189 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.096531452 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.097461839 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.096771534 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.096271784 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.097396568 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.096520339 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.09718444 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.097277658 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.096617069 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.097702145 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.0973416 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.097855162 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.098050383 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.097543931 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.097926355 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.098115499 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.097960076 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.098282079 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.098142127 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.098081603 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.098421964 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.096946893 seconds)
  done (took 48.166853217 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.097776411 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.097890773 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.09775907 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.097254717 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.098601102 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.09905388 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.098609626 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.097947519 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.099277118 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.098294372 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.097942222 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.099068402 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.098426825 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.098182716 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.09875709 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.099698541 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.099126664 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.098740052 seconds)
  done (took 39.794930196 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.100011805 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.098789103 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.099405014 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.099403805 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.099391293 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.098276169 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.100208866 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.099084033 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.099219126 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.099608855 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.100118711 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.099045193 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.09992481 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.100065571 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.099702301 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.099999155 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.100478859 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.099697689 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.100583664 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.100148735 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.10091364 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.10067795 seconds)
  done (took 48.218378823 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.099858801 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.100084682 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.100677977 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.099433716 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.100255055 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.100061424 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.100879531 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.09979079 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.100611875 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.100341917 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.09647843 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.09678817 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.096196252 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.096516638 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.097053748 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.097793616 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.097613802 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.097632766 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.096872265 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.098396476 seconds)
  done (took 43.998356244 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.097167677 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.096887656 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.096447338 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.097790407 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.097978514 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.097505578 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.098378981 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.098233618 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.097538118 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.096891503 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.097103977 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.096674156 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.098770427 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.099332286 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.098654803 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.097844575 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.09761812 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.097987235 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.098371471 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.098385329 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.098845651 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.098416768 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.099518537 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.099367031 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.099217325 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.099491841 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.099806421 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.097768977 seconds)
  done (took 60.771494041 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.098831972 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.098888146 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.098991352 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.099741298 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.099491092 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.098798359 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.09883107 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.099456427 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.100317352 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.099560828 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.099812733 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.099626665 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.099474003 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.100236911 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.097360705 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.099929319 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.100268056 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.101056104 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.100360312 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.100424438 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.100857828 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.100741191 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.101179236 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.101621779 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.100019863 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.077279653 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.093914882 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.074548311 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.100901339 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.100211835 seconds)
  done (took 64.96693369 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.121400851 seconds)
    (2/2) benchmarking "in"...
    done (took 2.11882183 seconds)
  done (took 6.264882235 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.101693495 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.101335164 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.10050374 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.076908971 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.101345218 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.101006031 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.100913598 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.100968947 seconds)
  done (took 18.810264776 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.102981193 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.104741723 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.102929015 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.102578505 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.102801978 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.110561076 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.101903481 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.103682871 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.104514391 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.103799043 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.107534066 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.10711891 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.111232443 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.107529264 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.103013684 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.10326367 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.104799848 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.106522572 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.105311844 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.103363785 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.105905051 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.103996655 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.102544706 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.104136954 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.102751148 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.106787212 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.115301999 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.105960631 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.106429867 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.102626742 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.111215507 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.103102539 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.105060289 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.106685626 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.103683797 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.104154528 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.112439032 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.105540029 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.104635676 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.10441495 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.107113023 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.107130096 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.108990799 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.112534876 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.104323226 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.081098603 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.102983009 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.104981008 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.10481438 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.108780027 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.114011173 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.107122192 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.106220659 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.105440613 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.108563496 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.105219877 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.105713875 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.108445068 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.112475904 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.112781067 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.110424363 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.126755843 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.116327463 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.106209731 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.106847561 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.117128485 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.133836344 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.108042754 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.108640012 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.107035861 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.114885963 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.106246833 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.106561689 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.106081178 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.121659355 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.115187672 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.107057532 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.106272076 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.09365939 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.106713723 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.108996384 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.079431104 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.106582689 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.108205937 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.116574458 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.134235738 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.107397039 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.105305305 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.109549527 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.108494048 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.1126308 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.110625057 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.108106758 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.107179705 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.109878794 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.110341665 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.108043966 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.108613288 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.106373924 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.117416044 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.108272875 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.107877979 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.11250076 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.118064108 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.107546536 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.108628647 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.109397145 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.108123583 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.116631898 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.109174916 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.109010478 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.108481354 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.110302963 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.113594578 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.108419785 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.113819215 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.118312288 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.116464386 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.110213803 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.115012235 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.114031909 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.111524019 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.120507753 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.136356794 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.106105064 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.086886435 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.10712307 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.110387305 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.11259078 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.109855505 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.112731123 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.109901002 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.110194365 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.113548508 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.110152323 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.109456508 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.111480845 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.109949849 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.078340319 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.110808749 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.081766147 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.112485992 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.080107597 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.106618862 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.087611028 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.109547986 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.113997484 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.107499487 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.100697155 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.110707468 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.110672671 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.114638021 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.112331292 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.087873619 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.106241322 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.082752307 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.10876939 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.111516477 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.114959351 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.111649096 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.111968408 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.111654292 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.116202968 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.110977429 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.111469896 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.111627566 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.11180368 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.110857079 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.1140712 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.102555616 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.114908279 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.112026603 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.117759503 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.112597152 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.113303767 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.112100671 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.111715516 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.111884668 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.11744467 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.124396197 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.11683884 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.123983303 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.113728644 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.109452762 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.111506542 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.11482882 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.113387265 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.112807444 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.113213901 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.114132565 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.113452375 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.117992515 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.13517619 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.094352635 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.115914009 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.114866424 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.119013416 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.114853706 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.112998746 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.105905807 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.112265765 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.116645981 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.114119297 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.110756744 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.114561644 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.119528492 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.114280972 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.114512595 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.118408049 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.112957092 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.115736404 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.115750698 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.114856686 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.116368461 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.114402633 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.113759321 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.114354828 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.118232721 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.123943875 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.118570478 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.115961993 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.11541893 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.118436682 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.114606154 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.116029709 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.117056513 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.118954506 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.114900428 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.117179253 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.12322923 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.116627083 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.116674406 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.115318967 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.116793424 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.118216944 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.115619462 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.120575205 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.126590779 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.120516126 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.115649783 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.122118307 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.116526171 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.119011427 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.116425904 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.118227936 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.116661919 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.119020258 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.116648485 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.117543873 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.125721456 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.116869623 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.118385214 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.117723352 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.119579457 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.117522749 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.121124652 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.117664979 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.121571023 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.126010656 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.124549434 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.117736288 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.120683835 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.120418319 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.11957281 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.122538289 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.119079119 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.1324123 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.130201838 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.117891599 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.118453892 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.11740865 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.121219299 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.118755254 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.11799994 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.127175516 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.120273491 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.119495643 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.122975804 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.120586888 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.119181652 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.126038685 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.121238513 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.123478115 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.122175031 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.121568225 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.119943868 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.120122321 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.121719242 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.120654494 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.123134845 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.125428326 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.120432118 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.120701318 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.119855666 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.128041729 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.120424263 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.120910923 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.128052827 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.121819978 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.120664692 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.121911129 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.12003652 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.121877832 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.122111017 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.119725116 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.120844472 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.120087537 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.112338512 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.133036125 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.125454921 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.129139003 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.123447469 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.132979557 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.1209371 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.120725147 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.121002802 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.126609851 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.129281702 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.12114504 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.119614398 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.129100933 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.121384191 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.121295939 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.124747808 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.121558365 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.121061636 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.121275119 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.121538066 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.127314691 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.124233926 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.122799797 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.122432557 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.121059636 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.121322328 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.125565595 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.124434991 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.124361696 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.123240308 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.122019172 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.121417527 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.122089174 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.120979654 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.122897927 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.122075266 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.122110323 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.129916234 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.122577604 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.123259839 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.127532016 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.123988387 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.131516386 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.123077621 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.12254464 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.123281234 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.124053015 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.126018938 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.123516531 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.122773739 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.123001565 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.123531189 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.124397887 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.136833649 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.132152956 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.126614524 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.125409555 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.123340824 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.125527522 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.135079357 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.152338027 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.123569886 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.126815178 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.129085875 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.131622268 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.128144744 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.13157969 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.129937205 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.133511742 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.126756813 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.12433928 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.129106068 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.138431487 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.123984959 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.125318421 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.124954136 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.129546386 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.126799787 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.124231275 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.125960798 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.129022865 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.126493517 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.13811529 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.125525643 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.126716173 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.125468962 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.12535993 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.125018799 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.126180118 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.127850982 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.127963707 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.125376857 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.125676503 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.116423266 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.132737643 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.125784368 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.129948979 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.136780706 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.126224136 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.126782193 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.12796676 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.126033839 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.128588354 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.126361617 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.124634702 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.128852836 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.127528918 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.126675143 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.132473023 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.138239763 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.128251479 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.126431418 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.126795725 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.13048182 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.127127201 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.127472108 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.129638949 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.136195917 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.132111489 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.140361649 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.138386759 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.127872306 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.128669801 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.135737339 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.1354436 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.128402893 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.127733449 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.128146255 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.131347242 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.131120925 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.128504563 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.12737227 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.129161458 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.134090391 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.12914908 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.128853333 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.129403331 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.128707186 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.132047403 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.131561575 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.134591963 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.12986256 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.129056335 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.126217712 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.130377565 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.131241502 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.132153295 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.129243394 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.129619417 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.132829835 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.132544839 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.135321475 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.130226856 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.130099542 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.131469477 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.129628356 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.130264796 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.129376473 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.129333005 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.129983615 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.134706368 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.136939612 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.128387983 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.131885443 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.129239773 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.134196963 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.128168476 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.128003538 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.128483229 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.130314501 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.135917732 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.128486073 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.126332837 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.127705373 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.131034937 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.134850713 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.131385795 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.134448173 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.129379119 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.128710989 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.127591866 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.13276606 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.139997546 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.133874374 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.133612426 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.139165039 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.13440519 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.131959125 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.129954156 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.128963035 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.129629238 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.131326438 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.133295323 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.126857693 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.120379264 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.119741639 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.122271933 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.124173121 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.122652411 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.120240121 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.12000379 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.127114119 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.136326291 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.127961563 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.123467517 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.120745705 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.120499003 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.126007852 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.125556649 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.115596383 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.111428792 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.111172274 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.12574141 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.122026692 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.129522566 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.131187951 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.126719379 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.121449946 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.127669715 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.142373827 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.124384238 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.13474814 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.155049794 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.12258252 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.12180634 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.123591525 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.123103157 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.120221409 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.124766378 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.121447303 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.129026163 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.121291845 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.12328323 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.129999331 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.123119565 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.123408806 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.122528401 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.122767757 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.128992048 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.123289415 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.131008396 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.123211995 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.122669908 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.12243618 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.125125102 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.124153442 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.123443217 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.123599653 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.124370182 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.127444005 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.120431684 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.130772545 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.120099449 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.123173834 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.13684397 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.132110573 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.119444995 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.120336829 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.121593582 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.123245955 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.12286623 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.118589525 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.124588767 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.130647513 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.1236549 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.129024623 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.121139694 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.120837936 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.121445414 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.119281341 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.117972555 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.131325199 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.129548341 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.117618345 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.120146126 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.127560729 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.119302166 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.126997909 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.125705396 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.121341084 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.121429606 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.119786857 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.119701707 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.11940243 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.120988547 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.124595968 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.128198069 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.120804685 seconds)
  done (took 1265.315866649 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.119626441 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.120520835 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.120817687 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.121100902 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.119841233 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.119617252 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.118739471 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.10850281 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.120006067 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.108000394 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.119383484 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113260141 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.119361563 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.118027886 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.120023518 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.115972044 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.119239965 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.121966151 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.120184986 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.120148205 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.121230599 seconds)
  done (took 46.528562667 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.123095896 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.120252236 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.121980147 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.120588814 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.123563911 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.121008581 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.119552942 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.121018176 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.120523592 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.122934595 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.118534718 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.12196981 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.121427694 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.120768255 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.121428186 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.120461365 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.121099257 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.120548247 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.124341456 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.121534019 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.120039402 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.121601906 seconds)
  done (took 48.712031459 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.123220077 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.120961133 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.121598426 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.121722855 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.121374158 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.123380539 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.117654752 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.120455139 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.117739814 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.119184221 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.123262708 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.118664798 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.10940946 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.113025541 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.113658574 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.108275116 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.253740516 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.108464515 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.108855331 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.108882795 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.108800944 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.115651114 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.108710948 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.108011389 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.108044976 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.109442154 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.108605 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.109081017 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.109974716 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.10960807 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.113351543 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.108670052 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.11077818 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.113004507 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.109062096 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.110410981 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.114128615 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.109028152 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.109641509 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.109040347 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.121255741 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.135523492 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.109702532 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.109618956 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.118341832 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.109700167 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.109886202 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.114813005 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.119001531 seconds)
  done (took 105.769602207 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.109784284 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.110764869 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.110277793 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.110894733 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.110316767 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.11053598 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.109897243 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110673451 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.109844663 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.110905869 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.1113249 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.11066466 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.110810495 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.110970036 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.110253818 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.110935266 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.111069047 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.111246581 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.109544013 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.1110866 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.111091054 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.110705261 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.11093459 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.110690763 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.111376574 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.111032835 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.111964281 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.111271771 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.110929357 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.111934804 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.112112723 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.112006539 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.111698814 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.587127735 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.112251211 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.112388089 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.110539807 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.110635722 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.110803236 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.110661496 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.1124249 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.110192524 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.110197848 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.111354374 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.110400575 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.111109528 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.111022218 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.111347949 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.111379704 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.11030945 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.111040635 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.111209683 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.111222131 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.111085939 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.11136184 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.111651124 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.111772949 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.111195761 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.112331879 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.111377212 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.112001726 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.111465579 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.112637901 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.111618658 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.111564434 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.111710385 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.111646016 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.113036951 seconds)
  done (took 146.068112105 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.112419787 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.112070778 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.112297609 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.113023422 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.112577624 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.112175068 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.112967385 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.112587428 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.11274654 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.112781676 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.112960932 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.113943226 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.112794871 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.113115718 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.112675055 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.113049989 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.11347818 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.102268165 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.113190643 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.114608392 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.112807297 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.113434705 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.113142526 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.113470243 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.113756637 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.114212228 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.113838192 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.11385244 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.113565932 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.114311064 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.114376681 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.114348186 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.11362168 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.114011705 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.114346614 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.114268097 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.114283516 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.11479748 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.114415775 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.114216072 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.114243238 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.114309877 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.115137168 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.114340437 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114394453 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.11481064 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.115085945 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.115598636 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.115388951 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.114860068 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.115332174 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.114796332 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.115059802 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.115231038 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.115576952 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.114911666 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.115185484 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.115328041 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.115213246 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.115859955 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.116272287 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.11629469 seconds)
  done (took 133.097293472 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.116619389 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.116193009 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.115936162 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.115959575 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.112477366 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.104060032 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.11654686 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.116531169 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.115929203 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.116592837 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.116580234 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115980941 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.117650524 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.116352147 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.116460539 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.117971192 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.117016287 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.116795391 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.116719487 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.116448745 seconds)
  done (took 44.353684102 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.116362726 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.119362378 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.117162656 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.117283221 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.117069683 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.117411854 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.116703323 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.117017183 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.11784984 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.118195944 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.118606425 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.118375645 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.118470351 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.117367126 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.11732742 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.118472837 seconds)
  done (took 35.923682903 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.118154299 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.11869567 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.118040696 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.117920255 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.118100028 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.118939127 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.119190866 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.118926987 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.119095179 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.118322518 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.1187109 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.118752367 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.119067699 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.118703196 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.118892407 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.118777925 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.118486551 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.119534595 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.119136591 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.119487342 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.120043723 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.119487989 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.120001018 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.119604138 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.119650342 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.119564594 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.119226902 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.120019045 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.120032824 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.119734993 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.119906017 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.121116016 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.119760272 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.120070995 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.119028611 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.120253383 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.119760937 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.120533013 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.119965447 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.120931928 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.120228731 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.120624885 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.120663589 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.120579113 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.120319208 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.120861997 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.120982522 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.121687594 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.121144685 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.121468187 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.120838508 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.120951202 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.122115042 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.121828974 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.121395608 seconds)
  done (took 118.631646371 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.121076642 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.121556536 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.122001719 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.121698556 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.12085567 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.121693952 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.122285868 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.121885018 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.121943217 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.121494279 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.121957337 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.122130452 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.122213719 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.123020303 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.122439792 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.122020376 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.122228584 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.122318753 seconds)
  done (took 40.238951047 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.122347481 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.121925752 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.122722813 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.122713344 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.122639537 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.122479776 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.122888759 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.123047065 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.123064713 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.123141016 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.123459749 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.123171924 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123268474 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.12304949 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.122694886 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.123137636 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.123840935 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.123556901 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.123105953 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.124079912 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.124091762 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.124255626 seconds)
  done (took 48.753952855 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.124033971 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.123251494 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.138475864 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.146794128 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.14582077 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.160931124 seconds)
  done (took 14.885538475 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124295442 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124444449 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.126508659 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123838794 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124588206 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.094107779 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.12462443 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.093656823 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124598289 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.124767593 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120672773 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.099281273 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.124701726 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.1255377 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125222566 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.124442236 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124447193 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125710839 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.115817603 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125342399 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.098662155 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.124305497 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.126156095 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.125434984 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095281424 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.125446436 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.125458818 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121509054 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.101679185 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.125513844 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125642044 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126247017 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126439572 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.125584437 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.125622824 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.102715679 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121958196 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.097353514 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.125308786 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.096606437 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.126862904 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.110884172 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.126545545 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.1268344 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126537674 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126980906 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.126504344 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.127875859 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127045301 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127715477 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.126904411 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.127162465 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127649147 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127272046 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.126528563 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127132864 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.127801791 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128086138 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.127512164 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127803459 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.128123754 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.127770124 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.127607576 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.114875787 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.116382249 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.12767381 seconds)
  done (took 142.058107721 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.128972365 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.128884248 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.127574418 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129406616 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.128657515 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117071968 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128928995 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.129100307 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.128766669 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.128633223 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.1287808 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128949132 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.1284909 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.114828393 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.11462384 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.128526492 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116953841 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130455724 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.128616922 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129556445 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129296906 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129247247 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.129685378 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129984792 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130006482 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130387667 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.129188562 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130022735 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.130137336 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.130130405 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.129682308 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.129732063 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.130363843 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.129637611 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.130837264 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12978057 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130589822 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.130497582 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130979819 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.13015606 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131299186 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.123919518 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.110619927 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.130313616 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.130703941 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.113881035 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117503283 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131576142 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.131047919 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.1314562 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131465142 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.131400039 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131907202 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.131229108 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132191276 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.126122939 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.131685205 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.131366515 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132305084 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119226329 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.132725798 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.13276488 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.132078273 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.131689067 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.132436199 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.133312243 seconds)
  done (took 142.52535109 seconds)
done (took 2935.505544648 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.148602174 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.202029711 seconds)
  done (took 16.405085514 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.29596987 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.18978528 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.31892427 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.248076712 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.137614499 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.141740418 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.133956912 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.134764188 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.21555648 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.1351319 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.144992856 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.134475129 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.128384905 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.113380602 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.134978842 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.135542178 seconds)
  done (took 56.807823525 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.135971018 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.138570224 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.135480985 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.134831984 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.146940494 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.209420635 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.15763893 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.108801821 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.148672321 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.147418878 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.146969563 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.117709634 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.143271747 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.139864181 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.222974029 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.18240467 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.168888314 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.215214569 seconds)
  done (took 40.857126733 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.216492133 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.149132009 seconds)
  done (took 11.427151687 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.165729249 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.136413429 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.149843887 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.124951855 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.143722363 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.132667561 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.158624074 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.147074694 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.137467309 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.168393628 seconds)
  done (took 73.560886323 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.138383856 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.125217064 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.441862568 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.147588527 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.142684096 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.160348218 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.137283778 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.16628406 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.140498319 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.134071705 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.148293646 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.446675347 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.149413087 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.136783966 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.573013683 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.150904694 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.142452082 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.167254352 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.168051707 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.141851608 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.142488269 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.139613922 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.298936638 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.835384982 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.139460208 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.139363285 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.143390868 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.135838114 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.135780043 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.136782068 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.13877011 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.137039164 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.140322525 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.139680495 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.144060736 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.141868818 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.629840328 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.158946885 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.144416707 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.225428674 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.182123172 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.145674217 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.919475245 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.140153594 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.136384512 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.144325804 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.829842321 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.201502536 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.140579309 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.287124396 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.475375497 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.154489445 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.28576301 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.298773882 seconds)
  done (took 147.606592059 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.13673578 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.371876862 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.288824515 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.13942507 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.395134058 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.348929761 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.139053514 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.18338504 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.141093826 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.34047585 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.392567036 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.243078016 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.139801297 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.138912978 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.139164988 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.137553613 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.282711116 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.206834557 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.141750595 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.137438878 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.162390799 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.340488701 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.262118512 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.142843636 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.164548964 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.346832352 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.261675614 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.242140067 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.949493615 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.137799221 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.201599131 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.141362821 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.139428106 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.138734632 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.292465815 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.233095826 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.224244121 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.141253469 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.137927464 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.137996092 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.811247271 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.339624469 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.23369824 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.263131665 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.388411387 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.35526678 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.750292854 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.138602776 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.774495466 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.304377651 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.345577122 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.349101154 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.260741418 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.143596802 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.68628976 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.139547483 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.140255065 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.361971682 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.358503142 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.242026933 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.142409455 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.139626569 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.13928721 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.378342402 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.143293944 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.230699257 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.143740849 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.141510338 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.233288276 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.242331625 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.366359462 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.362456672 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.171592777 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.482230635 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.628997844 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.342917667 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.207278632 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.362177039 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.145811842 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.140252584 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.223201104 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.977629483 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.396985358 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.383571049 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.340207824 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.171969064 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.790508952 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.141045766 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.328403866 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.332391353 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.375847848 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.384122047 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.378864202 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.517856328 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.12309374 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.141427637 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.442453722 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.258439266 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.088900453 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.501491173 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.371790557 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.672046558 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.167784165 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.470156574 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.272420658 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.14537656 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.788160678 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.142064539 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.347929941 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.182179201 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.144809828 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.142117067 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.332845421 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.047522795 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.1431776 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.09661288 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.204651789 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.147134225 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.347380341 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.148565592 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.388372449 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.147958944 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.375513792 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.752754118 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.174456189 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.369802981 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.388355984 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.77794808 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.383726211 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.386752655 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259729406 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.415454244 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.1486016 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.147552081 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.406844789 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.147586454 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.143942679 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.312664326 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.148846686 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.287604227 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.147701882 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.409927942 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.16619027 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.376691296 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.149662619 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.384669071 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.177698716 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.195535321 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.147876161 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.274915397 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.147994128 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.984757066 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.303247642 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.14888981 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.144074458 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.933835774 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.145847425 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.294426011 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.370851851 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.167212281 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.215211884 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.710680393 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.145680187 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.227279405 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.169170519 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.439111336 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.146881545 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.404442584 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.124401704 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.62565949 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.135517406 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.382060659 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.383296559 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.150887316 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.146417009 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.992167168 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.14695185 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.146775181 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.302760957 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.101162013 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.042050002 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.344797215 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.152660331 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.275349457 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.1511532 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.224373554 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.492891245 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.146939599 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.147873435 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.148829333 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.14769409 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.148589287 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.396892698 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.169020325 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.576107664 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.284972979 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.403640677 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.456120468 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.344280562 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.189357893 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.151563958 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.371422466 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.151367567 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.210908078 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.151079826 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.167876468 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.377288511 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.151722212 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.353522135 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.383883459 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.03547876 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.196127258 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.15216951 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.150098835 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.127974907 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.296781168 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.236630907 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.151576537 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.148622006 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.263845891 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.271946174 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.33169562 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.972025665 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.321757661 seconds)
  done (took 963.55936492 seconds)
done (took 1312.282666657 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.149558021 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.152006398 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.15223956 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.151341389 seconds)
  done (took 30.677013686 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.150548168 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.15194742 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.152243215 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.152849968 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.151661002 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.151190811 seconds)
  done (took 14.982739648 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.151162489 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.152518322 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.152297202 seconds)
  done (took 23.528325892 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.582953817 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.562690366 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.225752959 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.297909062 seconds)
  done (took 11.742856842 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.157959654 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.1522695 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.152877561 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.154884919 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.152909897 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.152181821 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.154067341 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.15389109 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.154503133 seconds)
  done (took 21.4683434 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.348080195 seconds)
done (took 108.822943978 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.298856568 seconds)
    (2/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.254604268 seconds)
    (3/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.190071012 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.330111064 seconds)
    (5/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.783704398 seconds)
    (6/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.303022741 seconds)
    (7/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.15695304 seconds)
    (8/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.317126843 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.452671952 seconds)
    (10/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.460815032 seconds)
    (11/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.170200329 seconds)
    (12/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.152863744 seconds)
    (13/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.240139767 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.281749943 seconds)
    (15/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.482111422 seconds)
    (16/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.462083946 seconds)
    (17/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.425813858 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.169908494 seconds)
    (19/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.138542395 seconds)
    (20/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.99413488 seconds)
    (21/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.309727951 seconds)
    (22/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.650759735 seconds)
    (23/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.563099514 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.172695459 seconds)
    (25/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.793177424 seconds)
    (26/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.262879656 seconds)
    (27/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.391168493 seconds)
    (28/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.167538058 seconds)
    (29/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.167849712 seconds)
    (30/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.397270948 seconds)
    (31/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.255703547 seconds)
    (32/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.370976454 seconds)
    (33/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.475085903 seconds)
    (34/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.035032384 seconds)
    (35/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.029315605 seconds)
    (36/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.381090756 seconds)
    (37/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.466591284 seconds)
    (38/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.170464905 seconds)
    (39/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.280340327 seconds)
    (40/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.235667293 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.257933043 seconds)
    (42/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.230739476 seconds)
    (43/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.375374802 seconds)
    (44/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.922180988 seconds)
    (45/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.229318393 seconds)
    (46/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.228254456 seconds)
    (47/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.306470098 seconds)
    (48/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.240633876 seconds)
    (49/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.384600102 seconds)
    (50/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.229529573 seconds)
    (51/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.360050419 seconds)
    (52/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.427958614 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.025524745 seconds)
    (54/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.143386215 seconds)
    (55/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.58196968 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.078839723 seconds)
    (57/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.248855911 seconds)
    (58/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.568986438 seconds)
    (59/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.156199482 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.451886714 seconds)
    (61/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.284931868 seconds)
    (62/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.146825094 seconds)
    (63/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.188297066 seconds)
    (64/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.61431702 seconds)
    (65/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.587148909 seconds)
    (66/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.459910098 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.399230678 seconds)
    (68/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.212844612 seconds)
    (69/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.388678491 seconds)
    (70/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.382601885 seconds)
    (71/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.263797096 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.542206338 seconds)
    (73/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.353026745 seconds)
    (74/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.54083404 seconds)
    (75/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.655890766 seconds)
    (76/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.44762925 seconds)
    (77/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.2804457 seconds)
    (78/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.145989942 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.636888031 seconds)
    (80/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.147576581 seconds)
    (81/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.859872296 seconds)
    (82/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.462088945 seconds)
    (83/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.226578176 seconds)
    (84/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.458535961 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.160425439 seconds)
    (86/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.1449621 seconds)
    (87/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 3.724621152 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.145099935 seconds)
    (89/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.529350279 seconds)
    (90/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.167605606 seconds)
    (91/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.303582582 seconds)
    (92/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.368470147 seconds)
    (93/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.48300355 seconds)
    (94/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.470182058 seconds)
    (95/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.254565068 seconds)
    (96/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.146552679 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 4.73884261 seconds)
    (98/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.433497708 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.162971963 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.144760017 seconds)
    (101/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.106003054 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.549767238 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.161031614 seconds)
    (104/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.907377084 seconds)
    (105/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.389242483 seconds)
    (106/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.15003928 seconds)
    (107/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.225287514 seconds)
    (108/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.148649227 seconds)
    (109/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.145469316 seconds)
    (110/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.154207712 seconds)
    (111/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.348010178 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.485737839 seconds)
    (113/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.150124574 seconds)
    (114/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.399949507 seconds)
    (115/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.163555133 seconds)
    (116/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.146029162 seconds)
    (117/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.2926775 seconds)
    (118/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.150588756 seconds)
    (119/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 4.092409475 seconds)
    (120/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.927339089 seconds)
    (121/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.782752587 seconds)
    (122/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.2511121 seconds)
    (123/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.286131265 seconds)
    (124/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.149206647 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.498879388 seconds)
    (126/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.306483325 seconds)
    (127/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.155628707 seconds)
    (128/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.455564197 seconds)
    (129/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.424961222 seconds)
    (130/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.149936668 seconds)
    (131/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 3.849614072 seconds)
    (132/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.57112401 seconds)
    (133/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.147449724 seconds)
    (134/341) benchmarking ("sort", BigInt, false)...
    done (took 7.151209906 seconds)
    (135/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.170321882 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.266710651 seconds)
    (137/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.429048618 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.984007754 seconds)
    (139/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.471352667 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.039780056 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.286156258 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.365109945 seconds)
    (143/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.410839361 seconds)
    (144/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.268380843 seconds)
    (145/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.253513363 seconds)
    (146/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.456704375 seconds)
    (147/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.470040948 seconds)
    (148/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.39114592 seconds)
    (149/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.150801871 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.385976115 seconds)
    (151/341) benchmarking ("sort", Bool, false)...
    done (took 2.365830496 seconds)
    (152/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.341612719 seconds)
    (153/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.525139901 seconds)
    (154/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.276690512 seconds)
    (155/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.072442028 seconds)
    (156/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.175442562 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.848932776 seconds)
    (158/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.548286419 seconds)
    (159/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.269110145 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.170766003 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.163079647 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.410452908 seconds)
    (163/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.420486751 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.809971211 seconds)
    (165/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.153278757 seconds)
    (166/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.196987626 seconds)
    (167/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.436936958 seconds)
    (168/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.375983764 seconds)
    (169/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.361448138 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.153856553 seconds)
    (171/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 8.961498462 seconds)
    (172/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.078243862 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.288293956 seconds)
    (174/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.22899159 seconds)
    (175/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.849422667 seconds)
    (176/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.459991174 seconds)
    (177/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.612189491 seconds)
    (178/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.361608425 seconds)
    (179/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.27766961 seconds)
    (180/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.306534913 seconds)
    (181/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.561117519 seconds)
    (182/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.367647689 seconds)
    (183/341) benchmarking ("sort", Float32, false)...
    done (took 5.823861685 seconds)
    (184/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.154441904 seconds)
    (185/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.297121889 seconds)
    (186/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.183486774 seconds)
    (187/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.167453211 seconds)
    (188/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.152176658 seconds)
    (189/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.252493867 seconds)
    (190/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.354902006 seconds)
    (191/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.314157812 seconds)
    (192/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.253264377 seconds)
    (193/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.156632274 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.175893566 seconds)
    (195/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.845553787 seconds)
    (196/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.545812462 seconds)
    (197/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.152035626 seconds)
    (198/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.296951702 seconds)
    (199/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.355773984 seconds)
    (200/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.426428025 seconds)
    (201/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.395452223 seconds)
    (202/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.154915377 seconds)
    (203/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.37141396 seconds)
    (204/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.315413848 seconds)
    (205/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.299798023 seconds)
    (206/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.310511271 seconds)
    (207/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.172604181 seconds)
    (208/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.168672594 seconds)
    (209/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.151884794 seconds)
    (210/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 3.736023179 seconds)
    (211/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.288022122 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.472989592 seconds)
    (213/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.931271744 seconds)
    (214/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.163774393 seconds)
    (215/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.529171461 seconds)
    (216/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.554236931 seconds)
    (217/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.233591494 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.29821816 seconds)
    (219/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.261066175 seconds)
    (220/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.497122615 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.176769471 seconds)
    (222/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.165288904 seconds)
    (223/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.927388711 seconds)
    (224/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.88891872 seconds)
    (225/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.167296567 seconds)
    (226/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.266440358 seconds)
    (227/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.465079069 seconds)
    (228/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.425856533 seconds)
    (229/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.36090234 seconds)
    (230/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.2376657 seconds)
    (231/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.218405006 seconds)
    (232/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.231686867 seconds)
    (233/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.252484911 seconds)
    (234/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.649233149 seconds)
    (235/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.146112871 seconds)
    (236/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.271332361 seconds)
    (237/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.155585462 seconds)
    (238/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.645874822 seconds)
    (239/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.592528197 seconds)
    (240/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.261452401 seconds)
    (241/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.237703869 seconds)
    (242/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.448158239 seconds)
    (243/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.81737559 seconds)
    (244/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.153926371 seconds)
    (245/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 8.661767159 seconds)
    (246/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.878728497 seconds)
    (247/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.160101828 seconds)
    (248/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.26622865 seconds)
    (249/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.390456898 seconds)
    (250/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.235042123 seconds)
    (251/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.264424385 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.15094627 seconds)
    (253/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.266893892 seconds)
    (254/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.173986112 seconds)
    (255/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.163019169 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.891377239 seconds)
    (257/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.191807117 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.173315818 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.231555717 seconds)
    (260/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.178629459 seconds)
    (261/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.552718327 seconds)
    (262/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.170872295 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.166394181 seconds)
    (264/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.535348047 seconds)
    (265/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.277523892 seconds)
    (266/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.23729331 seconds)
    (267/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.341791032 seconds)
    (268/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.579438396 seconds)
    (269/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.160420713 seconds)
    (270/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.452503795 seconds)
    (271/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.260247278 seconds)
    (272/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.093974842 seconds)
    (273/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.40895963 seconds)
    (274/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.15751871 seconds)
    (275/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.125752281 seconds)
    (276/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.518461201 seconds)
    (277/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.251873973 seconds)
    (278/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.160493551 seconds)
    (279/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.342035589 seconds)
    (280/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.050067227 seconds)
    (281/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.730451928 seconds)
    (282/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.169799535 seconds)
    (283/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.352674911 seconds)
    (284/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.170260625 seconds)
    (285/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.322020477 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.177008588 seconds)
    (287/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.96209868 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.919439498 seconds)
    (289/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.466989724 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.287649348 seconds)
    (291/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.157489615 seconds)
    (292/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 4.747781161 seconds)
    (293/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.578868605 seconds)
    (294/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.275773142 seconds)
    (295/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.562779164 seconds)
    (296/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.180613733 seconds)
    (297/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.157965229 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.491365552 seconds)
    (299/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.677332158 seconds)
    (300/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.280032783 seconds)
    (301/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.273527459 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.596709996 seconds)
    (303/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.290326956 seconds)
    (304/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.099651771 seconds)
    (305/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.162626738 seconds)
    (306/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.315996659 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.397944879 seconds)
    (308/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.297694596 seconds)
    (309/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.310317483 seconds)
    (310/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.357645377 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.900663458 seconds)
    (312/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.675677469 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.501473553 seconds)
    (314/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.162176598 seconds)
    (315/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.585344333 seconds)
    (316/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.761970546 seconds)
    (317/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.181996443 seconds)
    (318/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.170062007 seconds)
    (319/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.266309282 seconds)
    (320/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.252781714 seconds)
    (321/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.467531742 seconds)
    (322/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.27650859 seconds)
    (323/341) benchmarking ("sort", Float64, false)...
    done (took 5.858399145 seconds)
    (324/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.46524581 seconds)
    (325/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.918781507 seconds)
    (326/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.93837187 seconds)
    (327/341) benchmarking ("sort", Int8, false)...
    done (took 5.099420084 seconds)
    (328/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.58185397 seconds)
    (329/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.399110487 seconds)
    (330/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.984501781 seconds)
    (331/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.378746439 seconds)
    (332/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.339747257 seconds)
    (333/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.550787638 seconds)
    (334/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.161525681 seconds)
    (335/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.557453521 seconds)
    (336/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.161071807 seconds)
    (337/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 4.957526403 seconds)
    (338/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.178473875 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.172259048 seconds)
    (340/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.649876424 seconds)
    (341/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.41857338 seconds)
  done (took 1196.128847016 seconds)
done (took 1198.544548166 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.186044408 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.165214957 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.669412398 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.177177275 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.167673033 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.172264962 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.682740042 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.196072868 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.183726208 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.682303657 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.164484191 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.168955296 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.184697185 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.198734846 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.178352126 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.183830464 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.175339596 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.194859451 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.200905033 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.17584465 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.216936637 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.175179591 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.169720362 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.221078701 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.167406145 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.181926391 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.156097455 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.218263562 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.217770616 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.169601108 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.175386968 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.526896151 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.218697863 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.175273429 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.178669695 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.187084967 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.173358519 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.185522144 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.1882415 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.185661736 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.168627287 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.180951307 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.17501434 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.171036335 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.170004285 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.170569993 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.172470962 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.293335344 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.185477534 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.511610535 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.228277024 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.188815397 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.22001048 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.171538713 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.174040176 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.171080104 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.219115228 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.17372151 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.175163698 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.511218684 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.260804551 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.18306905 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.510893016 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.22962765 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.182787526 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.181470247 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.171556609 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.189963295 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.526904284 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.72288013 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.20454462 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.189575914 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.173060412 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.173958259 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.185883563 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.68221056 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.187196696 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.750285025 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.198042698 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.184360734 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.175683536 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.174781206 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.175693027 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.186893527 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.191740208 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.173746725 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.178960303 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.176390589 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.186617675 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.529655797 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.214853403 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.673051041 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.180671924 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.19278409 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.191651918 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.751955538 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.20137433 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.190660909 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.174105916 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.528855416 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.213124777 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.193261802 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.157201411 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.170868106 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.286407231 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.191129995 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.194137191 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.173557783 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.193800188 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.181247612 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.172346221 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.188708179 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.191688698 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.206940233 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.189068693 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.17473822 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.183329602 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.177449276 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.192244766 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.18396576 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.183031069 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.183940391 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.173598888 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.227454172 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.193941956 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.189917082 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.287647784 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.178717508 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.297654924 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.187738773 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.18225621 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.175150503 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.516463401 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.215991129 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.19548969 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.18307941 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.199083188 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.194579717 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.19078632 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.178304176 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.190849316 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.176669843 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.227922757 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.173845197 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.201285561 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.228747056 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.189520759 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.184371847 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.193567671 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.208866914 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.194178833 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.180969907 seconds)
done (took 341.76279795 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.218400607 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.172875936 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.247968917 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.162334503 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.240088868 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.225237585 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.173799 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.161959245 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.173566112 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.559017342 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.173939256 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.178980351 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.167177219 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.174469267 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.222605994 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.174702519 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.175056342 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.407797189 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.170743179 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.233622254 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.174607945 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.174501253 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.173694488 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.561686555 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.173295899 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.174463381 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.233551072 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.17461722 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.420525649 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.175973089 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.17456864 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.415679639 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.234012234 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.188011576 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.182621887 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.182869634 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.241442707 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.182840956 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.221358337 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.22085342 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.249692892 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.209432559 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.176036769 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.175523222 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.178731702 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.174753251 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.176098515 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.208543012 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.173947556 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.181394387 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.410427197 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.183805066 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.181394489 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.176210304 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.176103248 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.191516691 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.176475974 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.177521806 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.235064565 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.176391725 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.223016105 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.577751926 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.560696081 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.177041862 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.176228806 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.176200595 seconds)
  done (took 204.070090686 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.243854223 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.261787334 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.242725889 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.181414936 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.228904368 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.24403458 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.182258738 seconds)
  done (took 17.681909248 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.183776301 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.177281322 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.200546151 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.201196961 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.176844435 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.316352135 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.188805177 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.18384577 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.203828163 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.177640105 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.530515879 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.200582004 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.186215885 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.176804475 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.188885664 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.206830843 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.179246068 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.178054944 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.276115764 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.255859266 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.184420537 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.186157667 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.207486885 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.190378937 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.178940525 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.178446922 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.178849914 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.18570414 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.178842318 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.178372228 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.179227558 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.192020335 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.179622041 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.177811348 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.183108188 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.182007307 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.181859428 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.182237569 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.181536147 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.162397477 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.182059365 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.183745527 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.174251916 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.178612532 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.178886451 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.204910205 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.183017538 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.181651215 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.184250712 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.170178301 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.210842943 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.181536106 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.177295603 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.181024871 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.223765999 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.190637877 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.182987063 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.182912392 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.171367803 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.18305791 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.18168846 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.263064806 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.206754655 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.183701241 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.206858827 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.22085168 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.184101229 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.182836995 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.183989887 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.209026199 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.184845122 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.206782642 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.184387385 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.296067513 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.184456542 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.325589782 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.207031643 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.187538827 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.187273249 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.183198479 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.190700501 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.183829221 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.186366589 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.190842882 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.189880909 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.184880303 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.185453736 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.185523428 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.191866656 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.184512877 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.230143628 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.185087742 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.185897795 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.289319286 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.185424948 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.282945245 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.21080494 seconds)
  done (took 235.45918071 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.190507152 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.186800234 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.198920813 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.186389716 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.185682534 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.189997181 seconds)
  done (took 15.241986541 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.187714876 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.189350913 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.186316451 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.185287669 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.185982942 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.186699946 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.186378858 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.18688872 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.190152126 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.184546734 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.186927007 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.185305628 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.185867428 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.187399092 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.186784283 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.186991524 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.187540911 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.18689195 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.186197924 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.186834565 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.427682413 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.187059916 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.1873164 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.189397947 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.19066429 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.187268921 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.196186686 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.188069151 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.186757726 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.192360647 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.191278004 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.188442886 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.18982441 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.193139194 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.193473419 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.190603628 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.191690367 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.187794025 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.18808414 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.189155407 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.188551684 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.188797177 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.187684625 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.187702219 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.188875917 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.195091683 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.193033659 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.200492104 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.188847671 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.188422877 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.188128567 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.189294372 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.176736113 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.188559724 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.193213235 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.194915878 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.192451078 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.189069234 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.188751937 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.192178343 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.192974724 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.189979179 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.191005949 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.193852486 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.196705938 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.189487002 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.193034365 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.192928363 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.190025572 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.189397257 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.189805887 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.189338771 seconds)
  done (took 160.979087563 seconds)
done (took 635.529213458 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.264390822 seconds)
  done (took 9.372599871 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.227244064 seconds)
  done (took 9.435554487 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.630135791 seconds)
  done (took 12.737559083 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.223970828 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.204186338 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.204956997 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.189812061 seconds)
  done (took 30.94132143 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.442808936 seconds)
  done (took 9.551241974 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.200425638 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.187397551 seconds)
  done (took 16.560849203 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.281128198 seconds)
  done (took 9.390284707 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.694764233 seconds)
  done (took 9.82324197 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.207831695 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.210574529 seconds)
  done (took 16.546725504 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.192514225 seconds)
  done (took 9.301008345 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.244442034 seconds)
  done (took 10.438070105 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.194984169 seconds)
  done (took 9.321521246 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.262126454 seconds)
  done (took 9.342939023 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.137733142 seconds)
  done (took 10.247230945 seconds)
done (took 175.121883335 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.197646521 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.190754396 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.189954518 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.189497934 seconds)
  done (took 30.87811041 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.226743387 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.226984215 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.234826483 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.225924861 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.216939646 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.216025878 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.226239666 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.22683291 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.217405978 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.224623777 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.226617254 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.223790109 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.225857992 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.236557818 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.236079606 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.224714112 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.226958358 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.227439126 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.216882338 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.236078574 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.223708419 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.226766165 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.192992294 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.192795612 seconds)
  done (took 55.47024833 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.382753081 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.258977705 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.346837447 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.238616742 seconds)
  done (took 11.30814519 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.193098753 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.226334476 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.24466249 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.239203498 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.244085473 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.295227194 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.245511135 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.328878351 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.321672752 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.319643484 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.176508865 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.214812857 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.214405131 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.239911067 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.296978725 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.193369839 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.193764064 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.309831657 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.255351184 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.363710162 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.193816255 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.248582172 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.2456603 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.246703035 seconds)
  done (took 56.163291244 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.195125697 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.202769382 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.201252563 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.195477301 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.195925878 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.187543963 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.201790816 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.197172482 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.217330786 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.197444388 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.195074468 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.194990349 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.201647523 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.196223365 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.195202186 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.209261975 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.209634338 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.1970491 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.199452881 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.203306416 seconds)
  done (took 46.106888427 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.195952836 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.039401784 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.54089842 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.446068724 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.194501793 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.172178851 seconds)
  done (took 33.702860928 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.205131079 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.209967976 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.200632795 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.220063581 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.232568412 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.180816938 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.255124967 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.360274703 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.205058199 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.252799598 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.217174005 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.198688768 seconds)
  done (took 28.829212022 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.19294274 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.196871403 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.197477174 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.209296779 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.20637723 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.204212192 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.202942325 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.194374105 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.20886226 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.20242053 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.195603079 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.204082702 seconds)
  done (took 48.50241736 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.409989905 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.410762604 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411802898 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.738211812 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.509637633 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167648659 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.483865476 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.409637618 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.870897749 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.959513036 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.484472514 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.17370875 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.145538969 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.122582454 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094474312 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.439622255 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198422386 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.054616975 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447279847 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.242785876 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200951522 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.197807951 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201126915 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.481036674 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.521626721 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.206296066 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.410762675 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201999085 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.243945181 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.384368815 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.751365666 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.249865538 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.401737707 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.455223517 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.533905261 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.328546414 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.203036135 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.343116155 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.240172331 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.21760325 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.208828114 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.209063594 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.740956167 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.211374283 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.47040236 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200480193 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.2805373 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.198300424 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124916791 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.499180615 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.306547606 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.198480507 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.233506465 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.622227834 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.317866864 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441339955 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191388981 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.339619234 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248758032 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.415079331 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.391504254 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.194414684 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412320317 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.125661443 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.558494834 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305150332 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.202115052 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193708694 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.900590869 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.439855596 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.28178506 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.487863494 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.95121808 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.202538477 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.202713414 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.243454871 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289854997 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.200841054 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.49242909 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.197702858 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.126862318 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.301272439 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.595946888 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205578141 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.199930895 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208102931 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.046528293 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.127201643 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.298011147 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.419413177 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.517903103 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.202695718 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.20196719 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.223708123 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205340416 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150559989 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.721754401 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.26622608 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.128462898 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.766302541 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.762904478 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.167158875 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.695968116 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.243896967 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473613569 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.338980835 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.609138329 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.410641906 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.447761755 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.776561244 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.208125956 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.818437752 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.284065827 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.2787562 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202331216 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.766731836 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.351853788 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.460478741 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.311875934 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.203194763 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.12943473 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.214414183 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.406811378 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.769430199 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233448725 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203709243 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.208597553 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.203155674 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.206597685 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.366286492 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.220311583 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.491690033 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.273521008 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.204935453 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.140793166 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.208522673 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.483577626 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.815620406 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.260329691 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.456090072 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.467252099 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.90343832 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.80230351 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.14863741 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.468645348 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.272625097 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.279722479 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.787484823 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.333327513 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.288769075 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204884176 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.334292535 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.214357003 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.207738183 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.554181694 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.615826973 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628061727 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.249956924 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.204788852 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.159688222 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.354176281 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.446004465 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.255450439 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.236348185 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21074766 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289881154 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.43274099 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.205919744 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.132321163 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.447048612 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.445856273 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.492813244 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.611905291 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.254524711 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.276842252 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.216792819 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.419513292 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288643547 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.864211544 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.753515863 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.420651715 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.709452739 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.171781486 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.846411368 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.422537645 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.581855616 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.222679511 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.659861437 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.35656993 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.854626685 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.237970466 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.736399303 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.134184122 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.212385421 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.540018797 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.160538557 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.516989878 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.280722678 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.224117972 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.20983565 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.208948448 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.215606184 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.107326441 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3129422 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27742377 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28058083 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.135897545 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.82238805 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.246217175 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.210695516 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.207626668 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.525884497 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.044478937 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160029562 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.208620517 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286027984 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.955000768 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.759070639 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.212453386 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212801069 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.813861963 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214626832 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.122714544 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.31708456 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.974156476 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232882277 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.43133539 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.904732424 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.495538079 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.282761499 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.286097919 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.209685874 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217558631 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.907828073 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218884923 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.910708176 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.491428761 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.480969583 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.634774008 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.263187074 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.417265388 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.224644778 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.211873129 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.724213223 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.234471894 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213268127 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414396411 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.729252536 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.501367669 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.166408783 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.296795643 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.21152613 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.47433034 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.213502747 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.778283715 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.896014091 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.212451217 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.212650809 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.472566479 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.897290284 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.213438899 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.187968393 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219118054 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.424599804 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.416079944 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.480188811 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.505966362 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.659881562 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.138692809 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.217394802 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.254437131 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.456779295 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.213243536 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.24837772 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.656502923 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.268360962 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.639570087 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.492846435 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.559452524 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.841956127 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.474742673 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.275299382 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.224716879 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.862565778 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.33821796 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.145548689 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.331792444 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.139687402 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.951529407 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.503698222 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.234026699 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.477548231 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.19108278 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.563615615 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.508128772 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.438754145 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.253960306 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.243193216 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.214284857 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.255255571 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.213381235 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.374214853 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.327722001 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.220231702 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.730113934 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251612123 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261736343 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219780958 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.727361345 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233696691 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.216523173 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.908735489 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.240089859 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.334038096 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28682346 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.965457594 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.810257384 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.241605401 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.184448663 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.862509627 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.47862273 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.268747933 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.665170324 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250058975 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.620415044 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.216337112 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.428579645 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.221411224 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.758333489 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.260565354 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.482188962 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.169072541 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.429083758 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.419299277 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.240040572 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.222548396 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.142466925 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.325364739 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.08943018 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.203518529 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.219609481 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.899080949 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.613452506 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.392908492 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.648294985 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.035487253 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.219762066 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.569371656 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.601731172 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.810104076 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.250418227 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.219295671 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.511215866 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.344704235 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.487032544 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.502451094 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225647871 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.243748515 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.431126019 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333630223 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136858977 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.699379994 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.792613261 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.919265586 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.228718265 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.42180248 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.512779511 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.474392928 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.25344457 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.291864491 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.623745272 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.470484038 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.284094316 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14517046 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.218787699 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.61624347 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.615286102 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.316611257 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.460329888 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.522309254 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.81118504 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.789131627 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.628896285 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.623574285 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.655606993 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.620683745 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.43537082 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.57811329 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.54137351 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104260255 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.632719631 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.433112288 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308776843 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.50628393 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.088504266 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.929640939 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.464233656 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.226184103 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.149975721 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.428154425 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.223987988 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.605110899 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.792707729 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.469206988 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.439552226 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.686216103 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.762239809 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.380587821 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.248565346 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.189504836 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.247107222 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.244575176 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.224317813 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.704275327 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512556316 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237503809 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163684612 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.896755406 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.151127722 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.437950448 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.38602301 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.260576629 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781966586 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.44477028 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.319379562 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.508744356 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.444974772 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.25998608 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.151776279 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.90467649 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.170531344 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.282751662 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.648777803 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241925087 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.227836481 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.428552599 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.15499174 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271099402 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.230869846 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.421026814 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801712293 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.493466048 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.348509615 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.471095559 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.524300827 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.091895838 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.245718221 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499340946 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.15443563 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.825910776 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.906003925 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.267315747 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.297918955 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226846032 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.229565724 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498531063 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.510708313 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.313938919 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.915822201 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.259242594 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.251310273 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.511765882 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.312436511 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.228512479 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.232302023 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.68661967 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.460687492 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.228011069 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.20797096 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.441013257 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301497719 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.423598834 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303288548 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.742045916 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.233832345 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.086809047 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323080928 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.182760509 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228886599 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.976642335 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.288085981 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.228194397 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.496352402 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.879448236 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.432544538 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.62528971 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.099094203 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.393253386 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269842085 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.231306606 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.235905102 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.615196517 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.528908667 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.229383364 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.495503244 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.276807813 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.234566145 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.892097507 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.198829052 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.229239822 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.985465907 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.115764517 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.962864364 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.6253394 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.330825294 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234316251 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.233211 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.15558524 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.230177 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.389927026 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.213976231 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.239460831 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.599445544 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.50651273 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.315200894 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234701513 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.220689762 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.23823783 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.443288494 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.745375165 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247681517 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.931317454 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.43526526 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.2374853 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.712233727 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.67916667 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.459624456 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.268550855 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.396699848 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.467693365 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.766295179 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.397052314 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196025338 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.458995524 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.233813422 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.504125587 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.476725659 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.232703755 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.444657189 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.812788369 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517488446 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.591051602 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.541043105 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.293858599 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.405633019 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.134860805 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.239036222 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.23520396 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.495420134 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.283436033 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.232686694 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241264036 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.785331397 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.921536766 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.696512523 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.38458678 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.531952389 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066537512 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.986363409 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.236233226 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.159358556 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.231306608 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.259393673 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.215543541 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.15957737 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.980148662 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.955787953 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.446588111 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.544062551 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.160928004 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.437692436 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.833690311 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.16043096 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.203321443 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233483886 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.485105053 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160984851 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.238134229 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.189682033 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.484357535 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.966492847 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.502871652 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.235514839 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.178871374 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240245478 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.237511091 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.233766402 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.319156789 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.236511628 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351567081 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.498159816 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.570549174 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.334653485 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.874780368 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.912480894 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.172195673 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278648023 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.795531321 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.805905326 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.46962794 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.359222377 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.978628175 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.179008574 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.238115781 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252438877 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.496353493 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.240640495 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.239117744 seconds)
  done (took 2288.176938363 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.327144408 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.312606445 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.299047501 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.321410482 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.271030083 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.325064511 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.305373755 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.28960356 seconds)
  done (took 60.604502218 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.234709141 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.253192413 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.243843156 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.235896704 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.236493594 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.240321057 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.428820355 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.262759674 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.235898681 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.240225225 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.236945861 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.2396596 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.237240586 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.239133214 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.24143726 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.536266164 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.257593918 seconds)
  done (took 82.83602911 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.292180549 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.064307287 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.238104331 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.922235789 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.288678847 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.581741364 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.240539432 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.237992437 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.352349372 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.535063058 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.274704297 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.25590713 seconds)
  done (took 94.462617019 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.238722581 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.238723114 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.238170654 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.238965262 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.238970051 seconds)
  done (took 13.348348659 seconds)
done (took 2852.558053811 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.488464448 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.332987371 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.311092155 seconds)
  done (took 6.799778953 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.38189036 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.432028119 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.544485546 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.550829048 seconds)
  done (took 12.069580647 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.54389516 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.606202905 seconds)
  done (took 7.306339623 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.609679787 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.249066129 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.627645332 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.23920161 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.241484657 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.245538562 seconds)
  done (took 23.886828871 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.240243335 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.243445839 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.241000631 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.241072414 seconds)
  done (took 11.122720928 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.239868913 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.034746228 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.24276805 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.254874738 seconds)
  done (took 22.92886287 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.425167676 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.275390823 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.005356289 seconds)
  done (took 10.86265434 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.865704343 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.692467834 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.84873349 seconds)
  done (took 10.563650551 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.419725348 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.22519133 seconds)
  done (took 8.801527369 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.384958848 seconds)
  done (took 4.542779809 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.075357558 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.553527545 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.714803034 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.751599775 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.818592333 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.451563254 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.558104307 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.4965371 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.639612273 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.671195161 seconds)
  done (took 28.889330748 seconds)
done (took 164.907700392 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.691154064 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.269723408 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.452682557 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.617839915 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.485387549 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.455078299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.529008635 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.607096888 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.294904546 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.279647277 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.619723457 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.480012067 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.485035179 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.265365984 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.487063792 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.263859062 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.479816841 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.70988631 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.300388389 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.540177694 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.542107948 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.263178295 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.458990124 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.281456538 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.483648319 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.403159083 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.888219737 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.265898481 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.449464344 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.903804313 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.405979363 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.686258236 seconds)
  done (took 181.50608557 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.244276278 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.244341822 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.246018117 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.244580159 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.570602948 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.245168196 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.244961496 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.24430406 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.524275141 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.512777775 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.244741833 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.557876893 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.244242719 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.243757148 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.24622093 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.244540542 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.643608398 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.244502533 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.245272628 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.24400027 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.246946702 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.439364669 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.244041061 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.460198459 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.630378092 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.246428529 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.245245379 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.244882539 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.245871673 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.245667083 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.247090599 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.245570411 seconds)
  done (took 220.384673755 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.245436377 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.245875496 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.247376145 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.242241958 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.238455559 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.24845569 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.247902219 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.246760029 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.981637059 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.979083915 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.246721011 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.246417273 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.249251306 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.246243588 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.245203936 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.246134114 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.246775454 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.24751961 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.247144586 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.247300254 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.247659121 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.115256599 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.247323611 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.131609505 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.247601405 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.248407668 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.24722794 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.247119555 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.245639927 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.247141211 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.249321164 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.247890258 seconds)
  done (took 233.278669313 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.489345166 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.247976397 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.249034076 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.253123291 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.250289591 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.248400394 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.250844273 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.495400949 seconds)
  done (took 22.649332493 seconds)
done (took 659.992747559 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.607180058 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.963527648 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.378130635 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.273012391 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.504878802 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.312510096 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.267792328 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.334276404 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.908612603 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.342628092 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.662678929 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.274893735 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.966419011 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.294138955 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.382281115 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.333467674 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.616812798 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.883693821 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.401660196 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.925211237 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.475327687 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.224189507 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.352868408 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.960423863 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.6734546 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.238226783 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.302920745 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.624610166 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.27337183 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.502386415 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.899181547 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.511763872 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.284414827 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.269031657 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.329228706 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.310954143 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.484761532 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.280976817 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.376156806 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.017121895 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.917403773 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.793931309 seconds)
  done (took 115.902221632 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.257447296 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.256071721 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.256326818 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.256027244 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.265106438 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.256006844 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.257198377 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.255692535 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.256780956 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.256938539 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.257429352 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.265039183 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.257167026 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.264847656 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.256403531 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.257461605 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.257390052 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.266082915 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.257117487 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.256932483 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.257918167 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.257249981 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.253245853 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.257908993 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.256807279 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.25747606 seconds)
  done (took 60.88553175 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.253048049 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.402302422 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.53709796 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.282948352 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.253561337 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.255999983 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.280848982 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.259476428 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.254805664 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.255731773 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.345772968 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.258722652 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.265164317 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.537233993 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.280198686 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.253802149 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.254356096 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.254332573 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.410891057 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.267408059 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.284828317 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.260376779 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.283464596 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.267909756 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.256938402 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.255011403 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.257621122 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.677307373 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.265144831 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.34947326 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.298681565 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.288035764 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.604484549 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.548593152 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.320053222 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.262244409 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.255376307 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.392145733 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.266767872 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.256309585 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.283902867 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.26226794 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.543007907 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.759386116 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.268289989 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.255401121 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.672395937 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.402367333 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.302404654 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.269488732 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.551103572 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.283527758 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.256959272 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.25745101 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.293352769 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.267384998 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.256399889 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.498134984 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.271839437 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.284845905 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.263540174 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.257075369 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.420209082 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.265046067 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.410375022 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.265790295 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.263765048 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.25858867 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.54621464 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.285602556 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.760938678 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.270303451 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.25724946 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.352117325 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.414676831 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.699608925 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.270367291 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.421396233 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.622590837 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.293354585 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.26847606 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.6631837 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.297403971 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.266590104 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.259286298 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.258537951 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.258581767 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.308706509 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.283825449 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.678575657 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.760176045 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.516297948 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.297007663 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.270155729 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.259148682 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.501065799 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.268103054 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.259175284 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.538822818 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.785201993 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.271414786 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.266917074 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.742226244 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.2726809 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.287148266 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.269139088 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.556230744 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.285816424 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.309940894 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.235339051 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.261588253 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.262334157 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.287999563 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.269119167 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.259394609 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.735362537 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.406865934 seconds)
  done (took 277.803292763 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.261878318 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.259353104 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.257684351 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.260410167 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.257328175 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.259336459 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.25815748 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.257377286 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.259146129 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.257611322 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.25816101 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.260106632 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.262285104 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.264613422 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.295192627 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.260847419 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.745718659 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.258601884 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.257872899 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.26105165 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.830705678 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.265067175 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.258661523 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.261315206 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.261121361 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.259566748 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.269261091 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.834107291 seconds)
  done (took 179.133757401 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.272393872 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.36881675 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.284203089 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.308589159 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.284902059 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.272121818 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.292297587 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.296157632 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.278768424 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.272038026 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.273028067 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.300838133 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.279110005 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.433478758 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.318409724 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.303349664 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.351749417 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.283335109 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.27275295 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.272595835 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.321533353 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.287386112 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.30075161 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.329254388 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.286764424 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.321890346 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.28689682 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.273090743 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.272960203 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.387170337 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.294085597 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.302003715 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.309187808 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.292721995 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.36864476 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.36995277 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.359912731 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.306474803 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.278078961 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.274889996 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.274249031 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.274805088 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.323443624 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.288484165 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.27537459 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.365486744 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.294918294 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.274298534 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.29446182 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.274892306 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.287694611 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.29096319 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.308974113 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.377892045 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.323556293 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.301035038 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.29800381 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.294057963 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.275682388 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.351271842 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.284722704 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.366917884 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.297430733 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.275539821 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.277087136 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.279234519 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.324351197 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.311739156 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.355749367 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.285390692 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.350070671 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.333302497 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.290530369 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.275991365 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.275872521 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.324962665 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.365111854 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.333299825 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.338883539 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.313197527 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.285938039 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.27652881 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.277399867 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.303416078 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.285893627 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.368037592 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.373178385 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.286110718 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.277221108 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.276729965 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.277888302 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.300349721 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.334762527 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.318500967 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.361718365 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.314790642 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.315341249 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.286234495 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.290174388 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.282142768 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.30830775 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.287178345 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.289968082 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.615033199 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.315431707 seconds)
  done (took 244.650156048 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.659282164 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.330078817 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.346617469 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.548249829 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.668944157 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.385298263 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.317484369 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.334778043 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.336374899 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.446629809 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.385962564 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.380156328 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.314761636 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.300719933 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.327498768 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.336735908 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.366356971 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.635017663 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.425013076 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.084890029 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.324005351 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.579106885 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.613494178 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.668757177 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.36563382 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.706472766 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.974968415 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.414330626 seconds)
  done (took 73.774716611 seconds)
done (took 954.318382164 seconds)
SAVING RESULT...
DONE!
