cset: moving following pidspec: 25909
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.866756629 seconds)
loading group "shootout"... done (took 1.187182838 seconds)
loading group "string"... done (took 0.667971724 seconds)
loading group "linalg"... done (took 8.612793367 seconds)
loading group "parallel"... done (took 0.165577688 seconds)
loading group "find"... done (took 3.049323341 seconds)
loading group "tuple"... done (took 2.14450935 seconds)
loading group "union"... done (took 14.912097913 seconds)
loading group "dates"... done (took 1.456351995 seconds)
loading group "micro"... done (took 0.21992407 seconds)
loading group "simd"... done (took 4.818235219 seconds)
loading group "io"... done (took 1.08492084 seconds)
loading group "random"... done (took 9.573970874 seconds)
loading group "problem"... done (took 1.526052426 seconds)
loading group "array"... done (took 25.303490808 seconds)
loading group "misc"... done (took 1.899793957 seconds)
loading group "scalar"... done (took 43.796510085 seconds)
loading group "sort"... done (took 3.340753199 seconds)
loading group "sparse"... done (took 12.783778013 seconds)
loading group "collection"... done (took 18.775480587 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.420409771 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.114032643 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129110858 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.11438443 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.186962178 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.120705089 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.128498713 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.083800959 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.912737924 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13382764 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.112715644 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422587212 seconds)
done (took 5.311516479 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.167655679 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.08984791 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081758157 seconds)
  done (took 1.387312801 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071531353 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062629714 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067041497 seconds)
  done (took 1.414421243 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064658771 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.134284512 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065794324 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.066572861 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06603397 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066014202 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065692359 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.065725461 seconds)
  done (took 1.750076209 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071948459 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067071145 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065073734 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067575706 seconds)
  done (took 1.488612948 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065413594 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.121973654 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064207169 seconds)
    (4/4) benchmarking "different"...
    done (took 0.063949138 seconds)
  done (took 1.52959931 seconds)
done (took 9.03996848 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140348165 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.819345515 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.766256995 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.12355077 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248585077 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.365503452 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121782662 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.181603302 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089434779 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.073257901 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121980033 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07798449 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.388751669 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.505164869 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071134524 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170354964 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645464189 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085039032 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133072384 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.452818531 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072231985 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087468554 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085674498 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069202027 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.322160941 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.152953235 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667422665 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.094525096 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068202165 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094752672 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071234072 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078161193 seconds)
  done (took 10.692774234 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.090825502 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.08859262 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.067775587 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123798028 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094936355 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069976036 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075025022 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067300528 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089402878 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125098093 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091037393 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098871865 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067071224 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068916213 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074144636 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.197288813 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.078627266 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.079748085 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067441103 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.080827043 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106579334 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078959591 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079067706 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078259384 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132969355 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169933313 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094804285 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096598883 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066626441 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079676603 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115509995 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126453687 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067441991 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06516918 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120657859 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095734858 seconds)
  done (took 4.631834089 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.887455197 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.095978383 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083115766 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074085386 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107599311 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114272279 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122066384 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123414316 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100425403 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068348884 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155520938 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.671235219 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.184329563 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070040039 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.120977016 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360990078 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.065759267 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068706213 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067449399 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071301995 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070035566 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.111458636 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065732375 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.17626669 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.579403808 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070437878 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069655244 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096008769 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.093199786 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06293854 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.0652295 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138255037 seconds)
    (32/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.082844444 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091827639 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.069501356 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.542337857 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.063435098 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.173611816 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.088360477 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094382738 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066687598 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067919894 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079250524 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066203556 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109014445 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080621644 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.511138802 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067724704 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.577827283 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.227299198 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073165551 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.071943817 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10166005 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06400695 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067408822 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.911284408 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146365756 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066716951 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.272723616 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068317658 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068405222 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068846115 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.10240736 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067033552 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068157886 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072676648 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096025587 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.794510889 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089061562 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096492552 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066964216 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.407037809 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072150656 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.068983574 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069527129 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068735711 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.106858528 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066211769 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065786826 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112455298 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096669931 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090549847 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069702809 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067569534 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066246612 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.338720765 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.159615759 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064607716 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.0656211 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.475313947 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062728258 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065443269 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067546363 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.207685125 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068394051 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064992742 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065603316 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099741347 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067378597 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.346244568 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067496597 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.48382871 seconds)
    (102/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065990332 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.068740316 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103276637 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118490732 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06726281 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.10286887 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068406377 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064994912 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073716039 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065343504 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064713746 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.0693274 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06570856 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066531804 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068979595 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068345567 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067264286 seconds)
  done (took 22.755451074 seconds)
done (took 40.185223837 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.316471758 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079180362 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079602826 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079915126 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07925637 seconds)
  done (took 1.899515956 seconds)
done (took 3.25445022 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.253722551 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075290099 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063697783 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205943389 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.0891552 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177514316 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.221753636 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.168363832 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089515699 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089127784 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089189444 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.224361569 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.23066125 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090017103 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.159786089 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.231596406 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.089792645 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06364479 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088914808 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.089481031 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089630316 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063980586 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089333453 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.089418698 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.158825757 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.088925926 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063044336 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.15770356 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.08802786 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.15890906 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087954321 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087921603 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087582596 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.157582433 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.088169228 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.156268566 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063403814 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.088447678 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.087651407 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087627172 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086903403 seconds)
  done (took 6.233598908 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.072975421 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.191905154 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.082887252 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061220383 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07157004 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082225089 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061562268 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081836896 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091841503 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082634666 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082156229 seconds)
  done (took 2.308266309 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068562679 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082682792 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08407977 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06181838 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072574466 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083212015 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061234624 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082472639 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086184447 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083241361 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083883495 seconds)
  done (took 2.149187643 seconds)
done (took 11.973542331 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09602402 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064160367 seconds)
  done (took 1.437053591 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.222241542 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.498227084 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.906557332 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090537645 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.070392088 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.083776039 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.194802725 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.065459783 seconds)
  done (took 7.600059082 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.09920777 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.071304767 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068535169 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067314674 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069519355 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067584213 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068561192 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.06795698 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.06792872 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.06771124 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068024545 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069377747 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.068948877 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06757284 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.068850567 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067209251 seconds)
  done (took 2.517693648 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.101676213 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067623255 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.097567951 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060271042 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069868411 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.060415906 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070918191 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072190851 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069566777 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070855247 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072121359 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071094592 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071363248 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071156253 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072777289 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072917524 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073255032 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070553071 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072850549 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073894774 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072263086 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07284526 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073191577 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071541794 seconds)
  done (took 3.161945396 seconds)
done (took 16.015328702 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171885758 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075041947 seconds)
  done (took 1.533178488 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.065850082 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06684825 seconds)
  done (took 1.447974051 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071158947 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.05871021 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078504499 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070196698 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.060981545 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060584355 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077330663 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061765096 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060898334 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061277981 seconds)
  done (took 1.969054485 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061189266 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.067335648 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066468839 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064873687 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066941357 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062003609 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064911311 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06249931 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069114684 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061556383 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065394826 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083312095 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065324121 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083567049 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064835937 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065587808 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067745445 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065109519 seconds)
  done (took 2.517484188 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059087956 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060994619 seconds)
  done (took 1.429013399 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064553172 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061299002 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064194452 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06351512 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061320359 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060986934 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061807975 seconds)
  done (took 1.73730903 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.41786564 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122589255 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.340781713 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.067022981 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.07490257 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.258489249 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063404552 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068931611 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068763952 seconds)
  done (took 2.828893049 seconds)
done (took 14.779412581 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080255508 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181717873 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087666084 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.384042468 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092175425 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.066883767 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112291884 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179040456 seconds)
done (took 2.513783324 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276195251 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.240267548 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.408895595 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125782537 seconds)
  done (took 3.101666273 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.330128643 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078655291 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076829993 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066660815 seconds)
  done (took 1.878128328 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.063153026 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070546672 seconds)
  done (took 1.453290527 seconds)
done (took 8.044295661 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069904245 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.061053027 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.067898364 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063966198 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.063375438 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062764087 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091762345 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063800447 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061542505 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061063274 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062938117 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.063681376 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.063831847 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063789103 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063610929 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063580841 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063695293 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062863606 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063456285 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063735224 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063532203 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063719099 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062802093 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063252253 seconds)
  done (took 2.903381443 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077487764 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06505974 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06638971 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066479101 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067026767 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066498746 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066504872 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065225689 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066826791 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065285291 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067144883 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067024597 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065090277 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066747929 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065011615 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067094916 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066601458 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065363306 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065360032 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067221527 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06661647 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065819998 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067167994 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066727681 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.06702292 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067431235 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065054189 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065424335 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066613346 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06697734 seconds)
  done (took 3.343761417 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.065642757 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059453354 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059650622 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069740801 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059560135 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.05979944 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060016444 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059523526 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060554461 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060723531 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060446635 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060063589 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060619062 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059877818 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060060745 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060787003 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064694606 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079899851 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.06023492 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.0597764 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064228041 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059550472 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059779814 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059675238 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060323005 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059855013 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059732098 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060230554 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059980941 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061081526 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060521957 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064034374 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06548273 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059726246 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070266335 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06463851 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059953467 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064352883 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.06091352 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.059738405 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059391073 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059883878 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059655018 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060042252 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070463824 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060478249 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061156692 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061043261 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060125863 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059845048 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060194023 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062058064 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068137808 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061602594 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.06005275 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061105384 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059963258 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.061153764 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060342018 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059866963 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059716107 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063566636 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061931095 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060791742 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080225301 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061479609 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07041098 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060130329 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060995948 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063877519 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060399846 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078288348 seconds)
  done (took 5.820464877 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07119591 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071882414 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.079056127 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069923114 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064711244 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060796067 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064420391 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061042633 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070713959 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06499171 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060757502 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064400274 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070111806 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064889829 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06196103 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070350863 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065232682 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0643488 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061145711 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065105757 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062314067 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065017488 seconds)
  done (took 2.808119346 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.138606164 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066007365 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106201234 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070460355 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069311847 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070490472 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066212086 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06637163 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066532605 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067204988 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066879512 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066641928 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068786749 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06699024 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067031911 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06682279 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06615919 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066546216 seconds)
  done (took 2.665406724 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076785661 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065432544 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089270717 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065113746 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06586217 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065406635 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06922048 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06980661 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065451756 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065667444 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070000881 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066162622 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065258566 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065676927 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065328516 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.0658919 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.065512244 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065884927 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069919144 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069852864 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069442938 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070659901 seconds)
  done (took 2.850668643 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079032376 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064105327 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080474664 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066346312 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059986647 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060302613 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065892714 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065270702 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066330459 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064809252 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065458751 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060551874 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066952525 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065077268 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067577223 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065383619 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06441681 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065319536 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065170975 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060204602 seconds)
  done (took 2.656079782 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07193684 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063079911 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063041815 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068363338 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062635901 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062841227 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068614512 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.06311171 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064338484 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085363783 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06372756 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073375882 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068465213 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06671936 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063108703 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068667702 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06873113 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068489862 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063491518 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063167672 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085406483 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063592032 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068745042 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063070152 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063587566 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063624587 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063000917 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066644998 seconds)
  done (took 3.223864213 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064262853 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062924748 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063431874 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063306039 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062872612 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062924938 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062760309 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062824706 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06277077 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063311016 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063469255 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062991939 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065021158 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063137603 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063036429 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06288054 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063210806 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063403689 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063452714 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063436568 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062881837 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063274894 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063124826 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063126006 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063576311 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062627084 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063391027 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063088054 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062916749 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063272541 seconds)
  done (took 3.250835969 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.071068004 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069534184 seconds)
  done (took 1.488802939 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060447416 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075284416 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058748041 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072286779 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068741095 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063397691 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068978473 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068610563 seconds)
  done (took 1.880020343 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067745423 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090172702 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061893968 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062304805 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065193368 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.128142904 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074913336 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074295659 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076150107 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.068009346 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062966319 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074242795 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.061487997 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075522665 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063302843 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070854968 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069311797 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.0799178 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074600565 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059991459 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074789993 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062775825 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060043041 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062746901 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062046273 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068666284 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077526715 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07436116 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070405014 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059173804 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.081210344 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060824603 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062284829 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070388449 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065270559 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060689692 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.09830532 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061464804 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066385515 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060745995 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073963315 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082583937 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076085713 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079391628 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062718251 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06285794 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060354085 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063124095 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064603966 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070520669 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060568531 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068166762 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059443476 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061914617 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072144091 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061490462 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06723052 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070913021 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075548236 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072279668 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071253649 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077529373 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07066825 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069421058 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062741483 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081869794 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062768838 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075172694 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076120092 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061970866 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074260449 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060377389 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059088248 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060276284 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094724529 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061905327 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061676293 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060492578 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060215594 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062093178 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070441274 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065707648 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06859186 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064241068 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077137898 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070187775 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060393798 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.066955298 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078435964 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.063863113 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060786853 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077543461 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063893665 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059678798 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078365303 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070378448 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062000745 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061224582 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063907274 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074428059 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061699348 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.058871701 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069501602 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062229601 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063027642 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064894025 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069052656 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060269813 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070686841 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064914537 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.061919992 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058714504 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.06461289 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060862253 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058642605 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069651013 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059657966 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074548543 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066470845 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07440625 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074467502 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070071843 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075539995 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059412556 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.057943145 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.07756428 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06900651 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060681968 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077571646 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058569673 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072186088 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058651535 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060560585 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.206974726 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.06059826 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064136612 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061747144 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067292636 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062821345 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063314735 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067224587 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069777282 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073236543 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.06208782 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069983306 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060647696 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076914704 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070894677 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065512745 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063721703 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060971827 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072747638 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067654063 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070134742 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059451529 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063317491 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060752569 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071722251 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070331821 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062042449 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067553806 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064762129 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061062213 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061056879 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061852217 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064301868 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063951916 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.06145539 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068581773 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069394336 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074367263 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068057158 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069754393 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059471232 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059945504 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.062004172 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059787113 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065155815 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070287006 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075973346 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072112736 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081617556 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060429947 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07033267 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061909498 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077319989 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073821703 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061357476 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065326091 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059577217 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062016386 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069747954 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072088119 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074655057 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075963976 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065372511 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064830642 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060024175 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075520736 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061076889 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069431115 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069965903 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065089967 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060570958 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062166984 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.069721735 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065167352 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060463677 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076861711 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066739495 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060363042 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075348361 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060771635 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071611364 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.059940646 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06424395 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065929274 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062880309 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070667871 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076006245 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059303751 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061110352 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076250236 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062590003 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062261251 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068877629 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075785065 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06488061 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068477181 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071365367 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070774301 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065293128 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070082124 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061101982 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.069821482 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063743241 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072277577 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060073621 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078583131 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059250282 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075584812 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060790157 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071848501 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061145213 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069994736 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06100303 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077714275 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062174381 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061123035 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072220779 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059189032 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.069586524 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059524112 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065072672 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066431758 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069331963 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061232037 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069412202 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.06099063 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068658819 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064096741 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067813176 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068909348 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064225498 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.05882561 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068066401 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070651135 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068013396 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060607118 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060862553 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059821076 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.068929397 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060789475 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060576812 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068060765 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.064391233 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065719275 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060525694 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061151426 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.060829753 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068319177 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069122399 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07737649 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068319073 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067415958 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.068779479 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059013674 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075303828 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059428563 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069587076 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058385425 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.064673078 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069126011 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059694525 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078621392 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.060898257 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067892444 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072349298 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068533621 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063217755 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.077569873 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062473064 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.06796412 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.067609218 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064092972 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068211788 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062590643 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068020038 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.068594103 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.067630719 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.057803909 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.065226382 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066333903 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.058835385 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.063507142 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.058704589 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.065729226 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.058651 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.056185863 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.061859213 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.067910205 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.062046393 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.062976539 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.0587695 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05709638 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.058280084 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.063418899 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.062137071 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068169804 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075238209 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.058413751 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.060563197 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.058721169 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.062637907 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.077130297 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.068947636 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.06736553 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06378714 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058416425 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060839445 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060950973 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059366064 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.06263655 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058629126 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058961414 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070026413 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060803225 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063380369 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059359239 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060274462 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068937994 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063534529 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059936567 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066004625 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.059760867 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.06452026 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058815102 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.061381214 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064176784 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.058867606 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063266059 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.070039131 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.076296302 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.066654959 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068431565 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.060400974 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.067965256 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075054138 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065993603 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060633929 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.06792603 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.058511614 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078059714 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069296708 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068750133 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069704423 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.060965304 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076554073 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064394036 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069501338 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075256133 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060909714 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06512407 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059373079 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075545774 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064220637 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059142944 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067818633 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067439093 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065665818 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071551331 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060177119 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.067797739 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063942223 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062253704 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061043646 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060704107 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068407221 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076373638 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060245367 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063694334 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066856633 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.067802123 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.063644312 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071251877 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.067667098 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060395783 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06112474 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.062940421 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.314351028 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074344298 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063568593 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.068110823 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068038445 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062338705 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070141453 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081751082 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073848431 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073951515 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.063249702 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062852301 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.083157104 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.067972009 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.067390455 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.072829883 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.074548216 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076969696 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.073893567 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081340731 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063376165 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069095115 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075740254 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063600077 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062966044 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066595083 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064350911 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072570003 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073241899 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070712777 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06520627 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069489735 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076859711 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063844456 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067347036 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067298368 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062801375 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072981186 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070959366 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.073844615 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063340451 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061827549 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065514711 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071372589 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.072026356 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071767484 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063025026 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068701292 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076097599 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069963219 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065442414 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061191695 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064980513 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070696764 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065570996 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061021475 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066228602 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064794903 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06824719 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070555441 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065566126 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060350769 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078142381 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069171635 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070332253 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.063042587 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063338511 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061652029 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060558613 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072960049 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060964653 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062523315 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065680572 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06302672 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.0792827 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069844759 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077192472 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062034839 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066027882 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060581884 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07112599 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065748339 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061424455 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071893895 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060556742 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076831474 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073009754 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066629273 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060754607 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066604043 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069603656 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076524578 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070922681 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070185991 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064708359 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071583018 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063280511 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073053718 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060830304 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060008563 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071427328 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070009282 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074165836 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.061143521 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071889048 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.063362796 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069697771 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.069578805 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063016526 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062708191 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062836543 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07077744 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065641378 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070586006 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065665137 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.078197073 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.062069991 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.072336229 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070369678 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072314206 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075160755 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073468071 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069193047 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061629517 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06811912 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069255638 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061638565 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065204544 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063807984 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082324036 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062271679 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061747639 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074268576 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.066557237 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060156361 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.066677905 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.212933079 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070380517 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062213103 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071573958 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065128906 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.06176621 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065729055 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065553298 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059561643 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059698096 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060435561 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070247177 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065035236 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.06070659 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080039369 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062536935 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069382969 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072093211 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067189546 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062423288 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059597119 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062002065 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074433685 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076735151 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064447935 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069916111 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06218559 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070664887 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059767054 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070454178 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069082479 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069705291 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060055543 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061024322 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07590756 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076788761 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06544741 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070708619 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070622666 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062633925 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083708837 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069914867 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062178443 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071912767 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062933908 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059833345 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059568155 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062127771 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07297037 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.060706813 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063567171 seconds)
  done (took 41.799029476 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.09917717 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.061902044 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.060883992 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061034202 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.069551549 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062120555 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060980841 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061696036 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062036424 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063904511 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061500674 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06341932 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.067576761 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074670202 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070049677 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064926808 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061331185 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061593587 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060871145 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062009506 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06791478 seconds)
  done (took 2.892903065 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064643458 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.06545063 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.065299783 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065679939 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06458946 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061058679 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.065548948 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061217867 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065935977 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061676421 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065775781 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061350673 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.061950492 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.061857937 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061916442 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063129224 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.066190079 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065148469 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.061247958 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065322335 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063420453 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.065426005 seconds)
  done (took 2.881322887 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063094535 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061105978 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.069900814 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06011179 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060159064 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.0636567 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060119372 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065222968 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065147306 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06582579 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070377196 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.06185405 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060276334 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066577715 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060305266 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061354825 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105062075 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061717172 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06194439 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060514984 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063705584 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070227069 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060531649 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060709537 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064824389 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064054999 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060480837 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06332199 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06140567 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065724027 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.061742842 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059953411 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070139178 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069223107 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064966033 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065184205 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062471801 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061340673 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060319289 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060371752 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069303019 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062154159 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.060592844 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062643591 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.069769696 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060551466 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062116815 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07046628 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06010508 seconds)
  done (took 4.629733731 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069405496 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114284542 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066353772 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095010599 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073553474 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066877605 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066638238 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095758498 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062225732 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06268009 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074999693 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075084597 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064163787 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065274071 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068868379 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063627709 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064349271 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062760865 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066584724 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06312998 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067072781 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067976091 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073507718 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074476391 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064887075 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062828212 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063000366 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064692182 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074130925 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066648786 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065071695 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065983738 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074373069 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066468196 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063005617 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063078383 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.075013152 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.063685101 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063579791 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061890357 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.0630469 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064575403 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067810772 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075381106 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063773928 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06833919 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063531484 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061408937 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074278221 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063570531 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067436434 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075497936 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064779095 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064510947 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065100568 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074141874 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063836909 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062174123 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.063905313 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074236301 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061722292 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064642751 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076982538 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062986371 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066817505 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075365102 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068684728 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064644204 seconds)
  done (took 6.292700593 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068520675 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094157619 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076593831 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076678541 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071309169 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071460086 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071461899 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071490959 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071190624 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074471734 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071886226 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.107442886 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068115415 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073614006 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071660894 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07148636 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071711689 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071550162 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.07137166 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071069593 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071196292 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07690014 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.07156683 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076649486 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073959969 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067680279 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071077244 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072529223 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076690178 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07161765 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074159367 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071756621 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072036881 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.076956165 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073884894 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.071323502 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061387993 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07141035 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071847938 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071568361 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067539066 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076857509 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071980055 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067812975 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071793903 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071411868 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.077003972 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073991175 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07347873 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07516037 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072113713 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.077281413 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071447886 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072326506 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077898176 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079791474 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077245784 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.077177657 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072023658 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.077222772 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.077616759 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079415133 seconds)
  done (took 6.094916069 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072528229 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065691138 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079886711 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060889131 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060435596 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070289923 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.060425521 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.060736005 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067965794 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067971011 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069676931 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070726888 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072745225 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.069555383 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070788954 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072559892 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07064071 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070289119 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067593078 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070577321 seconds)
  done (took 2.875075718 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.074493175 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080277652 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066648073 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070319212 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066395632 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070466075 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.065747161 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066597106 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067387234 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066623577 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071334744 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072377622 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067252686 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070725911 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071909629 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070273438 seconds)
  done (took 2.606312575 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.062653857 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066928788 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067217915 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062053172 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063649945 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061111118 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061777255 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061756013 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063411045 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075545372 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061761085 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064529735 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061975579 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060740788 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061320724 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06464906 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063274674 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061538601 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062271485 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066234272 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070487819 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062758866 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.064966931 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062105945 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.064572597 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.070703616 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062960288 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.064146522 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061541347 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064329755 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.064305321 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068450529 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.064051017 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062352044 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.060830252 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061587216 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062209892 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064603709 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064720835 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.06205953 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060401023 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066980052 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062989993 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.062572452 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063367946 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064611439 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063417118 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067429256 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062179354 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06402866 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062121367 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063342744 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061848876 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068751611 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063832682 seconds)
  done (took 5.004480674 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.0759484 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06465019 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060295042 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.060093213 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065972215 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.066470518 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066241523 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066516405 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066611061 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060641345 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066412207 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065889486 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066627874 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065987785 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066682961 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065892302 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060272167 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066138594 seconds)
  done (took 2.679986271 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065443677 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064680123 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.065426811 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.062945042 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.062455637 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067775774 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061452422 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062296392 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062300434 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062574698 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062602095 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.062390401 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061884607 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.062323729 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066741541 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062517667 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.062049201 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061041038 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062629586 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060662185 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067404305 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060664328 seconds)
  done (took 2.88536186 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.08647902 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084917678 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128832278 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080311917 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089094135 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071769357 seconds)
  done (took 2.040021963 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.091984904 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.098641376 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065845314 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.065301533 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070686869 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068680582 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06877689 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069044558 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072380849 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073131848 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069113121 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073154303 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072463501 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075023659 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071083787 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070904918 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068945603 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068932024 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066087367 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076611735 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069263348 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072579282 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06896387 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068725246 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06885786 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074950346 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072438546 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072914634 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069032818 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072560239 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070796654 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069033535 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072986749 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072983207 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065554645 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07217675 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06893765 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077056658 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070651306 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074406329 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065538821 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071021926 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072422312 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072450377 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07295714 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06912955 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072041151 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068989202 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068993463 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078591936 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071091401 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074675909 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071256152 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073242771 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072976268 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078054425 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073116597 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075018311 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070926082 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073279338 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074915962 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071103896 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074630118 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073411725 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071625999 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074974468 seconds)
  done (took 6.274582648 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102730368 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066242087 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069247866 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073158534 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074341465 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069430967 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069418933 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069026676 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069227631 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066207044 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105572307 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069686223 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075071287 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077295749 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070038926 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06949037 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069016568 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074874846 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066248153 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078334832 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069260048 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078621413 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074387799 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074443715 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072785972 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071054211 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069282725 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068863281 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068735639 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068609778 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072202651 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069108431 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074531316 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065987159 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074230966 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0691694 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06868045 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072322369 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068911886 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070530502 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074655042 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076959813 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068935762 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069037501 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073391525 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068946262 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069057428 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066142665 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069446661 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066350967 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073452707 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07337939 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073155739 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074676088 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069689801 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069346658 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069439934 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069264917 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069172501 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071149555 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075028766 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06934466 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078739234 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069396152 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069765612 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074804915 seconds)
  done (took 6.282162944 seconds)
done (took 129.45635923 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.217480661 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187977782 seconds)
  done (took 1.890568713 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072743844 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.164782904 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072503641 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.074060181 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108636338 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.105495008 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074017598 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071669757 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.074651339 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072173105 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139468313 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074214978 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071333952 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.072077722 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.071866478 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.071809447 seconds)
  done (took 2.897222006 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105470297 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186969641 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.102673093 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069520486 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152464327 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077155775 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.07203945 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076932439 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076543015 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06980575 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.107288383 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083399558 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.075493157 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.076625314 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071909432 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075060448 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076209788 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076024111 seconds)
  done (took 3.145000433 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.10113207 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089781601 seconds)
  done (took 1.709086968 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157588062 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.104499545 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.143721892 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343411849 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133802034 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.136995518 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.141257498 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.139078 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115663297 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.13257742 seconds)
  done (took 3.058794935 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103290825 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.10341877 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310439346 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102934378 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081841113 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076980197 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074619137 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079605746 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075131055 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079438095 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122405396 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074799569 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.071849984 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12509259 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099365956 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107607683 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070445258 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078130041 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.079811894 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.070183634 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075952956 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07966902 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.179447136 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078460855 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100846262 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.075111619 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077061844 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073873955 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.073798178 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078711895 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079131387 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099856408 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077741674 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082199965 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.076830393 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.097530178 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07145894 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098889132 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073914066 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072372163 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074746731 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079096253 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.071594586 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.07813565 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07471404 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077181694 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.07980456 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.070489103 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074840806 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074325965 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071811525 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076303406 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076065851 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077263431 seconds)
  done (took 6.297836056 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104927821 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.105499795 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069701419 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113274486 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.106011908 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069704355 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104700243 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100802268 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10897415 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069408833 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068598281 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068817989 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075795804 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080535928 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.113715563 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105673679 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069667973 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068496577 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107549107 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107280606 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068682582 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101572844 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.10004265 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107531483 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066895333 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069719451 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067777392 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068830811 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073732548 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074576779 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.068578532 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075324586 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.084518421 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074046453 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067434139 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067669253 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067800776 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07524323 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07645392 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076004157 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074781198 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067953943 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068020498 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069253144 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069006346 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.0677782 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074250534 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075451227 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074453605 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068241269 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068458615 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067944057 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068664862 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074970573 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074654806 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076584457 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076008349 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068492407 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068231454 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.074181153 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076685374 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076840814 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076071601 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068996401 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076785297 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06805849 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077753572 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080312722 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068718745 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068916151 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068489867 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067951444 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068804726 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074171692 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074384441 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069241527 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068749899 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068442163 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077029519 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074432213 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068136996 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074136205 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067802697 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068659669 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068497909 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068805824 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073962174 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075836963 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069241906 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06799636 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068668212 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068540924 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067573631 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074223499 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075399211 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075839946 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075297948 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069093746 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075216988 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074734585 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068974226 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074530008 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068335275 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068627244 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068456989 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074531876 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.074115335 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075758101 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06864461 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067811352 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073908022 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076547351 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068589077 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.073145602 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075818624 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.074446079 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067306222 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076868652 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06838211 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076023895 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068051969 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07629425 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068023836 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073656947 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068002047 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.066936389 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067227286 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.073335626 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06820771 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067350577 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068002386 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067687778 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073729763 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077046832 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06882733 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.073814434 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.073982104 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068388106 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.073440762 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067598628 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074406489 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067740775 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067787105 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067091565 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076090322 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067441396 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067272821 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067153224 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075818276 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066957529 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075158496 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072430603 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066504514 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079934033 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07528848 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.072967368 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.075941399 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068237791 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067642119 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067484314 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069345846 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072175653 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07371305 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067952531 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067051824 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.072420487 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074932951 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067203587 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072638588 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072914819 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.072769649 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067916464 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.067326401 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076161859 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.075894993 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072876391 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.073440109 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073756071 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067570143 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.072409289 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072842922 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067571324 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078720343 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067631549 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.077116549 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073597587 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072625462 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073811359 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.075121841 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075763205 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075972409 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077550882 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067591338 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067635918 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.073261456 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.067575558 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067436157 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072845699 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067764463 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071140259 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079076344 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065845812 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.073780635 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.067164703 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073976185 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067057816 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067534251 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07783014 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06798048 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067759535 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07314273 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.06773763 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072976545 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07618571 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.071605677 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067246968 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067640354 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073444523 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074430462 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067345299 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067366862 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067536609 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073010311 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073109901 seconds)
  done (took 18.048688781 seconds)
done (took 38.573765676 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.175247408 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120219793 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.222860564 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.211247532 seconds)
  done (took 2.389710924 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.10193609 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.067707808 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084005933 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.09256234 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06716879 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.07798821 seconds)
  done (took 2.081720543 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.202255068 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.181075136 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250490172 seconds)
  done (took 2.214635303 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.373307484 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153449626 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.222095315 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510213648 seconds)
  done (took 2.949140924 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.109131274 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.101260459 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.078934893 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.113018527 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08642278 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062536791 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135276338 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.069870811 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100756514 seconds)
  done (took 2.506781902 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141457127 seconds)
done (took 13.988176976 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.0989099 seconds)
    (2/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.234815902 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.222068617 seconds)
    (4/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.416303486 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.0787672 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.123876252 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.09233066 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.120457069 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.159951756 seconds)
    (10/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065683007 seconds)
    (11/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.208631748 seconds)
    (12/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076490005 seconds)
    (13/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.214901968 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.154595837 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.065536637 seconds)
    (16/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.20062583 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.129234784 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.124843653 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076172625 seconds)
    (20/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.091892437 seconds)
    (21/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.191278004 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.078262392 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078589647 seconds)
    (24/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074998119 seconds)
    (25/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065994395 seconds)
    (26/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.241090029 seconds)
    (27/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065942841 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.078390431 seconds)
    (29/341) benchmarking ("sort", Int8, false)...
    done (took 0.155082989 seconds)
    (30/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.080044506 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074864373 seconds)
    (32/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.191725892 seconds)
    (33/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074803328 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.143647359 seconds)
    (35/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.146060988 seconds)
    (36/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.066412696 seconds)
    (37/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.1438 seconds)
    (38/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.177393136 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.092841385 seconds)
    (40/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.143067813 seconds)
    (41/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.203573323 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.077265021 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.073865895 seconds)
    (44/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.093912384 seconds)
    (45/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068278024 seconds)
    (46/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073962468 seconds)
    (47/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.076607545 seconds)
    (48/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076213937 seconds)
    (49/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.082347666 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.222188815 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078684171 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074397243 seconds)
    (53/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065878429 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.07279236 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076167758 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154719212 seconds)
    (57/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.258141324 seconds)
    (58/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069788845 seconds)
    (59/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.222204066 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075256608 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07322823 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.204357394 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.17094973 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.08864009 seconds)
    (65/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.067866663 seconds)
    (66/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.23053055 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.077129989 seconds)
    (68/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077288114 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149279476 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.21462087 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.073991991 seconds)
    (72/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.141944314 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.076816253 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088363659 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.073590842 seconds)
    (76/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.077247598 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.199078347 seconds)
    (78/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.22109346 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.247637033 seconds)
    (80/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.202743715 seconds)
    (81/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071736629 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092264957 seconds)
    (83/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065930055 seconds)
    (84/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108632206 seconds)
    (85/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.06713669 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.093993107 seconds)
    (87/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067439711 seconds)
    (88/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.166774457 seconds)
    (89/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.149391714 seconds)
    (90/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.06604664 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099133128 seconds)
    (92/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074200504 seconds)
    (93/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.07933903 seconds)
    (94/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.084711772 seconds)
    (95/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.142464963 seconds)
    (96/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072397641 seconds)
    (97/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.073203795 seconds)
    (98/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.22217115 seconds)
    (99/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.140828977 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065564937 seconds)
    (101/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066185005 seconds)
    (102/341) benchmarking ("sort", Float32, false)...
    done (took 0.138659889 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.064904714 seconds)
    (104/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.225216313 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067412502 seconds)
    (106/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.182916342 seconds)
    (107/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065864977 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.066177193 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086216617 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.065388719 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.220969663 seconds)
    (112/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.082870776 seconds)
    (113/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.077294352 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08444621 seconds)
    (115/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.173036031 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.090491469 seconds)
    (117/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.065625167 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064711456 seconds)
    (119/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.073482113 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.084224695 seconds)
    (121/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.083788765 seconds)
    (122/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.063303448 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074958297 seconds)
    (124/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06569474 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068632066 seconds)
    (126/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.066012781 seconds)
    (127/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.159250833 seconds)
    (128/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066385062 seconds)
    (129/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.187326875 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.2025257 seconds)
    (131/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.164150302 seconds)
    (132/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.100372725 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074075286 seconds)
    (134/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.064008456 seconds)
    (135/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075518038 seconds)
    (136/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093590834 seconds)
    (137/341) benchmarking ("sort", BigInt, false)...
    done (took 0.264162445 seconds)
    (138/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.191552907 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072569534 seconds)
    (140/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.0742768 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.154496051 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.073439561 seconds)
    (143/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075034198 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.075157378 seconds)
    (145/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065656275 seconds)
    (146/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179702502 seconds)
    (147/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.165413851 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065792382 seconds)
    (149/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065900409 seconds)
    (150/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.166768798 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074584953 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 0.144286111 seconds)
    (153/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.073196564 seconds)
    (154/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065347369 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14365821 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065458992 seconds)
    (157/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.084503103 seconds)
    (158/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.201180443 seconds)
    (159/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065669847 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06604367 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.072319554 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075261078 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079400235 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.066439189 seconds)
    (165/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070061664 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134805306 seconds)
    (167/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.201585213 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065656232 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157423785 seconds)
    (170/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.067695388 seconds)
    (171/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078885637 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065280121 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064621013 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066021158 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065556213 seconds)
    (176/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.138965334 seconds)
    (177/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06703787 seconds)
    (178/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.083734115 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074721241 seconds)
    (180/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.065330855 seconds)
    (181/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065164463 seconds)
    (182/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078515315 seconds)
    (183/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069338151 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063216758 seconds)
    (185/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073109922 seconds)
    (186/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080904125 seconds)
    (187/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.151602828 seconds)
    (188/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077018996 seconds)
    (189/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09391522 seconds)
    (190/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073675619 seconds)
    (191/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139299584 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.14663444 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.295877059 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152965405 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121053741 seconds)
    (196/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.147696267 seconds)
    (197/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067013313 seconds)
    (198/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073206548 seconds)
    (199/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.086298082 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148044437 seconds)
    (201/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.167647368 seconds)
    (202/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067888264 seconds)
    (203/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073195453 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065364582 seconds)
    (205/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066413869 seconds)
    (206/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066082666 seconds)
    (207/341) benchmarking ("sort", Float64, false)...
    done (took 0.137906618 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092352401 seconds)
    (209/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.08216828 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086149581 seconds)
    (211/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.239172677 seconds)
    (212/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.064488344 seconds)
    (213/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.064365417 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.070593372 seconds)
    (215/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066885835 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064265468 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143194267 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.063362749 seconds)
    (219/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06753532 seconds)
    (220/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065723499 seconds)
    (221/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066187486 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065009208 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073232346 seconds)
    (224/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.172898563 seconds)
    (225/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.066096082 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072483113 seconds)
    (227/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072346187 seconds)
    (228/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069851881 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.086175663 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084595626 seconds)
    (231/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065795999 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067966907 seconds)
    (233/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065538427 seconds)
    (234/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065324863 seconds)
    (235/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.06581282 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086663451 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07696636 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075182714 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.195900245 seconds)
    (240/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154126569 seconds)
    (241/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073971443 seconds)
    (242/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.16518655 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072380658 seconds)
    (244/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072176579 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.06711741 seconds)
    (246/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065539159 seconds)
    (247/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.069843695 seconds)
    (248/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069305497 seconds)
    (249/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.06397308 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072927771 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069058083 seconds)
    (252/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.07823763 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063646626 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.064837274 seconds)
    (255/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065557055 seconds)
    (256/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.077217149 seconds)
    (257/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069580966 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.192540358 seconds)
    (259/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.06658755 seconds)
    (260/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.08820589 seconds)
    (261/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.156386573 seconds)
    (262/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177357045 seconds)
    (263/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.065436285 seconds)
    (264/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.065319119 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064779228 seconds)
    (266/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.065623706 seconds)
    (267/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.065257842 seconds)
    (268/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.06663687 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148256156 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064945062 seconds)
    (271/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.064719004 seconds)
    (272/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.170640888 seconds)
    (273/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.072197383 seconds)
    (274/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065147778 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067227622 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063263485 seconds)
    (277/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.065371604 seconds)
    (278/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.190473364 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067535969 seconds)
    (280/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066079606 seconds)
    (281/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153192682 seconds)
    (282/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065674238 seconds)
    (283/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073243407 seconds)
    (284/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067014198 seconds)
    (285/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066076316 seconds)
    (286/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.065171612 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149939421 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090705163 seconds)
    (289/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06572292 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.15106701 seconds)
    (291/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065937973 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065355421 seconds)
    (293/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.086478145 seconds)
    (294/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066441043 seconds)
    (295/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.06916462 seconds)
    (296/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082407731 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065853641 seconds)
    (298/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067567325 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065299629 seconds)
    (300/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.069164765 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.123287544 seconds)
    (302/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065629244 seconds)
    (303/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.065388177 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.065269413 seconds)
    (305/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.090930422 seconds)
    (306/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093322786 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065685235 seconds)
    (308/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066025586 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.088876892 seconds)
    (310/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.06583601 seconds)
    (311/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072652597 seconds)
    (312/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065407014 seconds)
    (313/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.067332634 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065362059 seconds)
    (315/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.064443534 seconds)
    (316/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065450927 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072170137 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066234202 seconds)
    (319/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064629274 seconds)
    (320/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069034994 seconds)
    (321/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.067211534 seconds)
    (322/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066497199 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.303773739 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.081490353 seconds)
    (325/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.07011048 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173259968 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135775765 seconds)
    (328/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070392451 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.066317061 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.128066884 seconds)
    (331/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068340006 seconds)
    (332/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.066328809 seconds)
    (333/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065037663 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072118957 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087076906 seconds)
    (336/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06847157 seconds)
    (337/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065701696 seconds)
    (338/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.066421268 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090614713 seconds)
    (340/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.067355003 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112140831 seconds)
  done (took 37.159296002 seconds)
done (took 38.761250966 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.087479896 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078433088 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077304409 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073843453 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.077448825 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.07597883 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077529868 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075388963 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076456868 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076053598 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076181586 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064294848 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073227078 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080706589 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074087006 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.08081548 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077876545 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080502583 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065309019 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079550688 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093213561 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077068894 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073679831 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079467817 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.065571677 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074400496 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.090000382 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086793583 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072039433 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074865105 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073160772 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083229098 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072843876 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071445334 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074892863 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.070946221 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074640269 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071925544 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.089301995 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.071106731 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.065740999 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077578653 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072453482 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073335296 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073928866 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077556905 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.07117397 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079584814 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065168104 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076381896 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089510958 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070784757 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.072023547 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073672934 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070184197 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074539678 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.071493324 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076412329 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070472406 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076750056 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076757928 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.073542013 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064922551 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073442716 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.072152024 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072493448 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063600646 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070398835 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.06505876 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064690389 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063981553 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073891734 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071977544 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069703013 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064057976 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064961715 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064102854 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077133757 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070688489 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074524232 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064927603 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069754578 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069469732 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.065098071 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069898823 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076446068 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063940423 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065129523 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063850026 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079159866 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071301852 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064839862 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076319188 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070589936 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069956077 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064588172 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.06377793 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07019728 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072910913 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064956744 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063654822 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070108434 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069890337 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.073755122 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064798848 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07013224 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069755974 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063549668 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073839163 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.072294565 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073723493 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078039754 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073954226 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.076935692 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065209946 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063966805 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074606299 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.065273089 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070348148 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072662657 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069931411 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.072883879 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.064965998 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063503513 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069651639 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071075541 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065066627 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065117654 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064798839 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074433478 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07195148 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.06397774 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064899881 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073764647 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074106312 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.064161755 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.064229773 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.074290235 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.065150179 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070733729 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.070616051 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.073736727 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.064263897 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064707368 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063602452 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.064018917 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063941708 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070645307 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074011047 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.065165783 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072961634 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.214855043 seconds)
done (took 12.756373319 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.064901765 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.108758822 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.079796915 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.08160762 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078496742 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066933099 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.069537259 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084663327 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.068987374 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090200862 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.091293362 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087286436 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.09651488 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063918255 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066424406 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.066342933 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.064161148 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.078031944 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082921318 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.089752132 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102269555 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06559143 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.082091633 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08540726 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080302593 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08411899 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067172702 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066974147 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068507589 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084632077 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091414786 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065371865 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067012386 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083883753 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081414284 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073923938 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066348831 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07208259 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06862411 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065534711 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067179273 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083888039 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072688074 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072718167 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.066559621 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066622754 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065840286 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073013529 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083650667 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071434246 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078170599 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085325066 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068006787 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066393012 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064400134 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073480672 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065619732 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066526945 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066498408 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065952171 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065998829 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.06812829 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.071437937 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.071927183 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069494347 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072036752 seconds)
  done (took 6.60275946 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.079730065 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.091194967 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.08100313 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081438858 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065436591 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065566764 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.06644152 seconds)
  done (took 2.238478216 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064902976 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.074158592 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078180262 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078091146 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087391702 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076015318 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.066448479 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097788934 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064768998 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074560516 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081873511 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079655891 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069392857 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078300526 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.066167013 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078113186 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066185067 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073269776 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073949334 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.079652086 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070264816 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096291223 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079439675 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066500442 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.07966869 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073381911 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.0683834 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.06620386 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065975742 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065204813 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065334655 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088202764 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072191817 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07865166 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06678726 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064728997 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070266666 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066516917 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.069796365 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075056631 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069520576 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065324496 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.06619274 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.06567957 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066983782 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070695133 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.06659303 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065528971 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.065335905 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073301049 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064736969 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072277056 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067885735 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070867274 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070051629 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07035275 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073150482 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065966178 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073460658 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.072241453 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065346612 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07842094 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077349901 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069433256 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077683259 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074586079 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07252997 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069617186 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065026026 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065377203 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.065987505 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077592959 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069257804 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068060307 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066775521 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070691191 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.069681637 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081492205 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081708639 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079284145 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068471958 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065822448 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069841131 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081435215 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07085434 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065782332 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066383961 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065673806 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070359487 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065705738 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070892029 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065788198 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072767046 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068739817 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.068232297 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073932008 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065683434 seconds)
  done (took 8.644947232 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066819143 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.068050448 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.067058715 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066918569 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.067422569 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066648929 seconds)
  done (took 2.137627868 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087971531 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064827718 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077557977 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.066483684 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.088380185 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.072708226 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.073041651 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068139872 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082404937 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07704311 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072900156 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07547747 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075722234 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068070199 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07243104 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06724 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072655546 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069503742 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076235297 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068236146 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08254219 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068727145 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068870622 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.078772503 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069669807 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067520334 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067417805 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076735481 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076517199 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068047179 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.068054152 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069100385 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074877426 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068041002 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073023436 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.074955004 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065995504 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07233046 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069141115 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069472782 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075000558 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068175431 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068733733 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071754664 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067820741 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074808516 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.071595745 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070301732 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.072866099 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071887006 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.0716901 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066977058 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068996468 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071821834 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075153079 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068052763 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071802997 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072875154 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067507483 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075045477 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066260385 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.06933635 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06832281 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068947905 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071069342 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071588283 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074922055 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067929128 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070788181 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066282333 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071552473 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065993877 seconds)
  done (took 6.864053932 seconds)
done (took 28.17211408 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.539824705 seconds)
  done (took 2.220858998 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.911450158 seconds)
  done (took 2.63392038 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.102314657 seconds)
  done (took 9.832242542 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.331098059 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.395641159 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.728179217 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.13252816 seconds)
  done (took 3.345658243 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.75037 seconds)
  done (took 2.484517608 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.225516624 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.222867588 seconds)
  done (took 2.18684693 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.351683957 seconds)
  done (took 2.076296815 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.145008742 seconds)
  done (took 2.864002577 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229864578 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162571665 seconds)
  done (took 2.12472454 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.527719909 seconds)
  done (took 2.254618866 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.237322776 seconds)
  done (took 5.970740679 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.229770174 seconds)
  done (took 1.997073619 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.225558172 seconds)
  done (took 1.954074972 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.004458497 seconds)
  done (took 3.73329517 seconds)
done (took 47.407656438 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.081033118 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08329412 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083240837 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.078362503 seconds)
  done (took 2.028639227 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.071357595 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.067567319 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.07070993 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07109398 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.070692453 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071649071 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.072143328 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.068607867 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.071129139 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069331248 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.067614128 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.069162178 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.071970788 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068979438 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07167331 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.072992355 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.069482575 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069516454 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.071609026 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069392671 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072030485 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069237468 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067584992 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.070344017 seconds)
  done (took 3.414314455 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.075674388 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069650968 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073546126 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.070550388 seconds)
  done (took 2.025498474 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.0735572 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074667522 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.084586154 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.089581067 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.075363091 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.076116278 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.08318037 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.083509839 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.064530074 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.086587395 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06728797 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.065572363 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066094997 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085339521 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.082997995 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061581359 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06295822 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.076017614 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.075664814 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078046035 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.067205371 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064407702 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075430992 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.07650379 seconds)
  done (took 3.532390085 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079678684 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06293862 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078200101 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088730175 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090999722 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064493547 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078885743 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.091986042 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127148211 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.06478413 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071441158 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06466772 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.104335792 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.064862062 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080304478 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108006252 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11169193 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.068622054 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.098445666 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064797348 seconds)
  done (took 3.409606448 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073369627 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068419826 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069684178 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064860628 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075998531 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.07238983 seconds)
  done (took 2.171990959 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06584416 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066248092 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068439973 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071348007 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.066958401 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.066869579 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.066079706 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065062499 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065359984 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.065615403 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065581491 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.066228501 seconds)
  done (took 2.538537393 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.145532493 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.067495576 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.067970063 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.065531325 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.066784817 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065563274 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.080735982 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067843764 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.084609967 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065962214 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066028065 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068543591 seconds)
  done (took 2.651219395 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101883921 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107784684 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143390614 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116619548 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11625045 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09633813 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125873172 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095237241 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159339579 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137964366 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117337168 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093226082 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086633905 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069146225 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099587938 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118307283 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141720476 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072199966 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113104266 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.165840902 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13228564 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.135283846 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148571729 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115860254 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090174316 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148257844 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097468155 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102516403 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124222404 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126378672 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119694553 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098386217 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070604721 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070132085 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14927035 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103124022 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121250646 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092563489 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10467787 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087951442 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107490148 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068782719 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.08541295 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113625337 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084909919 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130630176 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088019733 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116135135 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081088536 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137864694 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122447918 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096698704 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084017354 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102236072 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.283360229 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109437488 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130663237 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105999882 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082360098 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118531548 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102722108 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100818398 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107628502 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079319623 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.177781889 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088590606 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.111243691 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111900105 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094172165 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094694792 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106279495 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131996056 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122693672 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.122326613 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13472407 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093794084 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122286723 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.099909318 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.12909453 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104890725 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072451962 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.121755204 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.128112293 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097792625 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.099116512 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128613653 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091014175 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074817345 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096432748 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.115938657 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07796833 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.109781852 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078585327 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.105715044 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13053204 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094334802 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10904291 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11373302 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075267652 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151254638 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106389924 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070555963 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114885564 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111594281 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153663296 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091737953 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073194616 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096213236 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104233604 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.14447932 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102516906 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076467753 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105375173 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133995852 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09077415 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.165532415 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094375516 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136805738 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108433119 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087154076 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073814604 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089153258 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106828237 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101412673 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105824333 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085341129 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.079557053 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082789465 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105128225 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086928383 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076412875 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10720719 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.096278678 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.072286929 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084952604 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.074785741 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133298242 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.073522646 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129120019 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11779498 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.07436845 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101241521 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094805872 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105320428 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.094923682 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112474847 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134880072 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.111521525 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086930265 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.089378123 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104573029 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.136746406 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.120820778 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086954546 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.072138765 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094394855 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105967975 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092960617 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118181029 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094062034 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101550031 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099247781 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136730637 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136708269 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096589849 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09737644 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099345933 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.115065002 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072952419 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145812497 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099345058 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11437577 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.080160622 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13614875 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.108359242 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083507979 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083271934 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094170338 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.097200494 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103351554 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140672478 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.091670287 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.070611914 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089320518 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.138156777 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0717653 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104463892 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.087138538 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.088566003 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111940215 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.086215932 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07643476 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.064768616 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125570265 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148627179 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.06579444 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108152208 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.111966501 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095709516 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.113961136 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.065624024 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109787913 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135124222 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112384008 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135066757 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136474771 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110238053 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110691665 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.111868903 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099562502 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077220446 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122784492 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.130900016 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092254824 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091351199 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131275071 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114333687 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.130882316 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.11067164 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113631343 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.101052114 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.498240476 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102567752 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101125083 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145790463 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122886208 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126908372 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087081136 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107060367 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119057774 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135040676 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082292815 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14159561 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.086210381 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120111448 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079513357 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125546196 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081870779 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11474714 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081546914 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102680706 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.071014917 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075509251 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144671425 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.11499375 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106567737 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102020182 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140173717 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13749483 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08024925 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107264741 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114409549 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10037336 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116121711 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112067073 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090838151 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097097689 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11136472 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.087377686 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083598925 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.117488641 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096584002 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12988487 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08579534 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076103791 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143013237 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106290877 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09661154 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078715896 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109077853 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123122114 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.094872367 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089116814 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116966592 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106084422 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144419117 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092012308 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098743873 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.126125244 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08097148 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.092991157 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.069653937 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085861027 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.244920419 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.127521741 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076573809 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116967615 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068311292 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130523514 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086867022 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092621304 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099781184 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108513555 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124996887 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092202939 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137817363 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087053552 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115297136 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104696636 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091460682 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087248247 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103629903 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101528417 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12321169 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096046983 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123949545 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145659788 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105503218 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.140632476 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090322029 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122764855 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107354498 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.124833459 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112633272 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146848656 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139044671 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113458354 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11370309 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07574865 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095857549 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105969248 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.11319573 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176401924 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12361862 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070348978 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104044809 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091795031 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10537679 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103129496 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083092245 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147644503 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103554965 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088945414 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114987391 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092508219 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104694513 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074265431 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093360861 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.259433805 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091561014 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095978136 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11512613 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127493445 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112779184 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143410781 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.09898995 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092607202 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118588586 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110760384 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110670766 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086010246 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086238748 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137958754 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11887872 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128459123 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100629551 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110026118 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111525465 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100430134 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125996324 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108926057 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.126536246 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078245292 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.075838316 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.067966783 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071759157 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121791571 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106384015 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109388569 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096438029 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.072683362 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103937147 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106856928 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07190256 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088603734 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094391149 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099268187 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.091941972 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106685138 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114630694 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.091575262 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104373296 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09935329 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147757894 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100513694 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088493194 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144484474 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148257867 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085416566 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090184963 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.069749711 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076869084 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111593066 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147142982 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.149044075 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.075345457 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084546659 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.083706831 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084725448 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.222918853 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.083854936 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088386921 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104418474 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098458994 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113133258 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104706627 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075177458 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102840358 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099427408 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091554863 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103903081 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118877059 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124859692 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.14097248 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109935309 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106182605 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075526604 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080384038 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075007733 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078871526 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101957243 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078875671 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075854917 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142314106 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.091992815 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105157871 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109045361 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089052043 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075378064 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134595433 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.068670862 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135087372 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.070658265 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082252696 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082411752 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079011093 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094036053 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139470709 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108439594 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112896978 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106844295 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104604019 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140928464 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157199738 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080326471 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143620114 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07551591 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075158296 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07571523 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113044056 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089723452 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114985143 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139664548 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088425588 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100910012 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07526891 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140515941 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098881067 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103454724 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085279547 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077587016 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.299988546 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079305704 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.07999439 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090401012 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11088823 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.071778606 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103820873 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08462937 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07946111 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141713276 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.629793099 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089957997 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075096081 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095901968 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.141469126 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127364956 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092340417 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105540344 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.115486776 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096645571 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09254473 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104282338 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.179354258 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072524115 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095263356 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10419197 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098274796 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102269801 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099034416 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084483876 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.092682854 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086883159 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079128937 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107776697 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089201573 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097185147 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107158779 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08304767 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087503994 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131178251 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.103860147 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.081913276 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088484292 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105504253 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089431985 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101680633 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068423314 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113753037 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09093742 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118279986 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094661161 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108052338 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127318682 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090023267 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13869867 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.10764038 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123044958 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087128873 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077793198 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127049709 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088386031 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077492267 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.30202796 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.092941379 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092920217 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103386715 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096081815 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113150253 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117412117 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111627586 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096910477 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07870025 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100331002 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.102300231 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084786902 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078373897 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.073928409 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075776748 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106708535 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085138256 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083201237 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114321665 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087737306 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102390582 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100258385 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122856944 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083300862 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101228231 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110894309 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092361286 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110122013 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100808624 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.128728056 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173295363 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122817091 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126028872 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134475661 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076968177 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075751085 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067990718 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115452054 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078755471 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088882174 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081106797 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134418352 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081864032 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111589746 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.229476966 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078511887 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.091641187 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094307059 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.067613699 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082631898 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107538212 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087213797 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079920286 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11907617 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083059432 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127570976 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109377772 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096559098 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092589337 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079354826 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111829069 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.102840247 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.126569284 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092539667 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.229327127 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110894701 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100921585 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135284166 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.071633358 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078310775 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125936994 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100835659 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129116037 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.077442515 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146153118 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.139538229 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097340907 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130827707 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068789657 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080823096 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086198274 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.122708025 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081601279 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107968563 seconds)
  done (took 67.116845571 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.168980019 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139832427 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080824893 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101850887 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.188735225 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.202261888 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.127706584 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.102484104 seconds)
  done (took 3.100689669 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.06667456 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081262653 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079307505 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.204223702 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.09452002 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.06621176 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.070899494 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.079969643 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.065587752 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065035125 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.099902562 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066005311 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.065950642 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.366337397 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.064652425 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072185732 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067576822 seconds)
  done (took 3.624893257 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.332463229 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 5.015289983 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.250577248 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.270245178 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.144524782 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.555005867 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075371643 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.084022289 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.697817933 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369249781 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.140744263 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087071861 seconds)
  done (took 19.975879755 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.074695182 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077269291 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079368597 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.075908767 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.075696501 seconds)
  done (took 2.334215688 seconds)
done (took 119.676200448 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081635596 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.17017435 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.066821668 seconds)
  done (took 2.223195371 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080302969 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078910411 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.080790459 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078669865 seconds)
  done (took 2.277897917 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07247048 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074452782 seconds)
  done (took 2.098640509 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.221912605 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177888875 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091417729 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.079951111 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07738491 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078751497 seconds)
  done (took 2.200523696 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069406885 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069560339 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069803919 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.070896801 seconds)
  done (took 2.228902841 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.066084254 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.0643003 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067038485 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.06967535 seconds)
  done (took 2.218272397 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.08269312 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.0836233 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115174239 seconds)
  done (took 2.231404943 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081148227 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081000725 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077852489 seconds)
  done (took 2.194043141 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106456036 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094838435 seconds)
  done (took 2.152953864 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078273675 seconds)
  done (took 2.033781877 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087709965 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095796724 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.137502304 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.10693478 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.14120432 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127025341 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077422205 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07826089 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073545038 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.072683087 seconds)
  done (took 2.949739471 seconds)
done (took 27.332265313 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076665757 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.363680463 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359970762 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087667437 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.672070245 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.357220352 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.984941344 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091557458 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101898294 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068275494 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086114647 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649945894 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.976470975 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.321807817 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.962399621 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.322368544 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.65331303 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068633416 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067764103 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06886955 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.964602765 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066473458 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066047784 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066731788 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.647611258 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.372640597 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069728209 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324849198 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068243356 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072361425 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.356511919 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067150646 seconds)
  done (took 16.410561905 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.067930687 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120616482 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.070358192 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.081914905 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069395468 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068841702 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070135354 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06927997 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113408479 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068982959 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086206265 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06789237 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071199789 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067510048 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085781498 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066135533 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068300061 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070100411 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066335143 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066580263 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084387699 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065871952 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066545605 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066980883 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066445347 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.079276142 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067307451 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066348645 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068531529 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072674992 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073324249 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070042605 seconds)
  done (took 4.335576147 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.11948541 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12780608 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073284277 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110265892 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.118466265 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070064957 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150212719 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089227464 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112934124 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066683386 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083956209 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066471495 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.101589933 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067613176 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.086130476 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.06652663 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06851602 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066716182 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066423565 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.066879344 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085343748 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066141351 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066916497 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066771333 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066729117 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081194333 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067167622 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066417333 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067085032 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070262856 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.071948597 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.067591936 seconds)
  done (took 4.59673446 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067827358 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069321258 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075904096 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081228439 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.065630483 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.06878135 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069380569 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066373976 seconds)
  done (took 2.5409205 seconds)
done (took 29.854092999 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.076852669 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065563166 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069955002 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087253802 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.074050189 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.070030242 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.0640661 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.074539412 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.07096712 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.070996487 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073038573 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06658924 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.070109884 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064315128 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.072130546 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065969537 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072478206 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069985762 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070057799 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07160918 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067721166 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071159684 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.073800647 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070645438 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070374062 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070328081 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.074928175 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071638085 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065805813 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068822284 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06840673 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.080898059 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.071864134 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071226291 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064380333 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065994803 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070635067 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067806253 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.070462859 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073345243 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066330781 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072988136 seconds)
  done (took 4.888060857 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.085934839 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091542149 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084438546 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.079468311 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105177237 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079610258 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.088994523 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077151581 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075277344 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088385117 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071389882 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.078604656 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.081439485 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.075117026 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.078138004 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.074160828 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079285327 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.07309798 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.08052732 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078352459 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091710206 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071378754 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078422586 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079718462 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073631366 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079589655 seconds)
  done (took 4.081208499 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070339737 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.086991382 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.089979923 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.13861767 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.107229442 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081232716 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080205756 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.09130169 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.098436422 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.065978178 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070480108 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.092076915 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094609626 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073797573 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.104507649 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.083964361 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078685653 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.067731331 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07300858 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100291097 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088638795 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084570566 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.098824573 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086365382 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065216732 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075525927 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073205307 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082055969 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073343525 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078416444 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070136727 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.06948398 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066657628 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079138901 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.074193024 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064131361 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.088354299 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08158668 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082156027 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.105637459 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.076775115 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069564561 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098786168 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133898041 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067359817 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07053533 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071718003 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080771334 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.069193477 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097090733 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.085724061 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.065891279 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085229226 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068865803 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.068929112 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084961008 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069261578 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.110336531 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.080153701 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073936706 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088370078 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.073266032 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08993445 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067533387 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079564703 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068648511 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068943075 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06626856 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103849197 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074837523 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121250378 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068425569 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065591466 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079136751 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.07805155 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.072740176 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067242498 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087735678 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079957751 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071252677 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079382027 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070547126 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070832313 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.10397915 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066359322 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065387522 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065682231 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06973904 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070707692 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067808868 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081343307 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068526419 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071047364 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083908459 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067481017 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068187328 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070085781 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06873854 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.0667436 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078642746 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071374205 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06946828 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080153431 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068481378 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070883623 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082689937 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077190151 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066752269 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068895165 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.070000994 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069328026 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071987543 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.07056867 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06941395 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074872027 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075141823 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073686005 seconds)
  done (took 11.208135172 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16117474 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155476421 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.06880996 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149840387 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076684648 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072525601 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151453898 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08884001 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068055391 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069285121 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.067397909 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096836408 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.0918263 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105504708 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.072756901 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068696467 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093962667 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10185039 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153150471 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147863567 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091792129 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076356029 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071553828 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.07002143 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069717833 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.077162347 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.08737154 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076940943 seconds)
  done (took 4.697719134 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.072853674 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.08301687 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071953404 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092110758 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086637457 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.06821644 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069999713 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069557501 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085297661 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07512554 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068025837 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072978537 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.072098971 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.069101727 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.069551159 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.07464529 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075254234 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.067136067 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.0717583 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.073793702 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.07868193 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094590156 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072778262 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068375922 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070961802 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06848555 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.075465257 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077562416 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.067299675 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098689809 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065082795 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072489834 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08262507 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069486192 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067802925 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068584957 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.06831856 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068413807 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068281516 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064899889 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064508596 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.071588937 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.064930687 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072099411 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.080570191 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.074060845 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.067545386 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.071487255 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.071179081 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.0649482 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071376874 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071398443 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070380457 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076761696 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071523983 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.070533374 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069292431 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099619633 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.074603889 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06739658 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06751856 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066307401 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069637519 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076159223 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084823981 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.070120315 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066585091 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.068061155 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07305944 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082278866 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066209421 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.071623011 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.063701759 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.066693482 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069353288 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.06933425 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.067709646 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.066085049 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067456575 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.068722479 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068672572 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067564789 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067961046 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070751359 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065677188 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066229243 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068909742 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069356671 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074461519 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066950649 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.071012706 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069345537 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066814 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070781099 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073831838 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07085931 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087915177 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076920526 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068508792 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.066173063 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.08287829 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.070048718 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067263939 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073495595 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072618515 seconds)
  done (took 9.595194997 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.088923441 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.067561665 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086381011 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.092584574 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.0765873 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071246474 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080510638 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067314809 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.082779441 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.067378916 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077177232 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066920429 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081673494 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077424504 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069915696 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078803339 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.070906944 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.089272649 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.083200325 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066823768 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077202642 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080991577 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080756252 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087786982 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085684463 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085449322 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078498605 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.06887294 seconds)
  done (took 4.217896912 seconds)
done (took 40.655028999 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.036523099 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.211744206 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.045301488 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.293218873 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.329358343 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.061621501 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.162553301 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.028916353 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.04858197 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.086301863 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.351569112 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.406198657 seconds)
done (took 69.095860968 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.075663976 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.176318858 seconds)
    (2/2) benchmarking "String"...
    done (took 2.251540952 seconds)
  done (took 6.392344355 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.628172661 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.026885416 seconds)
    (3/3) benchmarking "different"...
    done (took 2.077305242 seconds)
  done (took 8.693812484 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.146835882 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.662452813 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.287426719 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.027034152 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.030315366 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.438464937 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.817328642 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.522890452 seconds)
  done (took 33.749463156 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.335738082 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.284636733 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.74451617 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.787323946 seconds)
  done (took 17.1652693 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.632064285 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.288988203 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.289064877 seconds)
    (4/4) benchmarking "different"...
    done (took 2.284000408 seconds)
  done (took 11.514563372 seconds)
done (took 89.797059246 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.02695505 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.202455099 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.066992804 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.178956164 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.111652021 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.057046897 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.034738795 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.051598533 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.027101264 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.026611557 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.432843605 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.026021924 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.025521606 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.058818375 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.03631899 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.059826475 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.498391067 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.031772771 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.034199996 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.688422093 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.536796558 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.031855748 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.035582899 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.081993167 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.144577637 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.056053199 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.133762853 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.033760641 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.634499666 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.040718949 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.033299145 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.028365156 seconds)
  done (took 212.429415762 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.027414181 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.813985012 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.884791967 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.051263024 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.215986176 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.221474305 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.166968817 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.355560188 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.032252226 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.046658509 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.175588632 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.021312047 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.182437366 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.046556119 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.02206452 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.111737592 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.171311622 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.216300214 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.024002105 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.216410593 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.034050193 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.045954707 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.966917778 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.14937342 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.076185319 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.067873532 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.21925224 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.070260833 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.22648544 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.151695903 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.065868495 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.078592366 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.260405672 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.909071966 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.056984551 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.051100607 seconds)
  done (took 178.39648411 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.187043418 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.054148917 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.100821827 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.173704547 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.781311113 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.760215537 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.037331834 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.040145159 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.039013649 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.045884553 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.040738479 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.104822444 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.406524655 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.050529408 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.035520583 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.038217186 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.541899176 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.039958697 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.03668049 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.037028835 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.10068109 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.410751014 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.171840079 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.04086167 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.048130041 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.173357485 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.049220144 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.037908168 seconds)
    (28/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.036698327 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.036594869 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.171435314 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.042041185 seconds)
    (32/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.037011504 seconds)
    (33/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.11400158 seconds)
    (34/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.172416599 seconds)
    (35/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.047756525 seconds)
    (36/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.118908033 seconds)
    (37/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.043699329 seconds)
    (38/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.521506815 seconds)
    (39/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.037944732 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.035999786 seconds)
    (41/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.038590738 seconds)
    (42/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.099728867 seconds)
    (43/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.038119698 seconds)
    (44/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.132611611 seconds)
    (45/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.131031792 seconds)
    (46/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.037881057 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.051047026 seconds)
    (48/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.111283414 seconds)
    (49/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.718963347 seconds)
    (50/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.040508459 seconds)
    (51/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.037706346 seconds)
    (52/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.035245555 seconds)
    (53/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.0389096 seconds)
    (54/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.042665092 seconds)
    (55/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.690540641 seconds)
    (56/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.04254075 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.067273982 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.642641563 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.04412645 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.041945991 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.041178857 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.041933515 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.043694477 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.049090832 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.078855453 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.839389147 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.225348357 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.431524447 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.838136974 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.044029087 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.109635999 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.099207712 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.044622146 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.120777081 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.043356851 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.0424094 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.043732164 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.042232681 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.159257095 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.154727321 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.045037746 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.17802851 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.034390284 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.041683547 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.546242607 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.858874322 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.043124271 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.056159972 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.099329086 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.043892335 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.043602087 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.051887342 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.167103115 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.04395738 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.043401682 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.04342647 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.134019369 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.04371731 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.183828881 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.267736654 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.115535966 seconds)
    (102/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.044501407 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.288927205 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.265881435 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.044563529 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.044498466 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.059022359 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.045200968 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.044448805 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.054202628 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.046202684 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.043755059 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.044644424 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.044811721 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.044474425 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.045359241 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.059119869 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.044324153 seconds)
  done (took 440.733383292 seconds)
done (took 835.759284267 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.740640584 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.80602573 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.648574444 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.686380324 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.656181476 seconds)
  done (took 15.518127066 seconds)
done (took 17.496298459 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.066585701 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.061161069 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.051555124 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.067907574 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.067307614 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.065316194 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.096274601 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.093676377 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.089160941 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.063205432 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.072276913 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.067805017 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.070980741 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.090906871 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.074601755 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.073102567 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.066238997 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.057743464 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.074544006 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.069284089 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.066456611 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.066132955 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.066911305 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.073303323 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.079057667 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.067835063 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.061836856 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.069772321 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.068210792 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.069809227 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.103973878 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.075096098 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.098439405 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.076596977 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.073541071 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.077852769 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.066306951 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.096743323 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.066714292 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.104023735 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.074816938 seconds)
  done (took 87.024291757 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.05551555 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.193916415 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.264991834 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.087164898 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.054604946 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.269174832 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.110685963 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.180602542 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.185015235 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.29342963 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.273010608 seconds)
  done (took 25.954196956 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.054754681 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.193198086 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.260996743 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.08881534 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.076311664 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.268923758 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.117858762 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.180562869 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.193697851 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.300415422 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.278871411 seconds)
  done (took 26.004668916 seconds)
done (took 140.96390256 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.410550157 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.076773466 seconds)
  done (took 6.470158943 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.051672397 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.067531647 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.197857888 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.050831423 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.050521168 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.050709853 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.050394088 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.050196347 seconds)
  done (took 18.554114749 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.05189729 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.051262645 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.049426927 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.05183894 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.051916297 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.050650773 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.052669082 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.051588165 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.051189463 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.052059145 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.036976828 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.050619126 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.051167152 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.050876535 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.050983047 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.051865463 seconds)
  done (took 34.791986039 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.039543603 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.051142165 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.051090806 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.036072705 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.051360615 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.052186452 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.054925666 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.052399026 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.050542639 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.051350309 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.053633685 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.051445197 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.052753469 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.052971835 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.052183577 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.053136777 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.051928434 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.053269181 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.052924213 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.052390769 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.053401813 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.052026879 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.056672375 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.053483915 seconds)
  done (took 51.218169236 seconds)
done (took 113.014679125 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.270381082 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.57232579 seconds)
  done (took 8.828060234 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.05664364 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.052348749 seconds)
  done (took 6.15425208 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.053208236 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.053944453 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.053216835 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.054326282 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.052628368 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.052343013 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.053645326 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.052920117 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.054798125 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.055077933 seconds)
  done (took 22.523886806 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.055194789 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.053485452 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.053356355 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.053442598 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.054512598 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.053561286 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.054056366 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.051879544 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.032004338 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.054257653 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.053462719 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.053888098 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.053949201 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.054439926 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.055130412 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.05538312 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.054476446 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.054913704 seconds)
  done (took 38.939652978 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.054422134 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.054822397 seconds)
  done (took 6.096283188 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.054494902 seconds)
    (2/7) benchmarking "second"...
    done (took 2.055970249 seconds)
    (3/7) benchmarking "month"...
    done (took 2.055109929 seconds)
    (4/7) benchmarking "year"...
    done (took 2.054496494 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.054353942 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.054456794 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.055606325 seconds)
  done (took 16.372076634 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.056942391 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.223621904 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.279829605 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.639733111 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.055913411 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.057808653 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.927910375 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.056934705 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.059943449 seconds)
  done (took 22.346984755 seconds)
done (took 123.246098789 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.861443223 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.056188611 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.380932417 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.123993197 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.073313812 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.35516436 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.060019905 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.600592596 seconds)
done (took 44.498405344 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.170346359 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.053209222 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.079765676 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.079743085 seconds)
  done (took 23.201538116 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.058047401 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.365984345 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.07469403 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.997020452 seconds)
  done (took 23.500744933 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.432390126 seconds)
    (2/2) benchmarking "read"...
    done (took 2.402072231 seconds)
  done (took 6.828606781 seconds)
done (took 62.691850595 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.058064904 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.056739375 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.057937593 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.057453968 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.057599072 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.059002714 seconds)
    (7/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.056556532 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.057009695 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.056884862 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.057136666 seconds)
    (11/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.05838425 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.056487086 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.057316963 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.058279586 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.0572851 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.057702915 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.056928354 seconds)
    (18/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.056766409 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.057657153 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.057197205 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.05849381 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.058882282 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.058234424 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.05651046 seconds)
  done (took 51.371108536 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.057378976 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.05819964 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.057198337 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.057070983 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.057268356 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.056367559 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.058672365 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.056723282 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.058922759 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.058187919 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.057839168 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.058346025 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.057453277 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.057424045 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.057984666 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.059424581 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.05755345 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.057524007 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.059286433 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.058024684 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.059484909 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.0583808 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.059110929 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.058170177 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.058537522 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.059149794 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.059716939 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.059223702 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.060520192 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.060357883 seconds)
  done (took 63.740869203 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.059866178 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.060381058 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.058635483 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.059312778 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.059199812 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.060610542 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.05963294 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.058947612 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.058951224 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.060396567 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.060825809 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.060165529 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.059406899 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.060161684 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.060634992 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.061461595 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.059904027 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.059806312 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.060650499 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.060487439 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.061651141 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.060535481 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.060796138 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.06140874 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.061290648 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.061579698 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.06125129 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.060084729 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.062119664 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.061189149 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.061281571 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.059663916 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.061965011 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.062929386 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.063310568 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.060148379 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.062051686 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.060322455 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.06282236 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.061504904 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.060736337 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.062372842 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.063232052 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.061864496 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.06131402 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.061385042 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.062149061 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.061434385 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.061333917 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.064222887 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.0622412 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.062812938 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.061280861 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.063178251 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.063424359 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.062479501 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.064400958 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.061297713 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.06269867 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.063488334 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.060944278 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.06120844 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.06388089 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.06375007 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.062591896 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.063529646 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.062804986 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.061505525 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.062468119 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.064664667 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.062718399 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.063805661 seconds)
  done (took 150.423558737 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.06322592 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.063577758 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.064177385 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.063597713 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.064068986 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.062776614 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.063049174 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.063931096 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.064066874 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.064093517 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.063658253 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.063325995 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064178187 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.063947845 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.063068538 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.064037462 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.065020982 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.064629659 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.064130695 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.063750639 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.065451325 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.065470939 seconds)
  done (took 47.404972597 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064974998 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.066283739 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.065493226 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.063163035 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.065231008 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.063536686 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.064387425 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.064410288 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.065284725 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.064585978 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.065410668 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.065058394 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.063426147 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.063705323 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.065616681 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.065389359 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.064682961 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.064766148 seconds)
  done (took 39.162482479 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.064544417 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.065869321 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.064838483 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.064298309 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.065220515 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.065331764 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.066133648 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.06538579 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.065891755 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.064912068 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.066010834 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.064874177 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.067333273 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.06465659 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.065583473 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.066723319 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.065544497 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.064471043 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.065446643 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.066750779 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.065125495 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.066304158 seconds)
  done (took 47.440379611 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.064573111 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.065634497 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.065863662 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.066367047 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.065028794 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.065435376 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.066601052 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.066089539 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.066268223 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.065639216 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.065715496 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.066002446 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.065756373 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.067922128 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.06615806 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.06747397 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.066164213 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.066642841 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.067393008 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.068648963 seconds)
  done (took 43.323755711 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.06600132 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066284773 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.066169189 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.066412172 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.065743052 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.066166269 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.066831016 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.067307542 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.06789294 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.06910272 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.06676442 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.067532341 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.067242381 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.06646492 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067581846 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.066852651 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.067887175 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.067509091 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.067071846 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.066709724 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.068467501 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.067525703 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.068521479 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.067080035 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.068883303 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.068431159 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.068059671 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.06795441 seconds)
  done (took 59.884750801 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.067724886 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.067180396 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.068173924 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.068409368 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.067384334 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.067958476 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.068625872 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.068811744 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.067235385 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.067728866 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.069469541 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.068546068 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.069176406 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.069221325 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.069207768 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.068697294 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.068078936 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.06941043 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.069047642 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.068635302 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.069328005 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.069010008 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.069835309 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.068107764 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.070028808 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.069088132 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.070015464 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.070539567 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.069974797 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.06965245 seconds)
  done (took 64.066652047 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.087343422 seconds)
    (2/2) benchmarking "in"...
    done (took 2.086706791 seconds)
  done (took 6.176446508 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.070111639 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.068136714 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.070045024 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.07031369 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.070050823 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.068368857 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.06965333 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.069093802 seconds)
  done (took 18.557884765 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.069701504 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.071452378 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.070137797 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.070353368 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.071157354 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.077834249 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.071745431 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.070518867 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.071215124 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.072754721 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.075344466 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.073279882 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.078435128 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.07503233 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.071377941 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.070942645 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.070848515 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.07196628 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.071542963 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.070744014 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.073391492 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.071190324 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.070825992 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.072305601 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.071687973 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.072569456 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.078614991 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.068501657 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.066187587 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.063087733 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.07570508 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.07285206 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.071609177 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.072191506 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.065067124 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.072819787 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.061073871 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.06175027 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.071430425 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.072305764 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.073821768 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.075852619 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.048592276 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.078893872 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.072292817 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.072280453 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.073991858 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.071322157 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.058567733 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.075461136 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.079780244 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.060814056 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.072789966 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.072067115 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.074686311 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.073119481 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.072282865 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.074273544 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.080513753 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.079199799 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.075072167 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.090165178 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.080697598 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.072260751 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.072159994 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.083150867 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.09530794 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.074261665 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.074175681 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.074040061 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.081220491 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.074055198 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.072631771 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.075120527 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.086436563 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.081671678 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.073945671 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.075189348 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.073976039 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.072258259 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.074192017 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.072277158 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.073794484 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.07428464 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.082990305 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.096678973 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.074609179 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.073945841 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.074052 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.075829041 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.07764541 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.076098959 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.075391777 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.074801709 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.074820896 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.077653242 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.074380257 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.074132853 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.075004697 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.08268846 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.074506771 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.075522863 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.077667823 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.082825304 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.074810918 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.074637119 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.075859876 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.07454372 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.084049522 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.074915938 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.075029032 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.075182021 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.064498529 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.066019965 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.070648208 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.078252019 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.079582376 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.084091071 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.0768102 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.080063338 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.078700852 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.071149252 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.084390232 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.098479691 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.076109447 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.079345018 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.079840517 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.087995429 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.079647618 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.075821795 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.078255825 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.076821683 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.076158756 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.07777749 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.077633017 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.076563916 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.076990587 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.076575966 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.078190996 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.07717037 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.080287961 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.078704352 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.079264012 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.077214176 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.079919737 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.076792001 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.079923834 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.082733909 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.078710801 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.076881596 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.078293618 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.078999837 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.079961283 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.07884966 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.078541515 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.077811748 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.077091797 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.078763398 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.079403502 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.078150137 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.07795332 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.079199451 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.083470379 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.079050283 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.078853453 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.079058602 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.078538853 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.078565369 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.079259009 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.078824145 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.080019406 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.079287243 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.083092634 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.07792376 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.078255311 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.077598374 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.079035331 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.078888025 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.081880438 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.089741461 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.082259623 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.087433195 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.078913449 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.086288737 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.079759316 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.079914105 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.080002855 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.079224754 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.079136397 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.078592509 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.078902067 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.082688975 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.099448472 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.089688234 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.08248399 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.081462533 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.085179754 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.085657323 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.085580929 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.079906877 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.080843828 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.082368535 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.079580773 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.079173653 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.080359795 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.082408342 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.08095133 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.080573968 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.083408693 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.080463645 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.081700946 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.080241151 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.080896875 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.080507984 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.080140964 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.081277217 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.080914917 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.084648353 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.088278166 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.081705729 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.080526181 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.081570425 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.083685873 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.079546896 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.081198169 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.081833032 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.084571959 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.081295122 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.082297668 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.08692481 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.083211406 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.082074064 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.081668587 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.081290884 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.082868624 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.082828762 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.084004718 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.090531324 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.083535931 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.082256235 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.087320654 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.081761918 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.084374962 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.080645599 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.082225656 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.080894309 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.083938758 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.082947315 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.082397392 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.089905023 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.082368473 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.082667113 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.082601285 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.085535414 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.083519138 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.08511194 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.08183431 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.084877491 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.08907017 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.088365981 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.083739216 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.085972483 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.0834216 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.08477456 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.085930106 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.083147058 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.094563613 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.090939915 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.082968892 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.083156015 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.081046426 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.084667533 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.083204268 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.083662773 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.088455701 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.083083713 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.084039532 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.086019301 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.083966824 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.083579718 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.08898668 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.084171589 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.085898445 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.085355384 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.084993037 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.082958431 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.084145603 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.08526911 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.08322503 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.08367181 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.064586753 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.07772292 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.083415526 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.08513455 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.092327441 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.083888428 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.084001043 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.092045885 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.084957667 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.084647609 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.084489364 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.085388623 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.084465452 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.084910144 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.08530454 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.086775989 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.084235795 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.087904341 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.095073406 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.084803065 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.091669826 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.087262411 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.094705859 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.08429869 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.085105349 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.084676303 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.087554991 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.091414427 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.084849367 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.085265259 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.09086685 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.085960788 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.087809823 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.089227989 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.085133965 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.084624362 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.084737451 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.087511986 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.090505588 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.087681385 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.085650373 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.085145334 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.086072444 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.085609774 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.088940627 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.086374772 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.086717347 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.087753106 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.085447666 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.084866218 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.084930963 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.086123823 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.085197044 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.087039392 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.08589409 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.092129311 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.086438233 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.088329912 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.089385319 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.087022533 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.095098927 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.086670457 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.085961344 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.088003177 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.086820179 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.090562316 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.087826369 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.086875452 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.087422775 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.087226778 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.089254697 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.097158592 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.093915341 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.091175204 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.088220654 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.087373522 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.088659838 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.096513747 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.111016782 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.087612879 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.089246877 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.090514922 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.094470935 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.08833377 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.092781719 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.089854627 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.095234007 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.089339292 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.088433738 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.090353285 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.099680704 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.087708418 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.088042508 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.088751576 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.091925447 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.091244639 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.088455459 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.090352152 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.091082904 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.090564994 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.099285893 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.088909778 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.089908553 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.088491674 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.088892418 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.088638527 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.08851453 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.090699093 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.089939611 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.088664262 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.088442537 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.090456345 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.093336304 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.089163548 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.091710513 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.098435824 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.089374429 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.089458339 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.091829797 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.089563941 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.090327781 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.088488314 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.089275635 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.093192647 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.090165445 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.09131974 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.092272767 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.097014739 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.091982226 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.090610233 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.090787486 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.09301118 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.089685163 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.090219759 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.091526959 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.097950952 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.092358949 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.100463043 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.099308535 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.090371882 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.092985408 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.097324836 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.098242134 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.090825093 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.090995326 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.090869569 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.093381348 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.092927455 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.091788388 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.090265937 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.093362301 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.095510318 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.091496212 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.091504877 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.090628855 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.091883048 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.093394956 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.094024919 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.096362812 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.091056711 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.09166916 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.091013194 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.091234801 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.09183499 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.093107834 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.091527017 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.09251358 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.09304385 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.093149973 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.096606988 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.091744581 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.092950889 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.093355159 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.09154255 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.091691118 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.093262406 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.093124458 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.092854522 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.095998642 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.100189764 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.092896151 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.093304316 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.095086326 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.096888885 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.092823518 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.091822446 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.093008657 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.092343791 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.099487432 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.093172723 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.092221843 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.093708451 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.095069926 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.097726389 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.094844727 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.098797636 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.092259246 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.0943697 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.094212084 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.096597227 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.103804649 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.097655628 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.095865537 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.100547506 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.09582465 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.095529814 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.094504946 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.094420698 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.0939191 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.095824947 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.096930182 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.095289412 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.096055998 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.093850394 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.094479226 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.093772141 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.095382866 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.094310313 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.094810294 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.097216816 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.102485173 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.102750534 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.094965022 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.094566568 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.094350943 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.097699699 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.106440454 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.095846412 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.09382441 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.093944194 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.09473422 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.09788248 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.101100681 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.10399141 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.098105919 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.094201417 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.100170453 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.111440357 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.09807764 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.10454296 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.125893047 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.097796866 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.095690627 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.094411767 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.097462881 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.095341215 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.099781639 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.095791882 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.101850812 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.096406622 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.096261601 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.10305085 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.095913602 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.097357094 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.09554646 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.098001564 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.101056503 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.096415747 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.10264302 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.09632041 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.09606779 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.097290005 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.099319017 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.097213949 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.09701173 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.096781844 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.099460654 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.095358547 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.096601873 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.104400298 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.096389375 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.098174286 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.10962269 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.108408304 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.096314462 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.097093784 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.09630943 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.101357377 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.099385732 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.097503019 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.099617316 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.106298227 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.101299662 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.105900604 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.098731824 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.098217376 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.098560213 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.097507335 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.096519908 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.109567451 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.107932788 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.099124204 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.099318907 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.104663501 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.098441416 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.10376188 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.10383091 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.097822018 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.099164157 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.098335367 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.098591166 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.098828841 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.098816826 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.102100754 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.106878655 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.098458371 seconds)
  done (took 1245.449299527 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.099781566 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.099220033 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.099675134 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.09863069 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.098962617 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.099038227 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.09998289 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.098712303 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.099832981 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.099686825 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.099594047 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.099431917 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.10004458 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.100043362 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.098634187 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.099676584 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.100340806 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.100211032 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.100094652 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.099952501 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.098820903 seconds)
  done (took 46.121512102 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.099479493 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.100420742 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.098097179 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.100725562 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.099873112 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.10026686 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.100190097 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.099551417 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.100426547 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.100800574 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.092518644 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.099188268 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.100131154 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.101913024 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.10033622 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.100327591 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.100514169 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.099879904 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.101428874 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.10119529 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.10055881 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.101705169 seconds)
  done (took 48.231738912 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.099740044 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.100504174 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.100995313 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.100870061 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.101290072 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.10218463 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.101125858 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.103696776 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.102053449 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.103572985 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.10815082 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.109374075 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.101736198 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.10594995 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.102369039 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.101609227 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.248502525 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.10085357 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.101417624 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.102454793 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.100528548 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.107630223 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.103026226 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.102153472 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.102042565 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.102724822 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.1021436 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.094900867 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.101963259 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.103715546 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.105524274 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.102429432 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.104388994 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.097742464 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.103967809 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.103951312 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.10683257 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.103214812 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.103354155 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.103372422 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.113405587 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.126485048 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.103393932 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.103186965 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.109248602 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.102480277 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.103343925 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.106002375 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.111295093 seconds)
  done (took 105.266576104 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.103798724 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.103108359 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.10388506 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.104097379 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.104248419 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.103761478 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.10434665 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.102938049 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.104922947 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.104108414 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.104212898 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.103702081 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.104326558 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.103523171 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.104469553 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.104790025 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.10585568 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.104962276 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.105692133 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.104696827 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.103913037 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.104880986 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.103364104 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.105108736 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.104364628 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.104558947 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.105781886 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.103976847 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.105181148 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.10472549 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.105299436 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.10566703 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.105375057 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.105211307 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.104616736 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.104517138 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.106343662 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.106225147 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.104201689 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.105409257 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.105922165 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.106446555 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.105539119 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.105660826 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.105241418 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.105602855 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.10558931 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.105770166 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.106360344 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.09650067 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.106253061 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.105526228 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.105030277 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.105717949 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.10555539 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.10619794 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.105901696 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.106004008 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.106430649 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.107045103 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.107256356 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.106690274 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.106484923 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.106449673 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.106208828 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.106625006 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.106762479 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.106571308 seconds)
  done (took 145.182196993 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.105869365 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.106374996 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.107486197 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.106139513 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.106880315 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.105790196 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.107383924 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.106089872 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.107912371 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.107288549 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.107271121 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.107053489 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.107455407 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.108069316 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.107626427 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.108203619 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.107324816 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.107321175 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.107253205 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.107687766 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.107766699 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.107792186 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.107519543 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.107574909 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.107698477 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.108001469 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.107759838 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.10819923 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.108966104 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.108202054 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.108352204 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.107766366 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.10812336 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.1089162 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.108175892 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.108461036 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.109371184 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.10926465 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.108901574 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.108362998 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.108867723 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.107694872 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.108689071 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.108148144 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.109468735 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.109096594 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.109691771 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.108627545 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.108138981 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.109048935 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.10920413 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.108559098 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.110291912 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.109417118 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.108865847 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.110295016 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.109082133 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.109854832 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.110018559 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.109436492 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.109528178 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.11140195 seconds)
  done (took 132.751333418 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.109361273 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.110384063 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.109091858 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.109863341 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.110059185 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.110678406 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.10942424 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.109796129 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.11036255 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.111494216 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.11004646 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.111749392 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.111262706 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.110546156 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.111546436 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.112258054 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.110564717 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.11050394 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.110704824 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.111701465 seconds)
  done (took 44.252186664 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.109700318 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.111984905 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.111857191 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.110643339 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.111339114 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.112214917 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.111103963 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.111762126 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.110891718 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.112082613 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.111274649 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.109975485 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.11135455 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.112406365 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.110653029 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.11159407 seconds)
  done (took 35.823501469 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.112492112 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.11250065 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.111706443 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.11103763 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.111755721 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.111679411 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.11106134 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.112634004 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.111623192 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.111935269 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.111663154 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.113128431 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.112497242 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.111526516 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.11266413 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.111894253 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.112737885 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.112687427 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.112427156 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.111346315 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.113234037 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.112824639 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.112060144 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.113242899 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.113074032 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.113258988 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.112421773 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.112907005 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.113921634 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.11267754 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.113045666 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.114604627 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.113548904 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.112457666 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.113516901 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.11368085 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.11268574 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.112341685 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.11249263 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.112890995 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.114256081 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.11507701 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.114434715 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.113716405 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.114843276 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.113910864 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.114554045 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.115076466 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.114434593 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.114541965 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.114499961 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.113663089 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.11474332 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.114776444 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.114410342 seconds)
  done (took 118.263442143 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.115255668 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.113512347 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.115803446 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.1156866 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.114629151 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.114740249 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.115205732 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.11458344 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.115047335 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.114411803 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.114789628 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.113811578 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.115487592 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.115019701 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.115389573 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.114920705 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.115526689 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.115202769 seconds)
  done (took 40.114338219 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.115330245 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.117693458 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.115646665 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.113461741 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.115825349 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.116732194 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.114316705 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.115791353 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.115577254 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.116728019 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.114815031 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.115840853 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.11591802 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.116074375 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.116250139 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.115824901 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.087728677 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.117275063 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.115485198 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.115322113 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.116445616 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.116577776 seconds)
  done (took 48.567305328 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.116966025 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.117830948 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.11820429 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.131455679 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.136963272 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.148105683 seconds)
  done (took 14.815475958 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116488512 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.115939492 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.119673195 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116510815 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.116436608 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117544504 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.11756182 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116601553 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117338118 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116717369 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.116932981 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117079783 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.116845332 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118380142 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117018245 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.117325002 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.116149627 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.11754252 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117645565 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117073096 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.117450476 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117932369 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118081621 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.117939467 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117259877 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.118584735 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.117694589 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11866123 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.117363532 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.118137423 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.117639621 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118248092 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.117986499 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.118173031 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118800513 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118028072 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119008576 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118397384 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.11861614 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.11890603 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.117586879 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.118446861 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.117795694 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.118530166 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120101748 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118513814 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.118546281 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.11898319 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119109342 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119016036 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119628307 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119835252 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118311341 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119209068 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.118781378 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.119596515 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.119415737 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119749871 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119462216 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.1197887 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.118873067 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120874356 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120187838 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119391257 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120771786 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119571598 seconds)
  done (took 141.854590508 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.12066208 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.119388696 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.120250497 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.119846465 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.120275598 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.119543309 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120989924 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.119735895 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.119815631 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120826155 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.121494501 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120237442 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121419091 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.120655758 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121500987 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.120024423 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121821523 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121390247 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.12103684 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121629659 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.120994258 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121565807 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.121151516 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122221332 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122158909 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122112493 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.121487274 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120402786 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120980253 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121801657 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122130857 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122282279 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120411628 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.120175076 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122278614 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12150506 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.121742234 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.122009448 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12164903 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121973954 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12115589 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.121847734 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122821548 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.122544487 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123676276 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.12153251 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121596486 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.121807192 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.122026654 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122065891 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12308228 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.123496959 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122556963 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.121718165 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122569607 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.123051638 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.122866732 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.122695228 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122957908 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122797273 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.123291093 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122747793 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.122606248 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122309442 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.122832684 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.123405187 seconds)
  done (took 142.082018717 seconds)
done (took 2902.32440921 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.184463152 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.197191772 seconds)
  done (took 16.435237625 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.288170586 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.1674098 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.311421006 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.242046706 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.130819252 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.149120385 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.125903258 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.126747021 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.220796628 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.127651335 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.145227367 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.127941203 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.128078111 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.127166217 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.127710593 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.127237398 seconds)
  done (took 56.945661192 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.130401459 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.131322678 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.12928684 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.12809884 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.141034532 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.286122673 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.142094739 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.132943592 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.14481669 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.163600158 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.147981417 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.135670434 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.136800508 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.133625705 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.223131327 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.177165621 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.188774496 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.207295484 seconds)
  done (took 40.93698037 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.210278302 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.143467421 seconds)
  done (took 11.415735385 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.160656716 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.159215128 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.141578782 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.136777606 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.147985478 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.144749035 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.126717575 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.149105853 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.140035289 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.161669981 seconds)
  done (took 73.528092018 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.13164518 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.131498699 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.389718648 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.140248853 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.13666542 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.152721901 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.130367581 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.160298359 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.133895026 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.128041109 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.141393559 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.395550423 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.142754304 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.130600569 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.553201807 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.1426422 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.13582886 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.161771153 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.163257123 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.136892545 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.136603063 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.133171799 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.293083175 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.843577674 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.13192991 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.134824996 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.138029632 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.129903806 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.129538505 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.131170547 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.133708423 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.131434226 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.134110588 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.134627795 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.136708515 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.135518666 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.623088151 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.15089796 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.138106825 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.218512929 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.176617922 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.139185127 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.919029554 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.134202221 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.131145179 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.136142396 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.829622487 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.224266304 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.1356504 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.313445868 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.477122438 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.147547773 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.300299319 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.28788317 seconds)
  done (took 147.288965743 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.130901232 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.367617418 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.284829393 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.135037112 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.387733979 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.342192994 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.134483105 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.17670808 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.133240438 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.333854854 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.386416514 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.235683691 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.134220655 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.129565261 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.131890613 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.130838326 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.281406045 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.200234639 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.13382239 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.131102914 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.156919707 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.333589628 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.255964894 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.135718574 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.158916796 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.339468958 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.253778977 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.234240523 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.890380991 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.130687487 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.193566587 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.134546729 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.1303368 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.130966365 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.286140189 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.225399013 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.216052882 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.134860174 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.130972118 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.132796075 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.805736366 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.331346292 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.229118597 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.25685368 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.384165231 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.346802747 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.747446589 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.132405014 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.769802372 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.29776542 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.339247825 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.341766309 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.252932528 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.13574392 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.392813368 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.13226447 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.132898415 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.338757766 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.354092151 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.232851354 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.13557241 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.134215183 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.132470256 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.37168036 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.136068017 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.223529892 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.136154859 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.135347828 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.227057186 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.235960628 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.362468002 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.363267192 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.166317281 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.452699633 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.632536559 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.33680048 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.199447034 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.356338142 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.144605329 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.133826159 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.215376359 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.981292547 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.389326398 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.375937957 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.333998985 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.16696642 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.78368404 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.134021845 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.32209475 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.32636809 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.368678551 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.37599991 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.373122279 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.511268154 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.134574021 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.133799082 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.446176758 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.252585463 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.087249124 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.484780311 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.363809612 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.630140456 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.16079869 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.481281277 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266353418 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.139571918 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.782578319 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.134295345 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.341785844 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.176425364 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.138037211 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.13602063 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.32547762 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.044622891 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.136084623 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.842522546 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.196018559 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.138382027 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.340437535 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.138587956 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.379780576 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.139460385 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.369019191 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.770251179 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.166598082 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.310866093 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.380887557 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.760232613 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.375468815 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.379421663 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.222789539 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.36020759 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.945893881 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.13636495 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.398986955 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.13975932 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.135957802 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.30507109 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.141415071 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.748251501 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.140065817 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.403553848 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.158779211 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.367311754 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.140222573 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.375371025 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.170519794 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.188389005 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.140847863 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.268323994 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.141008921 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.985908731 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.29518453 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.140460192 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.137847555 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.74510441 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.137476901 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.287669254 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.363519847 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.161482526 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.208594025 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.706455854 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.129847741 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.226259341 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.16069367 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.783076785 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.139575581 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.392342664 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.101165145 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.618928391 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.137332486 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.372449691 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.325568364 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.141902832 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.139191646 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.983107735 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.138287921 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.138293646 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.295061403 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.616280958 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.055444096 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.33886554 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.142049073 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.266610181 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.144558872 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.217404492 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.479374294 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.13904163 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.13695885 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.138327739 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.141266539 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.138575903 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.348845918 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.167511528 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.573428369 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.275540836 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.39679839 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.446484131 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.338350025 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.18135507 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.144852513 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.362615684 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.142314994 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.202282211 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.142836664 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.160412402 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.368483903 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.144224385 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.346422588 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.375865772 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.192816642 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.183992762 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.144334628 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.140679563 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.055066944 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.285768887 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.227767627 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.142419569 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.14151837 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.254372528 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.263540708 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.32460297 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.95556753 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.335997637 seconds)
  done (took 961.242853157 seconds)
done (took 1309.848092481 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.140467691 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.144360903 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.146792635 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.147510181 seconds)
  done (took 30.650637437 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.142507637 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.142759535 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.142713064 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.142781098 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.142647749 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.141811238 seconds)
  done (took 14.926809282 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.140716939 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.143416522 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.147160368 seconds)
  done (took 23.502648147 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.577883201 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.554660583 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.216358053 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.286493179 seconds)
  done (took 11.707156458 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.147938352 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.142740926 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.141764866 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.143208022 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.143359199 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.142037887 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.144121568 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.143334473 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.143795143 seconds)
  done (took 21.373040399 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.293293644 seconds)
done (took 108.523331906 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.212678773 seconds)
    (2/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.394286257 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.337734069 seconds)
    (4/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.398633497 seconds)
    (5/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.750348761 seconds)
    (6/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.655124788 seconds)
    (7/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.383894055 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.058660125 seconds)
    (9/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.150839538 seconds)
    (10/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.305416345 seconds)
    (11/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.442545286 seconds)
    (12/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.545713728 seconds)
    (13/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.421266907 seconds)
    (14/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.169742814 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.531725902 seconds)
    (16/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.541460505 seconds)
    (17/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.145445613 seconds)
    (18/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.343396273 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.157671392 seconds)
    (20/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.841387349 seconds)
    (21/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.854151432 seconds)
    (22/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.169349456 seconds)
    (23/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.158257933 seconds)
    (24/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.736599985 seconds)
    (25/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.915312461 seconds)
    (26/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.45711342 seconds)
    (27/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.263012481 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.30698002 seconds)
    (29/341) benchmarking ("sort", Int8, false)...
    done (took 5.098890399 seconds)
    (30/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.151827251 seconds)
    (31/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.155578043 seconds)
    (32/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.601336991 seconds)
    (33/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.270608257 seconds)
    (34/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.240256205 seconds)
    (35/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.234783079 seconds)
    (36/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.447101666 seconds)
    (37/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.15011099 seconds)
    (38/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.376565035 seconds)
    (39/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.385531753 seconds)
    (40/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.237265306 seconds)
    (41/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.232042618 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.38227902 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.233851743 seconds)
    (44/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.147189492 seconds)
    (45/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 10.508240719 seconds)
    (46/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.281209208 seconds)
    (47/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.27452022 seconds)
    (48/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.155000427 seconds)
    (49/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.41542815 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.920442711 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.564273296 seconds)
    (52/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.147414778 seconds)
    (53/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.378060732 seconds)
    (54/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.226553529 seconds)
    (55/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.156876613 seconds)
    (56/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.169614095 seconds)
    (57/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.144839113 seconds)
    (58/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 3.940557476 seconds)
    (59/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.331238774 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.371310305 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.440241914 seconds)
    (62/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.432928434 seconds)
    (63/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.409682195 seconds)
    (64/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.478961799 seconds)
    (65/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.860972283 seconds)
    (66/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.540706136 seconds)
    (67/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.449899319 seconds)
    (68/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.15335874 seconds)
    (69/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.145158235 seconds)
    (70/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.989388811 seconds)
    (71/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.159654646 seconds)
    (72/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.245566691 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.330221294 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.492039672 seconds)
    (75/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.162023816 seconds)
    (76/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.145088804 seconds)
    (77/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.449889588 seconds)
    (78/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.145335486 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.550457694 seconds)
    (80/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.315674908 seconds)
    (81/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.25015765 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.917874791 seconds)
    (83/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.570972151 seconds)
    (84/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.908852518 seconds)
    (85/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.53934591 seconds)
    (86/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.146523125 seconds)
    (87/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.363913727 seconds)
    (88/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.287783477 seconds)
    (89/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.355644613 seconds)
    (90/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.557977313 seconds)
    (91/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.241909348 seconds)
    (92/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.262858149 seconds)
    (93/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.744989638 seconds)
    (94/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.611641769 seconds)
    (95/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.298493612 seconds)
    (96/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.234133387 seconds)
    (97/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.15756352 seconds)
    (98/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.570926891 seconds)
    (99/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.390267526 seconds)
    (100/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.454462768 seconds)
    (101/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.150106659 seconds)
    (102/341) benchmarking ("sort", Float32, false)...
    done (took 7.582053397 seconds)
    (103/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.420501587 seconds)
    (104/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.151612597 seconds)
    (105/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.16618084 seconds)
    (106/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.466357994 seconds)
    (107/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.265019808 seconds)
    (108/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.149821269 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.790903532 seconds)
    (110/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.55263823 seconds)
    (111/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.462175105 seconds)
    (112/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.756080304 seconds)
    (113/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.15957188 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.295257441 seconds)
    (115/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.158800763 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.863541891 seconds)
    (117/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.469848086 seconds)
    (118/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.292148734 seconds)
    (119/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.166597088 seconds)
    (120/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.046865678 seconds)
    (121/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.362893153 seconds)
    (122/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.262116084 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.451886011 seconds)
    (124/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.24735288 seconds)
    (125/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.426364828 seconds)
    (126/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.329270914 seconds)
    (127/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.931078526 seconds)
    (128/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.918303793 seconds)
    (129/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.238320378 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.572825703 seconds)
    (131/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.308329362 seconds)
    (132/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.172112685 seconds)
    (133/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.165618879 seconds)
    (134/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.227404983 seconds)
    (135/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.167682748 seconds)
    (136/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.904139317 seconds)
    (137/341) benchmarking ("sort", BigInt, false)...
    done (took 7.236959392 seconds)
    (138/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.150474518 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.300833542 seconds)
    (140/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.98668529 seconds)
    (141/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.24311751 seconds)
    (142/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.245594507 seconds)
    (143/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.99174961 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.502017632 seconds)
    (145/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.539601081 seconds)
    (146/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.150228222 seconds)
    (147/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.437788607 seconds)
    (148/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.921475216 seconds)
    (149/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.410623851 seconds)
    (150/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.260121159 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.402137152 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 2.367170151 seconds)
    (153/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.288564351 seconds)
    (154/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.359060234 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.293684117 seconds)
    (156/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.149402853 seconds)
    (157/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.476403987 seconds)
    (158/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.393465159 seconds)
    (159/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.478248237 seconds)
    (160/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.19739759 seconds)
    (161/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.170009665 seconds)
    (162/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.165051384 seconds)
    (163/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.986324999 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 5.819359834 seconds)
    (165/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.252015696 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.257488131 seconds)
    (167/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.487158748 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.451509195 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.050502416 seconds)
    (170/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.382459205 seconds)
    (171/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.849544928 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.567980786 seconds)
    (173/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.363862161 seconds)
    (174/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.371228624 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.307514341 seconds)
    (176/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.307729509 seconds)
    (177/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.1356556 seconds)
    (178/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.270055427 seconds)
    (179/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.173158509 seconds)
    (180/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.281822428 seconds)
    (181/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.263492648 seconds)
    (182/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.155602848 seconds)
    (183/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.607144628 seconds)
    (184/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.303802537 seconds)
    (185/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.16221059 seconds)
    (186/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.281726525 seconds)
    (187/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.081191236 seconds)
    (188/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.159938971 seconds)
    (189/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.240869315 seconds)
    (190/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.163444835 seconds)
    (191/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.227958018 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.155410518 seconds)
    (193/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.258793349 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.153710622 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.283881132 seconds)
    (196/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.645492641 seconds)
    (197/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.573290644 seconds)
    (198/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.274675965 seconds)
    (199/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.525923521 seconds)
    (200/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.153832559 seconds)
    (201/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.436556955 seconds)
    (202/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.249069062 seconds)
    (203/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.273114718 seconds)
    (204/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.490292207 seconds)
    (205/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.476007395 seconds)
    (206/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.159959364 seconds)
    (207/341) benchmarking ("sort", Float64, false)...
    done (took 5.899594449 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.868142236 seconds)
    (209/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.242926227 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.471001326 seconds)
    (211/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.156533305 seconds)
    (212/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.160240926 seconds)
    (213/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.231834985 seconds)
    (214/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.213560095 seconds)
    (215/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.152773561 seconds)
    (216/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.183380947 seconds)
    (217/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.278132965 seconds)
    (218/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.232820971 seconds)
    (219/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.23216473 seconds)
    (220/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.520197452 seconds)
    (221/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.253634835 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.46331446 seconds)
    (223/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.322564334 seconds)
    (224/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.371432085 seconds)
    (225/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.543436218 seconds)
    (226/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.171990634 seconds)
    (227/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.164039926 seconds)
    (228/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.240712126 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.486230988 seconds)
    (230/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.241774482 seconds)
    (231/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.364798274 seconds)
    (232/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.570002358 seconds)
    (233/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.60190332 seconds)
    (234/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.158116758 seconds)
    (235/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.632004744 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.394433673 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.785362698 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.447304729 seconds)
    (239/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.594143588 seconds)
    (240/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.093010817 seconds)
    (241/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.178619591 seconds)
    (242/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.355384819 seconds)
    (243/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.178501232 seconds)
    (244/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.16724218 seconds)
    (245/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.154415084 seconds)
    (246/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.876496655 seconds)
    (247/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.313710123 seconds)
    (248/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.606232544 seconds)
    (249/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.235642166 seconds)
    (250/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.171980429 seconds)
    (251/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.231861436 seconds)
    (252/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.160517776 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.251141124 seconds)
    (254/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.402252754 seconds)
    (255/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.36162842 seconds)
    (256/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.969290692 seconds)
    (257/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.40170371 seconds)
    (258/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.162761598 seconds)
    (259/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.155945376 seconds)
    (260/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 4.048989322 seconds)
    (261/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.637811872 seconds)
    (262/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.157404173 seconds)
    (263/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.450663586 seconds)
    (264/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.374731818 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.467456522 seconds)
    (266/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.358565577 seconds)
    (267/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.076357911 seconds)
    (268/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.254784846 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.191020964 seconds)
    (270/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.304621737 seconds)
    (271/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.276997669 seconds)
    (272/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.118442223 seconds)
    (273/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.164670105 seconds)
    (274/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.285983196 seconds)
    (275/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.697119001 seconds)
    (276/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.174267256 seconds)
    (277/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.95745961 seconds)
    (278/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.244183264 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 4.781219863 seconds)
    (280/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.573356706 seconds)
    (281/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.159100787 seconds)
    (282/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.700092475 seconds)
    (283/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.169214104 seconds)
    (284/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.290779641 seconds)
    (285/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.556777257 seconds)
    (286/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.164878154 seconds)
    (287/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.222681528 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.060388884 seconds)
    (289/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.284606374 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.15885386 seconds)
    (291/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.367230173 seconds)
    (292/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.36063462 seconds)
    (293/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.173232806 seconds)
    (294/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.23543076 seconds)
    (295/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.440212 seconds)
    (296/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.002488695 seconds)
    (297/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.504133106 seconds)
    (298/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.465219527 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.51688703 seconds)
    (300/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.243114409 seconds)
    (301/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.170345859 seconds)
    (302/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.548986246 seconds)
    (303/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.974073796 seconds)
    (304/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.544033769 seconds)
    (305/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.173397562 seconds)
    (306/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.160322788 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.560974454 seconds)
    (308/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.29499316 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.126400752 seconds)
    (310/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.320608228 seconds)
    (311/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.180769796 seconds)
    (312/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.160342747 seconds)
    (313/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.204731016 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.803146951 seconds)
    (315/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.560452064 seconds)
    (316/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.341793169 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.405565972 seconds)
    (318/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.229308286 seconds)
    (319/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.372694008 seconds)
    (320/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.251790636 seconds)
    (321/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.095552003 seconds)
    (322/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.32793606 seconds)
    (323/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.376660752 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.034016349 seconds)
    (325/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.220080997 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.159595571 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.263518826 seconds)
    (328/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.238109519 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.57590888 seconds)
    (330/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.086005082 seconds)
    (331/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.272753832 seconds)
    (332/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.577463745 seconds)
    (333/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.248195156 seconds)
    (334/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.167732327 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.718485833 seconds)
    (336/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.483190669 seconds)
    (337/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.319542123 seconds)
    (338/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.627045547 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.040514209 seconds)
    (340/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.271470441 seconds)
    (341/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.28362663 seconds)
  done (took 1192.717591223 seconds)
done (took 1194.87939719 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.181101857 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.169974287 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.676781274 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.181098025 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.16917478 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.171923753 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.686403772 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.200220226 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.186657457 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.686755063 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.180509654 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.170145379 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.184718059 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.203863214 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.181095815 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.183219323 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.174709941 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.195278034 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.205353404 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.175570915 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.217673593 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.175568883 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.16969261 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.221406339 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.170834422 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.184134994 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.183903884 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.217504052 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.216201665 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.17283473 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.177859707 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.526870786 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.226038636 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.175824713 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.182005266 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.185364691 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.177041465 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.186069734 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.183232849 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.186009966 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.171506473 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.181212521 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.175040552 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.174642058 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.171704519 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.170945314 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.17294466 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.295983487 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.185543004 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.509705198 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.22954532 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.184519036 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.219438698 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.173489144 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.173805294 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.174427178 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.218572189 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.17750377 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.175751273 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.510331265 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.265922057 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.187466239 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.509560159 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.23940066 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.181205323 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.182571943 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.171278929 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.184877542 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.526137562 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.732420793 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.206159497 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.192824079 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.174652449 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.175381294 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.186853963 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.686560639 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.189779248 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.75493941 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.203855291 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.187752272 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.180496338 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.175887548 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.174801328 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.190818403 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.185829317 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.173109148 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.179014386 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.179670257 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.186857535 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.529427121 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.220535436 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.677681639 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.18288501 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.18657565 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.186188807 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.757082431 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.206921828 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.18555179 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.177108164 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.52876064 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.220269935 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.187782267 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.177302439 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.185930288 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.289334409 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.187231473 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.187903919 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.174551248 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.19730202 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.179918105 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.174775283 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.189023923 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.194793986 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.209876322 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.19216195 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.174158196 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.182876705 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.180241331 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.186368369 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.182845439 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.182061745 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.186401925 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.174600104 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.226548361 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.189295486 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.191617054 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.290710579 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.182064397 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.300647796 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.190468849 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.182237909 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.174714513 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.513116476 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.223473061 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.197204375 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.182654772 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.199485673 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.19768622 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.192647643 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.17864679 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.190915175 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.181043 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.228378978 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.176473533 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.200677455 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.228964116 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.189911242 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.183913545 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.188614956 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.21070639 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.195773259 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.180027755 seconds)
done (took 342.013974744 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.217842643 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.168186268 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.245291691 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.169185206 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.238673884 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.227745568 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.170040797 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.170082827 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.169242133 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.567555626 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.169800011 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.175912119 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.168755066 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.169944792 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.221583571 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.158874758 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.169847552 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.403085146 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.148231488 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.224792968 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.168186292 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.170678499 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.163796772 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.550146732 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.169813312 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.169705639 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.219070595 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.170521393 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.413347749 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.169700971 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.171402905 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.412713666 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.230746974 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.18359729 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.178851452 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.17775324 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.244407664 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.180560828 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.223958642 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.219729788 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.248300146 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.203387824 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.170678465 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.172092705 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.173592856 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.17115503 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.172057817 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.205379168 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.170645767 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.179459714 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.406906272 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.176892418 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.178918744 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.167847706 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.14544699 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.185284353 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.172050765 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.172419913 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.227461263 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.171134153 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.220253595 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.570683654 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.565796684 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.15382599 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.171589269 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.172575015 seconds)
  done (took 203.76826074 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.241515537 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.260022305 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.239191357 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.179204004 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.222741198 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.23888679 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.180092321 seconds)
  done (took 17.662151224 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.182318764 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.17437531 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.1981929 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.197854519 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.173304893 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.317771774 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.187149508 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.180152104 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.201871686 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.172431115 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.510819837 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.197444935 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.180972464 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.173964751 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.18655012 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.204038384 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.176993754 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.173959354 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.272660042 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.253921225 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.179529215 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.18296616 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.203629401 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.186946212 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.175890847 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.173964053 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.173922143 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.183556696 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.175796672 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.176093701 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.175352034 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.188761816 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.175261596 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.178284038 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.175177369 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.176329694 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.172692643 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.175315559 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.17542664 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.178115741 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.176468095 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.176941907 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.176384153 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.17549903 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.175299719 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.199253573 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.17844001 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.176692563 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.177069048 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.176912627 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.205228508 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.176646798 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.176876251 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.181795333 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.218572583 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.184502626 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.174115304 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.177055259 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.17814095 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.177044729 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.177157582 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.257399655 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.201673198 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.176655206 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.200845305 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.21476791 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.177882173 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.177153834 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.177512936 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.202934176 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.177000752 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.200344168 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.177944711 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.277866474 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.178007301 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.321332857 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.202140275 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.181440731 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.181950963 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.176967233 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.185268264 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.177541174 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.179902198 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.185639903 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.184486778 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.179525079 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.179001508 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.179177981 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.186784331 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.178725665 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.225647381 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.178690244 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.177440475 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.274650841 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.17876927 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.276378485 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.204946809 seconds)
  done (took 235.013415357 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.182642474 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.179755991 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.19281236 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.177783205 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.177764998 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.18226066 seconds)
  done (took 15.198155554 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.18101326 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.181195816 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.177841546 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.178384457 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.176547781 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.177855282 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.179361551 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.179798811 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.182014091 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.177702114 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.177357441 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.177584203 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.177144038 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.177210784 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.180027597 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.179484037 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.179863384 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.177464462 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.178540972 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.176344116 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.415805848 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.178319337 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.178651659 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.181934782 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.183130287 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.17810798 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.189111502 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.179685457 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.179053722 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.1852467 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.183505037 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.178743136 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.181658794 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.187248014 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.183887142 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.183692878 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.184458777 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.179306354 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.179192505 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.179672235 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.178741315 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.179101043 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.179126656 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.180151556 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.181743388 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.187119873 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.184104813 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.189303827 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.180319774 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.179818419 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.179865122 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.181113918 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.179869622 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.180675082 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.186826288 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.188372799 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.184301655 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.18176047 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.179096171 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.184280561 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.18510693 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.181486544 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.182454287 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.185211695 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.188686871 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.180567864 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.184465439 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.184829823 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.180552111 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.182036549 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.180815971 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.181040497 seconds)
  done (took 160.393619995 seconds)
done (took 634.134547919 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.261065377 seconds)
  done (took 9.370664749 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.255618026 seconds)
  done (took 9.453229524 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.533573207 seconds)
  done (took 12.646857117 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.198649655 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.21660678 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.196099367 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.185794578 seconds)
  done (took 30.922107741 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.453472761 seconds)
  done (took 9.562597489 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.192320196 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.179813287 seconds)
  done (took 16.544650378 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.179909497 seconds)
  done (took 9.289690039 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.235532611 seconds)
  done (took 9.371285126 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.193663995 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.204255269 seconds)
  done (took 16.526823251 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.183203761 seconds)
  done (took 9.292965684 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.994209229 seconds)
  done (took 10.181128356 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.186527647 seconds)
  done (took 9.316043488 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.200498363 seconds)
  done (took 9.311830274 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.149271598 seconds)
  done (took 10.259556026 seconds)
done (took 174.158065822 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.188922028 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.184929474 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.181277491 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.180225798 seconds)
  done (took 30.845802738 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.2187387 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.218933996 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.227050466 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.217410154 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.210010708 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.209079322 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.218032489 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.219045282 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.208703759 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.215829487 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.217643754 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.217918376 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.217980229 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.227342003 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.22669645 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.21721526 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.218314999 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.218920777 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.208640457 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.226809657 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.215980753 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.218741087 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.184694773 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.184511905 seconds)
  done (took 55.276102237 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.374399142 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.250163664 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.338519374 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.229369669 seconds)
  done (took 11.304109432 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.184945239 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.248125705 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.236176483 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.23143125 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.235862338 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.287011684 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.236146584 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.32034653 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.312974704 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.311428169 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.190349917 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.206457221 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.210760885 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.231349496 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.286940003 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.184739468 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.184452669 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.299566324 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.245866627 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.358851146 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.187406249 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.239174469 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.237294462 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.238191821 seconds)
  done (took 56.018149156 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.186519844 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.194325709 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.191978161 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.186999718 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.187034436 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.188363345 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.192938374 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.188525979 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.209169243 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.188533795 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.186113199 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.187159584 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.194523047 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.187803599 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.186781775 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.199163131 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.201175625 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.186906727 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.190382995 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.194368255 seconds)
  done (took 45.943247881 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.185807702 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.031768102 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.532449884 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.437827111 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.185321825 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.185088707 seconds)
  done (took 33.671937995 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.201285263 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.204021984 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.193831619 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.212069273 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.237351149 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.198662153 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.247370397 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.353572095 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.197640776 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.246223619 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.209469053 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.195786897 seconds)
  done (took 28.811917179 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.200745731 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.188323568 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.189908713 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.202004044 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.198498168 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.197655379 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.194814432 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.187347978 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.20149435 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.208117509 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.198157609 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.1994187 seconds)
  done (took 48.48155484 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.40203732 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.413978994 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.392965665 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.804460769 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.512153175 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169346464 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.47454652 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.399184483 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.922424542 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.952765966 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.484146815 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.168148987 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.135959758 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.114680056 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106296848 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.430174258 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.190515189 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.046691079 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442587837 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.235438944 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.192259338 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.189673498 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197015651 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477279585 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.517691982 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197489228 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.400082579 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204227472 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.187620566 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.4560781 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.80425696 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.247520553 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.391336374 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.445375633 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.529783784 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.264422196 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.192822035 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.396541561 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.239880322 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.223362729 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.198058032 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.199259554 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.715692131 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.200095917 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.461700461 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191234898 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.22079989 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.200187654 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115011812 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.521468964 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30227089 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.190530843 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.224797331 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.623526001 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310702212 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.43107822 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.194567873 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.398154443 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.252513578 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.45601724 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.372134734 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.194155895 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402665664 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.116600553 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.545136759 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.314216993 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.191065488 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195938357 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.890300175 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.432920065 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.271602838 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.530137239 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.948108552 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.19137043 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.19209054 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.234188784 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.279666756 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.191625486 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.485701604 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.173374701 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.118259555 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.288939369 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.588196513 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197992266 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.190097477 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.199451534 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.036728112 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.117113269 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.289017089 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.455212235 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.514534527 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.194171348 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.192772337 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.213511852 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194177075 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139270714 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.774915303 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.263322495 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.118941982 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.755914256 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.812357997 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.163739172 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.693720959 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.239571523 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.459666528 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.340234108 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.597823148 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.399077829 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.438591385 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.723884751 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.195656671 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.750925804 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.272621317 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268314424 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.191138276 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.753445131 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.413248062 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.50488842 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308081529 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.192779263 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.11902086 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.204305305 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.396201643 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.80849608 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253092934 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192766214 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.198245681 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.192600412 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.196174073 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.298659837 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208510518 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.485490619 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.272428762 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.197192615 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127473415 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.200994037 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.478958259 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.902693273 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258686528 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.454438832 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.462099512 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.896982685 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.793274016 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.242165402 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.465056594 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.269714727 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271292117 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.76502213 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.324105165 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.294001407 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196095062 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.327683175 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.204671851 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.200281215 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.631420625 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.618146173 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.624607916 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.241522865 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.197104053 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.150778361 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.404833971 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.442394464 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.253605878 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.221589959 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202384801 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.280986162 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.424204945 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.196603582 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.123671991 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.435790482 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.435901083 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.488207505 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.605187769 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.25434904 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.271296978 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207826698 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.4101414 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.27998067 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.874911977 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.750970988 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.415660029 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.790955912 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.166374384 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.83668608 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.478127699 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.579146619 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.214345923 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.650973286 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.408634401 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.922811788 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.234358172 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.728052719 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.125233409 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204287078 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.527471564 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.150077726 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.501549905 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.257804545 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.207380057 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.201503784 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.173077291 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.205339607 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.097718934 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.307872656 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.256854316 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.271833267 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103790404 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.871870535 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.242915254 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.200934354 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.199622645 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.543117038 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.050738759 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155790912 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.198455305 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.280145217 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.952521959 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.752243871 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.204357838 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.202488932 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.810171478 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.206008482 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.114364309 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.244998617 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.950292945 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228983943 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.470820047 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.898794796 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.489583219 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.27644194 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275726207 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.200320814 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205049443 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.900562149 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.210140968 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.901250983 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490636796 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.473098205 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.646190519 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.263837653 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.410091542 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.216072882 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.202586298 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.682671172 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.22825137 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203898842 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.405610065 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.72065021 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.578086092 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.843377385 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.286740895 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.20226588 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.469681335 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.211879525 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.857939859 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.893022419 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.202258003 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.202075874 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.456766523 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.88637406 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.204205593 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.178888053 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209568399 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.414318093 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.405200276 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.466080837 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.495576398 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.655229001 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.129507452 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207799572 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.226059975 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.432853006 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.201485202 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.238879601 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652276325 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.26607155 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.633721403 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.490737514 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.613798205 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.838199018 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.470331232 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.27001674 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.215546999 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.855699979 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.333464037 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.135324983 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.322658868 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.130277658 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.949095828 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.495917676 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.222080889 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.471524508 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.186402467 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.544975565 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.504204374 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.485192089 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.251688404 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.23409359 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.205445481 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.248800128 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.20485174 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.428903749 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.324268897 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.212221099 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.777921669 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.246983115 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250187939 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182442378 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.707703716 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228849119 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.208574755 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.899112076 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.223080187 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323742934 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276471659 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.949931702 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.86240662 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.235297357 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.164150013 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.854367253 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.472710236 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.261621583 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.655489952 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.226452555 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.611262111 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.205046218 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.418616693 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.212271647 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.811517142 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256095446 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.466694897 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157792565 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.419210079 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399856086 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.229099156 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.211526205 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.13291358 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.311226279 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.088398612 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.187939471 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.209756847 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.889709429 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.623910399 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.452160526 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.675005684 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.027151129 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.210991145 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.524442718 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.608616692 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.859127435 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.244549733 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209524605 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.557864126 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.342111815 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.533993563 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.47998406 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.215935413 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.232942962 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.420962093 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.334599433 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.127750265 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.702923467 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.793278141 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.908369513 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.218322495 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.41206364 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.56616053 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.52621724 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.247397487 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.282306866 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.613340042 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.476517226 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277940571 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.134208977 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.207683938 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.60453262 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.609070519 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.305120175 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.449649256 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.505173451 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.887499168 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.851214335 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.678285438 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.618038193 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.622501281 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.621064979 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.425666493 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.560900313 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.528307748 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.801564672 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.621158537 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.422361884 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.301280586 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.477285934 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.072862105 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.918044339 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.454152389 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.214746102 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.138614242 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.41681856 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.218461756 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.750044726 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.74264652 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.458469301 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.484595838 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.68103033 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.74924107 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.439015221 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.238937427 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.177261686 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.233395202 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.231294964 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.210804861 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.706189049 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.500540545 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225021895 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149822524 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.883720145 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.138153305 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.425199739 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.440400362 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.250691816 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.767677981 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.503146695 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.318707891 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.502301863 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.494747466 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.250312096 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.137788274 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.955946415 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.160596226 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.271644533 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.638505085 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.227656529 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.213687515 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.415237757 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.14072131 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258723747 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.216933598 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.407089816 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.788343195 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.483311958 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339187244 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.451628443 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.509753777 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.058297076 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.243762111 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484187483 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.139573304 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.866448036 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.896830491 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.25335662 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.28469461 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.213199185 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.216535583 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484389319 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.561992486 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.435563824 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.845023091 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.249667867 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.235940146 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.563048974 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.310764943 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.203764807 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.206968977 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.767993404 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.448669612 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.213685389 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.189423953 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.426451283 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283979221 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.404753135 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.288879965 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.724122911 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.218578602 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.065775101 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.320355813 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.167772616 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.184442446 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.908383364 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.277389852 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.214405277 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.486015869 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.834681344 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.416855482 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.609556076 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.095235697 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.446536182 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26078093 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.218401146 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.336991326 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.504865689 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.517581966 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.215478762 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.48691374 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.264218444 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.220274378 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.873440825 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.184266924 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.214630145 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.96170435 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.116244015 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.944976384 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.612238384 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.223411747 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.216172125 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.219115441 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.143472536 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.201004439 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.386233604 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196781306 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.343884372 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.487292785 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.544047074 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.311236423 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221383242 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.216894211 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.222325769 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.428328516 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.730959931 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.233122019 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.909478536 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.421268058 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.208079117 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.703500806 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.668720347 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.508962821 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.246660594 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.44558001 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455171277 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.750290342 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.444310537 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.196710769 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.444192819 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.21815442 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.488107652 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.492019717 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.218094627 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.429541199 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.84724459 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.507790773 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.577059512 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.521443095 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.281023933 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.441263726 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.135913347 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.213821482 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.220808759 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.48327727 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271960823 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.217822931 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.227527011 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.77282053 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.969709 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.679230105 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.368314614 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.559992927 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.996263574 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.973766803 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.22152436 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.144751966 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.219201354 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.245617436 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.222072955 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.146042169 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.912811872 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.943596255 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.431824468 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.529532379 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.146792265 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.42192725 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.79883541 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.145087188 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.186997283 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.219010775 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.464326198 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.145497366 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.222651212 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.172937703 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.510977484 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.975863589 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.494461591 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.220896278 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.163566886 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225576017 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.221937816 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.218732229 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.304821885 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.22071229 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337580608 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.486461285 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.621553975 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.325306116 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.859985388 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.986995413 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.159893202 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.263424901 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.779838638 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.789511695 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.512020433 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.348927976 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.964120581 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.167721507 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.223838602 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.237678587 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.477899292 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226156251 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.223877221 seconds)
  done (took 2285.141497787 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.283780767 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.278638416 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.288086928 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.381091824 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.329549991 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.354471453 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.378509216 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.239938223 seconds)
  done (took 60.681944704 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.226096401 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.190191753 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.230145584 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.221769147 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.221375787 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.226184044 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.409840488 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.254153553 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.228811366 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.22594888 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.222671026 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.228012985 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.241042749 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.222433741 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.227949623 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.516095072 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.246495914 seconds)
  done (took 82.523375621 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.274780892 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 11.115856899 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.226125808 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.018468834 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.277712922 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.523233145 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.22385022 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.223708478 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.568687542 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.52237835 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.24303412 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.237542366 seconds)
  done (took 96.620578483 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.22428051 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.224196406 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.224622023 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.223984329 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.224336919 seconds)
  done (took 13.271510313 seconds)
done (took 2850.767906178 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.538422037 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.317621867 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.298113528 seconds)
  done (took 6.765730351 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.368207236 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.416812149 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.528985571 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.552161403 seconds)
  done (took 12.020311056 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.508515336 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.611456493 seconds)
  done (took 7.269671313 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.604433763 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.227579836 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.61833692 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.226613379 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.22657764 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.227587164 seconds)
  done (took 23.834190124 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.225813954 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.224107176 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.224084441 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.226092111 seconds)
  done (took 11.049238505 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.223071658 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.995858193 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.222715146 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.232456677 seconds)
  done (took 22.823935724 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.373063601 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.167380196 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.993290042 seconds)
  done (took 10.684463487 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.849091776 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.669285419 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.837472584 seconds)
  done (took 10.507240357 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.366023826 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.06213327 seconds)
  done (took 8.578929825 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.366293137 seconds)
  done (took 4.517915602 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.064895353 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.537644214 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.70279687 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.726565749 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.799276851 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.43920642 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.555294756 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.501133103 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.614511197 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.625192769 seconds)
  done (took 28.717742964 seconds)
done (took 163.908244514 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.656332513 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.244844054 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.442058411 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.600371852 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.48006715 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.441233203 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.494648388 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.589243158 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.275853615 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.262758142 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.602846863 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.487890426 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.414613237 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.243523466 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.422139693 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.247267412 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.488165652 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.67875961 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.287864194 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.528452759 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.499667484 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.246561419 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.441390904 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.262522259 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.483180876 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.393552537 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.84918878 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.246937159 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.433037826 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.864007124 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.39639523 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.665961642 seconds)
  done (took 180.823424586 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.102865417 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.228164234 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.227965826 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.228970736 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.678464048 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.229394551 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.229057972 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.228161939 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.544996147 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.519752263 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.228917882 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.665200808 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.22899848 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.22904246 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.229649826 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.228107317 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.652220735 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.142643908 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.230153716 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.228704797 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.228945319 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.541754491 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.229620927 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.555168709 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.639387518 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.232054805 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.228669154 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.232724955 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.229832552 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.229852759 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.2312715 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.230214551 seconds)
  done (took 220.245831421 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.228875665 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.230924262 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.229097208 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.230861637 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.231073723 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.230096082 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.233243471 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.231183117 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.966039596 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.954728424 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.232303082 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.232208753 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.231285796 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.230557227 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.232177274 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.23079989 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.230565479 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.232238879 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.236777492 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.239208952 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.232509218 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.086110709 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.231671157 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.120432928 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.231704104 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.237694201 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.230063348 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.237164611 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.237880656 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.235873071 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.239581032 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.230737915 seconds)
  done (took 232.802135082 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.473528372 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.23179721 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.234010715 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.243805827 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.233064745 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.232508466 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.241927059 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.47849241 seconds)
  done (took 22.533322925 seconds)
done (took 658.568867457 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.610931924 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.97095757 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.361328082 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.256188868 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.502795525 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.30003781 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.249403265 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.31764215 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.894148087 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.328514759 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.645700034 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.26127045 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.94972556 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.280183587 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.366007952 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.312619023 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.599655803 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.859693116 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.392397843 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.92415881 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.450939276 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.175347268 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.335596064 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.933070779 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.655314768 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.215970082 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.263488833 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.601663381 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.256212937 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.48572921 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.928056441 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.511053281 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.268188209 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.254237883 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.309880386 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.294835474 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.447080657 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.2633102 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.362599433 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.965519246 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.907344286 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.779386944 seconds)
  done (took 115.206339563 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.238445006 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.237577087 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.238732419 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.237757348 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.246129223 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.238760061 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.238691382 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.237353105 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.238771412 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.238130188 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.238625151 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.246379867 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.238547283 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.246016156 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.239001752 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.238889524 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.23823145 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.247889284 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.240187516 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.239531082 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.240058648 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.238961588 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.233143807 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.239489173 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.23895657 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.238000127 seconds)
  done (took 60.40078995 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.235619256 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.3892415 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.528033453 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.269701853 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.236662022 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.239995108 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.266183277 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.242807813 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.238947376 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.238451831 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.351092663 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.24133454 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.24889964 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.524095637 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.266526474 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.236919839 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.235911585 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.235965874 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.395937399 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.253060142 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.268499542 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.245709746 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.267938748 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.253196047 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.239739791 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.238197899 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.240340508 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.63782556 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.249542852 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.352782317 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.281806013 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.271320203 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.584551225 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.536630575 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.305403628 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.24347106 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.23800721 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.396869876 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.251081687 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.238225869 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.267291972 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.245182318 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.529461598 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.745835224 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.25447168 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.237274728 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.636958227 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.407760843 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.287901403 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.252080904 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.535577986 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.270629557 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.238391657 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.239559095 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.277675093 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.250915981 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.238644267 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.481779594 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.254770886 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.268655713 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.246741203 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.239668087 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.403707285 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.249581078 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.394712981 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.250104938 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.245342064 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.241404437 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.531016657 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.271533457 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.740701244 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.253889036 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.239035669 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.354609095 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.400594094 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.662016201 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.255579293 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.405338104 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.603163363 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.280042653 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.25137195 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.624017577 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.281592235 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.251088346 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.240383857 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.239493561 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.239743581 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.284084322 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.267199674 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.665939636 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.743967419 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.502013999 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.280802239 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.253741347 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.241830816 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.481661916 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.251924841 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.240359636 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.524317022 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.768220779 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.257686332 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.247120084 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.725567181 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.258726703 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.269936745 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.254696195 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.541584727 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.272882446 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.285621489 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.242120541 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.248262635 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.245048962 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.271854057 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.252452633 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.241449166 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.718950798 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.416507343 seconds)
  done (took 275.955817964 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.247025579 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.241743369 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.240754372 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.241875132 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.240854756 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.243300955 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.24048608 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.240890572 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.242531745 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.241479689 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.241269286 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.24090172 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.243678558 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.246979471 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.711720852 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.245279334 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.731068392 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.24358911 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.243996649 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.246495589 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.856172821 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.251286443 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.242813583 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.246566552 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.244717961 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.242564656 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.249292199 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.296705887 seconds)
  done (took 178.620345624 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.245303533 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.313576337 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.260549368 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.293694236 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.261037944 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.246043105 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.266562091 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.265218508 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.251951072 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.245845435 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.245330386 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.273346853 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.257708161 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.387332826 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.27980344 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.275935733 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.329328462 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.252098152 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.246924087 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.246937029 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.29443959 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.264545557 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.273443327 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.305785472 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.260308783 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.29368034 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.262187671 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.246215138 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.246518066 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.356769812 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.266756402 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.276358937 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.283268416 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.266976193 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.34151813 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.341213016 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.328829126 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.276138202 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.250586655 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.246668477 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.246348705 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.247904202 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.295306498 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.264929113 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.248419453 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.338344293 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.266579244 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.247999773 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.267397694 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.246694445 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.260598779 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.264569513 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.281295013 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.350284972 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.29543705 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.278357784 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.270831408 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.268227278 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.247179547 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.322590678 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.25438583 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.339319361 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.269884653 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.249512101 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.250486941 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.252633498 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.297087817 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.28667844 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.329230944 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.254575999 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.323646222 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.303591862 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.266694891 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.249678575 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.249039793 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.298061851 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.340888562 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.302632003 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.313000064 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.287737927 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.259845266 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.249714368 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.250473057 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.277860487 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.256593688 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.340216063 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.343370785 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.255951217 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.249928679 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.250565897 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.249664384 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.273446255 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.307807175 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.292424308 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.334827373 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.284252108 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.287321788 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.257937598 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.262579572 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.256170103 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.280204311 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.258248503 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.262444424 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.586236957 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.288322235 seconds)
  done (took 241.745250449 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.613195747 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.297824295 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.321537867 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.544707589 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.637536349 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.349537226 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.295437896 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.311032381 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.308904541 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.415264788 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.360565029 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.365011969 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.288135022 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.274005661 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.29638188 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.306749409 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.326089697 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.600126969 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.398392564 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.006577363 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.295722324 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.558385242 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.585714558 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.633482036 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.337875832 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.685735793 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.906162341 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.387267766 seconds)
  done (took 72.887504407 seconds)
done (took 946.974440668 seconds)
SAVING RESULT...
DONE!
