cset: moving following pidspec: 3290
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.870801431 seconds)
loading group "shootout"... done (took 1.171531366 seconds)
loading group "string"... done (took 0.670311201 seconds)
loading group "linalg"... done (took 8.599463603 seconds)
loading group "parallel"... done (took 0.165426791 seconds)
loading group "find"... done (took 3.003592485 seconds)
loading group "tuple"... done (took 2.131250635 seconds)
loading group "union"... done (took 14.852770597 seconds)
loading group "dates"... done (took 1.449183398 seconds)
loading group "micro"... done (took 0.219187907 seconds)
loading group "simd"... done (took 4.76884808 seconds)
loading group "io"... done (took 1.079039547 seconds)
loading group "random"... done (took 9.537860605 seconds)
loading group "problem"... done (took 1.522851106 seconds)
loading group "array"... done (took 25.475672577 seconds)
loading group "misc"... done (took 1.911470384 seconds)
loading group "scalar"... done (took 43.752317262 seconds)
loading group "sort"... done (took 3.337752356 seconds)
loading group "sparse"... done (took 12.703729978 seconds)
loading group "collection"... done (took 18.772495675 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.420233824 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.112711321 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.125206438 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.111193657 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.181472358 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.118292274 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.126403303 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.082162941 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.889311571 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13472004 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.113140873 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.420224341 seconds)
done (took 5.255686232 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166293552 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.088518393 seconds)
    (2/2) benchmarking "String"...
    done (took 0.081310378 seconds)
  done (took 1.372022507 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069445865 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061124891 seconds)
    (3/3) benchmarking "different"...
    done (took 0.06518068 seconds)
  done (took 1.397476751 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063495172 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.132304799 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.064513398 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.065458338 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.065147902 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.064614282 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.064272345 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.064700373 seconds)
  done (took 1.726731057 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070136653 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06576998 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.0637604 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.065668466 seconds)
  done (took 1.470874777 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063320783 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118859779 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.063016991 seconds)
    (4/4) benchmarking "different"...
    done (took 0.06279733 seconds)
  done (took 1.510504079 seconds)
done (took 8.929630492 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.137184272 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.817548369 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.764950041 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.120471634 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246539648 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.367354821 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.122752025 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.183674518 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.089936147 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075123629 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.121206209 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07565723 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.379668422 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.491870699 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.069060712 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.166034491 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.649319911 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086785291 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132968933 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.45900887 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.071523219 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.085763854 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.082724214 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069356654 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.350358611 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.151846656 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.668476477 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09458695 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.06750051 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.092582874 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.068483596 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.076282191 seconds)
  done (took 10.673146932 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.09045908 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.088098152 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066869148 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.122065528 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094495994 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069029074 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.074794264 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066914315 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.08906249 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124493409 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090887185 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099638592 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066519783 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.068810267 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.073863719 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.19808585 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081208091 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081790493 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067270713 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081185935 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106168661 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.076717068 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076937297 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076518986 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130284384 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.1707692 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09502007 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.096490957 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.064101556 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.077539935 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.113624005 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.123543857 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066343332 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064694394 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120634725 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095858404 seconds)
  done (took 4.606329708 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.881177809 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.094596588 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083003869 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074135136 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107198154 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.114743244 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11201136 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.121735082 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.12274155 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105167323 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068893074 seconds)
    (11/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06608077 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.15092739 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.669998629 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.156055632 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069896188 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.117647478 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.352305245 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.085163495 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.068411339 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067005148 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071213935 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069866799 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.112644552 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068551522 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.175251412 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.576017917 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068418588 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06769759 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.0941788 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.063290053 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.136729034 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092269488 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.06987623 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.538749383 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.064462108 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.06346636 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.201728705 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.092813896 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066577933 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068015914 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079077947 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.065819963 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108755876 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080547418 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524166008 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069136568 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.583887558 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.22623113 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072942378 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072330488 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.101944565 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.0638613 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067520684 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.91515106 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.145149982 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066848842 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.274196324 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06827184 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068165049 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068891245 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099932433 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069417441 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068495483 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072374189 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096344195 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.879981451 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088252031 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096086767 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067202008 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.408075043 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074522699 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069015307 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069315289 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068779443 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.106623273 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066176946 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.065598796 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110153799 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.092935943 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.087044881 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068015899 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065391235 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064518477 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.326055774 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.161308781 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064422012 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.065057201 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.472454314 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.062057502 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.063998688 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.065766195 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.090497303 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.181554708 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064348232 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065161526 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099816257 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066374626 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.332575407 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.069533191 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.493193837 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069302013 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.10382302 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12219148 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067828885 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.102544817 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068495123 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064885406 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073705196 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065618366 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064396651 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069322556 seconds)
    (112/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064473596 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065574111 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064390211 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065845986 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069015929 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068252559 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067705504 seconds)
  done (took 22.781540887 seconds)
done (took 40.151157601 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.314789491 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079057391 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.079467228 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.079425308 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.079592676 seconds)
  done (took 1.878578241 seconds)
done (took 3.21951831 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.257496151 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075771643 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063882809 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.206184327 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.088883404 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177663577 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.218621117 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.161625158 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089382318 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.088914019 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.089172746 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.223398346 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.226224768 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.08897242 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.159255923 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.226489646 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.086637672 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.062705767 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.088876533 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.088980565 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.089428727 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064260501 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.088829796 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.088930408 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.159191114 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089107986 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063421139 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.158589819 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.087968526 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.15867335 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.08804913 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.087653847 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.087926212 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.158507404 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.087944264 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.156568075 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.063283072 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.087526704 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.088048028 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.087744134 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.086350589 seconds)
  done (took 6.188757669 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073129818 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.195012018 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084946552 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062107209 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071350847 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082315166 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061675069 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082123805 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090579233 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08207323 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082161338 seconds)
  done (took 2.299011947 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068890807 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082665187 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084393034 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.061756958 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073085537 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08280745 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061443532 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082633564 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085920433 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083276056 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083861903 seconds)
  done (took 2.134819638 seconds)
done (took 11.889494639 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095492156 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.06517494 seconds)
  done (took 1.426086255 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.224781618 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499721757 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.911145842 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.090266975 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07069118 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08416726 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.197201064 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067048521 seconds)
  done (took 7.601346462 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.099167194 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067513731 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.072222208 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.066931336 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067007608 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067682195 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069782509 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068069307 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066683863 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.068436224 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069002609 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068250138 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067487485 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.06905212 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.069149696 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067122152 seconds)
  done (took 2.50574939 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.103147205 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06882994 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.09929399 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061770047 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071602958 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.061943142 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070436197 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072315443 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069808827 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.071148882 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072397815 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.071016202 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071557375 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071255656 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072736781 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.07281664 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072939663 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070462925 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072942658 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073518688 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070264834 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.071440372 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.071709441 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.071625555 seconds)
  done (took 3.155634667 seconds)
done (took 15.972300583 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.171980316 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072462613 seconds)
  done (took 1.518054381 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066137568 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.066330239 seconds)
  done (took 1.42612224 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071135663 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058911198 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078101781 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07045833 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061112394 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060939205 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07697489 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061248707 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060887433 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061155134 seconds)
  done (took 1.953756094 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.06088099 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068352429 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066106122 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06475589 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066696184 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062312178 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065019066 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062371992 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.068926551 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06131317 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.065573529 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.08321331 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065593058 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083744185 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064937811 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065612251 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067126798 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064726838 seconds)
  done (took 2.502690969 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059234621 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060644758 seconds)
  done (took 1.417178766 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062798792 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060911872 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063857838 seconds)
    (4/7) benchmarking "year"...
    done (took 0.06341428 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061189168 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.060840064 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.06164146 seconds)
  done (took 1.725642317 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.425236393 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124677158 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348498304 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06889104 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077073597 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257600592 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063699872 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068310022 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068707753 seconds)
  done (took 2.838844084 seconds)
done (took 14.686884516 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.08026304 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180882865 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087612441 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.382603457 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092065656 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067122028 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113235057 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.179111528 seconds)
done (took 2.506444627 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.276581641 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.242667079 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.403384142 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.123184216 seconds)
  done (took 3.07443641 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.328563119 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078382474 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076844666 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066958423 seconds)
  done (took 1.866859451 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064195385 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070506462 seconds)
  done (took 1.446167821 seconds)
done (took 7.983617278 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069669466 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06146461 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.091087042 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.066987802 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063666494 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.063490065 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.062495265 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.063868245 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061375202 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.063736395 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063542476 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06375815 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062655254 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063612766 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063510654 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06400576 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063314545 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063294514 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062634794 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063231012 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.061356684 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064177744 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062812569 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063313209 seconds)
  done (took 2.892571831 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077536269 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065210262 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.06604639 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066068684 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066388757 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066370918 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066238552 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065183527 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.066451008 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064742064 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066944977 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06676507 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064502468 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067112921 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064811251 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066962041 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.066493296 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065157402 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06509574 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067502561 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066421205 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065991747 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067418237 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066295307 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.066785329 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066983663 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065022051 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065229961 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066305316 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.066594994 seconds)
  done (took 3.319290103 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.063966873 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059235186 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059782441 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069659989 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059246093 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059492062 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.059849259 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059286349 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059657386 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061062745 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060327526 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059566512 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060512861 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059650741 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059562113 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060225269 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064749712 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079446007 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059852526 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059565415 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063859918 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060072522 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059795961 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059795607 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.060201252 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.05958542 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059510274 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06028711 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059746988 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.06087615 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059394415 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064007322 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065431699 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059576815 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070007817 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06496126 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059712212 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066462174 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060906356 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060096757 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059791549 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060098392 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059817251 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.05989597 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070025039 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060130765 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060764015 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.06070183 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059984624 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059566226 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.059931962 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061929309 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068451161 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061422053 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060114231 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061153758 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059687946 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060808252 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.059983487 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059615569 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059670512 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.063438394 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061536635 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060518299 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079761074 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061578351 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070527828 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060026449 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060553877 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064027211 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060605954 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078059364 seconds)
  done (took 5.79335179 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.068957652 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069832069 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078049539 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06830732 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062785731 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.05970867 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064328889 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06052794 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070365624 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.064982248 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060674711 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064326968 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070149876 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064998486 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061792614 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070314292 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064753169 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063909708 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060610599 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06498884 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062304725 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064785673 seconds)
  done (took 2.778172795 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136984354 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066273631 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106124304 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070420066 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068769926 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.070125702 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066794587 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066859076 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066260927 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067084106 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067084916 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066393658 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068591619 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066829864 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066835939 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06663017 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066559147 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066928151 seconds)
  done (took 2.647511047 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074974774 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064263447 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087851624 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063842529 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064116436 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.064041464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069406062 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.06978355 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065246777 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065895448 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069643778 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065431367 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065310248 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066066328 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065387242 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065689418 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06569071 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065788763 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069775381 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069595602 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070337803 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071378692 seconds)
  done (took 2.826963961 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075370438 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064010526 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080742635 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066254826 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059530895 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059780816 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066103584 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064867296 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066072059 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064276774 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06501573 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060417339 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.06717665 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065267787 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067418497 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065123737 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064769803 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065069097 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064805272 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06047031 seconds)
  done (took 2.64163263 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069817673 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062590826 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062683745 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068144061 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062530338 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063016135 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068736491 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063357388 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06316589 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085644734 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063310877 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073276656 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068695352 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.066820875 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063385229 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.068606972 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.067630969 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068060053 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062758702 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06272431 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084009856 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061875373 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066990938 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06176141 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061566395 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06148841 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06178053 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066036796 seconds)
  done (took 3.191847803 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062381709 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062343858 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062996035 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.06337427 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062745659 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.062851754 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.06307579 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.062879559 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062694553 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063027544 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.062587541 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062395705 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065077402 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063270707 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0630065 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.062991303 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063277887 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063498429 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063171742 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063662816 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062927068 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063257096 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062924708 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063199091 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063350599 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062682666 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06315232 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063215903 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062751789 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063290071 seconds)
  done (took 3.227751472 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070888104 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070711929 seconds)
  done (took 1.476716029 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.059840696 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076401762 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059363647 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072078069 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068551338 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063286338 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069029419 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068070302 seconds)
  done (took 1.866304399 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.06462285 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091487319 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060496863 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.061734242 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.064660052 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.125791795 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.07250786 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072282071 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073930561 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06371883 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062454463 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074255074 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.0614233 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.075224105 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063146049 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070659289 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068774104 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07973784 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074841717 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060063515 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073907433 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062277913 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060338847 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.062905639 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061427889 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068314246 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077457598 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074039373 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069746359 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.059504018 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080480404 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.058938489 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.059706646 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.068659285 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.0632008 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.05917978 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.096992434 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.06114141 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066473173 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060464708 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073983298 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082426812 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075745145 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079729598 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063366811 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063229762 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.060265206 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.0628911 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.06422903 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069751557 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059979407 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067755884 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.059439759 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062508874 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072028707 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061766359 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067225986 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.0709967 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075414307 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071970108 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070311383 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076708814 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.07029514 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069066145 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062596598 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080783161 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062846861 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074078012 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075687455 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061746227 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07412422 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060050313 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059027602 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059912244 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094101117 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061989024 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061553072 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06043946 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06000817 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062071725 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069956745 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065733764 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068159539 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064256729 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076629858 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.069905285 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060307444 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067208363 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078695236 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064153171 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060491515 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077046766 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063782279 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059408777 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078201464 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070117793 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062166894 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.060974869 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.063544004 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07364757 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061455832 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059004988 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068744058 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062053698 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062524503 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063640237 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.06691988 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058802063 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.068840808 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.063303823 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059993229 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057110871 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063186816 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059551089 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057277757 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.067575084 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058727461 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072864995 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.064869547 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.071928832 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.072588236 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.068476223 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073689401 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.05775187 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.056866966 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.075541937 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.067561688 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059286438 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.075366572 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057503896 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070413214 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057428216 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059408696 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.206334695 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.059726044 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06399551 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061926016 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066647746 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064350227 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063284207 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067312896 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069922947 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074043198 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061918819 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069679626 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060970034 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.076706239 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070861746 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065246416 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063915908 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.061264727 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072626861 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067035211 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069896304 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059512924 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060887379 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060456846 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071331871 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070046281 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062289471 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067807336 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065173682 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06065843 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060877232 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061668968 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063957678 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064039709 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060837141 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067968754 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069377363 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074466987 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067364646 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069728581 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.05846344 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058776653 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060648487 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058529702 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.063355007 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068158397 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074010093 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071544527 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081391165 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060156305 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069893181 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06225757 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07727389 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074228655 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061333504 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065070991 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059024579 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061812004 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069920252 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07226032 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074865342 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075480603 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.064995485 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065136018 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059900451 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075677542 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061195241 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069148976 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.069682435 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.064929568 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060614668 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062106778 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070091485 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.064821894 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060475727 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07621461 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.066390034 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060284215 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.074703165 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060543767 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071424538 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060144415 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064037244 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065559083 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06246161 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070052508 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075920307 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.05912672 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061294245 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076046585 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062227296 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062000498 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068471767 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.075547835 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.06496855 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068535192 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071286248 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070423675 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064641466 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070223993 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061194407 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070054808 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.062486943 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070346331 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058937667 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076759384 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.05781345 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074183065 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.059474305 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071041288 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060919715 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069908679 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061224491 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077345636 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060956167 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059547362 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070200273 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057552816 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.067863698 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058391976 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064945976 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06674256 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070000665 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061520966 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069480573 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061415717 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068578352 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064142936 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067744055 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069289209 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.06325351 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059164422 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067804859 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070862969 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.066995106 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06086046 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060008685 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.058647961 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.210000055 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062160372 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061417024 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069047111 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065661843 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066358135 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061906025 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061316544 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061266902 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067986661 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07009081 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078933056 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069748134 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068656159 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070145539 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059776987 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077402547 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060518415 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070675935 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059319915 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066303358 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069639298 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060780226 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07971251 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061893503 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068406398 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072713871 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069157119 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064082037 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078301073 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063999772 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068967526 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068700032 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064931826 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067317645 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062288941 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069409023 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070031166 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071105731 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061880793 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068078043 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069708684 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062485917 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.068134615 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062569715 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.06898933 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062029021 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.05937203 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065135099 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07199265 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065329852 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065243836 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060586815 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059045149 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060689975 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.06735073 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.06475129 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069121944 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076140064 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059597676 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061450106 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.059892711 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.063773461 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078673844 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070135736 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068706692 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065163795 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059612484 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062095198 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062278846 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.059971811 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.063222337 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.058442446 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058491051 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069514972 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.060613589 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063458678 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059327267 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.060198234 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068542778 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.063845974 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.059545144 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.0655183 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.05863479 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064063418 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.058310952 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.060459332 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.064206599 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.059645493 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06371641 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07082141 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077064168 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067085161 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069465319 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.061438222 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068436157 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075957601 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.067863111 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061361454 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070059715 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.059870567 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079077687 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070146004 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069179329 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070121179 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061400711 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077442389 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064515748 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069756444 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.074533268 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059732169 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.064923779 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058245872 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074280428 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.063528339 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058518765 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067388668 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.066835089 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.064296694 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.070280405 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059372195 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.066850156 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063942647 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.062183191 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.059956898 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.059645781 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.067056215 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.073873318 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.058673871 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.061885314 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.066387639 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.066763095 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.062534807 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.070200508 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.065969022 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059007719 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.059541037 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.061536042 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.058825901 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.069716354 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058703362 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.062566705 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.062673054 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058374905 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.065103201 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074238557 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.068070352 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.067614964 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.057600652 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.057137257 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.075375688 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.061838992 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.060946236 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.066382837 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.067976387 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070687726 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069289218 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.075304129 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.058300905 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.063632241 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.070081324 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.058909369 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.057640237 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.061783638 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.059105178 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.066874847 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.06755459 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.065443873 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060220291 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066973289 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.072642572 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.060798172 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.064391814 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.063851094 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.060359851 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070303703 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.06781352 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071075851 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.060877404 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059515605 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.062492711 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.066693583 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.065610865 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.066844718 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.058388173 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.062389474 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.070460057 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.065024962 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059910444 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.05654485 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.059862686 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.066437228 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.060450436 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.056840703 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.062349559 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.061220731 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062000422 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.06656992 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.061956193 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.05668727 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.073632047 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.065293641 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.065964701 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.058978974 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059127151 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.057871816 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.056739904 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.068727115 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.056964021 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059008161 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.166217622 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.058113159 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.073760703 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.064823999 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071833079 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.057477371 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.060524179 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.055986137 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.065386612 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.060632705 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.056610198 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.06618275 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.055751498 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.070800656 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.066971735 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.060627703 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.055717804 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.061859387 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.063939907 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.070715427 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.065965529 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.064877219 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.058839231 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.065698581 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.057753224 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.066864392 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.056061027 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.055562496 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.066186354 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.065459087 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.068743386 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.055752222 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.066102838 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.058230351 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.065583307 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.064051711 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.058081462 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.057742055 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.057831013 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06520727 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.060765022 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.065620755 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.061124239 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.073004318 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.056781002 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.067078537 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.065339518 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.066756527 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0699339 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.067687749 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.064206965 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.057207671 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.063778075 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.064261064 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.057952571 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.061372162 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.060011118 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077131312 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.058144518 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.057769285 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069397026 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.061635894 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.056671354 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.061321427 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.304956635 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070119634 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.060468336 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071929469 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.064802645 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062120163 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066616694 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066957056 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06147446 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061398771 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061649909 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072318438 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066757338 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062066179 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081344097 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063439368 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070918083 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072849763 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068242699 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062774577 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059707864 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061663595 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074480976 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076699181 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.064358814 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070265932 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062064782 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070243553 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059500468 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069947228 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069703644 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069636635 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.059877018 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060799534 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.075249361 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076131229 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065193797 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069617298 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069266168 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.061536435 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081952045 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.069445108 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061217577 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071434449 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062797205 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.060202379 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.05930535 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.061138079 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071661854 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059398802 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062002114 seconds)
  done (took 41.168213855 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.095634971 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059238855 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.058509868 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059487384 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066006416 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.05954106 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058449947 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059094792 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059017119 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060755904 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.059548989 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060759654 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065123918 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072519321 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067890761 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063497753 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060002655 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060522332 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060032569 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060973154 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065687736 seconds)
  done (took 2.708767052 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.0614502 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.061700422 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061732632 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062073033 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061148238 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058374439 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.06197664 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058565021 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.063456541 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059661424 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.063966083 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060019295 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060301987 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060602572 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060488119 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061524885 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.064162758 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063168286 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.059794074 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063467422 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061181701 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.063490995 seconds)
  done (took 2.696065386 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.059473143 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.058671921 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068347415 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.058931068 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058653686 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062483245 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059142816 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.064306318 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064158506 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064067832 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068774593 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060391747 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059879819 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066152588 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.059814469 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060868855 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102432843 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.060830655 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.060838274 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059383907 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06203318 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069019662 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059585504 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.059298958 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064403504 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063141011 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059573548 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.062651356 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060328238 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064728173 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060992571 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059388745 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.069570287 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068925847 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064790241 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064473712 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061235188 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060577301 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059750889 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059360433 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068283859 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060495872 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059601343 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.06116873 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068714107 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060266555 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.059248348 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069247683 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.05971222 seconds)
  done (took 4.444842656 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.067143393 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.111680391 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064998219 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.092790065 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.071615067 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.064985352 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065251825 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.093863485 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060158134 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060965101 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.072548495 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.072805869 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06216134 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.063468751 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065315358 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06193924 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063203383 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062131679 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065437269 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062559453 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065261413 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067049485 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.072404749 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07293072 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063470095 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061657288 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061751196 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063605842 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.072193861 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.065427449 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.063628878 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063778023 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.072327621 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065857584 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061748259 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061990471 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072744475 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062449975 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062053524 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060416587 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061565523 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063517006 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066512769 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072843798 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062071352 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066803663 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062213807 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06048847 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072145088 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062014424 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065650297 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072721325 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062957867 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.062471135 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063612652 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072161525 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06223571 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060961682 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061376217 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071383324 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060925558 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06311758 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075097786 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061775232 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064972661 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072992416 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067168719 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063304859 seconds)
  done (took 6.042210161 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066472877 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.092988885 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074529119 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074204418 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070095076 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069813204 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070120996 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.07003837 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.06950713 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072934357 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069791592 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.104665658 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066797824 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071436612 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.070062795 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070400242 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070085322 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.070103867 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070151301 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069861115 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069853495 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074477977 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070065278 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074587729 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.072032723 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066638338 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069654532 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069743471 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074710871 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069973007 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.072050734 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.070550839 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.070973088 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074557601 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.071982248 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069487678 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061018639 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069513444 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069806059 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069500327 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066282933 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073722148 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069714779 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066300999 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069686399 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069498288 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07448786 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.071971716 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071313868 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072476177 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069900401 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074751065 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070054934 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069781034 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074754377 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.076729244 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074566517 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074826423 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.069703311 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074862447 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074553245 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.076702187 seconds)
  done (took 5.845281825 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069495428 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06319878 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.077047474 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058865349 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.059152905 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068611337 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059193828 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059390551 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065434569 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.06586288 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066945395 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068752152 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070210476 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066907025 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068524201 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070274184 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06828786 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068286295 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06576206 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068274382 seconds)
  done (took 2.707862494 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.072599958 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.075812989 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.064459844 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067789891 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.064338117 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068239677 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.063912313 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064846488 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065450321 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065028714 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069206326 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069353946 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065561359 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068477016 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069209228 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068040374 seconds)
  done (took 2.447615478 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.060774492 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.064824526 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.063643974 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059212949 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.060915571 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058437602 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059713428 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.057737947 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061538132 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073594049 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060301657 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.062509647 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060327471 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059544573 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059833155 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.062931564 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06197103 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.060199197 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060312982 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.064532098 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068288394 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.061056157 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066941615 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060032434 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062438524 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068511748 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061363574 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062103186 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06025173 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062808883 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062443694 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.066647504 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062332081 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.060504388 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059356207 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059979553 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060704716 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062722521 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062632493 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060497117 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059009408 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.064553132 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060612262 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061073282 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061701354 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062774052 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061627852 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.065879928 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060467068 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062189019 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060470713 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.060860187 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.059771946 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.065540172 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.062080021 seconds)
  done (took 4.778636385 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074408582 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06298832 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058397769 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058978082 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.064189232 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064969098 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064379715 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064870647 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06523133 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058980867 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065067222 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.064219881 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064859955 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064637432 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065166659 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06471382 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059199972 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065024298 seconds)
  done (took 2.526091565 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.063808582 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063258211 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.06304325 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060704518 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060964979 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065137477 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059533334 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061427814 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060572313 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060929255 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060727831 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060640207 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060355156 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060291989 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064463316 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061032198 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060903286 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059018864 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060745067 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064862511 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064922834 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059686355 seconds)
  done (took 2.726757942 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.084679791 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.081813915 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127047654 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079013 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.087273852 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070395341 seconds)
  done (took 1.900219889 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.090833079 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.09403975 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062607957 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.062133894 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067056317 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065220625 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065385913 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065581918 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068564023 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069039259 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065912569 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070306217 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070421197 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072014016 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06885753 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069273202 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066970375 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067120386 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06427823 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073795332 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067024226 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070216285 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06701499 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067067137 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066223358 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071442666 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070014704 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070538423 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065670491 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068858823 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06758391 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06526651 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068524384 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068995712 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.062601593 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068539066 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065644889 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072546362 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067088089 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070216623 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062779537 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066947933 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069939778 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06998914 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070578126 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067394796 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070452447 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067285167 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067319812 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075132218 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068888519 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071999485 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068913857 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070286814 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070305063 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075109948 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070091455 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072457128 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068766569 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069931372 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072065836 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068164821 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071264893 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070407783 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068960703 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072301439 seconds)
  done (took 5.955491032 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.09954181 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063009955 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.065407341 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068804302 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06981059 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065441019 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065625348 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065671265 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066168415 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.063354709 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.099968054 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066436519 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070673281 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072718009 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067191034 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0671459 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067401038 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072245652 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064960735 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075521035 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06737268 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071937747 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071943734 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071638695 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07085868 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068613187 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067233159 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067113045 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066972255 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066747699 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069984865 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067245533 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071475286 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063631783 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070668879 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065206786 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065323199 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068035868 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065239992 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06686212 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069780893 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071894652 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.065581896 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065257361 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068878287 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06550029 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065741109 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.063127982 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067016773 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.064919117 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074427952 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070846001 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070931571 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072087937 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067050618 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067129626 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067011943 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067081104 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067606069 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068947367 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071860473 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066968203 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07527186 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067277471 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067341681 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072190969 seconds)
  done (took 5.95708305 seconds)
done (took 125.882149776 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.19407938 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.164101481 seconds)
  done (took 1.717511613 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.070771408 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.153522921 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.070750838 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.071026272 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.100814471 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.099628876 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.07211121 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.068903047 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072583991 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.070228224 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.130081237 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.071944099 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.068598536 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.068986909 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.068789359 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069136429 seconds)
  done (took 2.705496203 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.102916133 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.197409392 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.078521787 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.066486141 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.14674179 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.072928419 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.068879757 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.072771518 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.072846465 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.06690593 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.102544302 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.079145073 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.071946324 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.072611014 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.069028886 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.071849981 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.072883233 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.073025789 seconds)
  done (took 2.942950314 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098534847 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.087456781 seconds)
  done (took 1.574657745 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.151957306 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.101128416 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.139982397 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329998548 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.127378073 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.131895756 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.136562615 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.131310854 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107100995 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.12693324 seconds)
  done (took 2.865668138 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.101105015 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.100581114 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.299429164 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.097635172 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.078431912 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.072884008 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.071377552 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07596966 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072760581 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.073857714 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.119050281 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.072959128 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070390337 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.121407879 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.094720449 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104389329 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069082107 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.075826481 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.077927622 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069009384 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.073627275 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.077309729 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.173541201 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.074178494 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.094140415 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.071403525 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.073062373 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.070418022 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.070401039 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.074095766 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.074856773 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.094096217 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.075242848 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.08011368 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.073540869 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.091629985 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.06814221 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.092764412 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.070659148 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.069411297 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073311674 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.076702003 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070313338 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.076123347 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.072911307 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.075412021 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.077326206 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.068581753 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073092163 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.072240532 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073335928 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074030714 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.073757855 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.074943178 seconds)
  done (took 5.99016822 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.102107835 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.102915443 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066421976 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.104951594 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.101163007 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066217067 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.099709278 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.096266418 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.10292519 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.065906435 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065393362 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066523118 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073236818 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.076664963 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.109412061 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.102690573 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067625019 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066372401 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.103867857 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.104022253 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.066860108 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.099182499 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.098140469 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.102918244 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.064978641 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066275058 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065086685 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.065907361 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.070212457 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.070508312 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.065204161 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.071267631 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.075245038 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07095783 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.064505891 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.064722906 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.06492504 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.072829904 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072478102 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.072173572 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.070400391 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066029977 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066520256 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066825212 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067373414 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.065848336 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.072283447 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.072176378 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.070767994 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065061481 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.066590492 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.066214448 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.066714227 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.072792341 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.071934387 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.073889226 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.073482548 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066826433 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06677074 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068089278 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074394147 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.074489282 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.073528971 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06755911 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.074787999 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067291635 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.074197363 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077956193 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066984758 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066788457 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.066614585 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066823499 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067042104 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.071943076 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.072544276 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067637543 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.066793271 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066951497 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.074725482 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.071162132 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066853421 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.071991735 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066335338 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.066719003 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067381839 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067023542 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07193053 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.07343336 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.067552279 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066672547 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.066702768 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066973759 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.066106752 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.071267932 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071652525 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.071650151 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.070885866 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066904713 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.073160078 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.072101694 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066477525 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.071394849 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066079329 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067521543 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065867963 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.071462739 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.070529759 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.072941394 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.065419546 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.065462 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.070971708 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.073019309 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.065588992 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.07472731 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075042276 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.20198544 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.065536606 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.073548914 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065874326 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.071889669 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06586117 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.072429001 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.065615462 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.070924908 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065212195 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.064578856 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.065036245 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.071182519 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066492068 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066293186 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067033174 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066571429 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072191801 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076253729 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06546472 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070464666 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.070542491 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.065787572 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.071504894 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066748712 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.072894728 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.0653834 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.065828716 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.064690933 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.072500899 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.065382964 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.065079493 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066043799 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.071914388 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.065026755 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.072914903 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.069910992 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.064725414 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.073154758 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.072467182 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07026461 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.072884518 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.066193445 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.065111729 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.064942225 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067330781 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.069926378 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.070803944 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.065632776 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065593751 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.071538306 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.074558399 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.066399772 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.072069081 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.071473675 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.071777012 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067222035 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06681916 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.074933201 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.074912384 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.072322279 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.072279339 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07337535 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066865897 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07186724 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.072338563 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066675438 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07813181 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067242495 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.076093709 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073499006 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.071924565 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.072653491 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.074017355 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.074758455 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.074989438 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.076576701 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067002912 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066481963 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.072359493 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066489855 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066709219 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.071890134 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06691759 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06739588 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07698981 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.065783921 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.072399891 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06478911 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.072484094 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.064633936 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066948526 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07682546 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067589034 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.067311443 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.072828795 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067253546 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072545068 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075388449 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073074184 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066983202 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067345278 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.073455388 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073794888 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067146621 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066916149 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067237378 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072673853 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.071676627 seconds)
  done (took 17.564772814 seconds)
done (took 36.756461543 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.161134823 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.109001774 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.200445132 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.191226586 seconds)
  done (took 2.14911795 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.095311385 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.061358334 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.074873383 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.08461983 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.06160973 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.070773885 seconds)
  done (took 1.87422197 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.188678978 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.166981745 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.231494917 seconds)
  done (took 2.00515498 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.356308386 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.144368273 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.212200672 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.497349612 seconds)
  done (took 2.731070593 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.104096488 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.093179581 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.072069738 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.103588984 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.079109397 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.062447111 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.125707319 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.066020902 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.092586351 seconds)
  done (took 2.283269727 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131240739 seconds)
done (took 12.61351439 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.286852697 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.181993946 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.415455301 seconds)
    (4/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.212635392 seconds)
    (5/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.205059779 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.092579761 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.1230657 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.118955253 seconds)
    (9/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.104088498 seconds)
    (10/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.179052702 seconds)
    (11/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.078849707 seconds)
    (12/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.077455406 seconds)
    (13/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.087822382 seconds)
    (14/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.141644552 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07353781 seconds)
    (16/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.274514777 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.075206597 seconds)
    (18/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.075132222 seconds)
    (19/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.21751881 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087558717 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.074029948 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.113526167 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.105616339 seconds)
    (24/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.238045928 seconds)
    (25/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.142283162 seconds)
    (26/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.119611184 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085827427 seconds)
    (28/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.180568765 seconds)
    (29/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.224773129 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130017341 seconds)
    (31/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.075293983 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.071584792 seconds)
    (33/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.063045619 seconds)
    (34/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.23049676 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.088766935 seconds)
    (36/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.072407193 seconds)
    (37/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.187945202 seconds)
    (38/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.140666302 seconds)
    (39/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.082186899 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074501267 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.070371355 seconds)
    (42/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.067349597 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064469774 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.070939705 seconds)
    (45/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.194722375 seconds)
    (46/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092210654 seconds)
    (47/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.142545268 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.141767153 seconds)
    (49/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.170689263 seconds)
    (50/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067288755 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091188919 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.076707701 seconds)
    (53/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.071954635 seconds)
    (54/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.071908656 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131237404 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089888383 seconds)
    (57/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.136206948 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.185719072 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.080731933 seconds)
    (60/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.134745313 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.081948595 seconds)
    (62/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.178190887 seconds)
    (63/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.064251404 seconds)
    (64/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.063072849 seconds)
    (65/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.156992744 seconds)
    (66/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.217291104 seconds)
    (67/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.070443917 seconds)
    (68/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.184946786 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.06635744 seconds)
    (70/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.173763612 seconds)
    (71/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.195735793 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071657023 seconds)
    (73/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.152486272 seconds)
    (74/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.063891223 seconds)
    (75/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.065815582 seconds)
    (76/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071402591 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074425133 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072307334 seconds)
    (79/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.194406267 seconds)
    (80/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.298267794 seconds)
    (81/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063500616 seconds)
    (82/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067770549 seconds)
    (83/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.154977098 seconds)
    (84/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.083096995 seconds)
    (85/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.090868567 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.06517076 seconds)
    (87/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064016884 seconds)
    (88/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.239149067 seconds)
    (89/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.062964474 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177324012 seconds)
    (91/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.142032761 seconds)
    (92/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091221446 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071495371 seconds)
    (94/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064375519 seconds)
    (95/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.196249809 seconds)
    (96/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070164367 seconds)
    (97/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070324321 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.082825157 seconds)
    (99/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.173896124 seconds)
    (100/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079934813 seconds)
    (101/341) benchmarking ("sort", Int8, false)...
    done (took 0.146060014 seconds)
    (102/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.162836909 seconds)
    (103/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.068394909 seconds)
    (104/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.232673716 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.124642618 seconds)
    (106/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.071406756 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.071333683 seconds)
    (108/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.162852093 seconds)
    (109/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.077877806 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.148787001 seconds)
    (111/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.180024622 seconds)
    (112/341) benchmarking ("sort", Float64, false)...
    done (took 0.13396618 seconds)
    (113/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.080614436 seconds)
    (114/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067370199 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.130915072 seconds)
    (116/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.073742488 seconds)
    (117/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.067022233 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.063058915 seconds)
    (119/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071310279 seconds)
    (120/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.063846484 seconds)
    (121/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.063692603 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.082542956 seconds)
    (123/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075586491 seconds)
    (124/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.06449687 seconds)
    (125/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.07189454 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.124542531 seconds)
    (127/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073521187 seconds)
    (128/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.071673689 seconds)
    (129/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.07960563 seconds)
    (130/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.073590275 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.070809764 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.061901333 seconds)
    (133/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.061618955 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.062476452 seconds)
    (135/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.062211086 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.061815414 seconds)
    (137/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.145779365 seconds)
    (138/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081895972 seconds)
    (139/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.167883257 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066210736 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.071395365 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.071537732 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.08053936 seconds)
    (144/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.196247514 seconds)
    (145/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.064560689 seconds)
    (146/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.063763316 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.14475899 seconds)
    (148/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.192652699 seconds)
    (149/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.064048944 seconds)
    (150/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.177946944 seconds)
    (151/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.0624076 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.071128221 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 0.137855743 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.069785578 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.094432717 seconds)
    (156/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.06274518 seconds)
    (157/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.089353483 seconds)
    (158/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.06952879 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.137490946 seconds)
    (160/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.212105938 seconds)
    (161/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.137865856 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070696498 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073105838 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.079087339 seconds)
    (165/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062591681 seconds)
    (166/341) benchmarking ("sort", Int64, false)...
    done (took 0.064706537 seconds)
    (167/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.196654683 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.086259386 seconds)
    (169/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063303862 seconds)
    (170/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.072342495 seconds)
    (171/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064365663 seconds)
    (172/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06462307 seconds)
    (173/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.072462772 seconds)
    (174/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.162444036 seconds)
    (175/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.130191879 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.197264082 seconds)
    (177/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062533077 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.153243674 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.063537458 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063294861 seconds)
    (181/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064361684 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.080632879 seconds)
    (183/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.159466035 seconds)
    (184/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.073868381 seconds)
    (185/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.079635071 seconds)
    (186/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.066577588 seconds)
    (187/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.063159201 seconds)
    (188/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.062453263 seconds)
    (189/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.217665077 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.063544166 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.138021862 seconds)
    (192/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.065405085 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072088565 seconds)
    (194/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.216435535 seconds)
    (195/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.072326949 seconds)
    (196/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.158690926 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.062631895 seconds)
    (198/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.062940803 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.062057729 seconds)
    (200/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.189380343 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062378969 seconds)
    (202/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087190715 seconds)
    (203/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.065990415 seconds)
    (204/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.189606359 seconds)
    (205/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.070260961 seconds)
    (206/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.065669493 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.087912855 seconds)
    (208/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.082596508 seconds)
    (209/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.070727698 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.063649017 seconds)
    (211/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.062849486 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.143689097 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.078241582 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066910471 seconds)
    (215/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.063705779 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.113251035 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.063686655 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.063945106 seconds)
    (219/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064001291 seconds)
    (220/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.064427577 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.061912548 seconds)
    (222/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.063554353 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.062915339 seconds)
    (224/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.080260187 seconds)
    (225/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.070929677 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.071507454 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.070218644 seconds)
    (228/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063591931 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.065695429 seconds)
    (230/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064061929 seconds)
    (231/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066963187 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.063888771 seconds)
    (233/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.067381095 seconds)
    (234/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.063926185 seconds)
    (235/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.169099404 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.162830156 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.075575977 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.073748645 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.149699992 seconds)
    (240/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.140018285 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.082488079 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.070779733 seconds)
    (243/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.063212198 seconds)
    (244/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.064896868 seconds)
    (245/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.063889855 seconds)
    (246/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065186215 seconds)
    (247/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.064615429 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070229941 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.066918472 seconds)
    (250/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063712503 seconds)
    (251/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.070603199 seconds)
    (252/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.063953274 seconds)
    (253/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.061576975 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.063028662 seconds)
    (255/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.072738609 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063025359 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.061558337 seconds)
    (258/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.065894689 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.142788237 seconds)
    (260/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.06292532 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.070598753 seconds)
    (262/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.064387007 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.145762735 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.061857568 seconds)
    (265/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.074961522 seconds)
    (266/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.062404299 seconds)
    (267/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.06236139 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.062954035 seconds)
    (269/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.063205205 seconds)
    (270/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.063417345 seconds)
    (271/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.061158327 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.062179706 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.085114576 seconds)
    (274/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.061696083 seconds)
    (275/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.069249409 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.141092466 seconds)
    (277/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.062009009 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.0607912 seconds)
    (279/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.065032135 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.081915764 seconds)
    (281/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.062203109 seconds)
    (282/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.061825608 seconds)
    (283/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.06210336 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06333084 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.142197109 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.11686015 seconds)
    (287/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.065053425 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.063316427 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.062946805 seconds)
    (290/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.062286159 seconds)
    (291/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.062206264 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.145074994 seconds)
    (293/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.066396209 seconds)
    (294/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.062599231 seconds)
    (295/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.06872734 seconds)
    (296/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.070800831 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.07919242 seconds)
    (298/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.062164158 seconds)
    (299/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.073680645 seconds)
    (300/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.063443225 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.068481365 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.087652663 seconds)
    (303/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.073692194 seconds)
    (304/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.06542311 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.072924567 seconds)
    (306/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.135358855 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.061699915 seconds)
    (308/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.062467064 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.117485442 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075126628 seconds)
    (311/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.064119831 seconds)
    (312/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.169875446 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.06460585 seconds)
    (314/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.066848317 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.064665099 seconds)
    (316/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.063249796 seconds)
    (317/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.064147586 seconds)
    (318/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.06560897 seconds)
    (319/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.079883049 seconds)
    (320/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.062668474 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.061053635 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.12677171 seconds)
    (323/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.062097499 seconds)
    (324/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.229838445 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.077671294 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.16617819 seconds)
    (327/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.065498074 seconds)
    (328/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.063748117 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.087369729 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.065440593 seconds)
    (331/341) benchmarking ("sort", Float32, false)...
    done (took 0.135355551 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 0.258646879 seconds)
    (333/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.063198988 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.063409669 seconds)
    (335/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.062118458 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.06283103 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.079330552 seconds)
    (338/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.065440921 seconds)
    (339/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.062237093 seconds)
    (340/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.062278789 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.085632015 seconds)
  done (took 35.756781744 seconds)
done (took 37.196129587 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.084672694 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.074301214 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.073986649 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.069809683 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.073553617 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.071829419 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.073430291 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.071375944 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.072898359 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.072488767 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.071843129 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.061579105 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.069085628 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.075977489 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.070332378 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.076442417 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.073458783 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.076586245 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.062474426 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.075526994 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089180995 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.072970724 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.070135632 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.076844548 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.063470772 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072016211 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.086645891 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084081862 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.070278889 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.072208164 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.070423039 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081034082 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071159943 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.070293832 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073242135 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.068961885 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.072604226 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070332966 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.086648659 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.068842577 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.063092639 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07500142 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07032934 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.071261926 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.071791602 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.0736788 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.067276176 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.075363988 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06205765 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074260748 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.0865223 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.067146875 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068485965 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.070223209 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.067434115 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.070925497 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068198309 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07269681 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.066785861 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.073176075 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.072642411 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.070232381 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.061769082 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.070341437 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.068755851 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.069375975 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.060573244 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066971782 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.062746129 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063227005 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06213278 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.071934073 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.069779588 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.06806312 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.062739986 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.062738266 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06191062 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.074723606 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.068615319 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072742758 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.063302577 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.068044822 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.067539644 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.063065772 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068401847 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.074695371 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.062067084 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.062972712 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.061411119 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.075893511 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.068122431 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.062840709 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.074676577 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.067427208 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.066374047 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.061326362 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.060841713 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.068070845 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.071058817 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.062723859 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06198741 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068287389 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.067779813 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.071598103 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.062564873 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.06640205 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.066502337 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.060431991 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.070016799 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.06881411 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.070145246 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07411875 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.070239235 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.07342136 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.062070097 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.060701383 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.071013164 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.062185955 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066787691 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.069449883 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.066657656 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.069533206 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.062148004 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.060506755 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.066511235 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.067917351 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.062159524 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.062135403 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.061866995 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.070889522 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.068672567 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.060661324 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.061831132 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.070482416 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.070253279 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.061037382 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.061057191 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071196525 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.062125506 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.068371931 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.067911766 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.070649147 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.061479593 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.062097835 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.060816872 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.061241309 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06163031 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.070146032 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.066652701 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06228877 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.070076271 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.20329461 seconds)
done (took 12.138015048 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.063135665 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.101909499 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074526195 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.077316124 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.074195914 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.063209106 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.065692761 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.079729731 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.06562832 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.085523693 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.086583145 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.082960656 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.092083695 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.061463532 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06213577 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.063863439 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.061722985 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075370216 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.080066313 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.086976623 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098854593 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063755767 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079272896 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083454794 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07769391 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.081498279 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065042188 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.064861922 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.066783078 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081834678 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.089471982 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.063716574 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.064862601 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080878529 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.078964335 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.071511591 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.064743352 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.069777637 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.066627276 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.063520937 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.0644369 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.078889805 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.068669319 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.068995234 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.063533042 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.063603812 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.062618871 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.068784217 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079012056 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.067352171 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.073680941 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079957407 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.064609276 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.062924238 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.061554439 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.069014137 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.062905432 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06377875 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06310236 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.062481433 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.062618944 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.064853167 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067028792 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067642174 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.065374721 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.067653833 seconds)
  done (took 6.223632062 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.077593715 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.087228227 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07636029 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.077485529 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.062486437 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.063920942 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064231752 seconds)
  done (took 2.049267735 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.063000596 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.069278126 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074383373 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073902947 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.082944294 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07147656 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.062824674 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.093617064 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063013564 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.072137988 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.079068771 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.077232056 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.06735244 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076142719 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.063990263 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.073994803 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.063216856 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.069893037 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.070076068 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.07554208 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.066585878 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.091478597 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.075883092 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.063464942 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.074838291 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.069657361 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.065077234 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.063169689 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063013185 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.062436415 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062407823 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.083744924 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.068349498 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.074525814 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.063318665 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.061591828 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.066893119 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06454918 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.067898828 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.07273632 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.066589907 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.0634386 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.064438505 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.063528796 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.064928399 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.068253496 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.064582453 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.063933627 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.063133186 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07104992 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.06297415 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.070510498 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.065768382 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.068776574 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.068411243 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.068575151 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.071150154 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.063957241 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.069389195 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.068468171 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062419942 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074345122 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073257652 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.065738975 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07344827 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.070737534 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.068241577 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.065723551 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.061951024 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.061901051 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.062768129 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07390224 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.065661066 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.064747026 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.063558676 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.067765806 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.066351635 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.076898015 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.076633536 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.075462513 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.064846698 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.062634287 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.066778716 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.078241146 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.066972358 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.062411838 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.063487646 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06195974 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.067500207 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.062675588 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.067131187 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.062564818 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.068998673 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.065054221 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.065010788 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.070497155 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.063381783 seconds)
  done (took 8.178503393 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.065048482 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.064671194 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.063509253 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.063298635 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.063752198 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.063480721 seconds)
  done (took 1.954595973 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.08473976 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.062612593 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.074336717 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.062603079 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.083629779 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.068833595 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.068867482 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064268818 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.078774257 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07294554 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.068912706 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.071323718 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.071191913 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.064495117 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.068609235 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.06381024 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.068614224 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.065419809 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.072208922 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065174527 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.077948824 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.064476011 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064828441 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.074367614 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.066005733 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.063766771 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.064295798 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.072823421 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.072053292 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.064546644 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06416678 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.065459602 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07082732 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.064324416 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.068894646 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.070873615 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06274024 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.067893796 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.064997778 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.065815953 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.070564755 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.064453128 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.066038757 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.067994263 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.064361584 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07097402 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.067904917 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.066180094 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.068000363 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.067859521 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.068098856 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.063067518 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.065334795 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.067925396 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.070988562 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06536022 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.067908513 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.068387873 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06436393 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.071119744 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.062866339 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.065784536 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.064449532 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.065527716 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.066876073 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.06777354 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.07072351 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.064201878 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066577145 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.062510367 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.068203108 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.063424372 seconds)
  done (took 6.4273304 seconds)
done (took 26.356533885 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.532308378 seconds)
  done (took 2.056327054 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.852757361 seconds)
  done (took 2.41515646 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.74612352 seconds)
  done (took 9.309550982 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.316179037 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.379254196 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.707341055 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.125466948 seconds)
  done (took 3.120701761 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.729037417 seconds)
  done (took 2.298901534 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.220205567 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.215414964 seconds)
  done (took 2.012129838 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.322822882 seconds)
  done (took 1.884150136 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.141916674 seconds)
  done (took 2.698332697 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.219657391 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.154168303 seconds)
  done (took 1.941162051 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.519301405 seconds)
  done (took 2.080198843 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.134624706 seconds)
  done (took 5.704119431 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.221688091 seconds)
  done (took 1.824167738 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.220961775 seconds)
  done (took 1.790485251 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 1.947432813 seconds)
  done (took 3.510042228 seconds)
done (took 44.213121168 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.078522676 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.081165696 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.081189137 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.076267187 seconds)
  done (took 1.858761895 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.069215348 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.065498407 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.06850189 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.068744211 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.066798104 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.067402792 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.068083155 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.065124792 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.066770931 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.06713813 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.065789666 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.066864385 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.069697206 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067048236 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.069597918 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.070885748 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.066918332 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.067187212 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069597612 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06675835 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.069493133 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.066787592 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.065405749 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.066914602 seconds)
  done (took 3.186453394 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.073482248 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.067746738 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.070524336 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.067057003 seconds)
  done (took 1.851249781 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.071758419 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.071671973 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.079799616 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.084044608 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.070873378 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.071813585 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.078369574 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.079008109 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.061520585 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.081235759 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.06386174 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.062251972 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.062726793 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.080169926 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.077884403 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.05814391 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.059356568 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.072490826 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.071848267 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.074374631 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.064199747 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.061604528 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.071967446 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.072234735 seconds)
  done (took 3.27521772 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.07632057 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.061142212 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.075595915 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.085818656 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.087135585 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.061122978 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.073497135 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.087560809 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.120890837 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.061243059 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.067216749 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06159432 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.098995053 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.061453567 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.075535545 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.103082963 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.106268343 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.065164502 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.093206905 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.061056771 seconds)
  done (took 3.162003665 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.071164798 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.065105905 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.065753935 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.061431766 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.072089354 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.069253884 seconds)
  done (took 1.987707737 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.063537339 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.063935595 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.064952506 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.069608928 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.063783923 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.063514996 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.063024722 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.061510446 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.062025426 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.062881394 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.064059186 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.064615013 seconds)
  done (took 2.343093384 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.140383203 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.063784461 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.065725639 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.061655536 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.06341894 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.062382537 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.076344653 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.063878307 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.079513536 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06388125 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.064106977 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.066607166 seconds)
  done (took 2.451677305 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09767234 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103183205 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13597403 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10955533 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109057026 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089830023 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.117181451 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.089762422 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.151333704 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131346807 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111902948 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090068662 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084301249 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.06531994 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093016839 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110564003 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129256155 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.068079011 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105938722 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155370281 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123203322 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.125921853 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138368695 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109566758 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08403413 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138723352 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091832358 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095456302 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116875924 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118000229 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111755808 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.092702246 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.068180088 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.067172299 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140906773 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.097626052 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112526899 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.087102291 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098600869 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083210512 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100765963 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.065043569 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.080619688 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106714322 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07927813 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122844275 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.083739539 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10784883 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076400373 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129610017 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116171386 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092825394 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080852752 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09827701 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.271802906 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104079847 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125076751 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100463327 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077280292 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.113594883 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.095984861 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09364959 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100029172 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074605998 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16528965 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083172546 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.10442092 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10388032 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.087532821 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.088808684 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100809042 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126593614 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116405345 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.116178489 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128291376 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089633258 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1153262 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.095429604 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.124134857 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100343031 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.070315105 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.116182696 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124859504 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095271004 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095285427 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120738971 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08670886 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07256384 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.09258276 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.111527938 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075929501 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.104466432 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074893461 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.1025186 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124812706 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09128485 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105304332 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110166298 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073239249 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145621455 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102621952 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068326725 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110720405 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107018049 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147937987 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089265552 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.072124218 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094006131 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.24139273 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.142584217 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099979343 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.075386215 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103181647 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130966329 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089230212 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.160130613 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.089615905 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133751569 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107005441 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083776828 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071798739 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.084863754 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104330522 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100110148 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104721007 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084282427 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078180873 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081563656 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10367796 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086181703 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.075936735 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106386233 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.095299794 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.070107018 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082897526 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.074677988 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.133236502 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.073079109 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128763238 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117696058 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.074526832 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101274488 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.092985031 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102521393 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.091944545 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109670631 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133177734 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11187469 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085774701 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088622498 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101819944 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.13473201 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119357468 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086991317 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.072135476 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094325149 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105844125 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092770853 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118420439 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094377098 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102076264 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097350082 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133360377 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136724648 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095921591 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.095098601 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100303243 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.262873591 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072175478 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146193974 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096444967 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110769553 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.079384674 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131727074 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.107402167 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083902147 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.0821564 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094060792 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.098772115 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101567201 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135888037 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.090015305 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.067995941 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086165089 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134547437 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071426485 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102897988 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.084781296 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.087344182 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110752212 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.08738518 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077257066 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.064542959 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119762718 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148353345 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.065771071 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107539302 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.105018741 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095903634 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.114768987 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.066848964 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114152043 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.133750799 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113309016 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13430588 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140529911 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110527123 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112704457 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.107510523 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.099750954 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075263329 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.118816767 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.127455052 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090403325 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087340312 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128418366 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112303943 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.129022245 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.109335434 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107921936 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.098505609 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.246561603 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096528723 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.095366881 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134729178 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113457208 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.116364746 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080605496 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099071483 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110725196 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12845383 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079092321 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134888796 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.080245089 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113221085 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.074051215 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116479135 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.074698858 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.106934304 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076443799 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09592376 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.066799176 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.070871056 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135568002 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.1076744 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100922262 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095366874 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.12961644 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.128130285 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.076341371 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101751746 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109144041 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095126956 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108511095 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102641592 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.083233548 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089033935 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102695458 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080093868 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.076286439 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10727511 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088506998 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118597753 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07961003 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.070552937 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131978452 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098637518 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089635156 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073454847 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10126667 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.116174209 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087923841 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082952303 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108434398 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098749993 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134300607 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.085664152 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.092640448 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.117113261 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075372181 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.086903296 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.065182756 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.080357913 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.071662177 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.265707728 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.071883217 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108051888 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.064713726 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121872167 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080504326 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.08771195 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096885514 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104006514 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120415591 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089356444 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131580121 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084323416 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111180283 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100733062 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088258947 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082626778 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097192439 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097017029 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116907328 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.092204498 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116734065 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134482467 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100065545 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135611763 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086557277 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115346511 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100477216 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116873562 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104907617 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138115164 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129440498 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108054416 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108638092 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072595169 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091251074 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101303676 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107392591 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166090332 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117221427 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.068405265 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099676701 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089046517 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102028168 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098871494 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077410454 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138245885 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095474219 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.083417479 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106355344 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.085410527 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098469237 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071363554 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089720408 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.094491343 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.231743268 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092686127 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108155593 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119434431 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105421864 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.134965938 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.093874568 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.087758158 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.110889709 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105686337 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103023866 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080697326 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080963892 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1280739 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11073493 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.121263293 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.093593433 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102062688 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104192292 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093362677 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116068618 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10070193 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.117243275 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075228619 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.071241463 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.064486586 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.067735983 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.115568297 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101722437 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104224393 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093312897 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.06803953 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097256323 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09986555 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.06745868 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083096451 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.087992681 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093372446 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085692272 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099939905 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.107548398 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.085952143 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.097806856 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093452999 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137172219 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.0941804 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083465047 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138051683 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143004598 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082696026 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087236292 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.06749299 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.074432339 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107525525 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141625642 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143399588 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.073543038 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081835942 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080406752 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081236678 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.067012686 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.226565689 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.084372318 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0981121 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092803327 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.105647572 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09787215 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071113176 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096581356 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092777488 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086759607 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097375891 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110600703 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11653256 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.131331986 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103107473 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100003979 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071361274 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.074864983 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071025515 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074873328 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09627216 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.074245915 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071464987 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133777377 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.086745622 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100202462 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102857643 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08267774 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070127086 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125108076 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.064991782 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127024229 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.067305522 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077119814 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.077416699 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074441373 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0876297 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130054393 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103258 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105339111 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100640257 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098623558 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131987607 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146736598 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074740524 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135205564 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071114432 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070839083 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.071856679 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106423451 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084594709 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108682252 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133240012 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085738608 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098390993 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07261943 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135682912 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.094131353 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097890411 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081636436 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.074248819 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.282319392 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075491528 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.074644995 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084426877 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104130779 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.068186972 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097611144 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079957933 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074997352 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132822339 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.623579847 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084932022 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.071170234 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089780664 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.132903131 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118060392 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08811331 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101280238 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.111414904 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093222771 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088949645 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100922639 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.176831129 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.069786574 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088261766 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.09681536 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092079939 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094830637 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.092736683 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.080401489 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.087209759 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.081963139 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075261805 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101238946 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083941266 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090586135 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100928669 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078006447 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081779916 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124369157 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.099459193 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.078375253 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085380635 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101049729 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.083782385 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095041973 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.064887767 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106933472 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085700744 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109619313 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.089908947 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.101523679 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120021394 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084513869 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130372082 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.099980106 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.116157257 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082422872 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.073944303 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118615073 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.083287484 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073386188 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.285798956 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087837484 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.087773826 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097301656 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.091220761 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105691519 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109320951 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105016814 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091563809 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074390775 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092867521 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.09502824 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079198889 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073275892 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.069422763 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.071751561 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100199088 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07909741 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.078567234 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10749505 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083309366 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096978676 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.093812201 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114337627 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077812039 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094992159 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103452284 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.086433249 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102690013 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094131759 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.119914034 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163065003 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116977059 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.121558179 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125624394 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.071985625 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.070569605 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.064197943 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108326803 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.074482387 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083913178 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07633634 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125176505 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.077337929 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104226961 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.22389572 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075510238 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087574565 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090186904 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.065278833 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07820558 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100934956 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08269208 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075462494 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112257761 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078553303 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120393976 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10458973 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093331409 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.089175817 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076269626 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107355467 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.099374919 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.1224753 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089669501 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.070629065 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.254854054 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097258927 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128613496 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.068654385 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076120735 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.121118059 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096358644 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12299531 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.074997496 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139056496 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133451822 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093174015 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125123832 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067070658 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077970538 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082891821 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.118510521 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07852666 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103033954 seconds)
  done (took 63.905767881 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.142097973 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.136566755 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.077188105 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.098602145 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.187878558 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.2063363 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.122416885 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.109939049 seconds)
  done (took 2.806941185 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.064063332 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.078241075 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.076423073 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.195645164 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.090842629 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.063112382 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.067742202 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.076869867 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.063155209 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.0625219 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.096129189 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.063084924 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.063146339 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.35326766 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.0622041 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.067352667 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.063296164 seconds)
  done (took 3.3190463 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.31779484 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.645268832 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.1982587 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.098098048 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.13836485 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.532851444 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.072083417 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.078231675 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.665477385 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.36640595 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133056373 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.083486735 seconds)
  done (took 19.047295668 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.071647937 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.073769539 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.074006975 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.070303045 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.070219904 seconds)
  done (took 2.088211405 seconds)
done (took 112.869603098 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.078444379 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.16331901 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.063522382 seconds)
  done (took 1.974088523 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.076602033 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.075277138 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.075541377 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.073344907 seconds)
  done (took 2.022258494 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.069749409 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.071592317 seconds)
  done (took 1.855031024 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.209191615 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.167831493 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.084436487 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.076419296 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.074488924 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.074474065 seconds)
  done (took 1.949577819 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.066709223 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.066684957 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.067029393 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.067213541 seconds)
  done (took 1.979130291 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.063802782 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.061972674 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.064457285 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.066381933 seconds)
  done (took 1.969960114 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.07947877 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.081011903 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.10816321 seconds)
  done (took 1.981904203 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.077803723 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.078342125 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.072914183 seconds)
  done (took 1.948634457 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.102609851 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.090771101 seconds)
  done (took 1.908974249 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.074985931 seconds)
  done (took 1.795432991 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.084282331 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.092214823 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.128929605 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.099603885 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.130520558 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.117150857 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.071782239 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.073160523 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.070625861 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.069551431 seconds)
  done (took 2.654158587 seconds)
done (took 24.29036647 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.073865709 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.17368925 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.348472013 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.084302716 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.650461819 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.347303299 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.846595695 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088094891 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.096973139 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.065603187 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.082523306 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.629883122 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.841002659 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.135253217 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.82710017 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.13536434 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.631591896 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.066257306 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.065453754 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.065387379 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.831058623 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.063535973 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.063970303 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.064738533 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.626870494 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.361741767 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.064944036 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.134884013 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06353097 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.067237144 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.345523514 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.064587314 seconds)
  done (took 14.703999447 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.065378401 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.116501612 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.067930701 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.079581537 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.065932639 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.065582329 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.066919348 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.064409277 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105771945 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06494212 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.080369882 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.065012359 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.069439968 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.067156135 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.085824356 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066496246 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.068558058 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068935384 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06605188 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06651299 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.084126634 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.065196183 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.064984983 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.066754593 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.066479129 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.078944004 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067326072 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.065985214 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.065828597 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.069076333 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.070185979 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065798535 seconds)
  done (took 4.03240185 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.11530821 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.11935994 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.068466461 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.10314684 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.110939732 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.065690833 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.143425735 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.086008508 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.108840931 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.064527831 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08036885 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.063911873 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.098301755 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.065044239 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.083701855 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.064087757 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.06662937 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.064748228 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.064085469 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.064728636 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.082480544 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.063850793 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.064281349 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.065046724 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.064586 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.078306938 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.064776557 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.06455392 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.064480891 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.067954516 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.069431766 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.065686852 seconds)
  done (took 4.252727376 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.065326706 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.066870922 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.07300328 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.07564428 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.062368875 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.064417052 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.065725327 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.062041119 seconds)
  done (took 2.272196489 seconds)
done (took 26.995424671 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.074424746 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.063354535 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.066438805 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.082251531 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.069678708 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.065645793 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.060724206 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.069970964 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.066681816 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.066948111 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.068516558 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.062862656 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.065793117 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.060504886 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.06829623 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.062987342 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.068715221 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.065929136 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.065733927 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.067715751 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.064159359 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.06769655 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.070206273 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.065738745 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.067499161 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.067455895 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.072172557 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.068987323 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.063529838 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.066684773 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.065904135 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.078115446 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.06944177 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.069042316 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.063474481 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.063425526 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.067555394 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.065633088 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.069400757 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.071501816 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.06511833 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.072476013 seconds)
  done (took 4.542590608 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.083264594 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.088722141 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.081268782 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.076852254 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.101819121 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.076681423 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.085582503 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.074656635 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.073089589 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.084980486 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.068946247 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074331286 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.075940432 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.071005568 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07348964 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.069681734 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.074734261 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068894561 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.07380269 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.073589456 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.085897542 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.066966991 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.074056853 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075170436 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.068936127 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.074471583 seconds)
  done (took 3.743721483 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.068355093 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.083536222 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.087565145 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.134570578 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.103788822 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.077800007 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.077330993 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.08842591 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.095670247 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.06381518 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.067501223 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.08807285 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.091314694 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.070519732 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.100854015 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.081103008 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.076048388 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.065445349 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.070481859 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.097601308 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.086140172 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.082122293 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.095665566 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.083793006 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.063315139 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.072404564 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.070463364 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.079289995 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.071222032 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.076487245 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.069277221 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.068585378 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.065842933 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077656854 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071573159 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.063109865 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.087081096 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.078837316 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.079355196 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.102567978 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.075074811 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.06676784 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094873922 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.129718935 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.064665434 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.068521171 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.069554295 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.077854539 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.066927449 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094765414 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.083456966 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.064735309 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.083652343 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.066298404 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.065391079 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079556751 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.065160801 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.10063456 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.075972037 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.069850171 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.084151775 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.06851927 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085500715 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.06469787 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.076127763 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.066707723 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.066091593 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.063564583 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.09988954 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.072443298 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.116662441 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.066227809 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.062713312 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.077020555 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.076209083 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.071606367 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.064429845 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084735404 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076991234 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.068678588 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.076700588 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.067441691 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.067791683 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.100037738 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06362789 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.062784798 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.063201893 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.067333197 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.06810301 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.065354038 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.078010324 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.064187936 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.067322044 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.078169033 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.064348932 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.064201481 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.066026659 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.064569476 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.062744655 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.073506895 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.068031685 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.066074257 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.075749423 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.06587305 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.067673778 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.079135143 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.074171348 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.064387535 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.066084855 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.067461854 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.066893027 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.069340753 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.067848914 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.066894781 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.071617626 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.070986091 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.069309808 seconds)
  done (took 10.619617447 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.154000486 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.145023729 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.064312817 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.139977452 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.071588642 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.067472949 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.142009686 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.082521133 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.064193271 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.065138072 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06344163 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.090893815 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.086454447 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.094620471 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.067525193 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.064682187 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.088808754 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.095611206 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.144421883 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.13913212 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.08678078 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.071626863 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.066136061 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.065892831 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.065822519 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07299549 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.077210611 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.071782105 seconds)
  done (took 4.290122824 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.069762766 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.079144875 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.067716215 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.087442209 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.080739864 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.064233669 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.065757379 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.065115252 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.080564942 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.069962101 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.063853455 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.068495781 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.067608606 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.065350816 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.065249178 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.070116268 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.070638827 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.062820592 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.067892071 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.068009165 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.074495297 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.088604883 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.068345831 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.064219827 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.066713521 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.064317097 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.069943408 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.072696821 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.063888004 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.093770836 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.061290664 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.068247819 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.077967352 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.065082623 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.063720556 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.065247512 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.063686397 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.063958002 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.064458065 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.062079565 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.061761677 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.069342063 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.063298226 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.069025402 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.077844524 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.072009962 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.064923844 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.068912235 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.066544462 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.060994821 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.067218617 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.067308465 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.066605419 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.072295746 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.067391026 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.066498156 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.065238394 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.092906253 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.069691564 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.063436778 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.063722452 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.062586109 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.065480435 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.071610365 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.080023728 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.065829661 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.062263977 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.064059493 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.068674633 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.077917369 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.063617705 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.069288701 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.060741674 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.064225639 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.066295487 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.066853863 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.066689407 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06372519 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.065359457 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.065528014 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.065625333 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.065471916 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.065146237 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.068114502 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.06325406 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.0636279 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.066123502 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06667327 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.070892884 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.063541856 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.067588755 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.067024084 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.064352928 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.067411879 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.069191365 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.067061672 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08414915 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.071792357 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.064531371 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.061871284 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.078394077 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.065740971 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.063492337 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.068947053 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.068115507 seconds)
  done (took 8.959404788 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.085685054 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.065182957 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.082777693 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.0897485 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.07376747 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.068855791 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.077510744 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.064543083 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.079796754 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.063103288 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.072525058 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.062426953 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.077024619 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.072429 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.065392972 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.073824032 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.066279174 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.083781668 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.077912082 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.062585674 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.072629852 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.075593659 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.076326881 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.081734361 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.081442925 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.082500958 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.076161498 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.066464714 seconds)
  done (took 3.86855868 seconds)
done (took 37.75114251 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.800648632 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.975612925 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.808072411 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.0587272 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.851308774 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.825046023 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.026254415 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.819422006 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.965910092 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.834045927 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.124794155 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.202135656 seconds)
done (took 67.094812013 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.892067673 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.951411068 seconds)
    (2/2) benchmarking "String"...
    done (took 2.021225361 seconds)
  done (took 5.727342214 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.40737519 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.807938579 seconds)
    (3/3) benchmarking "different"...
    done (took 1.851841666 seconds)
  done (took 7.807921596 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.919991127 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.443817066 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.058908727 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.805488837 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.810129037 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.216662098 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.597409494 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.267356412 seconds)
  done (took 31.942612471 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.975431305 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.050436523 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.484849961 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.509248391 seconds)
  done (took 15.801341171 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.408601314 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.068311965 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.066219607 seconds)
    (4/4) benchmarking "different"...
    done (took 2.0614347 seconds)
  done (took 10.397242176 seconds)
done (took 83.317980559 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.805328742 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.385626385 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.849971536 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.956933017 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.862296869 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.831715391 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.811631801 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.818150808 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.803905161 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.80342599 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.185267631 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.819912572 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.814002762 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.842499538 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.809369098 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.80238257 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.223571637 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.809565085 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.845936982 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.079898879 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.302999441 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.80776 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.801304702 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.843813156 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.903308807 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.816512475 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.232558281 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.800686435 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.406307206 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.806507998 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.821136489 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.805199318 seconds)
  done (took 206.25107171 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.80979631 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.68224457 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.744090048 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.857865404 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.078805175 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.004105381 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.946571624 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.152571877 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.811061732 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.818751835 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.011082018 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.805375268 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.026514345 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.742143089 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.810900783 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.825117511 seconds)
    (17/36) benchmarking "trmv"...
    done (took 2.974902037 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.998008061 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.805543236 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.995962222 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.831353273 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.830839619 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.751112962 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.952837877 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.842621098 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.881658539 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.820206666 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.964414618 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.989390553 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.963418329 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.833143112 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.827140845 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.025765841 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.674688501 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.807871542 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.812675067 seconds)
  done (took 170.455018471 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.979729083 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.825468185 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.866237893 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.927016818 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.491147756 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.803172149 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.484873921 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.804978292 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.806420344 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.808887308 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.811047954 seconds)
    (11/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.807513604 seconds)
    (12/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.807104107 seconds)
    (13/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.874957226 seconds)
    (14/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.44213426 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.813440623 seconds)
    (16/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.805176593 seconds)
    (17/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.806009459 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.384843881 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.80769631 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.807461513 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.807536026 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.868425679 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.176708091 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.927486924 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.808739992 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.818358306 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.932467776 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.812922665 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.808355103 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.934273993 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.80773136 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.883535619 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.927082436 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.816512529 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.888638698 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.814250626 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.269212638 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.802803652 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.805554039 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.812509572 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.870999484 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.804738437 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.85535899 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.898287288 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.805450962 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.819216872 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.000793111 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.493164466 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.806483751 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.808339183 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.808493018 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.805806123 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.811104607 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.511323707 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.810516105 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.833821375 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.320911349 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.808283916 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.809997817 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.806644222 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.811946875 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.809825644 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.815022177 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.847296013 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.523331777 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.442521076 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.195885444 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.531079348 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.809246163 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.776038102 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.8692048 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.811542688 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.88531039 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.806137838 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.80886452 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.80922255 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.809012535 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.883159589 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.879187823 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.807788844 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.93367837 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.809471441 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.806284305 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.184535966 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.873476342 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.806816464 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.824942858 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.863783548 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.810948777 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.809546646 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.817349069 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.88961513 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.808574079 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.809128105 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.810573498 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.862937911 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.812799164 seconds)
    (98/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.865750178 seconds)
    (99/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.032330826 seconds)
    (100/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.876818583 seconds)
    (101/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.054046023 seconds)
    (102/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.992490366 seconds)
    (103/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.812594998 seconds)
    (104/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.81146208 seconds)
    (105/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.825836077 seconds)
    (106/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.810720192 seconds)
    (107/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.808734344 seconds)
    (108/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.822540455 seconds)
    (109/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.811000908 seconds)
    (110/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.807032051 seconds)
    (111/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.812362702 seconds)
    (112/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.809014972 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.812390026 seconds)
    (114/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.806991973 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.809997417 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.810691209 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.820837259 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.805036089 seconds)
  done (took 412.24060955 seconds)
done (took 792.712100225 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.496106386 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.64459103 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.455333289 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.487250901 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.458135469 seconds)
  done (took 14.28515678 seconds)
done (took 16.025836769 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.828639065 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.828207452 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.817601934 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.832628585 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.832879865 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.831208163 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.863455786 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.85495003 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.847302139 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.829520345 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.839598095 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.835950248 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.839095711 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.850020458 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.839653299 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.838823351 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.832392247 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.823770482 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.842241567 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.833699273 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.837794454 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.83234283 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.834268604 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.83988477 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.84476018 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.833991726 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.829012263 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.838161231 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.835471151 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.836489269 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.872115723 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.842295151 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.865009164 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.842323187 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.838735159 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.843811737 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.831882929 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.856265618 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.833637129 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.872402438 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.8426306 seconds)
  done (took 77.19147843 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.81978976 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.95295467 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.032829161 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.854667814 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.822810325 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.041289952 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.878191841 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.949612701 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.952121384 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.035939335 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.044868813 seconds)
  done (took 23.136319868 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.820776791 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.954197498 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.031125086 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.855022081 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.844956675 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.037745406 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.886139767 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.953857824 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.961815188 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.03115562 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.041918593 seconds)
  done (took 23.176412724 seconds)
done (took 125.24839748 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.193109994 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.842151393 seconds)
  done (took 5.781607018 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.815547098 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.832193051 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 1.970520987 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.816543751 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.817355906 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.819754614 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.819774228 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.815296167 seconds)
  done (took 16.452865126 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.817652713 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.816994517 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.814132913 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.812639127 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.817489737 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.814150055 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.812612402 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.814213741 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.816029405 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.814659865 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.816343212 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.817678323 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.815229297 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.815559029 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.813407702 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.815614011 seconds)
  done (took 30.793795293 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.813629523 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.816472726 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.818074195 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.817352943 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.815176439 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.815185952 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.820280098 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.813581847 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.816593012 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.814284513 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.815794767 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.81623851 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.818314617 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.819433236 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.818404053 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.818156756 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.817636358 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.818192127 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.815441926 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.816490985 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.814654362 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.81386139 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.82214594 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.818846369 seconds)
  done (took 45.354569379 seconds)
done (took 100.139684014 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.962713645 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.31657949 seconds)
  done (took 8.02965267 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.818227265 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.818310314 seconds)
  done (took 5.439772151 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.816843919 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.813255417 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.817061202 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.816533484 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.815055798 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.817917556 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.815999706 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.819878152 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.819204517 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.817769304 seconds)
  done (took 19.918770604 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.81824095 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.819040478 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.818502928 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.818156624 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.813959663 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.81712012 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.820041084 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.817633319 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.820997929 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.820355554 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.819769614 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.817856526 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.819566038 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.821032183 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.816794441 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.81929331 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.818960088 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.821711042 seconds)
  done (took 34.491849282 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.817826991 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.819578585 seconds)
  done (took 5.387200659 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.823568732 seconds)
    (2/7) benchmarking "second"...
    done (took 1.821956841 seconds)
    (3/7) benchmarking "month"...
    done (took 1.820819362 seconds)
    (4/7) benchmarking "year"...
    done (took 1.818883175 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.823014002 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.818124283 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.82104517 seconds)
  done (took 14.500405955 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.822257725 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.974849982 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.022330639 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.418840578 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.820613245 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.822796399 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.708742656 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.822906884 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.824455667 seconds)
  done (took 19.993786118 seconds)
done (took 109.512100378 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.623765476 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.818561346 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.077614322 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.884856637 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.847278668 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.120027817 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.846441717 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.369581099 seconds)
done (took 42.340895825 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.966964237 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.81779886 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.850709054 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.843010797 seconds)
  done (took 22.265399037 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.820634034 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.095574926 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.836695609 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.743034458 seconds)
  done (took 22.264956119 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.19466495 seconds)
    (2/2) benchmarking "read"...
    done (took 2.161176057 seconds)
  done (took 6.111868185 seconds)
done (took 59.361081381 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.821377447 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.822262095 seconds)
    (3/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.82251122 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.82500489 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.822313446 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.821596553 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.822879165 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.823696315 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.821206191 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.822015233 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.822156122 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.820390662 seconds)
    (13/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.824306854 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.823184303 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.823326042 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.824035201 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.823730541 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.82179272 seconds)
    (19/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.822299132 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.821867484 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.82136193 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.820821025 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.82011541 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.821505108 seconds)
  done (took 45.489942842 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.823528302 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.822674291 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.822639972 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.822101633 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.823479917 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.825113864 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.823350208 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.82611702 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.825320772 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.825328909 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.822322024 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.825417953 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.825758675 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.825095067 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.822722329 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.824029805 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.823219139 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.824004497 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.826024058 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.822134335 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.822938108 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.825968826 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.824044837 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.82399382 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.824520341 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.82382046 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.824092234 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.826276698 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.825928552 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.825561281 seconds)
  done (took 56.484630692 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.82495944 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.82359917 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.822112158 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.823077941 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.824806274 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.823867696 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.823574815 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.825516091 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.82324321 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.823108625 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.822823627 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.822822942 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.825108895 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.827741286 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.824612776 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.822378852 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.827135571 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.82699403 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.824037809 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.827443737 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.824293792 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.828064031 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.825693547 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.824318256 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.826234325 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.828500144 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.82193962 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.825203411 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.827631521 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.826710172 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.825547702 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.827846333 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.829586333 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.826761014 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.822880223 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.824346373 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.82384159 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.831673664 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.834018824 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.826650148 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.824427563 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.825212167 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.827446964 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.826929118 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.824806551 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.823659741 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.826526557 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.827576278 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.825074226 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.830590286 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.827340832 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.825344417 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.826751227 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.828260795 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.82403717 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.827387847 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.826423446 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.825621516 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.826098345 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.827573996 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.824970505 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.827318119 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.828617231 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.82802833 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.828198543 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.825485206 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.828181962 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.826974154 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.83060194 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.831006395 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.827465339 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.829928591 seconds)
  done (took 133.245251485 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.831177206 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.827055684 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.826429642 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.828766561 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.825149464 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.830603754 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.827251226 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.828686134 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.826833897 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.826392291 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.826840265 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.828827152 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.831525684 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.827238146 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.829005942 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.830900845 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.828785787 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.828687941 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.82682871 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.831556798 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.829253699 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.830203846 seconds)
  done (took 41.985749598 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.828397753 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.828667642 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.826758302 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.826238805 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.829175108 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.830474895 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.828691175 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.825378846 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.828228678 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.828833127 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.831086342 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.826057224 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.828854847 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.830269482 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.829583685 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.828665397 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.832148547 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.83028185 seconds)
  done (took 34.678443595 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.831040948 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.828202592 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.830415987 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.829866702 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.830554213 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.830732 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.8301996 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.831717126 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.830036114 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.829066678 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.83143604 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.830434474 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.828669972 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.830192689 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.827175699 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.831877314 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.829964551 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.8291357 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.829337296 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.833622105 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.832317255 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.830293811 seconds)
  done (took 42.028192445 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.830251601 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.830678458 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.832498347 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.831889565 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.832211564 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.829757906 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.83005823 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.830732544 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.833279285 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.829403643 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.832163881 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.830907719 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.832191431 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.830730155 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.830387556 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.82790915 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.828299219 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.830658587 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.830913403 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.832115946 seconds)
  done (took 38.380729282 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.831752621 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.830961182 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.831473338 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.829222475 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.826819533 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.824490093 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.832988208 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.831791003 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.833144995 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.831354516 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.833311143 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.834416383 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.832205015 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.832254976 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.83138281 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.833726411 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.832513073 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.832809829 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.834295288 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.831428883 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.830505021 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.829535201 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.831412733 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.834796412 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.833141908 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.834415436 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.833116876 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.835119926 seconds)
  done (took 53.057934425 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.834075469 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.829690566 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.834704267 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.837784346 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.835531377 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.833482097 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.834837192 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.832371067 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.832700928 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.831796432 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.836713693 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.831531748 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.831882736 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.830823162 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.83207801 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.83234278 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.834594377 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.836394367 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.83436507 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.837012546 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.833790499 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.832096429 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.833879278 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.832550878 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.834516454 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.832964772 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.830637155 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.832398552 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.834480954 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.835332778 seconds)
  done (took 56.772647034 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.8519855 seconds)
    (2/2) benchmarking "in"...
    done (took 1.853143392 seconds)
  done (took 5.469409327 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.835894265 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.834765513 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.833584757 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.836785888 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.835150139 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.838183111 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.838311019 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.837362953 seconds)
  done (took 16.457868983 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.83247595 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.837428587 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.836610308 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.83606647 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.837971575 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.840079575 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.839453614 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.83914695 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.837875874 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.837436985 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.836722622 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.84304649 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.844868987 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.841232754 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.836106712 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.832591985 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.837927037 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.83865197 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.837492187 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.836865084 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.840440874 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.83664989 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.836398353 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.83394372 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.83436807 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.837175163 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.844123503 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.840275918 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.839338498 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.834527677 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.843742426 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.837576228 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.835929243 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.838469893 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.83802527 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.836392192 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.84541727 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.83922645 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.837309452 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.835642384 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.830022226 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.827168704 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.839506106 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.845668526 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.835808151 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.839080269 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.838097979 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.835500699 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.837225446 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.837694098 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.84572898 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.838281862 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.834142272 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.835901965 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.837506428 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.836663508 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.837058487 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.839520215 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.842722314 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.846786951 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.843596085 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.859936723 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.846870847 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.840321365 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.836232546 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.848654678 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.863091418 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.841116675 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.83924894 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.838970369 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.848202202 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.840056853 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.835989573 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.837062808 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.8496468 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.845808396 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.839708449 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.839050211 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.835811481 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.836488146 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.840028007 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.838190555 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.840552357 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.840788598 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.849860595 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.859048873 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.837527101 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.839104197 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.841610172 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.84154337 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.842328808 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.842056289 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.839272782 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.841306185 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.839062049 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.841050045 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.840651147 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.840529293 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.83920215 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.846931939 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.841935152 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.840744007 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.845717556 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.846237415 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.84112695 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.841344272 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.840541769 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.841319306 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.84684025 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.839956697 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.842973845 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.83795825 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.842061166 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.844623684 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.839129521 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.842521898 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.84437815 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.846189242 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.841193497 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.848786826 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.845726391 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.844861286 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.847968355 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.858880138 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.838569491 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.845211587 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.846832451 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.85074247 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.84550139 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.84089975 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.8447043 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.842913588 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.840460081 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.845503325 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.843798659 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.84524944 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.842304241 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.843237377 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.84238853 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.842407925 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.844634208 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.844847707 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.842275827 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.841307826 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.84399105 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.842840595 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.843381397 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.851092039 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.844766338 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.835477157 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.84593325 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.843950577 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.8476178 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.843302718 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.843600048 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.843467544 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.842530947 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.844742868 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.846730627 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.84445481 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.844832497 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.844901691 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.847653819 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.844655901 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.845368223 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.844440971 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.846928718 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.841063147 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.845215151 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.843924286 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.847530601 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.844722817 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.847959206 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.843824228 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.844596431 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.845684852 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.845317917 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.845068446 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.848860715 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.855485023 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.849933499 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.851391493 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.846013146 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.851510561 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.843821422 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.84926085 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.846685957 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.841951675 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.842863077 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.842486523 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.84420443 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.844848133 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.865939553 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.854424614 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.848356184 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.845795335 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.849159785 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.849257925 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.851301591 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.844073751 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.846302358 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.847815188 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.844302741 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.842016806 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.843668021 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.846167395 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.843318251 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.842340822 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.838389794 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.844645517 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.84344467 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.845600849 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.844551753 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.847121338 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.845334819 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.848438377 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.845506453 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.849847579 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.852800606 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.848226457 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.845652669 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.84955093 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.844469844 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.846328523 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.847796625 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.846161283 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.851754658 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.847840791 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.846271517 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.854177526 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.846339685 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.846858083 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.84452237 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.845577641 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.850708219 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.844369205 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.850566327 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.853233076 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.850703401 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.84690968 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.845696029 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.848328259 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.851583923 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.848247541 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.847697446 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.847227641 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.84723208 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.842719089 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.846904178 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.852699884 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.846740206 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.849786319 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.846003844 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.851305731 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.848781259 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.847990247 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.846830658 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.850943383 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.857378825 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.851242221 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.848239852 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.851117661 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.849287633 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.850219014 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.849616495 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.848579197 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.858576725 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.856815962 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.844794981 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.84899768 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.846474307 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.849039219 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.844423874 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.848243627 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.856872521 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.851792402 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.849159169 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.854416078 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.847015401 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.849529732 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.853578417 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.849181158 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.850968586 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.852021227 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.849668478 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.851733142 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.846998213 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.850288412 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.84974508 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.851734815 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.852058287 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.850562264 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.851235887 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.850432724 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.858996615 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.850263796 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.850613483 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.856570732 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.852144125 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.852042443 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.851095042 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.848171677 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.851719142 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.849199483 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.850496807 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.847915558 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.849568796 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.853316379 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.862339922 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.855306733 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.858458886 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.852518241 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.861489595 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.850204725 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.849792514 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.851879718 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.853845639 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.860929385 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.848449344 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.851081397 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.858055833 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.853053772 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.852173118 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.856247387 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.85088403 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.84758507 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.849348094 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.853746973 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.85838025 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.853070355 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.850763054 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.852568374 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.852035889 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.852639151 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.852205878 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.854635013 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.853438883 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.853761276 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.850157611 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.848004439 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.850247594 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.85387605 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.852783321 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.849145155 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.852530367 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.859516253 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.854808092 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.854028514 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.857982713 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.85540518 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.862450714 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.85486811 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.854082593 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.850929172 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.852205337 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.853964099 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.849829574 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.852093554 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.854228341 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.854268843 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.855611095 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.866469138 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.86232695 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.859591867 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.856372928 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.85508804 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.857661245 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.862452149 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.876067744 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.851246124 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.853500436 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.857314778 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.858978531 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.8543314 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.856871965 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.857396307 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.859383086 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.854894023 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.852572916 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.853856764 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.868844644 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.853792294 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.8554009 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.852781 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.858779585 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.858560823 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.854126371 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.857657434 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.855164936 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.856676735 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.86587835 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.856227884 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.858343656 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.855082307 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.852772598 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.854556283 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.853717309 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.859404743 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.857593137 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.852775612 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.854389048 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.857751521 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.860478863 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.858423084 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.856274819 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.867182448 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.854645019 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.853665212 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.860198522 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.857891392 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.855977733 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.855156006 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.853570801 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.858635506 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.856269118 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.856508219 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.858634301 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.866328914 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.858960325 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.855771801 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.854485239 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.859030285 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.856279807 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.854634187 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.856368226 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.862155202 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.858601381 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.866485602 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.866169258 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.85721132 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.856934499 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.864121366 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.861734002 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.853379913 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.856063455 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.856411002 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.856244414 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.859363658 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.857632354 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.858176866 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.85582508 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.862067864 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.860441307 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.856502819 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.8561104 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.857175789 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.860322577 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.859373788 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.863470354 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.855707399 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.856921506 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.855336462 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.859359136 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.858531738 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.861872237 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.85719915 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.821896015 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.859774487 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.860244414 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.861171683 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.855411143 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.858738205 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.862220997 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.859962486 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.856958634 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.859295534 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.857579496 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.858812906 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.862150709 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.864840556 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.857791971 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.861201427 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.859409971 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.860997294 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.860185925 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.861496326 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.860055774 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.859562019 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.865759353 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.860146147 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.855598306 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.857936136 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.8599491 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.864674666 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.860982914 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.864445599 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.854406524 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.860306015 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.858734968 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.862454538 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.866421717 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.864751684 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.865372941 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.866389848 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.865506454 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.86376532 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.859986136 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.862217043 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.857491576 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.860299787 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.863022549 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.862230321 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.864486668 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.860684164 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.861999632 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.85795634 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.862836944 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.863028047 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.858925222 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.865679136 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.870738103 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.869147649 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.858086807 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.862995486 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.860436958 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.86250503 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.872291893 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.859672095 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.857637672 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.85683041 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.861583703 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.863882798 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.871162948 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.87051594 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.863784555 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.860647384 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.864646575 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.877602151 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.862097962 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.869614442 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.889145843 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.862729083 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.860463382 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.861769627 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.861839306 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.859478334 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.86391223 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.862794222 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.866982609 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.861434969 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.862758139 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.87007237 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.865125843 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.860591241 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.861564193 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.861514511 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.867800377 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.862784506 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.867417974 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.86160096 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.863004638 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.861738508 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.86744058 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.861548528 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.860605557 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.860461067 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.865356188 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.858769101 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.860996196 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.8718539 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.861461936 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.863771896 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.873523893 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.872409442 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.863823346 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.860868343 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.861827216 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.869070905 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.863804479 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.860070196 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.86685095 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.871081804 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.866414357 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.872732971 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.862098387 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.86524993 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.863630016 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.863570159 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.862218674 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.875814867 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.875038831 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.862849936 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.86394156 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.86985492 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.863647388 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.868352079 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.870222808 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.866743851 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.86719989 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.864770792 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.862476195 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.862893325 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.864634348 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.864924773 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.872601296 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.864662059 seconds)
  done (took 1105.591050099 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.864748031 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.862131719 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.860967544 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.861894215 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.859667691 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.862184806 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.859816308 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.864465876 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.865001945 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.864344095 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.864151377 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.865264166 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.846708267 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.860887024 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.861294413 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.864965245 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.86429948 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.864423175 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.865632614 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.863364468 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.864777572 seconds)
  done (took 40.904005624 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.863606467 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.852976971 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.867450279 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.863595659 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.866097327 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.863198429 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.862943942 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.864991481 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.86612279 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.865855462 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.864566398 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.862334392 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.866012643 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.866276157 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.856595733 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.839808862 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.861232956 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.864821726 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.864948603 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.856301408 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.848404134 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.866094048 seconds)
  done (took 42.750771824 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.865705347 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.866201216 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.869069468 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.865202936 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.864404413 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.86539101 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.864832776 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.8665539 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.866662783 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.868437888 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.872485057 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.873551414 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.867271495 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.869902612 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.868056613 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.86402693 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.01207394 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.868869954 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.866299905 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.864752798 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.867455628 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.874495536 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.867682953 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.867061365 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.865426588 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.86886905 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.868782925 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.867220545 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.866782617 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.869551735 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.873688302 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.867764286 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.870185698 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.867437899 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.866801976 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.872244144 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.874692515 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.867036443 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.869106451 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.868160225 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.880799026 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.893340735 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.868738154 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.867299876 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.874404642 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.870408167 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.870099857 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.870637407 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.877857745 seconds)
  done (took 93.537699338 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.869590349 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.869273431 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.864295224 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.867595193 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.866561224 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.87024629 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.866681355 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.869339945 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.869003646 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.868155686 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.868566232 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.87226349 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.867933071 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.867028387 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.868492334 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.865783914 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.8669316 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.868054896 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.864277846 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.867244601 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.867716014 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.868973345 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.870038362 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.867215268 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.867810509 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.869569584 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.867744408 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.868998975 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.869187905 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.867334189 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.868894304 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.867681295 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.868512849 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.869805814 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.870183805 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.869989483 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.87309052 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.870714952 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.866524662 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.867603219 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.869025454 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.872087496 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.872645216 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.871659437 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.874445492 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.870416338 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.870461065 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.871212008 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.870217874 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.869596233 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.870850275 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.871546887 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.872730071 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.867831758 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.870120385 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.87122488 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.868387243 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.869071799 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.872106114 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.859912148 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.868580505 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.870486879 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.868532302 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.871627481 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.87031449 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.873721317 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.869555991 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.871554941 seconds)
  done (took 128.90627135 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.870937639 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.870753955 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.871048903 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.872080555 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.873950065 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.873531131 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.870346644 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.873347752 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.872055752 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.874509144 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.870677352 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.870162844 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.870901464 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.873087253 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.875981812 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.870344198 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.870998482 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.874743845 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.871125235 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.872427841 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.872349966 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.872763653 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.872953829 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.872967717 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.873913374 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.873524178 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.873416033 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.873973642 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.87253074 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.872428276 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.875557465 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.873748793 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.874173411 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.873635127 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.87339086 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.871231469 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.870899078 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.87271127 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.850999177 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.874873661 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.872231925 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.875113852 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.874576332 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.872200291 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.872078323 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.871937595 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.872991381 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.871589108 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.871494775 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.876499336 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.872592221 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.873137314 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.875810736 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.873703917 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.875979254 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.870574671 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.87801436 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.875872267 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.874133662 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.876575355 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.876552269 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.875687024 seconds)
  done (took 117.920925257 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.876756012 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.871082541 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.874308429 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.872928201 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.875817015 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.874833771 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.875278491 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.875745409 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.874833507 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.873959001 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.875175886 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.877995037 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.875656172 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.874069955 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.875211838 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.878837189 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.873851963 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.874295823 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.875068765 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.877817388 seconds)
  done (took 39.307686536 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.875910988 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.875355083 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.875697651 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.874700813 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.875734616 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.876265714 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.875224872 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.877764799 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.876647721 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.870496675 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.874846094 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.876970662 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.875830994 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.878155904 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.878796144 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.876870931 seconds)
  done (took 31.819114063 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.874899797 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.876805088 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.876647371 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.877670625 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.875547777 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.876392925 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.874300525 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.876330647 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.877273255 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.878320237 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.876971647 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.877060842 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.877224677 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.878023641 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.877309574 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.875246125 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.879326916 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.87931538 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.879721285 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.879335605 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.878482647 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.880737463 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.880877802 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.877748587 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.877349596 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.880170009 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.879419165 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.877144801 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.878778269 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.876078994 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.877153641 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.876601822 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.875820837 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.874992637 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.876632893 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.878325465 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.877701339 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.876688242 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.876727374 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.877130618 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.877569884 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.87789599 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.879561581 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.878080863 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.87776064 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.879052466 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.880062741 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.879445948 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.879741878 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.879134682 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.876652717 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.878160477 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.879189438 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.881074886 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.877243661 seconds)
  done (took 105.088839035 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.879769783 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.877489593 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.880349738 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.882355607 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.88049681 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.879884971 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.877729201 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.878116837 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.877618901 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.878962329 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.881402905 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.877918366 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.877060776 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.877917278 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.882730778 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.878983699 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.88144916 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.881707409 seconds)
  done (took 35.639598753 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.879658191 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.880858934 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.879408708 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.879621114 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.881777319 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.874951054 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.877747073 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.878968052 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.881122215 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.881532379 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.879672713 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.883374036 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.881513891 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.88111564 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.88063446 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.88055552 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.883289708 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.88090384 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.882327368 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.883152311 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.883369813 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.879543327 seconds)
  done (took 43.184052763 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.882769102 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.880577761 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.897895426 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.905266879 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.903167131 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.918203292 seconds)
  done (took 13.197838702 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.882278863 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.882240861 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.884741807 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.882381673 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.880473558 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.881749317 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.883179298 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.880599214 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.88179459 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.883085745 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.880412221 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.882612736 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.882047007 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.883778751 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.883359503 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.881544897 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.87969308 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.879595119 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.883897993 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.88521014 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.879815612 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.880594427 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.883416436 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.881953736 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.883519972 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.882877387 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.880498983 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.880394234 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.883527474 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.885432096 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.880369882 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.881857915 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.880303363 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.885492414 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.886189445 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.884744226 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.885607703 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.882750592 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.884891976 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.881886284 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.884417394 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.884614053 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.885994799 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.88464839 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.887563915 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.881775521 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.88289865 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.883616221 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.885018098 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.883454102 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.881581007 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.881340162 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.885418567 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.881527498 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.884938225 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.883364095 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.883517359 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.883751092 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.88194185 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.882425343 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.88336198 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.880528728 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.884721528 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.882397176 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.883853551 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.882819841 seconds)
  done (took 126.083615132 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.884531848 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.8832436 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.884633199 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.883049865 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.883916525 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.884842466 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.885152808 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.88289912 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.883958499 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.885916683 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.884336763 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.885091256 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.888328551 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.887628185 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.889886445 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.881093008 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.884606275 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.88791384 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.8833323 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.884996429 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.886153352 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.883610642 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.883040914 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.884411575 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.886305033 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.881199981 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.883240543 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.885647733 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.884534583 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.883514491 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.886237022 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.88470562 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.884238332 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.886082102 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.884236666 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.882635488 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.885891895 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.884039066 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.882755771 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.888323805 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.88815882 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.886105429 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.883223125 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.885838945 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.887299848 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.882837663 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.883736957 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.887471828 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.883887771 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.886069991 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.885929788 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.885951149 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.885599707 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.886718783 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.886143684 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.886097475 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.885084565 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.885133711 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.886061498 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.886500773 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.887754427 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.889185091 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.888295955 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.884658766 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.885959769 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.889210184 seconds)
  done (took 126.246328772 seconds)
done (took 2575.987868563 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.896689334 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.994144964 seconds)
  done (took 15.709843408 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.051170809 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 6.948452975 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.070153274 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 1.997237871 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.88968702 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.901575785 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.886046842 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.892764119 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 1.981790846 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.892764506 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.924033155 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.890262725 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.891648627 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.893532442 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.893091714 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.888663097 seconds)
  done (took 52.920254944 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.893422639 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.897826193 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.892095968 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.890814219 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.904047222 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.048119804 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.915356502 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.89501828 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.90945592 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.931265802 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.912475006 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.901986009 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.900761023 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.897999158 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.991176754 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.936595611 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.953319655 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.968456114 seconds)
  done (took 36.458110237 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 1.974506045 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.907575496 seconds)
  done (took 10.709761309 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.888757775 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.890199367 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.917806968 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.897420299 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.907189824 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.890378164 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.893641517 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.924757481 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.921112277 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.925518906 seconds)
  done (took 70.879693032 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.894457861 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.895806386 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.197758659 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.903907441 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.900612224 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.915624288 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.894277194 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.923004924 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.899781713 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.889470158 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.900340887 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.199281169 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.90995121 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.891982118 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.237207659 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.911111633 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.900948189 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.923172806 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.928332765 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.899194846 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.895484692 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.885638185 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.051373292 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.591101203 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.895537368 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.895825437 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.898130837 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.892918981 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.891507476 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.888476679 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.875738536 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.891406112 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.896905147 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.897114622 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.900046025 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.896282698 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.387433245 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.912769996 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.901400941 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.974311663 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.93923448 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.905677221 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.666157528 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.89402122 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.894781477 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.901287561 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.579979355 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.984068131 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.899154427 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.064513033 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.228471536 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.910591876 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.05685337 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.052076132 seconds)
  done (took 134.136499962 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.897051329 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.118994438 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.047647589 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.892875633 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.149413576 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.107356631 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.776036077 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.937114052 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.899152827 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.092688462 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.1365443 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.997344635 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.897064553 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.894500859 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.892510058 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.887756504 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.040860823 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.962977149 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.897972425 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.892211455 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.920742249 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.095220816 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.015681985 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.902658969 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.918156058 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.098423565 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.015261358 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.998111344 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.621367041 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.892538872 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.957230173 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.894762033 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.89442498 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.89282578 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.05213378 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.993224943 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.979532433 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.894713379 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.892158796 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.894000783 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.536133184 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.092842413 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.990616429 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.007719731 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.138894557 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.108878501 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.567435654 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.898736674 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.524657621 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.060162347 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.08751869 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.108359929 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.011947088 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.900296866 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.153285731 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.893465571 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.896937618 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.113301761 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.110741104 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.998945888 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.898349879 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.900739549 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.893819694 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.122188529 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.898165815 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.987886272 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.896277901 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.898297369 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.991848214 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.996173995 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.120260254 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.121176672 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.926138013 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.219961022 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.253130294 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.099779931 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.959889542 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.114809756 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.89648268 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.892409864 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.975708237 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.659699336 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.144026186 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.130529362 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.093333123 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.925908133 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.506270419 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.895823901 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.084263165 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.083138747 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.095236136 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.136809308 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.135585445 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 4.889426939 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.897283437 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.89839722 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.103954025 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.014208112 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.68794045 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.236939972 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.124426467 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.312752967 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.924999361 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.169833701 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.024164274 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.90341731 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.538699494 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.900949936 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.099379342 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.938301028 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.901098114 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.899867694 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.085734656 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.718914283 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.903636293 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.826453065 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.955851037 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.901184997 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.100523832 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.901869378 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.137709366 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.901101398 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.132610065 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.425144422 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.928011864 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.115322622 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.143011918 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.465749462 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.189381705 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.136331278 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.008912017 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.162401531 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.32336322 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.895603768 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.162049041 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.900753818 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.902007126 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.060529126 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.906008376 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.465832511 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.905732951 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.132089724 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.918341796 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.128737588 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.906849214 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.129601097 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.928988033 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.953178073 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.902269552 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.02318609 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.903059907 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.794165878 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.056172999 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.900243672 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.899810491 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.584247097 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.902264655 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.054640255 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.129600268 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.920935751 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.971958027 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.415772158 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.901736528 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.989091514 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.921449503 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.104335678 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.901696437 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.144673401 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.397423714 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.120863492 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.902616534 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.122071328 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.123540905 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.905205779 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.898775618 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.741613943 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.539873091 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.901050642 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.052778519 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.23870616 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.608808063 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.099190867 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.90272298 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.025140145 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.907647273 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.995975588 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.232688149 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.899361633 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.8981238 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.904538536 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.905715481 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.902652163 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.152976995 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.927435166 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.328058848 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.02631257 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.155787567 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.203842063 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.099844662 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.939325484 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.907619211 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.110418408 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.903017412 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.96054438 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.904414001 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.922300883 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.135772403 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.903988867 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.095433015 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.133384625 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.848722567 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.949856735 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.903887663 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.899292753 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.863122979 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.049224168 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.994384612 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.903290966 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.907935172 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.018003143 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.027129656 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.090234275 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.584809612 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.956923345 seconds)
  done (took 903.912329066 seconds)
done (took 1226.546179311 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.902400121 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.906821968 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.907491363 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.899715993 seconds)
  done (took 29.448662294 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.905845818 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.905213922 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.906320112 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.907419415 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.907337957 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.90912103 seconds)
  done (took 13.276574215 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.907106068 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.907937157 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.909985897 seconds)
  done (took 22.557707632 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.329485663 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.309360184 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 1.973754556 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.049975212 seconds)
  done (took 10.495643257 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.910862442 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.907813785 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.905871393 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.906658654 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.909514142 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.907330184 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.908580604 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.907833496 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.909782755 seconds)
  done (took 19.017279844 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.01078034 seconds)
done (took 100.642131189 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.286620498 seconds)
    (2/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 1.92988653 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.037720615 seconds)
    (4/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 6.91730813 seconds)
    (5/341) benchmarking ("map", abs, BigInt, true)...
    done (took 6.944658764 seconds)
    (6/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.695134175 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.619174936 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.036833624 seconds)
    (9/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 1.915577412 seconds)
    (10/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.158796478 seconds)
    (11/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 6.889921644 seconds)
    (12/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.919197571 seconds)
    (13/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.810692855 seconds)
    (14/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.290550513 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 1.922184422 seconds)
    (16/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.288216823 seconds)
    (17/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 1.920759872 seconds)
    (18/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 1.91067565 seconds)
    (19/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.225158077 seconds)
    (20/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.967720731 seconds)
    (21/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 1.939700247 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.036150328 seconds)
    (23/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.579508677 seconds)
    (24/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.191043435 seconds)
    (25/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.107427626 seconds)
    (26/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 1.939864693 seconds)
    (27/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.34188313 seconds)
    (28/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.012267939 seconds)
    (29/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.129724289 seconds)
    (30/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.039645852 seconds)
    (31/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.101409595 seconds)
    (32/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.037744941 seconds)
    (33/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.523040215 seconds)
    (34/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.90689751 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.232246015 seconds)
    (36/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.109492606 seconds)
    (37/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.245613434 seconds)
    (38/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.000958427 seconds)
    (39/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.14959756 seconds)
    (40/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.130215173 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 1.993203282 seconds)
    (42/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.006942304 seconds)
    (43/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.296038547 seconds)
    (44/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.018797242 seconds)
    (45/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.302114623 seconds)
    (46/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 1.919233171 seconds)
    (47/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.029541114 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.262580049 seconds)
    (49/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.004337501 seconds)
    (50/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 1.96805166 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 8.1176481 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.404042675 seconds)
    (53/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 1.986845062 seconds)
    (54/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 1.920974922 seconds)
    (55/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.032143027 seconds)
    (56/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.260323562 seconds)
    (57/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.037243799 seconds)
    (58/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 6.91306505 seconds)
    (59/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.151523695 seconds)
    (60/341) benchmarking ("map", abs, Bool, false)...
    done (took 1.987430424 seconds)
    (61/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.937543263 seconds)
    (62/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.186187343 seconds)
    (63/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 6.9093966 seconds)
    (64/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.293730621 seconds)
    (65/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.05379872 seconds)
    (66/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.251244791 seconds)
    (67/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 1.991824717 seconds)
    (68/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.531153137 seconds)
    (69/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.763094835 seconds)
    (70/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.00173861 seconds)
    (71/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.219599297 seconds)
    (72/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 1.921980242 seconds)
    (73/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.622031129 seconds)
    (74/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.070892959 seconds)
    (75/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 6.915498636 seconds)
    (76/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 3.65618371 seconds)
    (77/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.193178418 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 1.92053955 seconds)
    (79/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.12373199 seconds)
    (80/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.811800697 seconds)
    (81/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.607766105 seconds)
    (82/341) benchmarking ("perf_sum", Float64, false)...
    done (took 1.987330143 seconds)
    (83/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.679064986 seconds)
    (84/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.017931657 seconds)
    (85/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.909783259 seconds)
    (86/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.237256456 seconds)
    (87/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.287272309 seconds)
    (88/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.166213016 seconds)
    (89/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.914588656 seconds)
    (90/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.912375489 seconds)
    (91/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.098044378 seconds)
    (92/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.191783324 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.077657552 seconds)
    (94/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.643317906 seconds)
    (95/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.148569058 seconds)
    (96/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.042162275 seconds)
    (97/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 1.921781053 seconds)
    (98/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.182057211 seconds)
    (99/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.908268593 seconds)
    (100/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.510487505 seconds)
    (101/341) benchmarking ("sort", Int8, false)...
    done (took 4.877589275 seconds)
    (102/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.030954706 seconds)
    (103/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.056195765 seconds)
    (104/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.552539671 seconds)
    (105/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 6.978455027 seconds)
    (106/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.070207921 seconds)
    (107/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 1.922188196 seconds)
    (108/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 1.998128152 seconds)
    (109/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.755153994 seconds)
    (110/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 6.921500552 seconds)
    (111/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.124481761 seconds)
    (112/341) benchmarking ("sort", Float64, false)...
    done (took 5.606189314 seconds)
    (113/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.132682437 seconds)
    (114/341) benchmarking ("perf_sum", Float32, false)...
    done (took 1.991367727 seconds)
    (115/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.036552773 seconds)
    (116/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.220061123 seconds)
    (117/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.180860001 seconds)
    (118/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.444360703 seconds)
    (119/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 1.922800696 seconds)
    (120/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.211457436 seconds)
    (121/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.299732088 seconds)
    (122/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.037167673 seconds)
    (123/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.743617002 seconds)
    (124/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 6.916464026 seconds)
    (125/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.019394001 seconds)
    (126/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.233407038 seconds)
    (127/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.11873256 seconds)
    (128/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.169986016 seconds)
    (129/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.191079322 seconds)
    (130/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.075759152 seconds)
    (131/341) benchmarking ("perf_sum", Int64, false)...
    done (took 1.927335823 seconds)
    (132/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.150111313 seconds)
    (133/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.11066061 seconds)
    (134/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.266767591 seconds)
    (135/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.186123069 seconds)
    (136/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.099672563 seconds)
    (137/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.917079409 seconds)
    (138/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.77251404 seconds)
    (139/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.854311592 seconds)
    (140/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 1.970446542 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.008833854 seconds)
    (142/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 1.928219916 seconds)
    (143/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.159451661 seconds)
    (144/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.321747588 seconds)
    (145/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.91262214 seconds)
    (146/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.029876263 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 1.943925067 seconds)
    (148/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.810830675 seconds)
    (149/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.341481389 seconds)
    (150/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.071561916 seconds)
    (151/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.10504849 seconds)
    (152/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.130068341 seconds)
    (153/341) benchmarking ("sort", Bool, false)...
    done (took 2.128902298 seconds)
    (154/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.05538566 seconds)
    (155/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.009331278 seconds)
    (156/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.209195025 seconds)
    (157/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 6.921903973 seconds)
    (158/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.393189214 seconds)
    (159/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.044425709 seconds)
    (160/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.92024381 seconds)
    (161/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.268499456 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 1.930593361 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 1.932089161 seconds)
    (164/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.306192791 seconds)
    (165/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.01151873 seconds)
    (166/341) benchmarking ("sort", Int64, false)...
    done (took 5.522439916 seconds)
    (167/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.326569946 seconds)
    (168/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.307568222 seconds)
    (169/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.168533794 seconds)
    (170/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 1.997378266 seconds)
    (171/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.0954397 seconds)
    (172/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.336195305 seconds)
    (173/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 1.91746742 seconds)
    (174/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.024785864 seconds)
    (175/341) benchmarking ("sort", BigFloat, false)...
    done (took 6.920221507 seconds)
    (176/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.68088419 seconds)
    (177/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.051321002 seconds)
    (178/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.802556303 seconds)
    (179/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.239984065 seconds)
    (180/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.124667819 seconds)
    (181/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.344429707 seconds)
    (182/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.114549682 seconds)
    (183/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.086170412 seconds)
    (184/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 6.921879497 seconds)
    (185/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.104801629 seconds)
    (186/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.00599883 seconds)
    (187/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 8.337491081 seconds)
    (188/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.23940435 seconds)
    (189/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.164050017 seconds)
    (190/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.066651914 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.042798073 seconds)
    (192/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.076687928 seconds)
    (193/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 1.947000056 seconds)
    (194/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 6.994549671 seconds)
    (195/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 1.933113357 seconds)
    (196/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.213730643 seconds)
    (197/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.251255693 seconds)
    (198/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.124357101 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.249803221 seconds)
    (200/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.917096284 seconds)
    (201/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.077678659 seconds)
    (202/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 1.932334806 seconds)
    (203/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.014679079 seconds)
    (204/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 6.92142733 seconds)
    (205/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 1.930264703 seconds)
    (206/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.37623012 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.627468089 seconds)
    (208/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 1.944164135 seconds)
    (209/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 1.931700492 seconds)
    (210/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.615868637 seconds)
    (211/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.289821008 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 6.91465773 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.164657781 seconds)
    (214/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.614678077 seconds)
    (215/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.103140826 seconds)
    (216/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.052358329 seconds)
    (217/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.315697885 seconds)
    (218/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.247099949 seconds)
    (219/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.129678543 seconds)
    (220/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 6.919730886 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 3.660710321 seconds)
    (222/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.353143382 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.411365614 seconds)
    (224/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.199941112 seconds)
    (225/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 1.927039334 seconds)
    (226/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.057280542 seconds)
    (227/341) benchmarking ("perf_sum", Bool, false)...
    done (took 1.931934241 seconds)
    (228/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.112275443 seconds)
    (229/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.29016195 seconds)
    (230/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.292316129 seconds)
    (231/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 1.96982149 seconds)
    (232/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.225401326 seconds)
    (233/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.005567898 seconds)
    (234/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.004708761 seconds)
    (235/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.369934814 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.404650329 seconds)
    (237/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.511845672 seconds)
    (238/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.219195652 seconds)
    (239/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.916418357 seconds)
    (240/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.037280239 seconds)
    (241/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.814984329 seconds)
    (242/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 1.947275333 seconds)
    (243/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.028529696 seconds)
    (244/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.2677703 seconds)
    (245/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.253611265 seconds)
    (246/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.033699979 seconds)
    (247/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.240752848 seconds)
    (248/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 1.945855829 seconds)
    (249/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.006661457 seconds)
    (250/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.141802217 seconds)
    (251/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 1.927259193 seconds)
    (252/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.121265142 seconds)
    (253/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.038654835 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.221265577 seconds)
    (255/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.398092223 seconds)
    (256/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.43982778 seconds)
    (257/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 1.99718128 seconds)
    (258/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.175525118 seconds)
    (259/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 6.92097779 seconds)
    (260/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.150993278 seconds)
    (261/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.212317208 seconds)
    (262/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.918298542 seconds)
    (263/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.947175174 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.221446896 seconds)
    (265/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.912198452 seconds)
    (266/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.045218125 seconds)
    (267/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.234307771 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.224302225 seconds)
    (269/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.063155868 seconds)
    (270/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 6.968278885 seconds)
    (271/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.0553709 seconds)
    (272/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.036571323 seconds)
    (273/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.859932055 seconds)
    (274/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.01614168 seconds)
    (275/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.134787772 seconds)
    (276/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.92161593 seconds)
    (277/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.222983432 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 1.937254499 seconds)
    (279/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.339479503 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.172171305 seconds)
    (281/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.683928952 seconds)
    (282/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.207504181 seconds)
    (283/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.084804567 seconds)
    (284/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 6.925282464 seconds)
    (285/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 1.944802379 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.4180547 seconds)
    (287/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.120152334 seconds)
    (288/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.921190241 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 6.958628361 seconds)
    (290/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.27791987 seconds)
    (291/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.340642122 seconds)
    (292/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 6.921770017 seconds)
    (293/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 1.944544553 seconds)
    (294/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 6.924538463 seconds)
    (295/341) benchmarking ("perf_sum", Int8, false)...
    done (took 1.982916726 seconds)
    (296/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.93167494 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.819194656 seconds)
    (298/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.066026527 seconds)
    (299/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.69226785 seconds)
    (300/341) benchmarking ("map", abs, BigInt, false)...
    done (took 8.352893954 seconds)
    (301/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.06688645 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.697115492 seconds)
    (303/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.553399045 seconds)
    (304/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.165775703 seconds)
    (305/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.925788429 seconds)
    (306/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.437833954 seconds)
    (307/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.162026716 seconds)
    (308/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.201479885 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 6.920307541 seconds)
    (310/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.987456766 seconds)
    (311/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.416550658 seconds)
    (312/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 6.924026947 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.920994947 seconds)
    (314/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 3.723561074 seconds)
    (315/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.673651172 seconds)
    (316/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.155745771 seconds)
    (317/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 6.923908527 seconds)
    (318/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.092591174 seconds)
    (319/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.374938339 seconds)
    (320/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.225999429 seconds)
    (321/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.045269515 seconds)
    (322/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.056272071 seconds)
    (323/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.032312544 seconds)
    (324/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 1.937557543 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.849597439 seconds)
    (326/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.921039429 seconds)
    (327/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.916557886 seconds)
    (328/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.228616446 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.807551047 seconds)
    (330/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.862475336 seconds)
    (331/341) benchmarking ("sort", Float32, false)...
    done (took 5.606255264 seconds)
    (332/341) benchmarking ("sort", BigInt, false)...
    done (took 6.926586099 seconds)
    (333/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.007194409 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.923255318 seconds)
    (335/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.452797276 seconds)
    (336/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.350471024 seconds)
    (337/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.461375731 seconds)
    (338/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.002852474 seconds)
    (339/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.088830254 seconds)
    (340/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.137497875 seconds)
    (341/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.859601781 seconds)
  done (took 1101.608191519 seconds)
done (took 1103.526875518 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.950809502 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 1.93384815 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.430486437 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.94286117 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.934256132 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.93452318 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.445347806 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.959243329 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.948614684 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.442457338 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.942339635 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.932296585 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.947952298 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.967050801 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.945081539 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.948313437 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 1.942621528 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.958281986 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.969111657 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.940323312 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.978248766 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.94061059 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.933488817 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.986835777 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 1.936675967 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.9489264 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.94877429 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.981104485 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.983621386 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 1.938097473 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 1.940919668 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.28626302 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.984497922 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 1.939181411 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.943129084 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.950850318 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.939078681 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.950796194 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.949048034 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.951601236 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 1.935682364 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.943852389 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.940454345 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.938023731 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.936306423 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.933781876 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.934713122 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.060526962 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.948075145 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.268825921 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.993807122 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.948958211 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.983789313 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 1.935344569 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.936754843 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.938993513 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.982963429 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.941580504 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.937149285 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.270225355 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.024320234 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.949964214 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.27164701 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.999358526 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.948300025 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.948013781 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.935644158 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.950413561 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.288096601 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.485823996 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.965158307 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.956859483 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 1.936674639 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 1.939542703 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.952925247 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.445641927 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.949308965 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.511077897 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.960699303 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.951289795 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.943786393 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.939955201 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.941602738 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.952101953 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.949594764 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.936148215 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.941283076 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.944392431 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.94591708 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.289418165 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.982036421 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.431680098 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.942497838 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.951626835 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.951608953 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.51467239 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.964502343 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.951515368 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 1.942352731 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.290625647 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.979545989 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.950336156 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 1.942188821 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.948935673 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.055071029 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.950602584 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.949912641 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.936029221 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.957516863 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 1.946347338 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 1.941369087 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.953469852 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.960997259 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.97411915 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.956631384 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.937452871 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.948263416 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.94563067 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.947619553 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.947923164 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 1.948540002 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.949758922 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 1.942115188 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.992411381 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.950195029 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.954562893 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.057573019 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 1.947157765 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.066178355 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.954855885 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 1.947834854 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.939500743 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.274800412 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.986014312 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.962610149 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.947153853 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.965079699 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.960777382 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.958196553 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.942037743 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.957836739 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.945226526 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.995428545 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.944837714 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.967357333 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.995505265 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.957361974 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 1.94956406 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.952555381 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.974484613 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.960793065 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 1.94662723 seconds)
done (took 305.806569233 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.983099724 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 6.93379206 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.010208874 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.934613119 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.00403325 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.991741163 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.935682447 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.936174871 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.935817172 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.336839084 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.935194425 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 1.937528207 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 6.93353634 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.936523589 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.986152135 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.936598197 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.936261824 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.171158598 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.937213987 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.997903768 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 6.93715538 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.936560222 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.936885524 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.338131656 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.937582027 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 6.934564177 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.998759836 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.936631347 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.178363169 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 6.933136386 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 6.934739036 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.179293588 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.996436105 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 1.949373227 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.947599641 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.939576757 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.003938982 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.941576482 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.984519213 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.98558174 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.011925769 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 1.973240502 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 6.936107395 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 6.93605945 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.939714731 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.938891211 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.935341346 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.970380638 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.936441892 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.945669116 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.179063628 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 1.947707015 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.946061399 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.94022835 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.940112216 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.955328454 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.939112589 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.93934172 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.999891801 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.938950485 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.988117574 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.33939262 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.339060357 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.937826188 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 6.938478032 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.939353833 seconds)
  done (took 188.236311488 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.003612183 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.02336353 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.00782969 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 1.94608719 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.989553492 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.007745148 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 1.946150712 seconds)
  done (took 15.79062603 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 1.947207214 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.941011884 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.964958378 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.964578902 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.938971712 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.078017914 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.95094945 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 1.946935248 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.963404486 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.938966173 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.274909375 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.961595614 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 1.945047137 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 6.947578044 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.955771785 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.972517448 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 1.944358517 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.943518905 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.040559614 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.020121169 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 1.948179688 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 1.951525645 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.969461011 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.955183819 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.942928216 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.942238902 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.942569995 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 1.951024735 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.942132542 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.942978541 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.941048369 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.955144571 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.944608889 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 6.940333696 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.9435839 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.945523099 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.945520028 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.943545452 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.94377776 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.941105712 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.943594795 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.944874962 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.944460478 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.944641047 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.941712792 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.963581124 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.944360555 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.941448663 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.942507698 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.943034096 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.972657626 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.94510396 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.945121704 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 1.951441918 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.984382104 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 1.949976959 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.944973588 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.944009908 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.946322834 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.942250332 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.943755221 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.025330914 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.964458372 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.942526025 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.968096472 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.981565901 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.943516911 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.94284995 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.943125598 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.970295407 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.944380995 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.969868045 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.944381563 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.041292214 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.94425662 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.085767911 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.966162512 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.945105629 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.948158737 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 6.943089626 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 1.952457124 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.945275906 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 1.947979682 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 1.951817399 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 1.950599201 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.945270801 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.947231928 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 1.946232378 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 1.954122402 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.945039014 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.993952275 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.946072867 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.947455686 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.044254927 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.945716383 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.043348685 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.971437884 seconds)
  done (took 212.158920014 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 1.948698188 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 1.945598585 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.960995285 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 1.948481313 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 1.946424898 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 1.951138565 seconds)
  done (took 13.572162886 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.948998907 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.948346152 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.948073926 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.947515918 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.948441247 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.949069426 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.947969407 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.935181031 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 1.950826163 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.947435108 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.945984829 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.948956192 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.945810864 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.947705392 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.947644908 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.944624207 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.947057536 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.947482761 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.94662864 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.947858944 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.196865789 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.946369554 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.949212432 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.937007639 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 1.952315423 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.947221693 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.953456719 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.945570831 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.947411882 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.954726528 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.951765411 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.947897593 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.948977726 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.9518798 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.950341365 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.952951639 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.950357359 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.948520018 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.947496068 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.950402518 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.947609727 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.945563559 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.94846141 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.950254677 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 1.951213886 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.956790573 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.954477572 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.955585737 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.94949059 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.947953281 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.950293206 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.944636766 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.947497083 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.950324479 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.954898454 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.955798597 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.953796549 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.948324223 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.948846324 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.950618249 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.95415316 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.949081584 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.954744297 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.952794766 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 1.953422293 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.951090507 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.951020712 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.950181118 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.947753352 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.947321897 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.946672574 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.945536913 seconds)
  done (took 143.46399589 seconds)
done (took 575.084502077 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.978818186 seconds)
  done (took 8.853951183 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.992332188 seconds)
  done (took 8.945936155 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.160260519 seconds)
  done (took 12.040300983 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.995160226 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.954417186 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.94767643 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.947248315 seconds)
  done (took 29.719268485 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.154192274 seconds)
  done (took 9.030442814 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.964894742 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.944401536 seconds)
  done (took 15.84308331 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.079683655 seconds)
  done (took 8.957293331 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.142234707 seconds)
  done (took 9.046820629 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.974581676 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.968569692 seconds)
  done (took 15.836956496 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.949427799 seconds)
  done (took 8.826760035 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.625890085 seconds)
  done (took 9.570440225 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.962313309 seconds)
  done (took 8.854093154 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.999182129 seconds)
  done (took 8.877691463 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.743958742 seconds)
  done (took 9.618891587 seconds)
done (took 165.898097928 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.957791808 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.94981027 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.946955425 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.946147682 seconds)
  done (took 29.67570746 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.987101325 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.98629218 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.987401646 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.979132706 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.97708398 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.977661364 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.985057702 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.985346549 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.976118512 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.980624792 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.989060154 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.978363562 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.983675505 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.987909325 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.989144114 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.981910738 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.982536902 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.988517331 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.979194799 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.985081113 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.984302877 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.983553953 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.921250583 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.949235331 seconds)
  done (took 49.384143934 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.131375293 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.020281341 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.1064828 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.995276635 seconds)
  done (took 10.127818969 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.950014721 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.000686844 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.003200248 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.993743337 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.000621483 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.056457229 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.004981229 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.078836437 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.080004856 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.067531855 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.956800876 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.96952172 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.96855042 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.996311076 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.053111947 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.951250767 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.951673634 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.057484414 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.004432003 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.110545114 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.951665695 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.002401557 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.005003091 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.005959189 seconds)
  done (took 50.097534746 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.951372263 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.960200717 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 1.959513479 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.954164315 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.952735393 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.952047365 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 1.956328036 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.955516942 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.976349579 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 1.95419595 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.952578896 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.954755103 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.95865158 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.95177497 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.953851277 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.963234343 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.968041503 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.954383724 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.958605151 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 1.961642273 seconds)
  done (took 41.027516872 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.955605807 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.801709368 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.300760521 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.205295189 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.9520934 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.953994503 seconds)
  done (took 32.046259508 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 1.968185713 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.967994848 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.960927032 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.975539224 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.999053783 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.960515306 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.013543053 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.121754839 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.962110676 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.012107908 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.977118403 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.957693575 seconds)
  done (took 25.758449843 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.951763806 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.952544759 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.951408041 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.966052818 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.96286136 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.963161794 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 1.959244084 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.951406121 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 1.9662411 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.976127721 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.961012618 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.965582231 seconds)
  done (took 45.407171572 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.166526108 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.180817541 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159995263 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.429386435 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.284405844 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.928311153 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.231466475 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.165849848 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.569875156 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.593663353 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.238214745 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.927187709 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.905390202 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.876865349 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.831701262 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.194702531 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.956894819 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.755553694 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.204265858 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.990252555 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.953623339 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.954784369 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.95502123 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235641734 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.274412959 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.952780219 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.16586932 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.969330609 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.956120817 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.174386912 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.491967957 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.013176904 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.158856181 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.213832689 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.311069365 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.995167996 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.955479258 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.052329164 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.005542899 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.994664308 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.96754017 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.970221396 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.499236984 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.967759215 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.228390223 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.959104257 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.961290666 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.958771494 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877205424 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.146099734 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058454103 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.869758052 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.990358343 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.323742706 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.076198638 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.196385456 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.959344602 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.044349159 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.016634043 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.087981754 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.050473114 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.954587241 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.1665584 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.879975508 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.228872498 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.068403536 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.958254605 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.959954995 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.657932686 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.195518795 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.034744182 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.147027518 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.65893972 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.956002664 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.959001374 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.848800454 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.053631787 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.9523918 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.172066184 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.935401657 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.879670176 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.055425192 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.253098605 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.963518275 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.959275497 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.969440452 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.76577406 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.88456792 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.054168389 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.090310779 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.263002182 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.955852261 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.959344091 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.981145117 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.961407327 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.888442511 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.399752828 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.030405846 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.884980878 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.520840112 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.508483899 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.927024497 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.39944487 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.004623765 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229928613 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.861026273 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.36340757 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.083449226 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199585298 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.486567164 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.965362505 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.403758211 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.035894952 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.032023781 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.959561434 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.440898011 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.059823026 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130942148 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.061823837 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.958508172 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.886635571 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.969169994 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.162123017 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.502402703 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.021341176 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.956802129 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 1.963554816 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.959687528 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.963134787 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.993432016 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.977365817 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.252711845 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.024410289 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.960776116 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.880760695 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 1.962103963 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.240433343 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.330786809 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.025000938 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.208843386 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.22050737 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.542969037 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.524535987 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.914999702 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.229474728 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.025023228 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.031907645 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.533436114 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.087059131 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.057264978 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.885934934 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.110136742 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.974538832 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.963148603 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.167011145 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.274614661 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.351911434 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.005204446 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.963469882 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.891685416 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.055965643 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.208116163 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.936806118 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.980735407 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.964684107 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.041679473 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.189653419 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.962899419 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.887646929 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215205892 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.195829677 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.252074067 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.258184433 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.931562476 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.027235785 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.96725727 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.17287694 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.043034205 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.613497065 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.448368151 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171804717 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.388206422 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 3.931848178 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.528125428 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.098054284 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.32790214 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.980391437 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.409121063 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.059968283 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.58129291 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.000076001 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.309683236 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.892026451 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.970598813 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.296021946 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 3.907867298 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.270460463 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.010996598 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.990725911 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.962591444 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.96482105 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.969134294 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.819009268 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.063508201 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.030436837 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.037124036 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.889240067 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.527671593 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.008045978 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 1.961896402 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.961445555 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.17237366 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.681014373 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.90952755 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.963425044 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.041705649 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.658104666 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.512085081 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.963610594 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.964743617 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.5658905 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.971829444 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.835455386 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.969284184 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.663808916 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.985673921 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.094152261 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.625879996 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.246252213 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.029725785 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.036215836 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.964443768 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.967415308 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.660912969 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.972355637 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.66198484 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.248911841 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.230831391 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.379022672 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.014514614 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.093204677 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.977055463 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.963279418 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.412307586 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 1.988309007 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.964279795 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16673263 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.478433407 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.163501916 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.915346322 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.048418293 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.963177388 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.230434622 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.956525041 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.500651979 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.654374572 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.947894267 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.996599907 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.188442657 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.649895043 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.966959401 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.843778221 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.968874327 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.170955344 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.167401658 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.24686733 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.248919709 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.400454304 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.887848326 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.966268832 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.98883546 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.204894772 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.964833243 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.001641212 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.2615496 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.95389606 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.390252854 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.249576389 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.213456542 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.41676191 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.226163392 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.023057695 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.973964399 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.611965334 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.078121782 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.896341387 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.081870134 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.891413288 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.595907485 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.253830877 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.981779575 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.2293633 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937594074 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.304343324 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.251505514 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.091153665 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.977058667 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.99222876 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.913600924 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.029072993 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.965509148 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.048430379 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.081044559 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.97191558 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.400723956 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.011423926 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.010935189 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.968339657 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.378808471 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.983342869 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.96626035 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.541733739 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.990752223 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.085292556 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.033813835 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.652576309 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.537107638 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.0665469 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.79463581 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.574815931 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.237200867 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.014738678 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.427373984 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.999954995 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.372898329 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.966399769 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.180421201 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.973337945 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.431817671 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.015975893 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.229139723 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.915773305 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.177217135 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161749844 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.990084047 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.97215992 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.895031594 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.996784177 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.839228909 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.934215361 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.971048184 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.602885449 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.308124139 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.085059907 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.3445562 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.79135896 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 1.970702365 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.179467627 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.355007488 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.470755139 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.001571668 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.97072457 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169160243 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.092110055 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.146663945 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.130243351 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.980490371 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.99851737 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.181691961 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.097509249 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.889345655 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.446634562 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.513286687 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.668367566 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.981802293 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.173649334 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.166335252 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.160394922 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.007587741 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.048637777 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.374104184 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.234559796 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.03387528 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.896861959 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.971089291 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.363683294 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.189654103 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.067099994 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210224831 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.263637181 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.294701399 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.525606135 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.407804562 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.288330774 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.260301429 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.313227984 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181006695 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.324672442 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.215645917 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.847117446 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.384459241 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.180826124 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069624193 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.253286496 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.836278844 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.679364485 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.211488187 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 1.97761138 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.899088031 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.180397545 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.037098729 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.164303494 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.400957584 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.219415684 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.101154312 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.32654099 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.45431981 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.075792368 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.997614129 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.906305403 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.998376966 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.995030497 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.97219145 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.449679716 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.250520529 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.987863603 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.903644294 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.641913639 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.901744652 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.186665994 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.07745193 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.011119712 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.502830767 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.109787752 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.070028433 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.261447011 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.122784492 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.008261719 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.899779459 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.672461009 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 3.917393744 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.95492869 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.394806899 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.989781446 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 1.976369794 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.17861145 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.903371757 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.019796902 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.979292642 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.168038837 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.492077792 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.24306466 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.096242162 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.217839694 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.270527204 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.71807224 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.995266956 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.248977543 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.904970421 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.563581734 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.647784718 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.012546337 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.043744746 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.97760202 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.977429706 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.245068227 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.174108917 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.117000046 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.579011103 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.008925779 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.999929811 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.170460332 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.060996738 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.979490756 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.978034916 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.430447752 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.209284541 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.044360796 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.905337035 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.185825766 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.058032597 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.173244176 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.04913344 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.49100448 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.983630444 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.734422023 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072501091 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.929096415 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.912042339 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.630192018 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.034598112 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.977267691 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.248651958 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.612224435 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.180553501 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.37325289 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.842274776 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.081154103 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.019334531 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 1.980860533 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.980623483 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.258264621 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.270346054 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.97705284 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.241705291 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.016179441 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.985131273 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.580750831 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.940843721 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.979121191 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.670615416 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.862840023 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.706621774 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.375848861 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.98921487 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.984933089 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.980271272 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.90438646 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.976833312 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.980498452 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.950448622 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.036299768 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.237964998 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.155712006 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.056520581 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.985392224 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.981441874 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.986338567 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.191183214 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.496817069 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.996188038 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.680340097 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183264883 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.981900011 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.456521917 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.398220901 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.144417146 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.024296534 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.08573586 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218593984 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.445853074 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.093547584 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.964523156 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.201804948 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.982817326 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.252115305 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2565195 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.981763875 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.193673777 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.528668803 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.273655178 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.231975206 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.284947382 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.03599965 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.075593634 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.884488094 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.98266483 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.902770397 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.240262971 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.028417717 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.979051897 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.990057735 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.460269698 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.613619844 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.443204643 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.133250639 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.173470542 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.758424825 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.736310179 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 1.98622659 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.91041134 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.979731819 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.008074975 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 1.984733228 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.908427956 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.682040133 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.70269437 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193642085 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.295557266 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.910493735 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.185635217 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.550503954 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.90421909 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.946093957 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.95185606 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.25453071 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.910613705 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.985668806 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.911471552 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.13132546 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.652815058 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.253651762 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.983382069 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.908446843 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.98476804 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.984543115 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.983364932 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.068358056 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.982298742 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.099995513 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.244088417 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.223545529 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.077624533 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.586640059 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.603108711 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.919040401 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.02295676 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.577596047 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552746264 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.13572418 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.101916383 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.615260327 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.927582224 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.904622559 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.996828728 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.178674141 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.986833768 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.986591572 seconds)
  done (took 2124.47050585 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.993336312 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.01994961 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.028726416 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.019943851 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.036171558 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.06266681 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.029270801 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.990586785 seconds)
  done (took 58.090381993 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.983764597 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.89856353 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 1.989661618 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.999749632 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.980055604 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.982825695 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.172920738 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.016716055 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.985499179 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 1.985210413 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.986970355 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.985261866 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.987157033 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.982453474 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.985420491 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.271243557 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.010206713 seconds)
  done (took 78.167539238 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.012943959 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.278850636 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.983634137 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.402111038 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.015509448 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.089174042 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.98387619 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.989390573 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.091585682 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.28125501 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.990039254 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.990946751 seconds)
  done (took 92.035207719 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.987531058 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.987498263 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.986744934 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.986874376 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.988029459 seconds)
  done (took 11.848911521 seconds)
done (took 2650.069999784 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.230925242 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.081528791 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.054438455 seconds)
  done (took 6.047882677 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.134061184 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.181386702 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.293885563 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.318093733 seconds)
  done (took 10.845640312 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.267746518 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.356973758 seconds)
  done (took 6.535745686 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.361417591 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.998927001 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.383700369 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.987935278 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.990516972 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.990959879 seconds)
  done (took 22.885839099 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.988430813 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.987886222 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.988031767 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.989245053 seconds)
  done (took 9.867541378 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.98593983 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.763080565 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.981962721 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.991160137 seconds)
  done (took 21.634583867 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.198262011 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.02956109 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.753778517 seconds)
  done (took 9.895047137 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.620276529 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.434331629 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.602094152 seconds)
  done (took 9.568552197 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.130019021 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.827868618 seconds)
  done (took 7.869178415 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.129326645 seconds)
  done (took 4.043206157 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.827036966 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.300693793 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.458483704 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.491832183 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.561680613 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.19699442 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.303664244 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.254336692 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.379782898 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.380450537 seconds)
  done (took 26.070608089 seconds)
done (took 151.150951433 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.381870886 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.336464571 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.065836546 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.302609687 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.07181524 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.068471668 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.248152484 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.278925159 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.009084387 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.997240739 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.293955471 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.067210759 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.196652355 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.334929577 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.196526771 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.334012979 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.055859024 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.387236003 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.799993164 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 3.941207803 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.251057102 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.987672827 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.141104671 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.995951303 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.055004651 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.013054088 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.472848305 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.33283612 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.950808877 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.477252465 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.012857317 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.096737173 seconds)
  done (took 171.068560581 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.956728872 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.986711555 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.986764347 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.986203946 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.19083916 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.988183587 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.988232308 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.987615379 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.250376954 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.238797807 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.986952743 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.18224604 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.985189827 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.986887688 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.987240923 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.986706867 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.358647726 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.97899506 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.986882672 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.987785989 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.992112828 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.077525513 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.99222951 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.088712699 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.372456552 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.987367835 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.986793326 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.986095807 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.986437871 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.987585761 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.987136902 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.988158578 seconds)
  done (took 211.341193448 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.916171277 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.98923358 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.987830353 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.987572853 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.988955539 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.990391261 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.989392746 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.989011197 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.645517904 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.642343997 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.988526166 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.988552566 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.992615397 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.989472701 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.989756769 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.989383593 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.987524063 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.94871367 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.991790166 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.984937593 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.99456729 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.698984765 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.990875701 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.712755675 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.989994245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.989872482 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.989085837 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.992935453 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.993393215 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.992526092 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.991279855 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.989310081 seconds)
  done (took 224.223907494 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.224567769 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.994536733 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 1.995778524 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.909635962 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 1.995141958 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.995694484 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.902945156 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.227024515 seconds)
  done (took 20.164846126 seconds)
done (took 628.723492219 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.322847756 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.707562805 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.129634904 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.021466284 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.257535842 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.05256305 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.01439199 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.081008102 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.654609123 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.086795897 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.405065589 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.022295409 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.6927851 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.037828171 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.127611839 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.07257046 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.379100212 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.662838911 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.145980234 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.68004297 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.207341862 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.951728621 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.094716212 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.699011332 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.416150658 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.97372572 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.997456544 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.381089105 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.021247982 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.244391383 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.661039082 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.224517144 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.025150015 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.014680793 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.073938823 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.058039652 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.17668467 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.021986582 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.127341755 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.757641221 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.666860105 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.540012899 seconds)
  done (took 104.80902584 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.00157966 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.001573591 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.000144406 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.002127981 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.009352538 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.001163055 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.000634239 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.002008104 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.002406361 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.000468939 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.002811062 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.009058051 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.00166967 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.009645879 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.999382887 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.0036125 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.001908596 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.010770386 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.003265681 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.001750085 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.002514156 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.003643022 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.997980473 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.00220085 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.002384763 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.003404341 seconds)
  done (took 54.007041152 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.998844028 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.153222961 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.291370499 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.027303376 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.000234982 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.001141243 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.028936327 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.007178232 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.001751232 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.000759216 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.091601677 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.006157541 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.011331393 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.285273056 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.024656162 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.999832789 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.996735988 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.00150307 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.156334563 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.017942677 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.029497322 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.008862536 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.030208721 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.016625103 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.000884194 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.999737155 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 1.998674135 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.410118635 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.01379987 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.094462284 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.041558768 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.034137958 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.348205452 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.29700411 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.06422574 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.008656306 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.002304687 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.141491783 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.008424814 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.000240702 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.030203302 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.011421996 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.288727532 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.502213887 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.016178297 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.001501244 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.400549231 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.151006329 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.04514249 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.011800452 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.294594529 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.028515609 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.001680949 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.003493967 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.036435735 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.012160827 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.002857569 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.23978238 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.014760759 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.029380865 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.011795303 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.003517615 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.170090907 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.009914786 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.15105205 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.011981718 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.007700074 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.003731244 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.288993493 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.028793554 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.495545737 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.020524953 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.002256482 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.0988597 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.157095319 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.427381205 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.016771206 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.172386931 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.368725234 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.039827922 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.011491037 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.389093579 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.039152812 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.014355197 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.002043098 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.001860112 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.002387155 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.04685656 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.028613621 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.42030177 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.499635263 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.260597497 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.038465503 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.018937451 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.005601691 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.243066959 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.010794308 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.003755433 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.284891086 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.526593432 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.023489965 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.011461961 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.48530377 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.021763647 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.031666553 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.013592612 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.298060835 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.033809095 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.047324432 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.002778819 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.009377332 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.006060996 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.032700368 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.012258995 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.004418974 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.481052448 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.15855468 seconds)
  done (took 247.709457304 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.006249504 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.998467795 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.003604899 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.000178177 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.00271578 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.006944741 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.00361576 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.004070238 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.005458889 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.00341607 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.004045917 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.004256877 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.006013603 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.008609154 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.421300315 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.00822296 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.472820681 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.007438442 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.005247197 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.004297572 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.594893052 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.011019185 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.009074892 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.004696229 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.005936834 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.006519109 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.016922246 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.051290762 seconds)
  done (took 171.608980083 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.009577629 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.077897517 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.023272864 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.055154407 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.022218145 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.007356089 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.029569277 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.028162322 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.010204054 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.008448648 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.006922196 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.035255738 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.012946333 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.151963844 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.038872279 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.032771897 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.083359473 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.011077726 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.008046956 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.00892772 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.057674343 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.023289341 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.036560369 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.063510168 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.025500053 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.057042017 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.023669792 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.009342737 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.009031648 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.113175343 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.026095283 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.036438244 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.041598496 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.027580099 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.101482557 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.100297244 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.088009048 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.032713329 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.013240704 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.00903035 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.010557173 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.009886501 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.057734955 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.025296681 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.010204923 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.101081396 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.025371854 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.008553599 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.030945235 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.009751749 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.023149739 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.022533586 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.038015227 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.111137839 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.053958777 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.035389533 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.033983105 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.025445742 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.009427048 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.086661016 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.013794232 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.102543438 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.027900591 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.011031069 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.013900648 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.015046222 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.058094337 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.047793209 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.08603631 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.015074192 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.0865232 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.062432626 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.025259653 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.012015031 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.012789449 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.059859092 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.103243582 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.062370113 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.073149588 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.050962736 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.017675024 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.011684851 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.011435384 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.040385868 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.018355284 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.09864275 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.104901386 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.015275335 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.012234837 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.009674418 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.012606374 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.03572971 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.064747685 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.05424906 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.095484835 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.041974665 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.044986109 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.017728732 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.024614429 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.012908705 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.042548977 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.017405563 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.024147648 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.344788256 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.048402106 seconds)
  done (took 216.386473458 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.387406249 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.056272246 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.079366112 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.29349697 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.394173426 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.06876212 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.050125946 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.066424012 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.072942698 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.170582281 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.114815367 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.112564113 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.046625518 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.035536883 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.057948135 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.068075154 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.092005332 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.370832837 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.151952672 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.749570755 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.050580358 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.340510771 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.338013265 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.412725955 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.095879589 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.434008753 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.689990646 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.144425226 seconds)
  done (took 65.884598734 seconds)
done (took 862.325417194 seconds)
SAVING RESULT...
DONE!
