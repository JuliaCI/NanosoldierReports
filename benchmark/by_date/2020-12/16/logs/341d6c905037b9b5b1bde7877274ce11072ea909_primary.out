cset: moving following pidspec: 11604
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.859008827 seconds)
loading group "shootout"... done (took 1.131957586 seconds)
loading group "string"... done (took 0.674404394 seconds)
loading group "linalg"... done (took 8.724050298 seconds)
loading group "parallel"... done (took 0.169528832 seconds)
loading group "find"... done (took 2.979382318 seconds)
loading group "tuple"... done (took 2.130265703 seconds)
loading group "union"... done (took 14.987363923 seconds)
loading group "dates"... done (took 1.45833377 seconds)
loading group "micro"... done (took 0.220712056 seconds)
loading group "simd"... done (took 4.806750579 seconds)
loading group "io"... done (took 1.091016617 seconds)
loading group "random"... done (took 9.619449686 seconds)
loading group "problem"... done (took 1.551175954 seconds)
loading group "array"... done (took 25.501334834 seconds)
loading group "misc"... done (took 1.913272184 seconds)
loading group "scalar"... done (took 43.941051716 seconds)
loading group "sort"... done (took 3.366602401 seconds)
loading group "sparse"... done (took 12.859293113 seconds)
loading group "collection"... done (took 18.92151706 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.42426541 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124963782 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129640438 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.115694907 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189018655 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123231902 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131912014 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.085716658 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.898490976 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.134797774 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116267478 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.431611239 seconds)
done (took 5.348124721 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.165737874 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.089600175 seconds)
    (2/2) benchmarking "String"...
    done (took 0.084325447 seconds)
  done (took 1.389999665 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.069977729 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.063010792 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067265899 seconds)
  done (took 1.417176021 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.064973591 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.133810573 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.065962093 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06706223 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.066600287 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.065486321 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.065713669 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066228244 seconds)
  done (took 1.753438449 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.070984247 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067339905 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065291009 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.067496191 seconds)
  done (took 1.492554879 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.063768145 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.120716466 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.064675323 seconds)
    (4/4) benchmarking "different"...
    done (took 0.064099906 seconds)
  done (took 1.531678701 seconds)
done (took 9.054197266 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.140626237 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.825597475 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.779225832 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.124568375 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.248313334 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.370034884 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.12352732 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.185595238 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.090230928 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075386474 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122479987 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.078596578 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.390811687 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.405394165 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071693615 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.172036649 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.64517236 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.085769018 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.134270426 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.471512294 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.072270663 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.087622028 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085836578 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.069680474 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.334190717 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155923155 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.658201456 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.095176352 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068431823 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.094634939 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.071663143 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078602591 seconds)
  done (took 10.665186433 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.091601969 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.089353894 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.068758663 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124664196 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094501822 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070238407 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075334028 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.067646254 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089949447 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.126338681 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.091822052 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099326007 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067164165 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069149528 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074210522 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.198243534 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.079584272 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081911168 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067669333 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081575091 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.107074858 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079269632 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078858753 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078295701 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133986358 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.171564354 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098490351 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099172087 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066932281 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079995998 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.114889151 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126904293 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066491744 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065095004 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120826256 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095663513 seconds)
  done (took 4.66415885 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892345711 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.0959642 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083786932 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.07483235 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107470029 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.115410336 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.112642496 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.122998367 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.123765951 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.109465524 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068955255 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152325779 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.672713667 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.172944554 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070077888 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.121374596 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.360462444 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06784131 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.07025852 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068547192 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071038773 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069777701 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.113735518 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066027845 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.180548719 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.586837749 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070061012 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069307806 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096175811 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063906017 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065253169 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.141794658 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092982374 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070706718 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.539913683 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065819047 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.063614204 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.202872766 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.095060676 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066841195 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.067854101 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079278624 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066329437 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10867807 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080561666 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.515820838 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070012067 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.59685747 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.226714268 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.073498009 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072383953 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.102169365 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.063982561 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067312685 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.868973625 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.146937885 seconds)
    (56/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.064150158 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.06671579 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.276159856 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068431934 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06834106 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068663083 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.103155902 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066936244 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068399637 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072614565 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096690983 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.874003002 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089300279 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096409893 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067182333 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.410089961 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.074492715 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06914583 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069642629 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.083795429 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.111834221 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066410146 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066451947 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112938316 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.096566219 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090368381 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.069913493 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067715176 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065967923 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.321813111 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.168377114 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.064723399 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066260344 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.479430296 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.063842372 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.065960681 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068004749 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.21309507 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.065878103 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064213518 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.065344117 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099909598 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068876891 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.69444041 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.067638882 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.488685359 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069261639 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.103762823 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122393356 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06768533 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.103309456 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.068354058 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065094156 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073485067 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.065494187 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064397952 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.064171519 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06895188 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065404454 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066069849 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068678718 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067936073 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067568163 seconds)
  done (took 23.250783821 seconds)
done (took 40.696005009 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.337864098 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.079388176 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.080222624 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080013988 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.080129357 seconds)
  done (took 1.926602903 seconds)
done (took 3.290462763 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133281181 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.075539642 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064279311 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101336861 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068185934 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102334195 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109040222 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105013047 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.068769156 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068799852 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068195977 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.106531526 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105765725 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068664016 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098475042 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.104703204 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068703083 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06391942 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068750785 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068416554 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068508061 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.063999401 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068403252 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068360161 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099970902 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.068822419 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.064146934 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09967778 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069269331 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099511346 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.068889989 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.068457747 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068748463 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100453054 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.06855011 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099575535 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064421664 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.0685417 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.068924485 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.068613954 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068612487 seconds)
  done (took 4.617939028 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0690985 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.081054921 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083336618 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06121797 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071015276 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.081791115 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061268502 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08136577 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.091351121 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082517545 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.202818535 seconds)
  done (took 2.285249248 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.068203367 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082540799 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083996045 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.0614272 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073032529 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082836298 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.061493981 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082592473 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085545609 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083835109 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084300785 seconds)
  done (took 2.147077255 seconds)
done (took 10.34142387 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.095323153 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.064811883 seconds)
  done (took 1.43846102 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.226489156 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.5012449 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.92747832 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.091397525 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071066154 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086120507 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.201103005 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067167602 seconds)
  done (took 7.641494822 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.099892484 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.067289557 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072376109 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.066577028 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.067343606 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06845191 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.068860823 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.06745065 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.067471797 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067316156 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.069680244 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068349162 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.066888461 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068090842 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068471073 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.067320389 seconds)
  done (took 2.513828471 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.102765862 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.06880237 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.098923448 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.061611717 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.071730873 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.062219719 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.070289765 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072143863 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.069636471 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.070670355 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072203127 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.070825272 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071456484 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.071157998 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.072715112 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.072505984 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072537213 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070505695 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.072244263 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.073398089 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.072524118 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.073288003 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073323751 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.07120759 seconds)
  done (took 3.172098072 seconds)
done (took 16.063044738 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.172831981 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075110377 seconds)
  done (took 1.535932664 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.066204023 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.067329638 seconds)
  done (took 1.439876615 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.071371731 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.059749587 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078407379 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070243718 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061036551 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.060488671 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077679936 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.061295205 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.060966714 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061074017 seconds)
  done (took 1.968337069 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.061056373 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.066967307 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066309172 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064172203 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.066892915 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.061858263 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.064816925 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062870052 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069574514 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061858086 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066662484 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084059857 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065819765 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08396237 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065610491 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065990845 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067507434 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064942407 seconds)
  done (took 2.519090406 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.059062544 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.060684542 seconds)
  done (took 1.434465528 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.062676973 seconds)
    (2/7) benchmarking "second"...
    done (took 0.060395788 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06386171 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063733841 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.061217414 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06067907 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.061558942 seconds)
  done (took 1.742791735 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.425515945 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122709558 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.346236106 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068304982 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076778785 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.25690327 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.062895021 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067731976 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068313613 seconds)
  done (took 2.848269762 seconds)
done (took 14.809700607 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.080089593 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182316599 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087940923 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.381311763 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091519749 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.066367061 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.112714145 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178751175 seconds)
done (took 2.515439459 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.274401117 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.232416897 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.407292535 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12482875 seconds)
  done (took 3.08441587 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.329926065 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078305814 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076564802 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066535814 seconds)
  done (took 1.880509577 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.062807577 seconds)
    (2/2) benchmarking "read"...
    done (took 0.070196061 seconds)
  done (took 1.456215281 seconds)
done (took 8.028650567 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.069567882 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060946442 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.091116404 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.067390067 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063929887 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.063261208 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06275785 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062788398 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064072546 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.061492727 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.064150188 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.064211898 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064338085 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063461484 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063410927 seconds)
    (16/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.061347674 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063783556 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.063404305 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063391752 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063483558 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.062962972 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063864805 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.062993227 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.063874645 seconds)
  done (took 2.907020926 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.077101004 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06491898 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.066514689 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.066083956 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066899219 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066517317 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066499004 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065128664 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.0667692 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.064956121 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066513346 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067435307 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.064719558 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.066981545 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065085107 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.066769125 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.0662082 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065191777 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065110935 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.066935264 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066697316 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065194135 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067101989 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066718503 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067471684 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067109326 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065395994 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.065706858 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066620913 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06697232 seconds)
  done (took 3.337458917 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.064674891 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057829539 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059696465 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.069273039 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059267349 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059901846 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060165614 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059210793 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059860365 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060902836 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060498719 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059740794 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060470554 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059495691 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059565758 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060186733 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064207664 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078892602 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.059743064 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.059221006 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.063746435 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.059320002 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.059205024 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.059467765 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.059903971 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.059350384 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.059282769 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060200305 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.059597036 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060900842 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.059273412 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063470912 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064616187 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.059670372 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069816516 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064012951 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.059772721 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064067816 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.060820557 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.05926546 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.059319107 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.059342586 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.059623882 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.059675495 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069785088 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060079409 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060412009 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060298546 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060138952 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.059425061 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.05948872 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.061695866 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.068982491 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061317278 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.059379778 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060665392 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.059526712 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.060305984 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060215634 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.059388095 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.059695142 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062969049 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061270044 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060125575 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079486937 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061283012 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069524729 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059281037 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.060267912 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.063158024 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.05994122 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077798576 seconds)
  done (took 5.786836213 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.069268685 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070173618 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078547332 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.069999142 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063628117 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060810377 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064525626 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060510612 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070516763 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065071318 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060935597 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064737471 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070692137 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065121512 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062736029 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070568289 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065150292 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063854616 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060853064 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065141834 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061948111 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064445422 seconds)
  done (took 2.798759889 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137045578 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065801619 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106165318 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069587464 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06821008 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069832872 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.06568066 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065630423 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066131475 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066078426 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066192237 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065780409 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068257384 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06637168 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066566772 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065962383 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065983438 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066317018 seconds)
  done (took 2.650663321 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.074787096 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065449692 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089492362 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065541601 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.065734851 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065467416 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069032654 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070265305 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065046012 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.065222631 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069515318 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065313178 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065004644 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06567729 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064981781 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.065527222 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064936425 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065743949 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069498171 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069311216 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068734122 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06931493 seconds)
  done (took 2.836635882 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075099042 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064179562 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080565194 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.06644506 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060174077 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059933659 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066051504 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065034566 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.065843471 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064204235 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06477772 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.059871125 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066733453 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064555254 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.066837037 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065238904 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063936564 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06470441 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064802454 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060062823 seconds)
  done (took 2.648937803 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069956042 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062326268 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062534618 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068091962 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06213187 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.06222075 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.068200942 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062662036 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06292177 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08453027 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062989383 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062674433 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.078992092 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06641066 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.062916841 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06820933 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.068282596 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.068160951 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062742241 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062647369 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084472777 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.062715674 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068400873 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062730643 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063258305 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.062810396 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062928253 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066417371 seconds)
  done (took 3.203961013 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.062813413 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.062794471 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.062993357 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063165131 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.062939554 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.063379143 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.062929096 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.063154512 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062767691 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063443108 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.063224966 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.062933771 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066033323 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.063010262 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.0628819 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063105345 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063198872 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.06342843 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063389594 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063126606 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062853367 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062706387 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.062794281 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063099319 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062950463 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062618474 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063026928 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062810234 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062516354 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063011106 seconds)
  done (took 3.239976942 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.070916153 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070928946 seconds)
  done (took 1.487100643 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.060035838 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075746837 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.059997563 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072387112 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068336415 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063728208 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068949401 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068329076 seconds)
  done (took 1.878423642 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.064610441 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092059222 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061683031 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.06193343 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065047625 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.127792122 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074538547 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073252474 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075721897 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063978093 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062217083 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074533613 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.06092499 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074697111 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062895462 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070683927 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069018669 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079586402 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074792749 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.059895661 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074097143 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062427748 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060239614 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.06233408 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.061534481 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.068278261 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077336467 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074063301 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07008556 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058888822 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080374959 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060000516 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061317748 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069940517 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.064656648 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060376803 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097643417 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.06107874 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065764612 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059668651 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073262038 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081328613 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.07553215 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078765177 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062391051 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062520921 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.059692555 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.062435775 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063737464 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069910589 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.060001534 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068127613 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06001301 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.061821066 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07113547 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.060521245 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.065699872 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070041328 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074038897 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071310924 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069300038 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076342698 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069779544 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068287465 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061475631 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080348633 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062008337 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073881037 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076001122 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.061863575 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074008634 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060093599 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.05904943 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060094696 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095027133 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062201086 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061567241 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060679667 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060219259 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062322128 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070190746 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066499218 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068307656 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064799684 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076898336 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070047708 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.06087017 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.067610501 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079204757 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064025268 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.060795775 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077469024 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.063887405 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.059750515 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078558763 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070414123 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062196606 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061247352 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.06374719 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07411416 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061697314 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059133368 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069123054 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062437486 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063260026 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064841112 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068415343 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060396384 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070614766 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.06546733 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062059951 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059043625 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064328299 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060847824 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058152445 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069496475 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059958933 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074540503 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066242306 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07436039 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.0748912 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070437823 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075730107 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059935417 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058542219 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077636922 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069259468 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060845496 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077415774 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058978142 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.072870968 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058807949 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.199937666 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.070067727 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.060841746 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063731743 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.061427726 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067051966 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062958225 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063023276 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067082684 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069744675 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073312401 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.061771874 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.069873148 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.060681824 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077171924 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071002358 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065165739 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064323029 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06113886 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072883658 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066897133 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070006144 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059942031 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060935028 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060542022 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070801841 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069917046 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062150468 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067966102 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064743525 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.06094148 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060970556 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061612142 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063784558 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0639617 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061342934 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068634436 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.069363728 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074529729 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067978241 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069620763 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059346945 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059439046 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061948238 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.0596071 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064573611 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.069766377 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07558424 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071819556 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081625048 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060219765 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.06987868 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061861028 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077606135 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074025721 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061452797 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065524252 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059502458 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062405469 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070538758 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072346447 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074615028 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075659062 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065080579 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064887808 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060292106 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076155101 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061101151 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069434507 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070114874 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065293499 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060687587 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062230339 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070046044 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065343119 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.060502999 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076073224 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.06648495 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.059951272 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075276463 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.060701227 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071296508 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060010532 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064064766 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.065707143 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.062261474 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.069993156 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076022107 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.059283747 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.060996487 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07650181 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062813496 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062199395 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068713924 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076153008 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065270738 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.068681364 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07121914 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070535482 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065179603 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.070119045 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.061165943 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070144103 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063623328 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.072542532 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.060430712 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078459207 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059315798 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075514269 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060522819 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071452739 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.060694703 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069955392 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061053513 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077423542 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062015601 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061046478 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072361983 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059010665 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070187905 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060114608 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064942235 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.06651342 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069409156 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061216819 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069819832 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.061307552 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.068083122 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064101796 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067477724 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068862566 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063716715 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058879859 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067884038 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070537781 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067622324 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060428714 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060769231 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.203025504 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070608579 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063423621 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063328957 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070156087 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066457856 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066991118 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062885276 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062766526 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06232899 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069298724 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070308526 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.078555513 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069185725 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068302308 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069985847 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059990754 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076521491 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060447307 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071132323 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059332202 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066703642 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.07021978 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.060567413 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079917633 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061805928 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068290863 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073061669 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0691199 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063822665 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078603195 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.063356585 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070480638 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069311544 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065241317 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067341227 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062766111 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068926726 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070151541 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071387641 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.061605831 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068289939 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069557177 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061885865 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.067995621 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062154788 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.069036907 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062483072 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.059412697 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065170071 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.072077915 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065586311 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065648286 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060836266 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.05957917 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061203126 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.067751375 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065376275 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069438131 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076482153 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.059748935 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061415626 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060149012 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064372964 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079359296 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070265027 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068657528 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.065473569 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.059524441 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062663877 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062919464 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.060769865 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.064359759 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.059816701 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.06040895 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071347288 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06254934 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065207106 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060791439 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061798073 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.070382247 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.065563941 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061373698 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067436 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060243433 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.065697793 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.059600498 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062303805 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065102458 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.05971215 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.063905396 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071510909 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077498382 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.0674134 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.069462364 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062375125 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.068622445 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076696173 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068381266 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061742071 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070333205 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.05978579 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079855022 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.069998268 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069424508 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070284088 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061406527 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077461562 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.0648366 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070805015 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075876491 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061639807 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06750664 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060017475 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076306448 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064737136 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059601984 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068605935 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068004106 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066136347 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.072526925 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060949184 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.06833351 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065243893 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063886169 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061673415 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061358079 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068891895 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.075840275 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060469314 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.063926089 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067755382 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068192208 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064079627 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071470115 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068275942 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060922038 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061049933 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.210515642 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.06098142 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074396046 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062196222 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066349744 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.065684802 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06045826 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.068009063 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077684697 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07072736 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070610321 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.060229948 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.059260144 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078552526 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064110527 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063995042 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068963539 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070028267 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07303319 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070386843 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078083448 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061160692 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066251917 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073130117 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061219272 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.060180381 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064240585 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062328642 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.069798148 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.070463376 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.067917217 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062069024 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.066728007 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.07412232 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.061727372 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.065172096 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.06546704 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.061165449 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.070774012 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.068503095 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.072347072 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.061922806 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.059840631 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.063959757 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.069396102 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.06793941 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.069142238 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061261739 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.066996401 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074055294 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.067831894 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06334367 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.059850404 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063744648 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070007237 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.065451402 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.059987388 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.065172967 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.064249383 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.067676565 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070048889 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065043625 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06047902 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.077813893 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069005878 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.069939339 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.062387619 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.062627559 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061121995 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060235249 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072299974 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060136042 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062661004 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065523609 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.062454145 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078497557 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069074008 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076817311 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061825355 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065294771 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060485251 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070203269 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065004097 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060692502 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071555782 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.059677584 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076432606 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.072690171 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066534638 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060084953 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065800831 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068804881 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075823362 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070205235 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069487675 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064495478 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07067726 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.06237982 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071870786 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060253932 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059502519 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071005556 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06954775 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073399605 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060326584 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071032283 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062427767 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068719003 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068712574 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061918449 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062460859 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062654025 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069810004 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064642056 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070077443 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065262793 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077489503 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061515941 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07212366 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070019788 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071214039 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074406757 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072732065 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068170718 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060749202 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067459556 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.067986905 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061034549 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.064843854 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063243064 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081230831 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061307574 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.060886306 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073819872 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.065592325 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.059286807 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.065489558 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.209521759 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071644544 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062784115 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072011287 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.06539447 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062060671 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.065466261 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.065299838 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.059375083 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.059847967 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060329145 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07042301 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064789537 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060851983 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079795704 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.061832575 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069240688 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071819166 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.066688994 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06202824 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059305915 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.061322157 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073714272 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075860322 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.063645631 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069661815 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.062078121 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.069891812 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.059451195 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.069211198 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.068972575 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069268496 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060223881 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061254806 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076140911 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076666217 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.065125052 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.069918207 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.069596198 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062393592 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082518029 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.06950377 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.06170486 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.071271712 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063031493 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.059537229 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.059044874 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.062029956 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.071679171 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.059546937 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.062699674 seconds)
  done (took 41.785746691 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.096399518 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060649715 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.059867511 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.059811021 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.068421496 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061342361 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060086267 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061293581 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.061220812 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062840806 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.060150504 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063372078 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.06704401 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073896106 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069329639 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064618592 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.060079009 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061077138 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.060325168 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061093917 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.067103861 seconds)
  done (took 2.819930636 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.062261968 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062853919 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064298458 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064673021 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063493437 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060081126 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064781689 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060389893 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065102589 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061033362 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065018259 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060454834 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.060922539 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.060882186 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060438577 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061806646 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065360168 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064411531 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060184613 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064542548 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061704746 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.064641489 seconds)
  done (took 2.821109115 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06041405 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.06044077 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.068886414 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.059559916 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.059131426 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.063255652 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.059667583 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063998019 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.064076132 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.064482233 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068876711 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.060555546 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.059242238 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.065563981 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.05938833 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.060823152 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103941651 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061138007 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.061041271 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.059665073 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062796586 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069773293 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.059431545 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.060235999 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.064541059 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.063150391 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.059544005 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06240134 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.060920933 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.064230146 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.06121446 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.059293142 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068944547 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.068366944 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.064400554 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.064438012 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061596162 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06103255 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.059689549 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.059890069 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068735749 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.061215078 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059711767 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.061531249 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068962521 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.060098034 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.05977879 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.069151846 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.059521802 seconds)
  done (took 4.552400146 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.069080203 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113536113 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.065933947 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094165998 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073328102 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066579879 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.065794741 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095114765 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.061230253 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.061646645 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074417051 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074445517 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062972506 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.064715475 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.0657514 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062826321 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063671943 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062102904 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065454413 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.062540636 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.065877323 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067144172 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073114422 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07360116 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064017183 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062307125 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.062464046 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.064218952 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.073078532 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066502432 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.064404547 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065455991 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.073728866 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068402029 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062563066 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.062626561 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074248117 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.06329602 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063661424 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060926477 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.062565833 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.064271005 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067444449 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074687609 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063179285 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068288989 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063541509 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060823801 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074071663 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063121477 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.066915472 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.074971041 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064134057 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.063717867 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064543013 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073950029 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063530223 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.061508622 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06321526 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073630729 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.061164221 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063838955 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077418731 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.062718835 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066194471 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074175508 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068266914 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.063898239 seconds)
  done (took 6.215594992 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067752849 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.094850847 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.076221713 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.076192899 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070835697 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071278446 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.070917742 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.070746916 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070908725 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074195956 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.070984079 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.106119926 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066968813 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.072622014 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07089379 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070915645 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.070862067 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071259392 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.070721733 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07072665 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070723687 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.076180619 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070851738 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.075883465 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073640684 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.067562927 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071142777 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.070800105 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076229159 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.070787309 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073371072 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07131963 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071203299 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.0763905 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073296671 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07069755 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.061425283 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070801734 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071702552 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.070755679 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.067356226 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.076160744 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070978294 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.067632626 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071106335 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.070881722 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076860929 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.073644365 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.073118011 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074243373 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071232022 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076495761 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070839778 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071018261 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.077063984 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078876956 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.076473933 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.076568156 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071403727 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076798674 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.076657001 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078742568 seconds)
  done (took 6.028824435 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.071785899 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066589478 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07980729 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.059944473 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.060067951 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070074346 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.059878556 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.059882094 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067213137 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.067581086 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06931488 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070162124 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071789335 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068988744 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.069841914 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072156661 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069652224 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069779822 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06708196 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069481438 seconds)
  done (took 2.837278938 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.073232932 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.079354479 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.066116451 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069496962 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06559145 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069491723 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.064850875 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065678003 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066422211 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066409625 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071086295 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070689696 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066374113 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069659232 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.070631296 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069411371 seconds)
  done (took 2.567001632 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06234709 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.067811894 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067173639 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061526542 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.063453362 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.060940135 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.061428752 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059703784 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062837648 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.074735583 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061361105 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.064202057 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061676558 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.060728695 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06107362 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.063999309 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063060863 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06105359 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.061687937 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.065553079 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069942818 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062335842 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.063747394 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061189483 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.063756609 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069563651 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.062471626 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.063689499 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.061430747 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.063958594 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.063845909 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068657026 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06337141 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.061668887 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06017815 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061128393 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.061622867 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064150719 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.064162022 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.061655568 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059716547 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.066626195 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.061878888 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.061903756 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.062809664 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063948762 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063380833 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.066908367 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.061752827 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.06356076 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061512889 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062947732 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06185626 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.068681901 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063943473 seconds)
  done (took 4.952731822 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075774924 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065225366 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059922632 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059725948 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.065040819 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.065745931 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065305894 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.06546563 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065957367 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060019357 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066190949 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.065118317 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065743813 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065654718 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066214326 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065814957 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.059498093 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.065174875 seconds)
  done (took 2.64438999 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.065036003 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065884201 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064719434 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.061712043 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.061781565 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067000141 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060251669 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061904915 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061490612 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.062305972 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.062158558 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.061503903 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061910892 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.061463605 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066288913 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062119468 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.061765431 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060621975 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.062283074 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.060237185 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067352722 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060355951 seconds)
  done (took 2.849159911 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.086180644 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.084065787 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.127445882 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079532695 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.0882782 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.071343522 seconds)
  done (took 2.005662791 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09179382 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096267905 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065041883 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066052641 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070068098 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068371196 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068432261 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068434352 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071915893 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072778544 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068559013 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072381085 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072029983 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074175031 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070294402 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07053233 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068399977 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068689872 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.065679431 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07647646 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068563164 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07256709 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068436375 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068646945 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068720714 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073997274 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072131362 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072761433 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068571551 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072218302 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070273272 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06859063 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072501077 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07259492 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06528287 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071957958 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068416562 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076937506 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070486636 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074142009 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064866629 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070595778 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072123382 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072377169 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072866528 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068957319 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072139007 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068785166 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069179094 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078305235 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071109043 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07458593 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070954884 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072936199 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072613619 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078153957 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07285408 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074569005 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070408898 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072610091 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074776052 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070514256 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074302757 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07296395 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07058035 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074554719 seconds)
  done (took 6.216660636 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101334006 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.065253206 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068549206 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072503397 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074099855 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068800062 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068916993 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068922398 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.06911277 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06599144 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104737162 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069066209 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074634025 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077303937 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06912344 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068769681 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069153649 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074564576 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066117759 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077912148 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068810687 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074179199 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07394255 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074491076 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072732667 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070685728 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068674567 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068704681 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068737046 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068653928 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072461876 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068698271 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074342379 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065692077 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074195118 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069402212 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068622126 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071996327 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068605369 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070906631 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074152005 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076761261 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068544434 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068723446 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072677441 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068803833 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069036664 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065870849 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068834604 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065765957 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073060519 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073008756 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072974162 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074902052 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06883703 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068884193 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069110466 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069050294 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069124446 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070936985 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074475804 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069184864 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078215337 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069050456 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069342469 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074797445 seconds)
  done (took 6.228277718 seconds)
done (took 128.627452976 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.215942509 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.187303822 seconds)
  done (took 1.859036202 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.072544524 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.165479381 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.072580265 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.073490591 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108289368 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.104946326 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073407048 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.071264018 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.073986649 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.071647542 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139578457 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073722451 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.071230984 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.071440748 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.07109631 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07109505 seconds)
  done (took 2.86100196 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.105922371 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185592193 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.101713091 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.069308707 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.152305589 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.075981237 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071148338 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076174014 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076550949 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.069274294 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.106934317 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.082804354 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07502106 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.075877958 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071389836 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075028751 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076389336 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.076506748 seconds)
  done (took 3.110462227 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.101199522 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.092007486 seconds)
  done (took 1.681801255 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155184022 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.102561846 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.143231022 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.343161855 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.137065727 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.136051483 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.1403028 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.135196165 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107940262 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.131667716 seconds)
  done (took 3.012054689 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.103205824 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.105125681 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.310643151 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103128781 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.081776745 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.076737867 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.074237996 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.079873751 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.074149131 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.075647179 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.122118621 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.074363665 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07166259 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124661194 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.099171233 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.106564741 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.070237403 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078000276 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078896154 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069856705 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.075487609 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.07896771 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.17832339 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077884272 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100090979 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.074957897 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.076816644 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.073423011 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07315911 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.077719267 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.07837517 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099770155 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077861985 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.081541657 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.07651309 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.09706641 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070625667 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.09878414 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074102984 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.07128552 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.074207822 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.078594887 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07148225 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.078106511 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.074632475 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076449313 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079686272 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069828516 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074464202 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073394511 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071242513 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075817895 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.075304445 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.077011253 seconds)
  done (took 6.239600305 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.104742711 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106021435 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067808258 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.112811069 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.104953577 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069541151 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.104943207 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.100467299 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108508849 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06890923 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068056324 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068718471 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076134008 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.081036031 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117377337 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.105492042 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069416506 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069446865 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.107033493 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107062131 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067980886 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101333605 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.099898776 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106860694 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.066805757 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069152028 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.067571455 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.068136257 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073453342 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.074848061 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067906611 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075974758 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08509268 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07518079 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067353607 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067323824 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067780104 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075568283 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075669605 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.075858486 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075200439 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067053063 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067396622 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068214356 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069049701 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067385376 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074329514 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.075506028 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.074421215 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067752767 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.068149904 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067526708 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068196093 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074823733 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074147793 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076545195 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075669669 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.067840372 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067745913 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069461384 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077285149 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077157018 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076458317 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068922798 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076940386 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067769794 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078314323 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082099805 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.068263487 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068656365 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068089939 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06801203 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068729472 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074357591 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074416291 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068748843 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068256668 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.067769512 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076895772 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.074320527 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067868058 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.073522636 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067466477 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.06806548 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068474458 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068417805 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.073930976 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.075887662 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069183323 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068089167 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068260408 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068152233 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067316479 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074200935 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075174403 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.075222614 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074585123 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068400207 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.07454056 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074859764 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06850089 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074135446 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067736077 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068000525 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067706248 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073636597 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072501324 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075192336 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067321551 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066887266 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073091708 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075370006 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06715838 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072773259 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075394813 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.212733099 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.067051528 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079185932 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06842646 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078823114 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068659144 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077900115 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068914046 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074827461 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068369894 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.06722424 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067790561 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.074742494 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069040343 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068130999 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068546792 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067616363 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075061962 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078033235 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069170912 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074745809 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074629897 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.06874522 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.074816682 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068456241 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07560233 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068699819 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.068495646 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067412672 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077627435 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068253587 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.067858665 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.067970813 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076794771 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068051075 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076644824 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073862594 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067100045 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081030814 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.075187794 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074293203 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077195688 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069123095 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068013869 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067856115 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07110859 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.073622674 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075005425 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068326134 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067789845 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073869853 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.0778154 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067692196 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074061683 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07440432 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074655928 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06875212 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068423348 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078047296 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077537279 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.074697731 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.074489254 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07572041 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068590695 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074249104 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074782516 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068141058 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082235033 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068738374 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079178279 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075177043 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074025115 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075379067 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076530956 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077337424 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077625608 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079476558 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068295532 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068031874 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.074954823 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068458289 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067742974 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074405425 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.068236867 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068613162 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080308325 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066479327 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077283603 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068144635 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076210508 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067835469 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068745325 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080711 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06878092 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068609968 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074405446 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.068148596 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07424562 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078351976 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073054065 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066339925 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068059072 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074935528 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075853445 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068495075 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067749044 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068202085 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073252685 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.073302046 seconds)
  done (took 18.243258763 seconds)
done (took 38.505914846 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.167192549 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.114552018 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212669471 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.19896978 seconds)
  done (took 2.283076108 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.098086882 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.064408894 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.080825275 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.090517455 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.064588815 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.0753735 seconds)
  done (took 2.008274827 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.198101579 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175054655 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.244556631 seconds)
  done (took 2.145226639 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.364355327 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.151788429 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.216325845 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.501005926 seconds)
  done (took 2.866317077 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.109990131 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.10036797 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.077435136 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.112352847 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.085729461 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.061846922 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.134337904 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068882508 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.100721192 seconds)
  done (took 2.444975948 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140312655 seconds)
done (took 13.441053263 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.128420075 seconds)
    (2/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.287210274 seconds)
    (3/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.24534086 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.2175289 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.162984795 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.257742696 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.323796426 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089918802 seconds)
    (9/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.17132008 seconds)
    (10/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.223640879 seconds)
    (11/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.105884464 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165044992 seconds)
    (13/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073677035 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.094438646 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.076515189 seconds)
    (16/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077493766 seconds)
    (17/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.219473236 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076054215 seconds)
    (19/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073653682 seconds)
    (20/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.260721844 seconds)
    (21/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074396344 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.1267313 seconds)
    (23/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.075647795 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.07658254 seconds)
    (25/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.205607469 seconds)
    (26/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.063525876 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077505292 seconds)
    (28/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.223308227 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.127290451 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.087668153 seconds)
    (31/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.07567556 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.232335756 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.154013163 seconds)
    (34/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.144419917 seconds)
    (35/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066126643 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.091189869 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073419181 seconds)
    (38/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.101781486 seconds)
    (39/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.109709947 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.142003741 seconds)
    (41/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.177568116 seconds)
    (42/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.19386016 seconds)
    (43/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.172101486 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076308857 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075989086 seconds)
    (46/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.228884214 seconds)
    (47/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.072873282 seconds)
    (48/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.077728568 seconds)
    (49/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.17904337 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.123696491 seconds)
    (51/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.073762137 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.078445753 seconds)
    (53/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.24169724 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.149728713 seconds)
    (55/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073027898 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.229815554 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.088573227 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177357871 seconds)
    (59/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092838105 seconds)
    (60/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.080424622 seconds)
    (61/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.153319853 seconds)
    (62/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.171632719 seconds)
    (63/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.082644574 seconds)
    (64/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.138329897 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.074148498 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065939736 seconds)
    (67/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.084051157 seconds)
    (68/341) benchmarking ("sort", Float32, false)...
    done (took 0.136054322 seconds)
    (69/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067355541 seconds)
    (70/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.080469312 seconds)
    (71/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.065485304 seconds)
    (72/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075512079 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.07296848 seconds)
    (74/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.064887041 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.090517371 seconds)
    (76/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.220438372 seconds)
    (77/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.142156066 seconds)
    (78/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145507101 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.066365611 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092143714 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.237606452 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086148295 seconds)
    (83/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19916482 seconds)
    (84/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.084717168 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.090152009 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075766383 seconds)
    (87/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.171791969 seconds)
    (88/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.076093362 seconds)
    (89/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.158792333 seconds)
    (90/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.188745794 seconds)
    (91/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.07816143 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.164001564 seconds)
    (93/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.07435171 seconds)
    (94/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070576519 seconds)
    (95/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.225464164 seconds)
    (96/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.077606445 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065197298 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133157539 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.08376468 seconds)
    (100/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.066233733 seconds)
    (101/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.158792279 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.088613012 seconds)
    (103/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065024005 seconds)
    (104/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067125716 seconds)
    (105/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.067384747 seconds)
    (106/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.075914148 seconds)
    (107/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066165502 seconds)
    (108/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064633383 seconds)
    (109/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064835257 seconds)
    (110/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069859059 seconds)
    (111/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.06593252 seconds)
    (112/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.065354827 seconds)
    (113/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064947602 seconds)
    (114/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179751107 seconds)
    (115/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087793325 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.064795889 seconds)
    (117/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.064259536 seconds)
    (118/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072999495 seconds)
    (119/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067687368 seconds)
    (120/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.07300093 seconds)
    (121/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.068633051 seconds)
    (122/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228597462 seconds)
    (123/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.072983579 seconds)
    (124/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072703105 seconds)
    (125/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.065591462 seconds)
    (126/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.073995483 seconds)
    (127/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072098861 seconds)
    (128/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089770531 seconds)
    (129/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.189452685 seconds)
    (130/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.076142223 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.086670225 seconds)
    (132/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.072048202 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116998873 seconds)
    (134/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.197463311 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.064680091 seconds)
    (136/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065746545 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.146787735 seconds)
    (138/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.064564048 seconds)
    (139/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.074749117 seconds)
    (140/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.068994689 seconds)
    (141/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.063719376 seconds)
    (142/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.137125313 seconds)
    (143/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.181304833 seconds)
    (144/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.07831318 seconds)
    (145/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.065284313 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150420548 seconds)
    (147/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.165200098 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074670871 seconds)
    (149/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064852748 seconds)
    (150/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.087738251 seconds)
    (151/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.151483851 seconds)
    (152/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.071320377 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072629133 seconds)
    (154/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163710165 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.074288071 seconds)
    (156/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.072096924 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.074759958 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15394276 seconds)
    (159/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.073260802 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143147488 seconds)
    (161/341) benchmarking ("sort", Int8, false)...
    done (took 0.150434971 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.076524711 seconds)
    (163/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.064860578 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.133922063 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.075179774 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 0.143986644 seconds)
    (167/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.137304231 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125212355 seconds)
    (169/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.21537008 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065345357 seconds)
    (171/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064967946 seconds)
    (172/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.176204045 seconds)
    (173/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.066845388 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071876325 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.074353653 seconds)
    (176/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.198529451 seconds)
    (177/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.065060957 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 0.065595179 seconds)
    (179/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071359216 seconds)
    (180/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064995415 seconds)
    (181/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.141131131 seconds)
    (182/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.064911662 seconds)
    (183/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077697347 seconds)
    (184/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.187487296 seconds)
    (185/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.081952986 seconds)
    (186/341) benchmarking ("sort", Float64, false)...
    done (took 0.134772067 seconds)
    (187/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.074855835 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.1523811 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090182227 seconds)
    (190/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.239104026 seconds)
    (191/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.084669167 seconds)
    (192/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069165032 seconds)
    (193/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.064799158 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.152145377 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083967659 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067852844 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074007601 seconds)
    (198/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065924674 seconds)
    (199/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074416662 seconds)
    (200/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.066591148 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073718664 seconds)
    (202/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.065099106 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.152689313 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.063169443 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.064531206 seconds)
    (206/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.06336249 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.156226091 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.065243334 seconds)
    (209/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.065465598 seconds)
    (210/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064761675 seconds)
    (211/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064821471 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.146633276 seconds)
    (213/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.144072619 seconds)
    (214/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.204688012 seconds)
    (215/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.069688207 seconds)
    (216/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072186929 seconds)
    (217/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06681565 seconds)
    (218/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092823038 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064564911 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.063178461 seconds)
    (221/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.065377399 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.064580171 seconds)
    (223/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.065337388 seconds)
    (224/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064807067 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073002569 seconds)
    (226/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171533864 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065480798 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072404453 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121978489 seconds)
    (230/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064876445 seconds)
    (231/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.081839559 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08465685 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067086818 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11122074 seconds)
    (235/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.165613963 seconds)
    (236/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065778006 seconds)
    (237/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.065608071 seconds)
    (238/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.068891947 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.063991591 seconds)
    (240/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.065521554 seconds)
    (241/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065863127 seconds)
    (242/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069269545 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.065230477 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075022824 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.076997337 seconds)
    (246/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.06615866 seconds)
    (247/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.17185078 seconds)
    (248/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196390658 seconds)
    (249/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.066333267 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.073050803 seconds)
    (251/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.066102732 seconds)
    (252/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.06914016 seconds)
    (253/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.067115054 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.07220776 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069085826 seconds)
    (256/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.067410701 seconds)
    (257/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065568795 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063462524 seconds)
    (259/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065316838 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065218045 seconds)
    (261/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.145376555 seconds)
    (262/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065339107 seconds)
    (263/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.068859028 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.083123319 seconds)
    (265/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180805991 seconds)
    (266/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.065525946 seconds)
    (267/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07238933 seconds)
    (268/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.082351337 seconds)
    (269/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.066352524 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.085935451 seconds)
    (271/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.065984309 seconds)
    (272/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.071825988 seconds)
    (273/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.172627941 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.090780359 seconds)
    (275/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065110293 seconds)
    (276/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092546791 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.092089469 seconds)
    (278/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068001645 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.153008734 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.091033227 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.064765093 seconds)
    (282/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065618144 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.1333401 seconds)
    (284/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065517231 seconds)
    (285/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.064496483 seconds)
    (286/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067134785 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.063191682 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.065930149 seconds)
    (289/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06585808 seconds)
    (290/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065391236 seconds)
    (291/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.066892419 seconds)
    (292/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.066221649 seconds)
    (293/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065001842 seconds)
    (294/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07345958 seconds)
    (295/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065613662 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.150153329 seconds)
    (297/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.066328641 seconds)
    (298/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066211448 seconds)
    (299/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.066079544 seconds)
    (300/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.072736806 seconds)
    (301/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.065289936 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143107455 seconds)
    (303/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064964072 seconds)
    (304/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.06378752 seconds)
    (305/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067385114 seconds)
    (306/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065280954 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.064560563 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.076397092 seconds)
    (309/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.062601078 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.083675626 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064194684 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.162437741 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064883779 seconds)
    (314/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064502398 seconds)
    (315/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.129749492 seconds)
    (316/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.06633766 seconds)
    (317/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065344488 seconds)
    (318/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.06390269 seconds)
    (319/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089216948 seconds)
    (320/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.08313007 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.068936379 seconds)
    (322/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.064787394 seconds)
    (323/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.239154099 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.066506824 seconds)
    (325/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.069876667 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078933746 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.174391649 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.067046192 seconds)
    (329/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067458567 seconds)
    (330/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080590319 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065563445 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069845942 seconds)
    (333/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066023602 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.066548526 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089519563 seconds)
    (336/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065383152 seconds)
    (337/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266708446 seconds)
    (338/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069603048 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065224011 seconds)
    (340/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.06509753 seconds)
    (341/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.065935649 seconds)
  done (took 36.891021955 seconds)
done (took 38.442142046 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089080506 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.079639763 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.07803547 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.074807738 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078286888 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076722127 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078065114 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.07564819 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.076728964 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.076501444 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.076550503 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.064156196 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072911728 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080859503 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.073744289 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.080873985 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.077661462 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.080397466 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.065177902 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.079332224 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.093121107 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076614741 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.073266327 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.079000998 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064802673 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.074561376 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089557916 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.086492261 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.072117268 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074987448 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.072351518 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084012424 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.072558912 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071556984 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.074634265 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.071060127 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074926959 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071799149 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.088976685 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.070921105 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064983091 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.077663093 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072336888 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.073354715 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.073564425 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076903112 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.070238933 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.07883127 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.06500967 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.076573232 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089437077 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070604992 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.071863109 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07376868 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.070483721 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074600865 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072051996 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.076555 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.070364772 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.076734832 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.076420617 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074089685 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064422454 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.073816589 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071961272 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.072204207 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063378907 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069966493 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064173301 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.065097463 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063702365 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074205924 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071561403 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069502655 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.064053138 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064651893 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.064161964 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.077003695 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.070599188 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074217518 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.065379918 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.070198744 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069614941 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064924662 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07032021 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076136804 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063489714 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065068524 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.064267407 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.07984929 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.07134136 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064386133 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076518153 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070177093 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070118552 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064515054 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063761059 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070263778 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072942416 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064968419 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06371549 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070415384 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069916998 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074012908 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065221183 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070060292 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070193378 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063329279 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073474972 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.071814428 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073850853 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.078116157 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073706469 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.077241425 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065133646 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063769766 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074727804 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.06518253 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070190321 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.072387034 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.069873861 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073160665 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.065324108 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.063708115 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070126487 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.071107731 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.065218902 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.065106095 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.064891933 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.074813174 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.071716069 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.063598346 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.064348131 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.073741666 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.074014362 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.063411451 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.063525056 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.073697123 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.064135822 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.070139724 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.069817985 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072431459 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.063466857 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.064011921 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.063293156 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.063439602 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.063397588 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068880891 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069479213 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.064685623 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072480898 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.22015089 seconds)
done (took 12.70525658 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.065578576 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10893027 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.080342899 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082400154 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078555029 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.066334784 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.06978232 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084905844 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.06918091 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.090696315 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.093487308 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.087353172 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097031417 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.064256151 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.065230573 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.06602152 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.063798393 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077603975 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082743208 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08923954 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.102248734 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.065061683 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081691383 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085831303 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080093771 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083809773 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066725454 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.066337032 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.068665456 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084767409 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.091386676 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.065090555 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.066254699 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084156018 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081236234 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.07379594 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065906657 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.072065359 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06902912 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.065117723 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.067302007 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083922243 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072777553 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072694559 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.06640048 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.066534589 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.065785603 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072901228 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083599322 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.071028743 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.078902406 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.085187215 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.067509853 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066149799 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.064172279 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.0733234 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.065797085 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.066158115 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.066116595 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.065773202 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065940753 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.068264564 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070984041 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.072096007 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.069014094 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07284866 seconds)
  done (took 6.55644784 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.080034808 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.089755011 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.079684971 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.081068209 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.065181033 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.065821749 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.066234806 seconds)
  done (took 2.191795255 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064690269 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.071941706 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.078311628 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.078479724 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.087853917 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.075998102 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065825978 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.098109621 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064694392 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.074782989 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.081975427 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.079686343 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.069389911 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078226261 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.0660903 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.078513942 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.066205516 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072986767 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.073862994 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080077481 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07007236 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096407662 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080243209 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066331547 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080040402 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.073877028 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067952155 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066606208 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066262471 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065376826 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065260973 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088514338 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.072974689 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.078084144 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066175456 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064842043 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.070377682 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066715683 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.069707197 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.074760745 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.069410091 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.065644665 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.066208204 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065551715 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066675193 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.070658579 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066663855 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065636061 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.06491265 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.073830007 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064593961 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.072199159 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067925394 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070714988 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.070870646 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07056548 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.073197787 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065870795 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.073030038 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.07180926 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06544599 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078651038 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077396656 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.069582358 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078036574 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074362924 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.072485144 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.069471092 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065143972 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.064947745 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066047031 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.077849994 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.06910731 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.067817942 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.066264293 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.070628584 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070014454 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.081425248 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.081960077 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079470733 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.067878394 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.065663313 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.069782757 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.081200038 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070712239 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.065982079 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.066933855 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.065168815 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.070728457 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.065962313 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.070689585 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.065767559 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.072473626 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068197464 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.067916954 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074328161 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.065703233 seconds)
  done (took 8.600509722 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.066937151 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.066761523 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.066854652 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.066407366 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.066789782 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.066595869 seconds)
  done (took 2.09566848 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.087525951 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.064775158 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.075861859 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.064520113 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086189059 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.070733018 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.07137077 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068417381 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.082714387 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076823926 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.072756795 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.07559261 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.075905838 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.068168461 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.072464785 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067146781 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.072287813 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068775999 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076030721 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068121401 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08258788 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.068248868 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068189662 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.078399682 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.069968249 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06686519 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.066826381 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076613312 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.075826895 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.068420382 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067788804 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.069524832 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074668997 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.068146892 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.072902662 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07488217 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.065672413 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.071571214 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068419004 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.069088185 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.074799423 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068479157 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.068322098 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.071682174 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067876576 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074764695 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.072307402 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070242411 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.07304249 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071714514 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072158695 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.067066269 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.069227001 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.071793649 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075259617 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068287779 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.071874951 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.072612153 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067853219 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074949457 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.0662953 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.0695014 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068173495 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068953307 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071173011 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071779948 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.074652369 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068408464 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06850191 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.065882321 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072040735 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.065981195 seconds)
  done (took 6.805899078 seconds)
done (took 27.895438679 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544170124 seconds)
  done (took 2.182563874 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.604339413 seconds)
  done (took 2.279170303 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.07219515 seconds)
  done (took 9.744332799 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.350052485 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.409213794 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.735790361 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.132576041 seconds)
  done (took 3.344327246 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754000069 seconds)
  done (took 2.441694777 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.227497059 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.223142982 seconds)
  done (took 2.146977248 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.332402521 seconds)
  done (took 2.011725278 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.157444999 seconds)
  done (took 2.831250262 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229626665 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.162643812 seconds)
  done (took 2.078771295 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.540276206 seconds)
  done (took 2.221690175 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.275903879 seconds)
  done (took 5.962913281 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230866018 seconds)
  done (took 1.956482827 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230776833 seconds)
  done (took 1.920125372 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.007211979 seconds)
  done (took 3.689393305 seconds)
done (took 46.49898181 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.08187948 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086671622 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087086692 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081874984 seconds)
  done (took 1.99730156 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.072254729 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.069598479 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.073385024 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.073289758 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071170653 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.071923026 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.07215454 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070250664 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.07123598 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.069898778 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.06831803 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.070116229 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.072827535 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.069505156 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07253858 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.073846979 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.0698951 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.069609308 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.072488953 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.069709084 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.072338012 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.069887843 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.06800032 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.069393008 seconds)
  done (took 3.389666779 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.076552178 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.071763625 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.075491878 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071177293 seconds)
  done (took 1.985903433 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.07469515 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.075847914 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.085271142 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.090692424 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07560265 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.077015522 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.083636833 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.084119446 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.065173292 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.087067894 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.068055725 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.066460039 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.066456006 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.085786154 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.083143587 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.06202667 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.063457186 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.077040737 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.0764075 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.078956881 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.068959751 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.065113678 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.075782402 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.076646479 seconds)
  done (took 3.504146247 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080387386 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.064805445 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081883086 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.091034338 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.092362093 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.064821028 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.079923581 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093234757 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128963853 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.065291297 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.071731746 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06499302 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105690222 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.065366073 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.080927825 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108836873 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112160874 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.069052352 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100330324 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.064891943 seconds)
  done (took 3.386698884 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.073844549 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.06905641 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069802635 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.065270761 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.076504934 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073311157 seconds)
  done (took 2.134598891 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.066517308 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.068672363 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.069498412 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.071972164 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.067366656 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.067531093 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.067203649 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.065425496 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.065319385 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.06655415 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.066213743 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.067218648 seconds)
  done (took 2.507987911 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.152873341 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.06798202 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070207857 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066133928 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.070804416 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.065870977 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.081376624 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.068575232 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085430639 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.066357754 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.066482972 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.068938961 seconds)
  done (took 2.618893803 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102820448 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112797652 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146675908 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117938169 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117508407 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097373029 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.126025759 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095711341 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.161113521 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138056438 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117833453 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09372124 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08631774 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.069447194 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100458921 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119721793 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138089265 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072433123 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114541831 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.167266975 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133910531 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.136660519 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149844255 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118153189 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091169601 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.148845277 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098628767 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103671878 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125685261 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128289663 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120662626 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098468297 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.071427351 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070651421 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151086835 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104166076 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120984325 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.093360405 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106207542 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088675773 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108030458 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.06941408 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087176558 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.114424111 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085473183 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132537472 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088129385 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117044518 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081585726 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.138300066 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123283974 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098350973 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084647539 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102998306 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.295078574 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114160835 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136810385 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10863966 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083591869 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.12021259 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103846728 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101930599 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108570981 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080188976 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.178962526 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089577483 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.112873647 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112952596 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.094813663 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094875898 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106489231 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13650566 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126264758 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126962911 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139583255 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096479231 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123184127 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101090273 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130184722 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10657996 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073037044 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12241838 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130658336 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100376346 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102332728 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131703696 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092715866 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077599256 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.099973231 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119563098 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080516843 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.113153586 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081339243 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.109898969 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13567072 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097737252 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112704747 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11826228 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078073289 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15525838 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109225592 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072319482 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117008363 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113285365 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155514942 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094583233 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.075505341 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.099874059 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.264080081 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150087937 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109875525 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080843971 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11234753 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141867886 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095737616 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171590714 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096948836 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142554159 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113958864 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087653545 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074881679 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09055301 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113547381 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107776683 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112956801 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090864104 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084509717 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087110992 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11332233 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092576959 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080905831 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114037203 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.10253175 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075221755 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08931338 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079965945 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143839867 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078387104 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1395168 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126272753 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078914183 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107475434 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.098608132 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108861634 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098273557 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117557798 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1418269 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117397922 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090719845 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.094600558 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10889845 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144992408 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.12770088 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092631328 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.076627685 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101071196 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112969689 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097772582 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126143667 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10020302 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109934392 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103151693 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140081599 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143834149 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100595195 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10003245 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10539692 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.285433737 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077134696 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158284319 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105402167 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119596802 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.085350447 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14094605 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115612809 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089970447 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087415429 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100930965 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104193229 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107096091 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143368296 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.09577927 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072284577 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092938474 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143313952 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07623429 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110850229 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.090410007 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093518247 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118761066 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.093238762 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081189821 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067533651 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12945203 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161200985 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069667083 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115938027 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.112308879 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10458016 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.122873203 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069649001 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120899765 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139709925 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119099899 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141364265 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14812628 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117692441 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119554548 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.115139017 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106222027 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078565157 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.126377833 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135733173 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097425684 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092223488 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134984335 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115769635 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133436048 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114564253 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113400436 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103551948 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.268352602 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102558172 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103187717 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144841781 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121594734 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.124945855 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086349767 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106689093 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118191755 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136130688 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081837781 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14274614 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084093071 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117700491 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077151376 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123036632 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.079067789 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.110902661 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079224697 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100425083 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069247112 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073428947 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141657319 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112439197 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106545463 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101352554 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.139222202 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137974551 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.08054551 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108339134 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116510864 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102316282 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117847449 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110175874 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.089638186 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095973954 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110246263 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086210008 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.08211858 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.115301378 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095359107 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128423536 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084721084 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074908515 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142391706 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105772168 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096481152 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078130699 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109448306 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.12203458 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093664669 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088249386 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115645127 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106204745 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142548398 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.090833877 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098037486 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124477541 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080287536 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.091459976 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.068765708 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084524922 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.237405052 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.129759982 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.076824647 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118177277 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.069290709 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131526835 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087474006 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093897837 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102992072 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112430099 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128974903 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.095214482 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14121644 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090245441 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119339682 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107892416 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094165915 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088521593 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103451717 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101035237 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.122709596 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.095539741 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12340819 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144592 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105744241 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143235956 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091814612 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12359568 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108029016 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126201866 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114185851 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149431031 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14009663 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113906395 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112676873 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0751005 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095879457 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105813446 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.112866445 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.175775373 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127698756 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072758855 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107780891 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094711761 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109720998 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106018529 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082593771 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147265265 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103496703 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088409423 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112925361 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090490949 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103407802 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075298737 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094383954 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.257604604 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094713086 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099366875 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116848332 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129289468 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114235852 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144649833 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.099317037 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092735557 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118798356 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111193432 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110392459 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086095495 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08654957 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138368898 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119119557 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129445351 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.100744748 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10792467 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111963849 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101218484 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125568248 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108650394 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.127865632 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0802342 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076358563 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068036635 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071728478 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124175653 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109461622 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113112667 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0993192 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.071980559 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104236632 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107150327 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071583352 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089380569 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095003533 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099833124 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.092317701 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108086759 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114700512 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.09083946 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105304566 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100181401 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1481449 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.10056183 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08926049 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145850711 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.15267916 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08885687 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093884822 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.071187443 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079176098 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114198287 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150989225 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152084382 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077054665 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085959936 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.084757714 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085841078 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.231791241 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.087245082 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091116842 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106063948 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1007484 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113363164 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105372327 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075638129 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.103425275 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098750598 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092518415 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.104682468 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119345894 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125703405 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.142044066 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110947523 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107626706 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076189282 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080455348 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075377317 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079254555 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102502144 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079001844 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076007542 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144262856 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092220949 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104545529 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109229088 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089268184 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075562616 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135645329 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069253287 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136270849 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071383333 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082411808 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082896486 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079584167 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094570451 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141562675 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110504448 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114284276 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107711753 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104970729 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143052234 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157820827 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080987128 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144488571 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075844732 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075450852 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075744016 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115210161 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090700117 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116398906 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141998624 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091621151 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104381473 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077428025 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145501679 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098823301 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103896285 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086293924 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.0783173 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.304702192 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080660953 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080576758 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090629295 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112462021 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072480562 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10481146 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085217602 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079687329 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143209887 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.630394747 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090173792 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075700906 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09654297 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142606182 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128538856 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095401112 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108535027 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118838656 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100556948 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.095763894 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108257289 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.183615751 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073839874 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095182346 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104144715 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098693018 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103063243 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.099530713 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085545368 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093464337 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087203535 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079641359 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109290927 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090053961 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098039263 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108432803 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084166849 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.088192433 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132159769 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104821905 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082737737 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090105412 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.10655286 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090444857 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102903488 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069463121 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114490813 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091560099 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117441327 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.0954655 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108266689 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128251137 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090589944 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140235069 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108870313 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.124478347 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087899325 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078677503 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126985262 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.087652034 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076992712 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.306510113 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.094134499 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.092896338 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105276626 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096721075 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114268243 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117612744 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110546238 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097351743 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078479171 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101145569 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103324472 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085814922 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078370122 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074097325 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076059661 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107849958 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085283816 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083731659 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115135661 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089466252 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103519543 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101043433 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.123577285 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083721304 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101422696 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110294684 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093241694 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110663251 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101760113 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130124533 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176504227 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127262669 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130464228 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136272119 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.076823305 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07611073 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068562369 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116561708 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079892166 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.090006737 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081387237 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135705222 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082161859 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112953873 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232423839 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08079432 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09501677 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097644162 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069586215 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083366278 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10884676 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087822917 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081004517 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120791829 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083459468 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129320172 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112359472 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101407767 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09651993 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081498459 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113687992 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10486406 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.127086457 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093484087 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.237535715 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114874729 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104603046 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140124488 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073546399 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081146778 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130649612 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104152067 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133705996 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079864333 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150749996 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.143600145 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100666294 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134389943 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070978859 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083604785 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0893823 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126851873 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085183047 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111742656 seconds)
  done (took 68.3361463 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.147351594 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139935216 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.080344015 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.101860073 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.185450056 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.195355901 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.117349861 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.094794293 seconds)
  done (took 2.919709402 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.066352858 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.0824184 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.080219697 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.208868695 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.09695911 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.067340327 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.073391354 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.081573512 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.067350277 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.066807458 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.101352999 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.067492452 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.067070599 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.372876236 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.066160103 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072495237 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.067295303 seconds)
  done (took 3.53935835 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.33299616 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.403639664 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.242812508 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.621534016 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138819857 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.483765669 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.0744852 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.082678686 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.566436111 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.370923824 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.128386142 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.085440302 seconds)
  done (took 18.381492909 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.073926086 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.077111709 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.078656987 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.074648349 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.074580238 seconds)
  done (took 2.221550806 seconds)
done (took 118.633789735 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.081355377 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171562536 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06782969 seconds)
  done (took 2.117684692 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.080144613 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.078683032 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.079949488 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078940789 seconds)
  done (took 2.169410128 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07292136 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074560581 seconds)
  done (took 1.99294333 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.221364384 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176999433 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091526941 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.080142492 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078095211 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078166454 seconds)
  done (took 2.093660213 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.069556448 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069360105 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070320974 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.071068775 seconds)
  done (took 2.122039864 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.065956767 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06475997 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.066807982 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069244495 seconds)
  done (took 2.111594804 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.082462198 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085253395 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117114054 seconds)
  done (took 2.130346052 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.081112359 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.081564423 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.07760624 seconds)
  done (took 2.093553617 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.106832951 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094472611 seconds)
  done (took 2.04884878 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.078024227 seconds)
  done (took 1.929578379 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.087651027 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.095806593 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141450741 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.107154611 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141251208 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127228307 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077130766 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077918024 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.073272869 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.071724693 seconds)
  done (took 2.847065491 seconds)
done (took 26.073865838 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.076303629 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374111619 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.359190266 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087083514 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.671483348 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.354871014 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.005779529 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091364582 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100775701 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068398446 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.085781969 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.649778182 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.99815227 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326620313 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.983298535 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.32505886 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.652092076 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068612058 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067772783 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068291719 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.991162782 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067887495 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068769638 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06902852 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.65021919 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.374293357 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069360115 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.324367399 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067324376 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072756201 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357534407 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069401818 seconds)
  done (took 16.417958146 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.06835648 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.120560267 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.07073735 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082442168 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068174882 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.067724754 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.06915825 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.066754194 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109722194 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067122966 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084817364 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.068033577 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.072190333 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069817008 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088901778 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068179278 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070543707 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071992823 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068337691 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069297717 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087170777 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068013992 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068731008 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069123236 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.068905574 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081874892 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069432605 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068531251 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068587998 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072712084 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072941249 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070300194 seconds)
  done (took 4.254141224 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.119308948 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128155592 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073447888 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109883591 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119725193 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070051836 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.15252405 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092892787 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116812491 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.068605156 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084693833 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067846099 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105142767 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069910186 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088548882 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.068505036 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.070915636 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069027026 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068334529 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069125475 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.087937849 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068124205 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069203547 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06913363 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.069481837 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083957034 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069763303 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068505907 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068715366 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072897813 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073844132 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070513553 seconds)
  done (took 4.552340277 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.067533696 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069998302 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.079592963 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.081079189 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.066421006 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.068205909 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.069125958 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.066278015 seconds)
  done (took 2.437768097 seconds)
done (took 29.527464454 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.077063045 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.067400189 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.070627741 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.087344427 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.073480113 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.069788055 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.064300047 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073987415 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.070816929 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.071222617 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.073039074 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06683033 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.069736957 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.064729086 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.071975657 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.065384232 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.072368261 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.069367807 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.070385459 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.071761284 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.06803065 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.071255521 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.074226711 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.070567978 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.070536135 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.070757837 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.075507279 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.071746223 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.065868366 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.068656631 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.068346777 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081480792 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.072182133 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.071884102 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065334065 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065335629 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.070516082 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.068061921 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.072365675 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074761991 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.068150332 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.074794605 seconds)
  done (took 4.813282968 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.086634435 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.091853233 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.084930137 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.07940016 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.105493406 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.079267479 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.089070497 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.077489778 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.075365517 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.088235017 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.071851041 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.077147301 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.078557357 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.073486202 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.076662741 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.073850455 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.079458949 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.073060725 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.078532626 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.078162949 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.091591909 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.071285321 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078718186 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.079162491 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.073277225 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.079406584 seconds)
  done (took 3.966595453 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.070420251 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.08611358 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.091119846 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.141549833 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.110436825 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.082709964 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.082036537 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.097557176 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.101087477 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067734735 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.071870677 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.094842051 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.096230357 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.074898928 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106525511 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.085688132 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080307982 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.069160411 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.074866619 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.102396428 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.090633196 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.086192616 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101237633 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.088146024 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066953328 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.077067214 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074885878 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084160486 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.075521819 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.080109715 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072079011 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.071158242 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.068682397 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.080331032 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075158264 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065665966 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089808617 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081028708 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.083540924 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106930089 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077674006 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069449479 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098704782 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133504294 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067502022 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069672014 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071282319 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080713834 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068677682 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098054443 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086852778 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067162413 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086876001 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068924946 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.069151946 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084318416 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069157367 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.06932345 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079573167 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.116186235 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088384003 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072718328 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.089444823 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067275482 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.07900704 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068433583 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068595964 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066083026 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.103460708 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.075024047 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.120705784 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068514119 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.06519856 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079816299 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078751168 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073829222 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066838536 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087231785 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.07975344 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070930209 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.079505486 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070365997 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070514677 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.102993391 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066062479 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065367141 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064927353 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06956556 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070853444 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067779787 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080926556 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066727626 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070423359 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.083580873 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067124991 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067953318 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.070048748 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068306144 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06658359 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.078513304 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071311927 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.069018962 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080017776 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.06875382 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070906489 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082266284 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076833695 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06696055 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068662643 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069816194 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069099928 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071715066 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071087468 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069488527 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074311416 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.074801063 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073760543 seconds)
  done (took 11.162233835 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.1606769 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.153340986 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068690651 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149065376 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.076333543 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.072305676 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.15034865 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.088538977 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.068050853 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.069117512 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06718986 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.096495185 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092233026 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104872992 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.071554273 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067981721 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093400105 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.101888548 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152863686 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147509926 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.091894703 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.076314371 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070613866 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069320265 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.06896038 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076818113 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086345904 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076063063 seconds)
  done (took 4.588968705 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.073528934 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082887732 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.071695723 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.092382028 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.086988223 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.068433416 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069760155 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.069439966 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.085193941 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.075072797 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.068212478 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.072800036 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.071701357 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.068679524 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.068899348 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.074619128 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.075002166 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.066946703 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.071380734 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.072519131 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.078684256 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.094083589 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.072193588 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.068100341 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.070677325 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.06790675 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07555642 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.077936159 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.06790941 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.098441554 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.065127172 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.072146216 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.082271888 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.069111183 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.067694075 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068253944 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067964607 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.068143579 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.068511027 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065638086 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065746241 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073149535 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066475569 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.074174001 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082560834 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075848046 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.069069706 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.073548245 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.070417446 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064660567 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.071127233 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.071160062 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070329847 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076280155 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071270105 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.07071593 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069298804 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.09959128 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073754902 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.067210039 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067243088 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.066306074 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069357992 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.076419631 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084536344 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069534842 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.066436452 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067865832 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.073187203 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08207937 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067274434 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073153197 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064664822 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.068375025 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.070589197 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070957737 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069496029 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.06608336 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.06742712 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067683689 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068152964 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067780621 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067561888 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070700024 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065491459 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.066155211 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068769667 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.069260181 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.074992471 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.067175674 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070686245 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068897709 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066481078 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07086087 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073819315 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070827513 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088407252 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07693329 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068384994 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065827639 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082797339 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069912454 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.067158374 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.073473001 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072466981 seconds)
  done (took 9.498281368 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.089542388 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.069493285 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.088068303 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.094915007 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.078581349 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.073491418 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.082054326 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.068826854 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.084639704 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.066879649 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.077164964 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.066273376 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.081563616 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.077372501 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.069332189 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.078592787 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.07045165 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.088761434 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.082851642 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.066366426 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.076952502 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080096572 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.080927484 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085714327 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.085437812 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.086911961 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.080211148 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.070254207 seconds)
  done (took 4.12134724 seconds)
done (took 40.011822833 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.928302781 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.174898837 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.936995091 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.218117942 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.991948388 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.065265214 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.032909745 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.929323742 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.115574318 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.96223408 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.255440033 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.306969909 seconds)
done (took 68.850401244 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.999036971 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.078999219 seconds)
    (2/2) benchmarking "String"...
    done (took 2.159549161 seconds)
  done (took 6.107529304 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.529903076 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.931262291 seconds)
    (3/3) benchmarking "different"...
    done (took 1.98116797 seconds)
  done (took 8.309065828 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.024057769 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.569870999 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.184902409 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.930389 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.936325062 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.342494611 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.765791709 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.418011532 seconds)
  done (took 33.016208665 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.131525533 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.134627144 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.68270498 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.726021784 seconds)
  done (took 16.596804931 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.538220465 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.193618575 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.194860874 seconds)
    (4/4) benchmarking "different"...
    done (took 2.187095248 seconds)
  done (took 11.045019256 seconds)
done (took 87.066212229 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.933043078 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.294047611 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.956556901 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.087961844 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.95940657 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.96356569 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.937913469 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.938069774 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.933047412 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.933166407 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.344115723 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.929865183 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.936461815 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.972939022 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.932901911 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.955954341 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.504390298 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.952765531 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.942858001 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.498209884 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.471652737 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.937016208 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.947874603 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.994891287 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.988752511 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.961235277 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.357880847 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.940470616 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.549387742 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.950264092 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.943360231 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.940204133 seconds)
  done (took 209.759866076 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.933761996 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.171712834 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.232794586 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.97419679 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.617591978 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.124823513 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.073278001 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.638655302 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.936514452 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.954138707 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.041355436 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.933597206 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.063871554 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.88255905 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.929801265 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.934355967 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.2405879 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.06814086 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.931226398 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.111094707 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.939187007 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.889625207 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.86257511 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.027077732 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.949673586 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.953832061 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.963124798 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.951650941 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.118744824 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.180217477 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.961952418 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.976542824 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.119201788 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.800993621 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.960503494 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.957055561 seconds)
  done (took 176.277462888 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.11186073 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.942764554 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.996470696 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071021481 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.693980565 seconds)
    (5/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.936534712 seconds)
    (6/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.667151103 seconds)
    (7/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936767626 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.934288381 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.933327458 seconds)
    (10/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.941842125 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.936940039 seconds)
    (12/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.002687352 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.769872887 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.957222422 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.935213956 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.936029692 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.50202303 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.943980899 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.934869034 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.935417941 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.999141844 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.307111831 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.059755689 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.939596986 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.945684612 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.071438324 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.947923924 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.925889228 seconds)
    (29/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.919973317 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.071274304 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.941871799 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.014359494 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071951322 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.948509648 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.017897412 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.944315836 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.427501158 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.931903415 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.936688237 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.938180574 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.986445393 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.925284013 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.037268475 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.005370429 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.936793401 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.949062009 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.125030178 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.583930062 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.939841865 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.936863672 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.936484921 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.936349529 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934992212 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.253859691 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.941589695 seconds)
    (56/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.936586656 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.962554189 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.55463935 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.942044994 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.937282533 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.937149743 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.937451338 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.938067569 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.944591219 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.973763373 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.741669676 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.650756625 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.328966058 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.735655985 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.943485975 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.252792834 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.994605214 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.91177238 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.004040746 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.938152108 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.934482696 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.937525238 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.937826008 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.025895903 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.019893918 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.939459719 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.073284523 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.942844714 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.938569292 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.011986323 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.43498589 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.943693982 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.950776486 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.994720674 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.939115276 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938437504 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.94560397 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.026888681 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.939738726 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.939276859 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.939167056 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.031124648 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.944223219 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.104384842 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.155871036 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.010129346 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.180918776 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.178251934 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.942689677 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939734922 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.953875056 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.941193746 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.939568517 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.950313919 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.939609898 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.938863241 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.939239037 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.940594175 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.941245786 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.940529021 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.940997267 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.951995763 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.939847658 seconds)
  done (took 428.65537996 seconds)
done (took 818.727861211 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.646927127 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.706338827 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.558697233 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.594097407 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.556681551 seconds)
  done (took 14.939576643 seconds)
done (took 16.815914906 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.973301561 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.957486055 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.946555934 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.004932233 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.965014478 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.95298234 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.987518941 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.989540578 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.972104817 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.952550095 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.002104826 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.957162756 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.973490988 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.978267209 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.028434105 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.982166656 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.956927378 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.949894943 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.010587983 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.958459206 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.958837587 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.955689444 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.955065239 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.004969301 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.038681892 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.965334428 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.953581329 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.003560598 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.966556906 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.001233806 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.014074054 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.977779109 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.989062292 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.029633979 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.013777688 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.035981159 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.964250089 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.026856217 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.962844598 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.042238664 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.016366398 seconds)
  done (took 83.255257355 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.952559747 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.090042638 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.164683524 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.191420781 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951686132 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.165639278 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.009138323 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081006867 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.085488012 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.169241893 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.178286256 seconds)
  done (took 24.92186012 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.950964784 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.095357742 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.166208773 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.988330613 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.95243798 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.168963445 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.994008142 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.080740629 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.090461932 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.177665421 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.186699687 seconds)
  done (took 24.741045571 seconds)
done (took 134.796074979 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.329608946 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.977832349 seconds)
  done (took 6.187438181 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.946496795 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.968636105 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.099555851 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.946883487 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.949038849 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.949664688 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.949147987 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.947421215 seconds)
  done (took 17.637605633 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.945668868 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.945826546 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.946841808 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.945797679 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.946547258 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.946752102 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.946414175 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.946740155 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.946319215 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.946671269 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.946020478 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.947599368 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.946522879 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.947313547 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.947727696 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.946598087 seconds)
  done (took 33.026807559 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.94660524 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.945837971 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.94748583 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.946327436 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.947308788 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.947494569 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.949872924 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.947959565 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.947586796 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.946590171 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.947327304 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.948084613 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.947563877 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.947633692 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.948215466 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.948308985 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.948611418 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.949022726 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.948836771 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.947572657 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.947872142 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.948513164 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.953691985 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.948172672 seconds)
  done (took 48.635664691 seconds)
done (took 107.377755056 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.196742006 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.581978267 seconds)
  done (took 8.661401035 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.952571022 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.94894006 seconds)
  done (took 5.857625095 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.949521129 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.949479537 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.949091579 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.948908921 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.948574753 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.948356822 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.948951756 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.949273534 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.948122231 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.948769248 seconds)
  done (took 21.37213776 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.948809594 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.949325176 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.948578757 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.949723008 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.949753104 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.949976343 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.949172229 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.949420513 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.949712931 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.949361435 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.95043032 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.949333934 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.949266505 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.949556961 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.950323958 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.950088553 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.950294396 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.950944803 seconds)
  done (took 36.978817076 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.95050255 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.950218634 seconds)
  done (took 5.784799699 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.950442253 seconds)
    (2/7) benchmarking "second"...
    done (took 1.949884823 seconds)
    (3/7) benchmarking "month"...
    done (took 1.950095097 seconds)
    (4/7) benchmarking "year"...
    done (took 1.948770536 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.950490729 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.95214882 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.952168528 seconds)
  done (took 15.538508267 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.952289072 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.103978883 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.155948045 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.543457098 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.953661345 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.954472783 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.859446066 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.954974274 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.956137686 seconds)
  done (took 21.320289801 seconds)
done (took 117.396899456 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.796108286 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.952333993 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.237097129 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.03218804 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.022669183 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.246636795 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.983781174 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.498472957 seconds)
done (took 43.65587144 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.968843684 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.951051351 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.985909038 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.9996622 seconds)
  done (took 22.823980589 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.951485798 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.267022273 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.975915143 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.959143967 seconds)
  done (took 23.045017146 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.327817767 seconds)
    (2/2) benchmarking "read"...
    done (took 2.312399373 seconds)
  done (took 6.531934551 seconds)
done (took 61.259527809 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.95404719 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.953534384 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.952894172 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.953662928 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.953926918 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.953346864 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.954136204 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.953450232 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.953378904 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.953941776 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.953776694 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.95436258 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.953683777 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.954477691 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.954053091 seconds)
    (16/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.953993034 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.953683491 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.95360479 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.954128851 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.953943047 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.953948891 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.95358726 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.953635985 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.953578877 seconds)
  done (took 48.779606336 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.954095552 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.9545748 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.954676869 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.954403295 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.953723647 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.954367221 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.955095232 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.954715145 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.954994847 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.954797348 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.954956758 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.95495744 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.95548728 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.955591495 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.954987053 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.953635022 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.955452632 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.955340332 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.955050368 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.95549771 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.955970135 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.955605115 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.955722858 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.955447609 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.956114679 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.955645006 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.95559896 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.956255883 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.956142186 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.956125061 seconds)
  done (took 60.544625243 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.955425887 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.95621231 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.956501594 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.956241785 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.955709735 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.955782185 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.956361877 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.955700611 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.956402926 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.956320806 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.956078941 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.956216084 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.956556833 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.956773648 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.956323025 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.956380074 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.956606536 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.95568961 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.957107746 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.956411242 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.956461515 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.957262741 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.956877041 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.956990828 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.957344939 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.957384333 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.95711015 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.956810264 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.956969722 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.957478369 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.957994272 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.957530212 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.957317374 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.957764442 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.957949689 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.95734028 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.9582506 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.956380309 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.957682559 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.95815495 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.957884811 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.958106199 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.957185737 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.957667887 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.958205318 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.957297131 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.958538407 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.9583099 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.958156904 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.958297366 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.958288774 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.958675164 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.957816701 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.95811684 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.95896757 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.958390985 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.958536366 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.958648234 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.958697108 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.958649471 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.958612034 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.958821733 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.959415837 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.959035595 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.959218907 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.95943565 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.958748029 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.959098838 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.959227295 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.962151408 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.958641898 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.959052828 seconds)
  done (took 142.813419397 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.958859954 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.960128623 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.959524866 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.959441031 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.960388508 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.959726472 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.96029622 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.959657554 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.960542984 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.960011643 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.960315541 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.960236029 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960472159 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.960713277 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.939433859 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.957517767 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.960367071 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.960600607 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.960415203 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.959907994 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.959561282 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.960075463 seconds)
  done (took 44.991875483 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.960313286 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.960692329 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.960216759 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.959999365 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.960738901 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.960467411 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.960441397 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.960554994 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960426742 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.960669911 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96010971 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.960610646 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.960447159 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.960902319 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.960869401 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.96154334 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.960242766 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.962069878 seconds)
  done (took 37.186730384 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.961807234 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.960708301 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.961322976 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.961071926 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.962380075 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.961519134 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.961298511 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.961517681 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.961304099 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.962356299 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.961889791 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960614395 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.961924414 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961822605 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961512336 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.962219813 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.961067045 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962615303 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.962080262 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.961516548 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.962112776 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.961613299 seconds)
  done (took 45.052214692 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.962040796 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.962214307 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.962289361 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.962704124 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.962477247 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.951942979 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.961967913 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.950417867 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.963837532 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.962655547 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.963055383 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.96313595 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.96281744 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.963182968 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.962744163 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.962573352 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.962392152 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.96248823 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.963273779 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.963286599 seconds)
  done (took 41.128900627 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.963996598 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.963782816 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.963676067 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.963920297 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.963497139 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.963513498 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.964139095 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.963931954 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.963699056 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.963764194 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.964003168 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.964452998 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.963851735 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.964675319 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.964961306 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.965100824 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.964969876 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.964017202 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.965733813 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.964202462 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.96381901 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.965284174 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.964894431 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.965550391 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.965059728 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.96475688 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.964880821 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.964927072 seconds)
  done (took 56.901067407 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.964881716 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.965048819 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.963842075 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.964309307 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.965120237 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.964442792 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.96523299 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.964552584 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.964197211 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.964720566 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.965172901 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.964946929 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.965868637 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.964953821 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.965517777 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.965584943 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96470849 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.965720544 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.966188977 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.965902294 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.965780572 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.966016157 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.965033122 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.965573926 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965700249 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.965846467 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.966266321 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.964930286 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.96589515 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.965855965 seconds)
  done (took 60.857681753 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.983848678 seconds)
    (2/2) benchmarking "in"...
    done (took 1.983902118 seconds)
  done (took 5.868525044 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.965987577 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.966616014 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.965554809 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.966748438 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.966828607 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.967305883 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.967113356 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96665289 seconds)
  done (took 17.633185187 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.966793655 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.9691354 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.96708694 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.966950998 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.9676489 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.974890882 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.968454692 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.967965748 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.968932434 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.968645063 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.972347087 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.971312312 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.976044978 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.972449988 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.967764529 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.96882796 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.969170486 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.9703352 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.969534987 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.967742299 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.970140806 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.96793988 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.967856451 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.968064813 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.967599111 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.969896497 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.978720498 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.969860089 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.969506322 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.968468889 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.974201906 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.968584211 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.968676041 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.970477254 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.969044044 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.968476031 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.97594645 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.968617795 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.97006523 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.968560019 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.970584348 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.972306794 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.972859429 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.976215504 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.969475282 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.968350828 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.958398706 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.969548998 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.96971913 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.973200713 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.97860464 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.970488711 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.969013827 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.969191253 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.972120694 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.970176933 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.969216858 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.972492773 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.977885983 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.978961161 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.972708465 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.990948321 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.980962251 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.971068415 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.970705906 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.979984445 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.995415545 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.974158858 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.97268574 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.970086433 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.977395674 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.969335719 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.969583654 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.969840126 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.985115487 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.980631692 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.944922603 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.970953213 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.971659944 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.97103938 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.971432138 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.971278811 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.971398632 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.971323483 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.980779209 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.98505679 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.972275706 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.971890368 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.974556437 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.973409612 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.975712137 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.974627813 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.971908983 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.97134155 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.972678987 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.975082859 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.972155123 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.972404938 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.971168526 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.980642365 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.972804469 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.971657615 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.976768785 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.98210072 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.968862875 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.972168039 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.973423293 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.972493511 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.980750642 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.973038725 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.972531778 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.972800068 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.975749054 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.978428795 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.972908648 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.976915364 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.983002526 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.98089624 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.973898419 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.977231977 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.976692955 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.974904289 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.984640124 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.0002635 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.972984515 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.977178059 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.979060264 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.98575374 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.977109332 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.974533635 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.975865691 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.974270149 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.974798957 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.977138001 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.975281746 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.975096796 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.973698852 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.974584519 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.975547432 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.975599636 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.977180499 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.980634577 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.978860451 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.975923962 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.978174363 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.975041304 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.976987934 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.981929455 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.974556594 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.974751072 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.976850613 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.980183994 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.979814058 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.977626548 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.976412126 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.974836355 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.976216848 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.977364873 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.977711033 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.974808132 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.974740923 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.978070149 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.979687633 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.976972499 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.974906014 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.97679013 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.977913887 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.976209397 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.976549147 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.97624628 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.977427109 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.976340987 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.981416325 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.974798252 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.974576506 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.975211544 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.975186415 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.974551093 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.979739141 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.989609436 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.980698036 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.98554991 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.977406007 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.98626605 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.977215404 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.981407125 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.978008221 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.978122275 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.977336831 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.976810921 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.978165187 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.982204829 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.999093435 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.986768437 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.97975852 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.978434437 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.984202491 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.983844098 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.983185391 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.977460972 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979719818 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.981311335 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.977751591 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.976916191 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.976983399 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.983153989 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.978191747 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.977920754 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.980614256 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.980129598 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.976963229 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.963215221 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.966416282 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.978779229 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.979349643 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.977303981 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.978017907 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.980486133 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.986914009 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.970603802 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.963100415 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.97836168 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.980269884 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.978541428 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.97969384 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.980121372 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.982036659 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.977908801 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.979402744 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.986161562 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.979460158 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.98128781 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.979962847 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.978874134 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.980939868 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.979108001 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.981913028 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.989141357 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.984251039 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.980290525 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.985141976 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.981166321 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.981156069 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.979395432 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.980826442 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.980668905 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.982619359 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.980177824 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.980717622 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.986635516 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.98120861 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.98157002 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.980085966 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.982934248 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.981199378 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.984508525 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.98283093 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.985277171 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.988755796 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.985822893 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.984254238 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.983510318 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.981009951 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.98089832 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.983297948 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.967575269 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.988059772 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.987960382 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.974323115 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.976611994 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.978102453 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.980011842 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.974310173 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.976866089 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.98436349 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.980802117 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.978207997 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.981599632 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.977195999 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.975168862 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.987132112 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.979026839 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.981617956 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.977469129 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.979045898 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.98070225 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.977008989 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.978973334 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.97592783 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.981999319 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.982284879 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.977439617 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.976918713 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.978209048 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.984781827 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.977106109 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.981053168 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.987020375 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.984999741 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.983260368 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.981579915 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.983638055 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.983577304 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.984728543 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.981928744 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.986707495 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.981032571 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.986002229 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.995429165 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.987280758 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.989236815 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.973920638 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.982763776 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.972764368 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.972211419 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.973436288 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.976088802 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.985764163 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.97316055 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.972651636 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.981976051 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.972407697 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.974649102 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.978692705 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.971910497 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.975891592 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.974099094 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.971345555 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.981599704 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.977751715 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.971737226 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.973532361 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.973839411 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.970319533 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.974694707 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.973626605 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.978884912 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.972544782 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.97188051 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.969890407 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.974948042 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.97271825 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.974503431 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.97031643 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.972542287 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983987769 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.97294386 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.97698968 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.975356755 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.973486981 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.981613906 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.974259035 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.977305101 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.973990232 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.977081569 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.97807528 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.979167519 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.972842997 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.973482042 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.974276616 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.974999306 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.99014109 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.977445957 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.973466392 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.974301864 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.971776707 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.974213251 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.980990749 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.995628268 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.969462393 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.973665339 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.974786474 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.975938697 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.968682558 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.978333482 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.972438283 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.984403613 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.972380304 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.968582147 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.974125585 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.984383167 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.97236361 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.970079923 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.972445444 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.975519591 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.9727336 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.97170726 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.968752668 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.973804823 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.97061496 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.982025079 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.97078063 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.967312249 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.969913824 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.969559299 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.971169947 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.968543753 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.973181624 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.972154923 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.970684621 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.970317795 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.973310698 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.977433003 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.970638851 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.976495208 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.981652107 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.970839071 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.973152739 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.971950697 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.971626773 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.973919703 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.972385374 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.970661106 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.973129251 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.968959633 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.972211785 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.975519561 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.982369705 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.968139888 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.97249891 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.972456274 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.973363578 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.973468225 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.970828385 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.972713436 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.981405963 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.974268074 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.985948836 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.982572536 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.971430861 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.973464745 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.980882331 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.981962322 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.973660827 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.971684509 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.973730651 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.97233903 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.974745589 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.971169339 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.973981507 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.970595759 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.978043008 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.974251494 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.971618059 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.973593026 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.971272002 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.973245283 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.975445866 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.976020155 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.96986187 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.972227079 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.970140838 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.97557412 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.971254384 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.974736888 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.969904089 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.968476262 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.9718343 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.960900581 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.964694977 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.95906573 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.959394312 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.962219417 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.958456513 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.957192901 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.959577989 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.959062441 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.958730966 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.962546512 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.966071104 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.958612388 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.959488215 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.958260165 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.964528216 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.957763014 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.958318743 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.958385031 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.957323377 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.966082662 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.956112529 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.958080436 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.957794825 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.958005415 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.962758579 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.957296317 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.960499554 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.956471217 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.956607881 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.956895149 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.958793797 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.95462466 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.959993706 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.959474162 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.96304831 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.960029285 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.927910658 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.955648398 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.955296791 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.957626803 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.95650059 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.958828113 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.95665925 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.957212902 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.956765265 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.955948663 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.955114317 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.948650623 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.935244443 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.947591295 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.957622755 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.964435705 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.962516378 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.953390988 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.957304856 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.956414527 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.957739101 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.967223895 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.954262654 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.954900894 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.954536186 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.9552807 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.955479939 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.961277604 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.962879012 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.957177204 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.953587549 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.959605774 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.972229727 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.95686645 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.965229731 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.985628481 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.955230228 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.955041392 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.954030345 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.956270713 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.953683559 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.957074936 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.953860049 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.960384581 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.954976477 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.953824932 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.961904178 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.953517072 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.95385401 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.955405277 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.954624244 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.958596745 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.953294109 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.960314638 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.942108353 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.953233483 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.953305115 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.956317154 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.953137467 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.953903742 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.952949562 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.955272833 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.942599492 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.953235638 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.962263143 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.953917219 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.942437266 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.96424016 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.963019475 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.953448965 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.95366201 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.952799164 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.957338301 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.955857165 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.952608469 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.956404173 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.960336363 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.95551653 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.95961192 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.953912981 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.955743286 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.955174856 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.952318779 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.953528723 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.965114876 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.964410162 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.9529426 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.953480864 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.958750831 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.952602916 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.959282569 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.959578256 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.95541867 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.95479847 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.953216424 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.953775998 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.951593109 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.952440643 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.956350075 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.960170738 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.953934216 seconds)
  done (took 1177.039570105 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.952256341 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.951713577 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.950944867 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.952457906 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.951478148 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.953097279 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.951877735 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.952435367 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.952252522 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.953668399 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.951681633 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.951442433 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.95171427 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.95110175 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.952039779 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.951014484 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.952245959 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.951873351 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.952171649 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.952748068 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.95111808 seconds)
  done (took 42.877392396 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.952238801 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.95097499 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.95382979 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.951430834 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.950402806 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.950957574 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.952008326 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.952768162 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.950790847 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.95253418 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.951144679 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.950878849 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.95242826 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.951027758 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.950621216 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.95058718 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.950563123 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.952196302 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.951277334 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.951046201 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.950055932 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.950518431 seconds)
  done (took 44.814859586 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.953731522 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.949787764 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.951715948 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.950156214 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.950847995 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.951526943 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.95116517 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.951542404 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.950228694 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.952815894 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.957743697 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.955932581 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.950152446 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.955060642 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.950044844 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.951257012 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.095179268 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.952298362 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.951250521 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.950434603 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.95296475 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.956836248 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.950721039 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.950223556 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.952272712 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.952452272 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.952107603 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.951099631 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.950798894 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.95209638 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.955579678 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.951633288 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.953639165 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.954473647 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.951937644 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.953580469 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.955036144 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.952567382 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.95148839 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.953284204 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.962563014 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.971837255 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.953418605 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.95468841 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.961397483 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.952004129 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.953581156 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.955371023 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.958566967 seconds)
  done (took 97.746116778 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.951363902 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.952159492 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.952328088 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.952796437 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.954270765 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.952168689 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.954360512 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.9530679 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.95246743 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.952526379 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.953226538 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.955565055 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.952513767 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.952633195 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.951659283 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.953142905 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.955538395 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.954562925 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.954497004 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.953755687 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.952474158 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.955708471 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.953514189 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.953889239 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.953284998 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.952287311 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.955921647 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.949833177 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.953153578 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.953666026 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.953163508 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.957222575 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.95409669 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.953268066 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.952705293 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.95314081 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.953229139 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.953752127 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.953671985 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.954451622 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.952236527 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.953532673 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.955749382 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.953912824 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.953824059 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.954867963 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.953919079 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.957504658 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.954548204 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.953464532 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.953236113 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.955419736 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.955798111 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.954407164 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.954427975 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.954033364 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.955117333 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.957120219 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.955515458 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.955474117 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.95541436 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.954653377 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.956927462 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.954889115 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.954676686 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.954795339 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.954643803 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.959529152 seconds)
  done (took 134.763775275 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.954926916 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.956236834 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.955779099 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.960293357 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.959473743 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.956482662 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.956556424 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.955520192 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.956953731 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.959309271 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.955740958 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.955727946 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.956055133 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.955587339 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.956350852 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.955454273 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.956026312 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.956345763 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.956114712 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.959219855 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.956657269 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.956852113 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.956317914 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.956181865 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.95866406 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.956996056 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.956090919 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.956524771 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.956670973 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.957490895 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.957351741 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.956288197 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.956661806 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.956758796 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.959093514 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.958461736 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.95829196 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957152015 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.957231947 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.960666771 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.957439484 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.957480651 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.957336778 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.956441661 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.958659185 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.957139986 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.957708066 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.957495209 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.957420576 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.96019448 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.957646102 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.957226365 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.957199474 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.957431678 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.956942982 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.966399827 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.957473816 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.958917559 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.958416833 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.957483006 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.960226672 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.957790527 seconds)
  done (took 123.251684108 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.958205092 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.958080042 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.958867697 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.958967157 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.95884258 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.95894762 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.958380024 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.962339726 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.959447967 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.960820385 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.958655306 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.959501524 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.961575799 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.960134756 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.960700189 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96016134 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.959055286 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.960081152 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.958585329 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.960611377 seconds)
  done (took 41.08378067 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.959602427 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.961312884 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.959859824 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.960274105 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.960208891 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.959862771 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.960303315 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.96115915 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.959460501 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.96174081 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.962322919 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.963472029 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.96095918 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.959918048 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.960700345 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.960504088 seconds)
  done (took 33.264763418 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.962017892 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.960957148 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.960775052 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.962237295 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.961360407 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.965381752 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.960957065 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.961966186 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.960123316 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.960696403 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.963922747 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.960875063 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.960514358 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.961191708 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.960817905 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.963918377 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.960711688 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.960983648 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.961239231 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.960954305 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.962408017 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.961702234 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.963349452 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.96104443 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.962263906 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.963889045 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.96173328 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.962257614 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.96165906 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.961367761 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.964394898 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.961941891 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.961624837 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.962571507 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.961266168 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.963133346 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.961438966 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.961749166 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.962197136 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.962221444 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.963354239 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.960748677 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.962396685 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.962461071 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.962516675 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.964091553 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.96142179 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.96179258 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.963665119 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.962334411 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.96300228 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.962840263 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.962189232 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.962458067 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.961883998 seconds)
  done (took 109.808246831 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.962432484 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.962045674 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.962018152 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.962333381 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.962045818 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.962703828 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.963457772 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.962906341 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.962172575 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.963357702 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.966134617 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.962711745 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.96332121 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.963187986 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.962942068 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.964565529 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.963408736 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.963701374 seconds)
  done (took 37.230954908 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.962869704 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.964955936 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.962891063 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.96263093 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.963532453 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.963187891 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.96405797 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.964133196 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.963366874 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.964011687 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96327506 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.964356269 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.964492538 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.964094986 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.963932873 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.965100714 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.965447984 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.964031767 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.964572458 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.964642914 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.964378048 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.96551469 seconds)
  done (took 45.106515992 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.964392838 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.964840728 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.978165298 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.983286441 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.984509843 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 1.995093202 seconds)
  done (took 13.767889693 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965123933 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.963777783 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.968292002 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.964752517 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.965037912 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.964401418 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965026897 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967947943 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965027595 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.964813131 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.965115902 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.964951694 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965407444 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965565594 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965689185 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.96553079 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965442215 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968047663 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.965633538 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965929305 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.965610283 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.965941868 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.966681649 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.965825849 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966496557 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.964949542 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.965967029 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966119132 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.966457431 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.966209582 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.965946407 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.96633088 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968055574 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.966388961 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966260383 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966429123 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966134427 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.96838798 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.966987563 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967820107 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.966681033 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.966558837 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968568897 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967560767 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967218693 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.96653868 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.9682853 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968214839 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967168179 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967888959 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967824937 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.96571498 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966255502 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970407551 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.968367633 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966015761 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967105473 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967667041 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969386786 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968169737 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.966443377 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.967369207 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968120539 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969571813 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967409992 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967318984 seconds)
  done (took 131.69756424 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967948951 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.970635533 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967695583 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.9694101 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967745732 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.967497064 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969272594 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968458076 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968627905 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.96983567 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969162429 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970852213 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968287574 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968789386 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968481214 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968095014 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970430384 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968581935 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970070436 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.9700456 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970134921 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971291963 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969967136 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969430235 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969850093 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968920278 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.971712123 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970334468 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970032665 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969412247 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968872875 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970218206 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.970275295 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.970209014 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970052128 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970062656 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971478136 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970586206 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970385719 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970052393 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.958418019 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.971482489 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.958694347 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970402293 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970606387 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.970577045 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970438649 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.971135167 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970796674 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970580124 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971137159 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970999146 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971760448 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971779565 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.970561902 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.971509826 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970514238 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972485178 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971258105 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971384301 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.97125958 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.971915258 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97164328 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970889383 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.971395413 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971723563 seconds)
  done (took 131.910651105 seconds)
done (took 2728.016987528 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.053066829 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.108433531 seconds)
  done (took 16.066432012 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.135565785 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.012788257 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.161144977 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.089745452 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 6.976262324 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.978366748 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 1.973142254 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 1.972596252 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.06516207 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.973204227 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 6.980416176 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.974708142 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.972906538 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.972666685 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.972825566 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.973670145 seconds)
  done (took 54.096183554 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.975435143 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.977153592 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 1.97363195 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.973238626 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.985158791 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.048622894 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 1.994971017 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.977520636 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.987191421 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.006951121 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.991680011 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 1.977848958 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.981915263 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.978777749 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.060250819 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.017956333 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.030369914 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.04702793 seconds)
  done (took 37.890368708 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.052773553 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 6.985778432 seconds)
  done (took 10.950883736 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.985675055 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.976537187 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.970587025 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.995805207 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.983423384 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.990031134 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.994187856 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.992606146 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.987063136 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.995511196 seconds)
  done (took 71.782824326 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.976404441 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.976751289 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.278832422 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.984409599 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 1.981955634 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.9994295 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.974646174 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.004990135 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.975705856 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.972825269 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.985332126 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.285707572 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.985286566 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.975586813 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.392421487 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.985999736 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.981508837 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.00537144 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.006452253 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.979686972 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.982507486 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.978751483 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.137512621 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.671055498 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.976677438 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.979132081 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.982066452 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.97285525 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.974561932 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.975837075 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.977342168 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.974981825 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.979015195 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.97552569 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.982461971 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.980096786 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.464404912 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.993948723 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.985717411 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.066790626 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.019263751 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.980912885 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.752771335 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.978005242 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.974288888 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.98284876 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.651165382 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.059428838 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.976568731 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.133783585 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.309366558 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.990697475 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.133430919 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.136162115 seconds)
  done (took 138.707891551 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.975403332 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.210806944 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.127372659 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.976199757 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.231648158 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.184133634 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.975799901 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.02065874 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.977046312 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.177267046 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.227111435 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.0781199 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.976490716 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.977255126 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.978426619 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.974739495 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.123922053 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.041272743 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.977793021 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.974765305 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.999519789 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.175957182 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.095372543 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.978551653 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.001751277 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.181539919 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.09554098 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.076521735 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.787989329 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.975719151 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.037088759 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.977166182 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.974596046 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.975496301 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.12852497 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.068270863 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.061108313 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.977988121 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.975051643 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.976523736 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.649697349 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.177046797 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.070807376 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.098098992 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.221054354 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.19010934 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.59032101 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.976010152 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.608539122 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.140307459 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.181594353 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.181845791 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.095610025 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.978575435 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.530777437 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.977115633 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.977579482 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.199682428 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.193024318 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.074821935 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.980309476 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.978199475 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.981104879 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.214202991 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.97953957 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.043300116 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.980343348 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.975021587 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.068884471 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.077026159 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.200680994 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.196284406 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.008387767 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.300383936 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.462611261 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.179251896 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.040764919 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.196692017 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.98063275 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.977214648 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.056094583 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.821183564 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.230623468 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.218405179 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.174586522 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.006928106 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.632918148 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.977833065 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.164394303 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.167170279 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.212919661 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.209086784 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.212397787 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.350107217 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.978059092 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.978188728 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.321649801 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.0938154 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.930319243 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.329838545 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.208653274 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.615466973 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.003779279 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.306752725 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.105563805 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.981088004 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.626300454 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.980246868 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.183315464 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.01720043 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.979824996 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.980452114 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.168146541 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.884528955 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.979992346 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.695779812 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.039052986 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.981953165 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.16112831 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.981270215 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.222173392 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.982085615 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.209154896 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.607611669 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.00983137 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.205562981 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.219504605 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.606786817 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.271598597 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.220318585 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.091994781 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.2013858 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.783861671 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.979609282 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.240098196 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.98260712 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.979890452 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.148880748 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.983379402 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.121723067 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.982874807 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.226636088 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.00094968 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.208087035 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.982151272 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.215975266 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.011767158 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.029621886 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.982867964 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.107072079 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.982665996 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.933400081 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.138386845 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.985324691 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.982954903 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.770489963 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.981798872 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.134714676 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.205169994 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.001907379 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.050228501 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.539221775 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.963584672 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.062312256 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.002705681 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.272476858 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 6.98221577 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.226548916 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.941042642 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.456365609 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.982597383 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.644517571 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.164304306 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.986455284 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.981951391 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.824149679 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.981319971 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.98122902 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.13830862 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.413418271 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.876551702 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.179449917 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.985897116 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.10896569 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.986457874 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.062517789 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.325902165 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.981874793 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.983344107 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.982439426 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.982359383 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.9835775 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.242783612 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.008802369 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.415074187 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.118411651 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.236932677 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.289205507 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.179121617 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.022175129 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.984980885 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.205325348 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.986448495 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.04517445 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.986192308 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.003036462 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.211641779 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.98578864 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.188900938 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.215666485 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.866741703 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.029773743 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.988372771 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.985833656 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.890803546 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.126929204 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.068682174 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.986311484 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.983823473 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.097087997 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.10172151 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.163844721 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.784960054 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.136012096 seconds)
  done (took 926.008379878 seconds)
done (took 1257.40820263 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.98505242 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.987677783 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.986468357 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.990263477 seconds)
  done (took 29.867415678 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.985425132 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.986312666 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.986188423 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.986721698 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.985876494 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.98606423 seconds)
  done (took 13.834540977 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.98525528 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.987103951 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.988782485 seconds)
  done (took 22.880137849 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.405547627 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.385607723 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.058349143 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.125552454 seconds)
  done (took 10.893867577 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.965813796 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.982131388 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.987102568 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.986216405 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.986276349 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.986799384 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.988111688 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.987129566 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.987265466 seconds)
  done (took 19.781769578 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.224739468 seconds)
done (took 103.390472086 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.061807871 seconds)
    (2/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.297283202 seconds)
    (3/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.300538457 seconds)
    (4/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.084059405 seconds)
    (5/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.121550845 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 6.986445515 seconds)
    (7/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 8.489778051 seconds)
    (8/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 4.731961799 seconds)
    (9/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.087896822 seconds)
    (10/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.312342063 seconds)
    (11/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.57569053 seconds)
    (12/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.263235889 seconds)
    (13/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.002377629 seconds)
    (14/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.613812098 seconds)
    (15/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.16670661 seconds)
    (16/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.066995375 seconds)
    (17/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.465572467 seconds)
    (18/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.102070871 seconds)
    (19/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.137238663 seconds)
    (20/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.986317395 seconds)
    (21/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.733386227 seconds)
    (22/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.081966144 seconds)
    (23/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.181441351 seconds)
    (24/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.00203651 seconds)
    (25/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.2887276 seconds)
    (26/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.129959124 seconds)
    (27/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.002517324 seconds)
    (28/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.39513996 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.68055259 seconds)
    (30/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.42663739 seconds)
    (31/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.009206062 seconds)
    (32/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.373090271 seconds)
    (33/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.012170669 seconds)
    (34/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.242070877 seconds)
    (35/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 6.988315395 seconds)
    (36/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 4.039813905 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.001524188 seconds)
    (38/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 1.999324608 seconds)
    (39/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.949418113 seconds)
    (40/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.091048792 seconds)
    (41/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.191765882 seconds)
    (42/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.197370976 seconds)
    (43/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.371545071 seconds)
    (44/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.071697055 seconds)
    (45/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.22020465 seconds)
    (46/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.779466936 seconds)
    (47/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.068301961 seconds)
    (48/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 1.991480421 seconds)
    (49/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 6.987772109 seconds)
    (50/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.122079466 seconds)
    (51/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 1.999716585 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.405080792 seconds)
    (53/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.386479459 seconds)
    (54/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.014009309 seconds)
    (55/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.07711799 seconds)
    (56/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.379761689 seconds)
    (57/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.385477215 seconds)
    (58/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.991058956 seconds)
    (59/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.753083941 seconds)
    (60/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.087178287 seconds)
    (61/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.930575218 seconds)
    (62/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.214845302 seconds)
    (63/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.585701577 seconds)
    (64/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.073048646 seconds)
    (65/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.243831669 seconds)
    (66/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 6.988605001 seconds)
    (67/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 3.986561838 seconds)
    (68/341) benchmarking ("sort", Float32, false)...
    done (took 5.661136811 seconds)
    (69/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.055102706 seconds)
    (70/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.257728264 seconds)
    (71/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.84245075 seconds)
    (72/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.072269016 seconds)
    (73/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.126292453 seconds)
    (74/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.136808286 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.748081002 seconds)
    (76/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 6.999568369 seconds)
    (77/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.089915775 seconds)
    (78/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 6.993140321 seconds)
    (79/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.764032398 seconds)
    (80/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.711454279 seconds)
    (81/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.244816373 seconds)
    (82/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.868252871 seconds)
    (83/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 6.996729507 seconds)
    (84/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.070884679 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.290467882 seconds)
    (86/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.005253654 seconds)
    (87/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.064789143 seconds)
    (88/341) benchmarking ("perf_sum", Int8, true)...
    done (took 1.998493227 seconds)
    (89/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.708377357 seconds)
    (90/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.184808924 seconds)
    (91/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.126469452 seconds)
    (92/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.10223706 seconds)
    (93/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 1.999188429 seconds)
    (94/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.12492879 seconds)
    (95/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.394325107 seconds)
    (96/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 6.992207171 seconds)
    (97/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.31267478 seconds)
    (98/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.091113534 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.982697844 seconds)
    (100/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.390483881 seconds)
    (101/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.186341965 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.393800171 seconds)
    (103/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.697723805 seconds)
    (104/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.787537699 seconds)
    (105/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.425756709 seconds)
    (106/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.295545204 seconds)
    (107/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.994306394 seconds)
    (108/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 6.996992609 seconds)
    (109/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.168148637 seconds)
    (110/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.075794713 seconds)
    (111/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 6.992238471 seconds)
    (112/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 4.221763313 seconds)
    (113/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.338435834 seconds)
    (114/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.99639931 seconds)
    (115/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.005285239 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.325635751 seconds)
    (117/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.259941483 seconds)
    (118/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.00619883 seconds)
    (119/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.052286765 seconds)
    (120/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.002501495 seconds)
    (121/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.051504544 seconds)
    (122/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.287537511 seconds)
    (123/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.121718833 seconds)
    (124/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.004618547 seconds)
    (125/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.17296059 seconds)
    (126/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.001031649 seconds)
    (127/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.010671849 seconds)
    (128/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.902338178 seconds)
    (129/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 6.997766659 seconds)
    (130/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.009292867 seconds)
    (131/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.230163806 seconds)
    (132/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.110239279 seconds)
    (133/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.127103464 seconds)
    (134/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.179755626 seconds)
    (135/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.29867504 seconds)
    (136/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.397635491 seconds)
    (137/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.193560179 seconds)
    (138/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.154070249 seconds)
    (139/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.282448713 seconds)
    (140/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.262429172 seconds)
    (141/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.091977033 seconds)
    (142/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.077438204 seconds)
    (143/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.15418062 seconds)
    (144/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.783291987 seconds)
    (145/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.388011346 seconds)
    (146/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 6.994765131 seconds)
    (147/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.293832479 seconds)
    (148/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.01177404 seconds)
    (149/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.302042007 seconds)
    (150/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.01032714 seconds)
    (151/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.993203109 seconds)
    (152/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.00117805 seconds)
    (153/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.086197366 seconds)
    (154/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.268768708 seconds)
    (155/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.006387618 seconds)
    (156/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.383977525 seconds)
    (157/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.240527992 seconds)
    (158/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.01903249 seconds)
    (159/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.004971468 seconds)
    (160/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.118976588 seconds)
    (161/341) benchmarking ("sort", Int8, false)...
    done (took 4.913234087 seconds)
    (162/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.754214078 seconds)
    (163/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.1351749 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.093873493 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.229062548 seconds)
    (166/341) benchmarking ("sort", Bool, false)...
    done (took 2.210368348 seconds)
    (167/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.074002414 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.00124975 seconds)
    (169/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.034460474 seconds)
    (170/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 3.587435652 seconds)
    (171/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.140823334 seconds)
    (172/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.245263117 seconds)
    (173/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.126589815 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.101718159 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.01011349 seconds)
    (176/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.327743841 seconds)
    (177/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.11955173 seconds)
    (178/341) benchmarking ("sort", Int64, false)...
    done (took 5.642586371 seconds)
    (179/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.125921235 seconds)
    (180/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.193416138 seconds)
    (181/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.09813818 seconds)
    (182/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.255663755 seconds)
    (183/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.598922028 seconds)
    (184/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.000865489 seconds)
    (185/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.125759398 seconds)
    (186/341) benchmarking ("sort", Float64, false)...
    done (took 5.708427458 seconds)
    (187/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.209957018 seconds)
    (188/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.487657504 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.96710283 seconds)
    (190/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.305017556 seconds)
    (191/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.247771661 seconds)
    (192/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.754786062 seconds)
    (193/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.371746799 seconds)
    (194/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.014660673 seconds)
    (195/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.143703365 seconds)
    (196/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.07731342 seconds)
    (197/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.814361777 seconds)
    (198/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.450793683 seconds)
    (199/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.034178405 seconds)
    (200/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.008714326 seconds)
    (201/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.040876645 seconds)
    (202/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.107029476 seconds)
    (203/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.016341124 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.166514921 seconds)
    (205/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.308612787 seconds)
    (206/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.09298617 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.490428041 seconds)
    (208/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.012902485 seconds)
    (209/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.279904617 seconds)
    (210/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.238083911 seconds)
    (211/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.408145845 seconds)
    (212/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.00919309 seconds)
    (213/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.258492178 seconds)
    (214/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.23512962 seconds)
    (215/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.03260723 seconds)
    (216/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.010753798 seconds)
    (217/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.086147437 seconds)
    (218/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.052156923 seconds)
    (219/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.220306368 seconds)
    (220/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.030816144 seconds)
    (221/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.113188764 seconds)
    (222/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.320875345 seconds)
    (223/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.219456151 seconds)
    (224/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.420072243 seconds)
    (225/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.176039848 seconds)
    (226/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.937955528 seconds)
    (227/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.790006049 seconds)
    (228/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.025994427 seconds)
    (229/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.845096148 seconds)
    (230/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.45441644 seconds)
    (231/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.121596286 seconds)
    (232/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.017230469 seconds)
    (233/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.364283854 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.143004116 seconds)
    (235/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.133473458 seconds)
    (236/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.127138357 seconds)
    (237/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.37128932 seconds)
    (238/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.311497292 seconds)
    (239/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.01531219 seconds)
    (240/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.324574034 seconds)
    (241/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.228627557 seconds)
    (242/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.101111928 seconds)
    (243/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.314618703 seconds)
    (244/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.314269066 seconds)
    (245/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.636643102 seconds)
    (246/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.49399989 seconds)
    (247/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.507697811 seconds)
    (248/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.405094536 seconds)
    (249/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.238685887 seconds)
    (250/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.030641502 seconds)
    (251/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.75083886 seconds)
    (252/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.397913155 seconds)
    (253/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.132588296 seconds)
    (254/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.043836557 seconds)
    (255/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.089783202 seconds)
    (256/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.112273944 seconds)
    (257/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.337588604 seconds)
    (258/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.111894217 seconds)
    (259/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.42966787 seconds)
    (260/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.297912088 seconds)
    (261/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.012863235 seconds)
    (262/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 5.566935503 seconds)
    (263/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.106430589 seconds)
    (264/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.921834237 seconds)
    (265/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.242722537 seconds)
    (266/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.382464395 seconds)
    (267/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.023842991 seconds)
    (268/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.857360677 seconds)
    (269/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.446477259 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.468241487 seconds)
    (271/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.210252994 seconds)
    (272/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.124431238 seconds)
    (273/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.01231067 seconds)
    (274/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.89981254 seconds)
    (275/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.147873622 seconds)
    (276/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.018091909 seconds)
    (277/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.105804777 seconds)
    (278/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.930968415 seconds)
    (279/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.944023555 seconds)
    (280/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.736991821 seconds)
    (281/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.140229844 seconds)
    (282/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.15079106 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.146449491 seconds)
    (284/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.550588188 seconds)
    (285/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.100934317 seconds)
    (286/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.096575178 seconds)
    (287/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.027544293 seconds)
    (288/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.01138648 seconds)
    (289/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.810625307 seconds)
    (290/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.164903403 seconds)
    (291/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.371496349 seconds)
    (292/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.127274127 seconds)
    (293/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.201595809 seconds)
    (294/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.030751777 seconds)
    (295/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.895100619 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.126941258 seconds)
    (297/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.017427313 seconds)
    (298/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.077087864 seconds)
    (299/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.234537656 seconds)
    (300/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.029091205 seconds)
    (301/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.015219793 seconds)
    (302/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.195005886 seconds)
    (303/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.14843568 seconds)
    (304/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.149294835 seconds)
    (305/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.020650182 seconds)
    (306/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.162900188 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.339398627 seconds)
    (308/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.709584727 seconds)
    (309/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.12093655 seconds)
    (310/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.126132509 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.425349049 seconds)
    (312/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.13837343 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.282443947 seconds)
    (314/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.312614006 seconds)
    (315/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.017539851 seconds)
    (316/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.083869834 seconds)
    (317/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.519457785 seconds)
    (318/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.152751698 seconds)
    (319/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.037826741 seconds)
    (320/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.384238212 seconds)
    (321/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.094462586 seconds)
    (322/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.298386845 seconds)
    (323/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.326974097 seconds)
    (324/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.376353615 seconds)
    (325/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.017077829 seconds)
    (326/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.91441721 seconds)
    (327/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.014980092 seconds)
    (328/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.73647189 seconds)
    (329/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.83270676 seconds)
    (330/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.971153959 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.431221437 seconds)
    (332/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.498548001 seconds)
    (333/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.859746849 seconds)
    (334/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.177652041 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.011022712 seconds)
    (336/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.026883477 seconds)
    (337/341) benchmarking ("sort", BigInt, false)...
    done (took 7.066349004 seconds)
    (338/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.262850595 seconds)
    (339/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.331783057 seconds)
    (340/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.023930253 seconds)
    (341/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.551435797 seconds)
  done (took 1140.399445425 seconds)
done (took 1142.423742696 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.036375158 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.01879312 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.527622967 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.03247937 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.019136897 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.021893879 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.537119768 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.051722375 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.036876671 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.537197947 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.031280488 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.017666808 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.03438977 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.053345757 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.02959531 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.03238475 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.024367463 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.044951039 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.053236742 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.024758831 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.069095474 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.025064886 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.019483246 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.0712535 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.019599271 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.034016199 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.03728294 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.069903426 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.069584881 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.022282434 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.025434884 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.376702356 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.07544689 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.022621046 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.031132597 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.035245745 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.025330042 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.034162097 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037124632 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.034732397 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.020268317 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.030311615 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.024550144 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.022647448 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.019818172 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.019797864 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.022114738 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.145811235 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.035494913 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.360119072 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.084538152 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.038471195 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.070233132 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.023384101 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.022139345 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.02331854 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.071750306 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.025001534 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.025329644 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.359834591 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.118605446 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.037463001 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.362703538 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.09004478 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.030919313 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.028450169 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.020697348 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.03827768 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.377595434 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.584109346 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.05624104 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.041919742 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.021812345 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.023621554 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.035083725 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.538747399 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.039650168 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.607760323 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.052844795 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.036598041 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.027922722 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.023537752 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.023777746 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.039583289 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.040538203 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.021862037 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.028683976 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.028142137 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.035631312 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.379987 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.070298513 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.527979568 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.032975608 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.041078252 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.041223716 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.607531713 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.056901229 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.039541138 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.026578355 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.379190897 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.068648219 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0413703 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.025480136 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.035662719 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.137996408 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.040008269 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.041280554 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.022312936 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.045314117 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.030012396 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.023147089 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.036245342 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.043447438 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.058269895 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.040914798 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.022712099 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.031689673 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.028997702 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.041338635 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.032788523 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.030792727 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.034375065 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.023679833 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.075605012 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.041917243 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.039949952 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.139146704 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.029773879 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.149306519 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.038699456 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.03271679 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.023155818 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.36300674 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.074529528 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.046184716 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.031154303 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.047630384 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.046534138 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.042086684 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.027164646 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.040493779 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.028452115 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.077207078 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.025228042 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.050101896 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.077107765 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.039766357 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.032120232 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.040749748 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.060478874 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.045190991 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.030424521 seconds)
done (took 319.048838239 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.072983463 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.024854935 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.102097412 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.024260938 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.093694458 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.080394506 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.02380889 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.024576269 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.023898508 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.425845704 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.024421395 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.029968811 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.022693643 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.024844479 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.077259785 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.024295667 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.024800667 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.264840223 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.026068252 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.085271359 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.02402633 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.02573093 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.025197058 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.428097463 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.024731605 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.026050784 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.087178061 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.02539432 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.267966208 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.026074887 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.025672276 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.270203571 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.086250419 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.038054342 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.036130502 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.031058017 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.09416883 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.034603824 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.075076199 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.076935519 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.102973076 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.058843342 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.024835451 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.025796641 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.030721013 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.026741767 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.026419065 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.057075125 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.025863183 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.031694108 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.265079408 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.034233116 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.031653891 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.026269269 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.026492605 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.042715147 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.027509935 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.010915361 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.074724373 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.026571981 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.076061835 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.429222775 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.429709058 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.027614551 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.027417063 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.027358337 seconds)
  done (took 194.180164957 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.092567122 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.114441841 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.096363748 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.033769904 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.079378591 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.096357494 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.033943611 seconds)
  done (took 16.504515316 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.033194677 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.027350537 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.051290135 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.050798754 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.027329288 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.166645181 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.040179977 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.034418203 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.053247907 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.028610148 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.364074341 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.051448683 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.036763954 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.02745965 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.040188251 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.056780674 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.030836791 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.028784692 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.125572116 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.106190943 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.033360906 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.035434721 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.057025617 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.040452729 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.029094312 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.029109468 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.005607615 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.036423713 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.028648561 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.028856361 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.029326436 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.041948365 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.029617037 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.028100873 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.02950912 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.031192078 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.029657838 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.029470873 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.028860554 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.027954556 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.026772019 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.029071326 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.02954421 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.028942476 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.029834193 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.052188866 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.030227339 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.02987141 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.029410867 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.031047501 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.058919378 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.030352017 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.029206386 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.034843958 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.071407315 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.037838587 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.030525811 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.030357989 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.0297688 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.030798065 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.030350955 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.110959803 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.053318187 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.030928028 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.053617747 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.068307582 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.031041124 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.030831173 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.029862319 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.055549519 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.031209678 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.053624696 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.030946619 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.128364319 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.030585451 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.172073435 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.053882287 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.034687894 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.03518415 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.031268847 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.038668192 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.03093103 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.033457732 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.037832345 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.036448446 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.031194984 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.031455603 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.033050438 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.039704523 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.031579341 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.076573208 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.031604454 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.031902111 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.129750665 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.031195836 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.129858548 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.057724413 seconds)
  done (took 220.602197056 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.037801639 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.034412791 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.045760774 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.034055924 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.033107332 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.038028031 seconds)
  done (took 14.185820069 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.035256462 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.036117992 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.032424557 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.032970928 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.032774282 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.03404761 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.033335328 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.034690323 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.037678577 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.033387235 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.03415641 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.033361773 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.032997906 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.034024952 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.033708913 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.033423005 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.033069406 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.032551803 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.033470656 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.033143629 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.280612261 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.034237684 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.033841851 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.037351564 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.038446879 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.033128091 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.042988266 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.033206208 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.033552876 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.040534701 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.039000324 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.035205803 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.038125962 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.041028671 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.038803745 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.038828173 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.03943421 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.03591978 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.035384842 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.034788538 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.035318934 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.034028099 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.033873457 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.036686971 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.037787437 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.042819624 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.039209249 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.043425386 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.034318003 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.035050271 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.035801014 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.035121897 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.034792788 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.036518019 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.040326926 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.042414239 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.039694398 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.035503942 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.0356491 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.039788844 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.039848979 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.036154405 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.038080019 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.040579818 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.042364558 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.037249323 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.039603976 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.040220459 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.035511941 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.035514307 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.036223877 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.035961824 seconds)
  done (took 149.83179809 seconds)
done (took 597.260244603 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.135833172 seconds)
  done (took 9.10271335 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.06313088 seconds)
  done (took 9.130370717 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.459288927 seconds)
  done (took 12.42878532 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.061341994 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.051027415 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.049836186 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.041946752 seconds)
  done (took 30.187306771 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.328605267 seconds)
  done (took 9.295477462 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.050032446 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.034453804 seconds)
  done (took 16.123665005 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.087145379 seconds)
  done (took 9.054535645 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.505963697 seconds)
  done (took 9.48539255 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.059755625 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.057123634 seconds)
  done (took 16.104844321 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.039850577 seconds)
  done (took 9.007000456 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.835588821 seconds)
  done (took 9.895510153 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.042620041 seconds)
  done (took 9.031143831 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.09465996 seconds)
  done (took 9.062358483 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.064607781 seconds)
  done (took 10.03151531 seconds)
done (took 169.907507821 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.045405136 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.041322425 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.040337036 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.038306566 seconds)
  done (took 30.13297153 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.071866213 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.07195745 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.080714327 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.071641815 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.063284765 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.062785701 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.072758072 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.072273021 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.062224191 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.070493358 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.072243067 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.069784386 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.072551287 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.080900967 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.080377157 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.070556871 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.072802251 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.073178324 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.062927856 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.081540594 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.070542839 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.071565993 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.038755453 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.039270108 seconds)
  done (took 51.6260219 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.229241466 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.104023122 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.19061577 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.078450839 seconds)
  done (took 10.570919317 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.037715373 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.102470136 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.089894918 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.084536218 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.089568417 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.141332025 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.091105233 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.175092834 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.167729675 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.169595285 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.046038598 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.060480784 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.063786313 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.084347793 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.14233613 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.038877521 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.039028342 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.15434397 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.101591622 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.292478371 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.039134186 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.093376461 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.091390751 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.092178393 seconds)
  done (took 52.457639453 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.039956921 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.04768053 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.046536549 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.039972646 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.040929349 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.040639617 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.047613694 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.042208127 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.062657218 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.042936876 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.040696818 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.042060112 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.048136836 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.041428917 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.040164151 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.054797335 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.05652232 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.040035049 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.044229193 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.047691183 seconds)
  done (took 42.876621335 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.027604755 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.874591701 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.386964278 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.292076405 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.039588886 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.043141277 seconds)
  done (took 32.634324798 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.054851972 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.06051 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.048417383 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.067044151 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.091657713 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.052154369 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.104716271 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.208829437 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.052740522 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.100791193 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.066398743 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.048646793 seconds)
  done (took 26.929128417 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.040993738 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.043380625 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.043703159 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.062768259 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.052414905 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.051893291 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.049066202 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.040286543 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.055600421 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.063733432 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.054380873 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.053860233 seconds)
  done (took 46.583458023 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.256211601 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.268151937 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.267172591 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.692682848 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.374257753 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.030415322 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.326793445 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.244916577 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.751529924 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.770912792 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.34317438 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.0235603 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.989300516 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.971166645 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.945674542 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.285233049 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045608233 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.904904641 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32055021 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.095559708 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.051613848 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.046241478 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.050686926 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.337406517 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.378754572 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.047425175 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.258392772 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.063953625 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.044632992 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.320374498 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.681788851 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.109964697 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.25486479 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.303355024 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.391051731 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.106724236 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.158500744 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.272175344 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.101697228 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.080800616 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.057657243 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.057220499 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.568746443 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.05864289 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.319140767 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.046656183 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.055129714 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.159302398 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97281197 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.373841865 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171200215 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.045626893 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.081460559 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.480158667 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167429788 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.294885263 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.051303125 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.271720651 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.115083157 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.307763934 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.163338748 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.161813396 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259665879 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97278782 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.462048775 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182184832 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.049733969 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.051996393 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.747910085 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.290462074 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.128318884 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.382865689 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.817631868 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.048628177 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.050356539 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.09052368 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.137022333 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.047266264 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.344806011 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.061135251 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.974465431 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.147708245 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.461497452 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.053355384 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.046978144 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.056284289 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.894477383 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.973663024 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.135984452 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.309300988 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.382132148 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.054272269 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.049911496 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.071191004 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.050762726 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.004635112 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.666229173 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.122767809 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.974625469 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614387157 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.699469329 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.024925103 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.572115268 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.101201682 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.332110941 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.212656235 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.457290064 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.255730624 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.283827071 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.583313303 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.05324621 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.607917878 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130233477 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127335649 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049614788 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.604000621 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.278877738 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.361947529 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175046897 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.049617281 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.976239646 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.060796069 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.253318033 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.705711385 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111099304 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.049464653 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.055235894 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.049922167 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.053936372 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.1564639 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066739671 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.346724097 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.128234419 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.051107234 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.987643007 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.055350432 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337418337 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.79858694 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.117816579 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305148058 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.303436317 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747788576 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.648521922 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.997532272 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.335053833 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.12619527 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126471276 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.635381825 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.189048642 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.148408847 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051563373 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.179159048 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.062892958 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.054131843 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.524366517 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.46998156 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.479894425 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.098084516 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.052210574 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.003738943 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.290112749 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.298774417 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157028333 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07852119 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.056077661 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.134001394 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.278790255 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.05231107 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.978195279 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314883261 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.300533304 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.347020433 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.464964944 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.154690343 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.127865813 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.063908889 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.265634578 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.133439489 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.711051159 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.598293619 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.288536326 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.676710058 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.023792758 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.691558866 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.319115719 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.444283343 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.06845363 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.507229268 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.284754464 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.814653446 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.090795914 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.57753002 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.979679568 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.057965038 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396954824 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.015129167 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.371676488 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.210935997 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.069908021 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.055034519 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.054970613 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06153773 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.007476634 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.163088092 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.122908245 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.126170363 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.980363355 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.756097418 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.099871675 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.056235082 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.054771288 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.467171973 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.956988469 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010387078 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.054254642 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.131124307 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.796078732 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.605798386 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.059836661 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.057303235 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.661443083 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.060572115 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.959973184 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.058531862 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.968628914 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.08489487 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.32326873 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.765366195 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.346344909 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.135220354 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130803726 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.055320227 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062892215 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.755706961 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.064094362 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.756080784 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337296439 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.319182021 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.507679688 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.124776097 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.266214178 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.071609225 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.057214934 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.580321459 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.08487589 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.058428071 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.259438156 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.575136676 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.391977988 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.710534387 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.141515075 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.056743213 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.339687305 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.06999543 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.705152095 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.760172319 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.069994245 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.056723415 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.312489845 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.742578944 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.058659367 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.033277439 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064762374 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269540144 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.260571315 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.339335357 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.363467819 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.51129259 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.984804821 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.062689573 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.100523675 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.30163533 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.057648876 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.092571428 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.503987633 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.152334168 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.48955968 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.346023236 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.461105399 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.703373076 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.327656003 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.126156383 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.069595364 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.706523132 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.198756623 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.991998465 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176851011 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.988511838 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.830957184 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.356918516 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.075752431 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.341429039 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043343812 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.405652502 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.360444181 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.339745743 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.116951479 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.08768761 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.058821927 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.097882137 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.05940414 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.306724106 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.181582385 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.065700358 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.653488936 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105172932 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.105138169 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.064774789 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.607098706 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.082897467 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.062401483 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.754186457 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.067085645 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.174144088 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124941443 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.840956599 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.742429651 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.092855267 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.019412913 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.719115939 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.342475338 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.119927279 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.518020125 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102894402 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.464253098 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.060815678 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.273643095 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.065403371 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.684984488 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113053729 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340488008 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.021287918 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.272768665 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.271566326 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.091050319 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.067348345 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986975328 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.222701316 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.940710113 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.041015688 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.063520937 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.74326285 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.492634145 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.319697792 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.538324673 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.887039139 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.063356246 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.447191912 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.48454761 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.740905269 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10099212 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062386622 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.401344999 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.204432769 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.409205435 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.366311167 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.071352649 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.076285514 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.275447019 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188473335 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.980551089 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.543175383 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.647348479 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.763362891 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.072726314 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.264995932 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.408982607 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.408333003 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.103833534 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.135557643 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.467073844 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.345347742 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.13543219 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.989287622 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.062978887 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.457796922 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.468702904 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.148660509 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304667037 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.386192309 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.772815951 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.720861033 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.55834758 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.53604786 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.519987638 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.461009822 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286302028 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.444091316 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.392981469 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.655430332 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.476616535 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.277347252 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153101678 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.351616987 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.940144317 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.774627556 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.308295549 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.068312392 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.992062358 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.271744851 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.069147831 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.629345295 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.596705146 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.31170965 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.341664921 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.544693518 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.602972179 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.300055134 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094213965 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.030684526 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.088521295 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.085314664 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.06545086 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.544843727 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.354670978 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.077649364 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.006151148 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.736599661 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.992015502 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.278783471 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.300699755 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.106983132 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.621087472 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.348172847 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.183206006 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.372336407 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.356016101 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.106664674 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.99215391 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.867569518 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.01654296 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.164564963 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.494675386 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.082312816 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.068736067 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.269468086 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.995332182 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.111862921 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.071119066 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.27565086 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652759444 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.354476679 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19624282 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319157928 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.373506173 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.991586734 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.108641792 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339527594 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.992958947 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.744955101 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.751945742 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.107015748 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138151547 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066932921 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.070476546 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.33929424 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.409337028 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.178074895 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.829224168 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.105512677 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.091236828 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.413837088 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.17404572 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.068984869 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.0730917 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.598911615 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.306323451 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.067917178 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.039967147 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.280763059 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.141905502 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.264273778 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.143050702 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.581693116 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.073647867 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.004791427 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.183732839 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.020176884 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.067487734 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.807972898 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.133080092 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.067765664 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355795245 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.731061525 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.271064096 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.464657428 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.955142598 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.312053784 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117930614 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.071992595 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.077527098 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.464745836 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.377263962 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.068539737 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.343414401 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120329642 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.073318684 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.728978983 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.038300203 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.06886056 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.865319747 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.965244749 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.802398079 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.466093092 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.072131665 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164946659 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.072667458 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 3.996781384 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.071162743 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.242214655 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.039877386 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.07147996 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.449790707 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.396555036 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174321268 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074875057 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.071977339 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.077222645 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.283204432 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.584978615 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086421441 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.770192615 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.274526405 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.077853793 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.550971588 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.52185411 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.379378716 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.115284572 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.304839861 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325515892 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.623244037 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.313002059 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.053481184 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297763187 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.072994195 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343586161 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.345170537 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.071925589 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.283211458 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.724443494 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.362904284 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.430587171 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.386701139 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.141036934 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.319522221 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.976788455 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.058926589 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.074115003 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.340001584 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.12958512 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.071390238 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.08048606 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.624161647 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.853202371 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.549283847 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231694997 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.39472717 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.894652766 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.829138759 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.073714492 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 3.998614675 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.072080631 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.098322174 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.074882564 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.998643227 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.784815661 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.799593948 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.286186955 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.383478545 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.99924161 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.276800276 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.652665565 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 3.999387992 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.042061992 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.075739733 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.317561803 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002412471 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.076787958 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.027025793 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.353755125 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.851700597 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349671597 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.073877011 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.017670337 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.078368372 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.075492985 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.072975602 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.157172561 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.07473486 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.189855728 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.341833998 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.451758264 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.189681296 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713215155 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.86803621 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.015038598 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.118637059 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.634019891 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.644390383 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.36108811 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.212033734 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.858136942 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.022189187 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.077508001 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090632034 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.331836962 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.080302098 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.076918761 seconds)
  done (took 2200.34662179 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.07685542 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.183061093 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.167535088 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.148208436 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.223540245 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.115479797 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.187913736 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.164230826 seconds)
  done (took 59.270032637 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.074761265 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.057275786 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.08508829 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.087261091 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.134588791 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.083165924 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.264874925 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.107810292 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.076160575 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.080534483 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.075958529 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.079442035 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.076163068 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.075732069 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.080885997 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.368869203 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.095178739 seconds)
  done (took 79.950275899 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.127603662 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 9.878596204 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.079287317 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.759121449 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.132631425 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.437650787 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.075916835 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.076698215 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.202678068 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.372749642 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.112624037 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.095204753 seconds)
  done (took 92.356844855 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.078405724 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.065646705 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.077376411 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.077588063 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.077847917 seconds)
  done (took 12.383040847 seconds)
done (took 2740.153024409 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.32433417 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.173327096 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.152095746 seconds)
  done (took 6.329623437 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.22347222 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.27039927 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.383882316 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.38966138 seconds)
  done (took 11.280240908 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.359849308 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.468602825 seconds)
  done (took 6.834490905 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.451599747 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.083498175 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.470072134 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.080056332 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.083885582 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.084202993 seconds)
  done (took 23.259743149 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.079022194 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.079384773 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.08020255 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.079086172 seconds)
  done (took 10.325423489 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.077373926 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.853044264 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.078921889 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.087876835 seconds)
  done (took 22.10451786 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.286357493 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.069299564 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.8513723 seconds)
  done (took 10.202096883 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.70408927 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.534042829 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.691184684 seconds)
  done (took 9.936014637 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.257708962 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.895468237 seconds)
  done (took 8.160502471 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.224491711 seconds)
  done (took 4.231606203 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.912039501 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.363618591 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.552243781 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.603121757 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.670382229 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.301519121 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.405754169 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.354469926 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.482456163 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.522797657 seconds)
  done (took 27.175657343 seconds)
done (took 156.175984166 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.489933394 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.095453989 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.287514108 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.447598152 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.318445188 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.290656198 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.383527022 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.437307659 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.124228699 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.110494847 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.454649335 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.319526116 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.315667651 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.098237354 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.319354112 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.097741218 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.314898132 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.508626294 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.133510616 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.374822806 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.377581003 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.094232212 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.288370222 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.110353059 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.319710988 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.242532185 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.686258063 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.106081294 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.284139923 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.701983337 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.242086355 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.516433338 seconds)
  done (took 175.90087187 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.068977925 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.082402339 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.073683775 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.081799158 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.419805477 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.082082994 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.08146422 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.082422627 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.374891508 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.358202558 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.083047757 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.406754342 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.084935442 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.082516037 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.083579912 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.082401912 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.493662291 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.082054159 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.082759142 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.083636632 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.084043253 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.285569883 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.083109889 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.296378428 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.484833001 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.083295735 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.083719883 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.08338385 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.084497976 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.084041334 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.084774168 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.083328523 seconds)
  done (took 215.104536198 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.072768851 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.064123158 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.084167189 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.0841685 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.084889147 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.085054725 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.08507532 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.08382177 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.808857587 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.800146421 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.085499123 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.08539179 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.086138475 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.08446832 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.086568031 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.085027106 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.084158444 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.085679478 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.0854301 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.085339181 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.085095944 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.906088355 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.086152556 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.936014484 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.085712409 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.09012394 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.085976067 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.093613605 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.092092897 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.092298107 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.086706269 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.086053474 seconds)
  done (took 227.845217262 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.323397534 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.086621838 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.086702623 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.100500824 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.086902554 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.075081995 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.096213078 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.33279805 seconds)
  done (took 21.202278097 seconds)
done (took 642.077446685 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.447631367 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.832851538 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.221712573 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.111798146 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.366549388 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.15651886 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.104206219 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.169116806 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.756591172 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.183677713 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.527793831 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.114257186 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.847514985 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.135443937 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.221269786 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.16710892 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.476902462 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.729705 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.242085102 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.785014578 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.313109632 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.026955399 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.188442707 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.789314278 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.536650428 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.049775902 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.112540659 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.48519349 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.111690287 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.341845536 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.765295541 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.359258625 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.123570971 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.111053261 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.163700961 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.14921875 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.297852969 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.120557035 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.221305762 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.822483891 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.770763867 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.635528232 seconds)
  done (took 109.108544656 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.09468455 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.092303965 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.092690012 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.092850556 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.101342744 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.093440304 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.093099305 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.093089514 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.092565841 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.093538636 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.093320917 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.101570669 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.093535587 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.101426111 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.093150967 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.094072046 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.093125575 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.101258417 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.09371598 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.093630703 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.093542895 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.094532692 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.090459624 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.093226023 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.094013148 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.094160488 seconds)
  done (took 56.483986409 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.088555404 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.265973227 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.38104708 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.12360497 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.090222357 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.093124738 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.119019653 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.097598132 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.092028418 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.09238338 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.202899568 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.096171901 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.101977663 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.375713117 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.112297294 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.086612381 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.090200486 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.091248254 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.262674235 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.107439862 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.120859538 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.097438882 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.121293886 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.105274295 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.092437054 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.091492627 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.09390951 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.520022884 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.104298884 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.205408484 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.134692455 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.125508489 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.439274489 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.389851889 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.160106259 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.097618517 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.090922343 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.249245562 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.104481581 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.092556828 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.120284103 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.100431712 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.381297139 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.612642757 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.108213914 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.090940661 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.515082622 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.261602074 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.159778334 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.106654587 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.390238459 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.124408039 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.091925227 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.09380029 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.128976132 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.10483531 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.092872986 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.327973129 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.109467025 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.122133377 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.089011749 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.093197534 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.283276275 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.102256263 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.270624063 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.102729242 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.099161375 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.094263071 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.383768278 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.125479571 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.603679112 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.109018347 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.093195416 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.206928501 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.278672621 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.545385772 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.108219228 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.284423562 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.456268407 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.13222132 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.1057792 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.505607801 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.135897826 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.104711898 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.094086189 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.093530575 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.093657146 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.136963619 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.12098968 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.522401241 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.606442175 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.358707663 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.135575961 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.108441297 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.095505432 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.342219046 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.107136943 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.093798314 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.378967549 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.631450442 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.11119331 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.101505297 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.588201165 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.11237385 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.12395408 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.095813518 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.402955378 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.114212293 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.137035071 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.082395702 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.101433322 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.097221578 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.124656505 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.109717617 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.068353402 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.579407103 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.269340241 seconds)
  done (took 258.924645253 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.087678007 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.094452196 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.094788926 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.094008568 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.093999823 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.095727208 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.093894097 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.093780572 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.095898268 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.093242311 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.094563269 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.094978341 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.095300242 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.09579223 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.141837756 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.096987517 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.5868702 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.096282046 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.094406384 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.096982931 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.668309174 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.102744488 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.095201373 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.096915658 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.094827994 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.096421536 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.105061927 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.141708646 seconds)
  done (took 173.861922881 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.097237791 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.145294047 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.112696248 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.144405059 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.114626294 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.096085582 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.118092085 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.112902934 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.102568582 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.097145857 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.096859214 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.124577906 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.105757484 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.171070211 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.130267275 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.128018172 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.176322316 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.105183279 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.097576375 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.09770721 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.145063264 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.114956556 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.125604803 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.153612367 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.115755654 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.145870196 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.115615512 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.09787911 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.097723509 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.187493757 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.121304075 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.127035277 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.134823992 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.117506991 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.191493844 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.194255044 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.181719634 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.128641239 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.102486498 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.097923089 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.098370154 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.100188718 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.146549808 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.116184187 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.099314259 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.190036972 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.120690084 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.099234579 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.118678853 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.098428349 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.110571843 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.11552199 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.13307681 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.200154572 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.147919364 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.127324927 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.121622381 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.117112134 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.10030684 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.174062883 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.109886621 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.187957974 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.121219359 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.100911579 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.099536855 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.1032458 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.147053684 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.139778976 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.179042118 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.109538683 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.174504831 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.156401287 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.116966526 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.10038994 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.100403564 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.148183151 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.191118853 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.157086773 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.163813562 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.140147634 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.110258567 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.100783588 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.102925746 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.128587056 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.108951165 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.190318615 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.19600005 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.110447036 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.100563218 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.100073773 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.101542476 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.124474602 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.157515985 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.146149076 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.185852431 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.139618824 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.137332132 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.109343353 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.113196272 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.107063561 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.101324209 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.10981274 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.112325469 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.441659227 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.139006209 seconds)
  done (took 225.856360105 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.44995498 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.149634459 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.171911884 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.365514992 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.476680993 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.190671291 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.140855306 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.153563501 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.161221951 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.276096699 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.213211977 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.196271593 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.138914981 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.123663153 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.148343887 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.160894994 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.179471691 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.463695303 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.255577744 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.859207293 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.143603694 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.391617628 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.453649654 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.497343132 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.189069674 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.523325182 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.763117861 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.241936766 seconds)
  done (took 68.512524843 seconds)
done (took 894.762959857 seconds)
SAVING RESULT...
DONE!
