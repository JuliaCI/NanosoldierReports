cset: moving following pidspec: 10412
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.011075611 seconds)
loading group "shootout"... done (took 1.142451778 seconds)
loading group "string"... done (took 0.671101431 seconds)
loading group "linalg"... done (took 8.638857814 seconds)
loading group "parallel"... done (took 0.168721439 seconds)
loading group "find"... done (took 2.886446282 seconds)
loading group "tuple"... done (took 2.082973892 seconds)
loading group "union"... done (took 15.43454169 seconds)
loading group "dates"... done (took 1.488005525 seconds)
loading group "micro"... done (took 0.22064022 seconds)
loading group "simd"... done (took 4.840063506 seconds)
loading group "io"... done (took 1.093442869 seconds)
loading group "random"... done (took 9.65878397 seconds)
loading group "problem"... done (took 1.532165398 seconds)
loading group "array"... done (took 25.40359597 seconds)
loading group "misc"... done (took 1.915199596 seconds)
loading group "scalar"... done (took 43.933661385 seconds)
loading group "sort"... done (took 3.363099988 seconds)
loading group "sparse"... done (took 12.889665744 seconds)
loading group "collection"... done (took 18.926126483 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.428651989 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127165482 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131060874 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124832284 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.185837209 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.122987743 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134440078 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087788579 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.864642714 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139292529 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118814374 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.444980059 seconds)
done (took 5.359851347 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.166995768 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.094089787 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085450875 seconds)
  done (took 1.399278808 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07231446 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06233513 seconds)
    (3/3) benchmarking "different"...
    done (took 0.069072347 seconds)
  done (took 1.425545992 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.067097687 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135873646 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.068133141 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06849164 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071810648 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068079824 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068278881 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.067723193 seconds)
  done (took 1.775416145 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072639691 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.069373037 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067227368 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069518015 seconds)
  done (took 1.504777229 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066182354 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.12488798 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067205988 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066810153 seconds)
  done (took 1.548621087 seconds)
done (took 9.130127487 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.143072065 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.831887192 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.759265084 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.126611874 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.251937155 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.453469041 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.126034202 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.187819559 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092645252 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077367028 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.124907958 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.080689916 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.409307288 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.410329822 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073885945 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.1750678 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.644137171 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.0892555 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135226355 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.469050251 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074198306 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089598341 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086822876 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071485525 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.334771178 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.155093497 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.668604935 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.097322812 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070246354 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096665869 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.073387699 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.080607509 seconds)
  done (took 10.818861732 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094254724 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093448512 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.07108491 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126475842 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.09674771 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072011162 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077481087 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069739887 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091973046 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128206138 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093684827 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101418522 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068743497 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071475545 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082186513 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.200245559 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080901392 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.083647651 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069960324 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083044059 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108498294 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081072203 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080784256 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.08079948 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132868673 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173285596 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100829804 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101050885 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068470842 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.08136875 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.120582901 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128810566 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069228465 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.067609761 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.12266058 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.098140999 seconds)
  done (took 4.757060949 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.904076019 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.097966685 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.085337854 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.076618336 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109391829 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.116550823 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.125538318 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.126521861 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103301577 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070562298 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.15731257 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.658050752 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.151307926 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072175239 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.121346865 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.367111333 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.061771158 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070142474 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070181738 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073250394 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072088864 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.11522054 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068291793 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.179751199 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.584951817 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072803677 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071689525 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.09985743 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068131712 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.145928783 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.099199287 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.094970822 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072293381 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.555748986 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067170529 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065356592 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089584628 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.09443559 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067378123 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.182875657 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081915122 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069047985 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111315649 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083244934 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.49810918 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072497929 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.580275226 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.228355919 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075521175 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.074355952 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.087259898 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.104191449 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.066773615 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069832783 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.801202293 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.125717041 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069055799 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.279443914 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070528872 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070620005 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07097251 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.102419764 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06916272 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070847931 seconds)
    (64/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065743062 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074655772 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098296725 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.814615337 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.090021883 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099155281 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069272698 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.408865681 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076806856 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071500575 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071609436 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.086617847 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.114203418 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068815787 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068506486 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.110079822 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.091289864 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.0921956 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071759899 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.070037012 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065725244 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067879007 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.323110084 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.18244368 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067460175 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068595575 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.485214309 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.066251175 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06804179 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070285845 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.091006093 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068956561 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065040041 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.066177675 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101101682 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069634434 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.462830255 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.070604343 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.483827624 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071736693 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.109890639 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123429355 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070283023 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.098579825 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.070416322 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.066841624 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075973012 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.067643145 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066744296 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.071616431 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067305856 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068178962 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.071825244 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070536155 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069709004 seconds)
  done (took 22.898034324 seconds)
done (took 40.606604353 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.338407092 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.080868365 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.081053254 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.080955027 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.081127076 seconds)
  done (took 1.941676645 seconds)
done (took 3.31545426 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133324553 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077619688 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066603813 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103740949 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.07097225 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104373305 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111476983 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107098264 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070815943 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070451219 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070570479 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105461084 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107620141 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070560549 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.10064079 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106805241 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070602116 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.069469237 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070682469 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071041164 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070791478 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.066337003 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070978373 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.07115064 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101918476 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071160202 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066545206 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.102223153 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071015562 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101384585 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071019983 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.07061778 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070835226 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.102793926 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.07122937 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.102498431 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.0665252 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071273831 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070999444 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071218819 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071581814 seconds)
  done (took 4.719406296 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071242017 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083798196 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085457471 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063951159 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07342705 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084637182 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064038146 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084081739 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090835935 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084730616 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084347268 seconds)
  done (took 2.198691631 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070554389 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084123942 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089635295 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063419939 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075263393 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085034938 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063978672 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084668488 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087607981 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085908465 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085452704 seconds)
  done (took 2.183515283 seconds)
done (took 10.401821058 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.09737414 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068483265 seconds)
  done (took 1.454778928 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.229183711 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.511235084 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.311514616 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.21551156 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.074375776 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.088101497 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204425149 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.069291361 seconds)
  done (took 8.184409971 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.100716348 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.075320391 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071432988 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.06908884 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069704103 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072362036 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070353984 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.06971158 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069815961 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069184189 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071400366 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070844824 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069871609 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070205091 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071754249 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071215872 seconds)
  done (took 2.571466574 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.105802319 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.071584259 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101767089 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.063948853 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074356595 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.064183006 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.072460291 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075220526 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.071813957 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.072559002 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074141621 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.07281992 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072578807 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.073404758 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075009925 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075121103 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075081302 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072314114 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074952812 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.075543522 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.074163361 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.074737789 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075526002 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.073514805 seconds)
  done (took 3.236897254 seconds)
done (took 16.756157315 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.175115191 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076691279 seconds)
  done (took 1.55093643 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067939184 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070286633 seconds)
  done (took 1.457521971 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073631138 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061808036 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080825023 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072785159 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063338996 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062880019 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078883593 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063017728 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06325991 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063714597 seconds)
  done (took 2.002507899 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063431269 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.071265451 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068743226 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.067058937 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069157258 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064228376 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067676381 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064382064 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071617458 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.064021956 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.068477498 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.085754357 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067959283 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086386102 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067642057 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068144925 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069336866 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066945662 seconds)
  done (took 2.575369433 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061552705 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063491971 seconds)
  done (took 1.449921447 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065016183 seconds)
    (2/7) benchmarking "second"...
    done (took 0.064296306 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066712792 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066081233 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063488646 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062697167 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064080533 seconds)
  done (took 1.771335034 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.428748972 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125487665 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348298395 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.0707352 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079180613 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.260023101 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06526685 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070455016 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070304003 seconds)
  done (took 2.880166059 seconds)
done (took 15.02172277 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082394117 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184215384 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.089933654 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.412362592 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094042559 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068891602 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114552417 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.178197385 seconds)
done (took 2.570321259 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.216096022 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.258059544 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.402417582 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.128308673 seconds)
  done (took 3.117887835 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.339159131 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.080257902 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078918294 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068899935 seconds)
  done (took 1.908548683 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065493914 seconds)
    (2/2) benchmarking "read"...
    done (took 0.073396355 seconds)
  done (took 1.475043813 seconds)
done (took 8.060345654 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072311511 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064228859 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.099015058 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065732056 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.066837917 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.065425763 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065201576 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.0662524 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.07431197 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.066289597 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063571145 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.066001502 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066194652 seconds)
    (14/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.065127537 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066185376 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067187825 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066206387 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06569275 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065246088 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065304769 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06625307 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065026319 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06569044 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.063848858 seconds)
  done (took 2.987392777 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079466487 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067386184 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068572301 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068388139 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068550594 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068894606 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068789436 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067419913 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068847207 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066919573 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069221086 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.068988826 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067008732 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069587694 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067224697 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069750387 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069111659 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068174386 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06731708 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069304731 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068738179 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067849118 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069189135 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069111677 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069438264 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069120757 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067808347 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.068096069 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069731756 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069394429 seconds)
  done (took 3.419891632 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067036872 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061780765 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062113422 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071716002 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062078424 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062766202 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062612546 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061282684 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062487829 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063280885 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062617296 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061677972 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062818251 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061788806 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061991308 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062525783 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066144252 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081769832 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062343682 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.062195386 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.066428883 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061980256 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061884672 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061567698 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062583312 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061976471 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062308509 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062268902 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.061685289 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062633043 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061712818 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066006842 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.066762092 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062111588 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071799814 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066774203 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.061521297 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066113756 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063229429 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061306799 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061489102 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061856876 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.0622227 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061949859 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072321663 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061799246 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063262079 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062496812 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062351286 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062115482 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.061923196 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064059849 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.07049932 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063476937 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061803419 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063274975 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061312462 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062800976 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061920084 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061049038 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061165803 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.065818432 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.06305641 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062607869 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.081510887 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062943473 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072130549 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061733843 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062506532 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.0662783 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.0622958 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080169973 seconds)
  done (took 5.969853935 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072040871 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07433524 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.080867895 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.072268413 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066528485 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063186947 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.066745993 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063328895 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072554211 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.067435912 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063241424 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067214619 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072753205 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067328915 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064666991 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.072981233 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067123593 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0664793 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063191177 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067576677 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064946825 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066683617 seconds)
  done (took 2.868948792 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136278282 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068599362 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108887082 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077217188 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070366243 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077231208 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067775621 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068451429 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068504732 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068662357 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069218994 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068364678 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071096301 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068776014 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068562562 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068680346 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068005851 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068261292 seconds)
  done (took 2.716218236 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076906226 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067772739 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.091551651 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067177562 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067897062 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067452713 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071484998 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071864991 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067696205 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067501068 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072059887 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067751279 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067685999 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067398322 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067533493 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068056136 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06718713 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06732276 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072003214 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071030311 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071399593 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071874246 seconds)
  done (took 2.906293279 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077079632 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067101584 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082531237 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068039738 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062345725 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062983693 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068478135 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067164963 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067418776 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.06645513 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067039892 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062135316 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068300537 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06752712 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068937748 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067047196 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066610033 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067499981 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0668597 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062121755 seconds)
  done (took 2.712529606 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086741226 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064945311 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064846283 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.085184675 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065610091 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064916586 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084586868 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064871736 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065173088 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086666279 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065605072 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065282112 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084306086 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084335665 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.064808913 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08454365 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084366462 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.085170749 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065558809 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064958785 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08693013 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065289473 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084941218 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064945715 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065392024 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065410119 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065345684 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085249143 seconds)
  done (took 3.425723809 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064733002 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064865834 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065548323 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065487507 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.06580082 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065674729 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065403016 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065154059 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065126499 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065950353 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066231088 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065649336 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068725375 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065144353 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065679977 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.06591792 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065684319 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065953487 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065709914 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065988069 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065347633 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065322443 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065774941 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065271142 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065717171 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065448566 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065756079 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065546068 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065319241 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065691941 seconds)
  done (took 3.336291566 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073602054 seconds)
    (2/2) benchmarking "in"...
    done (took 0.073349772 seconds)
  done (took 1.512681115 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062800295 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.079604628 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.062139153 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074362701 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070993262 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066091432 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071474247 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070075852 seconds)
  done (took 1.91612477 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.066998278 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092362534 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063609508 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064146145 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066784845 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.135078133 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076366956 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075953601 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.07821529 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066125418 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064620497 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076378924 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063532037 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077229744 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065612629 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072797661 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071079221 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081001192 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077044764 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.06220325 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07626145 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064744253 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062917617 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.064546484 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063593302 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070742149 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079864308 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076598873 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071679965 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061366067 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082623046 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062371594 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.063961131 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072070531 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067189345 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062655413 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100584169 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063057756 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068231663 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.0624332 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075429427 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084145621 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077766649 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081215983 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064937676 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.064929266 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062408765 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064603529 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066653513 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072762552 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062204637 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070547762 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062370872 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064651005 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073361719 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06335699 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067811588 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072810828 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076546403 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073914641 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071910339 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078554355 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071458433 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070621352 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063866114 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082815067 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064538222 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.075778997 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077892361 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063721181 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076710025 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062015249 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061305535 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062318671 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09657816 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064647867 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06407743 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062559854 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062415235 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064124171 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072468904 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068094359 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070115637 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066300904 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07889753 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072143403 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062702468 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069503214 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080871105 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066750666 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062958931 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079626517 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066155194 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.06204475 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080101684 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072189909 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063873681 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063181265 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065485055 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075891486 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063566485 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060551893 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070463952 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063540626 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064927896 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066157546 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069922529 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.061842727 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072248965 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066840509 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063638138 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060942159 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066562397 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062878396 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061111569 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071949406 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061902477 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076378814 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068542173 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076181672 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.076350119 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071860801 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.077686211 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061349065 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060140071 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079451128 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070810068 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.202026321 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082795048 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063948939 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.078570047 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063906559 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065130451 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073459873 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062485016 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064607884 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06294156 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068091238 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.06408503 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064473491 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068508924 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071674873 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075004452 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064100168 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071657697 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063322491 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079430139 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073188958 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067367598 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066684905 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063669234 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075020737 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.069568496 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073031818 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062550113 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063373334 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.063285802 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.07345182 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072619009 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064444388 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070450839 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067489894 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.0642836 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063814511 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064848178 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.067063916 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06689679 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.0639812 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071201988 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071813995 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077361617 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070544632 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071766369 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062001068 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062684345 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064543121 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062234032 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067393736 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072328939 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078618207 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074772387 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084264225 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.0628766 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072444979 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064640733 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.079816963 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.077011526 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063928786 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067869748 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061688724 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064585406 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072449571 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074638657 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.076935118 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078507562 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067611179 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067749331 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062064952 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077998946 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063492316 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07116929 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072459382 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067536278 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063280014 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064782807 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072663708 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067171994 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062847739 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.078563302 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068914167 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062159509 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077815223 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06294567 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07335044 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062695462 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.06658493 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067852165 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064715293 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072452723 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078520583 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061900338 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063802329 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078797385 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.06443075 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063939707 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071216341 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078050252 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067390191 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070900383 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073128372 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.072776131 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067362268 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07210661 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063380838 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.07143055 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065651834 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073772665 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061956466 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080124327 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060709856 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077357676 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062349752 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073013131 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063062492 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07173337 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063063103 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079401017 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063479457 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062640513 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073895007 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060369575 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071372955 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061053627 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066935307 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068586424 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071498323 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.063686048 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071236731 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.206432769 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.074127694 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.069663346 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073004223 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.073414252 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068236407 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.063198715 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07191164 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074950294 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071395685 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064214872 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065006256 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063950626 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072820666 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064821651 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.065165165 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072088217 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.0675215 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068865466 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064904983 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064723623 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06456692 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071777784 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072549995 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081539273 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072650474 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.071238279 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072624377 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062709432 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079206095 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062685981 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.073651912 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062090288 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069271359 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.07290249 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063315979 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082757351 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064883382 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071487206 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075291479 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071719461 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066324229 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081934553 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06674042 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.07181096 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.072917513 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067660517 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069383882 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064936373 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.07167198 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072901177 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073821385 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06428018 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070378676 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072679974 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064906659 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.070734752 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065190256 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071836832 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065105726 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.06221679 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067724721 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075158406 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.067811278 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06840358 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063826739 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061937447 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063624258 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070109318 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067576369 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072397429 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07885363 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062622725 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063781136 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062861372 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066585227 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081978643 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073281922 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071717356 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067705257 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062582403 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064635873 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065088426 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063353142 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066831176 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062301893 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062353106 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073842917 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065337336 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067405265 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063300072 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064221408 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072578465 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068004458 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064041515 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.069593305 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063369621 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068351036 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062207186 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064418102 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067375449 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062602714 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066321313 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07397917 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.08004434 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06980099 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071735274 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063888593 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070595268 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078547366 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069704828 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063517945 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072116197 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061871289 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081191055 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072052747 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071025596 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071750976 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063225163 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.079338163 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066622202 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.072121704 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077449353 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063570136 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068539006 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061492965 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076771874 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066203841 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061320839 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069928869 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069596442 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067865499 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073705054 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.210227779 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072606766 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069808935 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067406387 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065998762 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065050824 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072390058 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080209947 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064325067 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06756198 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071859587 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.07177461 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067414303 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076081111 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071966122 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064362409 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.06501264 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066369112 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063975988 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075241133 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064256604 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067516297 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06758216 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063403518 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070108486 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080374012 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072681924 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072851167 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062210681 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061731381 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080902655 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066919033 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066783541 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071589282 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072891178 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075868992 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072184922 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079872137 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063706825 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069758469 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076134704 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064626326 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062851286 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066768648 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065509996 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071916724 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074100036 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071219295 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065219041 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069971283 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076957407 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064535103 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067696309 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068468737 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063747657 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073347936 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071416702 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.075400397 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064329669 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062909809 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066855807 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072023593 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071029513 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072578601 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064140945 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069977781 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07754303 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070753259 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066493458 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062469243 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066643984 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072412485 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067559277 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062545361 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068054112 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067085226 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070853809 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.07263372 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067856087 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063020929 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080700868 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071263877 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072859065 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065239517 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065060968 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063721005 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062616766 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074330208 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06258644 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064696039 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.067481579 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064746729 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080779807 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071430728 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078947603 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064156989 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067613993 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062942313 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073037859 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067441042 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063711018 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073886851 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062256364 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078630902 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074648621 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068175281 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.062659975 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.088884105 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.070937275 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.077900397 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072711549 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072135857 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066254915 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072566664 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064460522 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07435182 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.06237761 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.061731288 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072828957 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071298792 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074629688 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06219163 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07233601 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064146113 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070607547 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070157997 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063455984 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063912371 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063517016 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071366725 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066780365 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070912478 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.212082792 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081830686 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065312719 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075323465 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072820745 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074686413 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077798771 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076394141 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071151283 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064511767 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070891913 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.072165091 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064602587 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06800051 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066652227 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085401786 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065786945 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064733575 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.0780389 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070648142 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063818937 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070092903 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067965388 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073618846 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064100438 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073664355 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.0675008 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063606016 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.0675012 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067620155 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06198524 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062977524 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062983231 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073083544 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067903306 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063917819 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081987841 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.06505414 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.072128891 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074788063 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.07015343 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064916116 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062851567 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064428058 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076856039 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078880005 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066941625 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071451165 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064865832 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.073200978 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062043574 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071693901 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071545432 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071871088 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062535101 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063503281 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.07846824 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079016981 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.06769449 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072540019 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07226493 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064418654 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.084842822 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071804147 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063960771 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074465691 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066024884 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062520694 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06211638 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.0646219 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074540507 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062634855 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.065580213 seconds)
  done (took 43.30493167 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099186722 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063928899 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062603712 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.062686745 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074011667 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06404848 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062716443 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063895387 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063760286 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065562414 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062796931 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065873839 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074293962 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076313573 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073830075 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066927266 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062728523 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06400047 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063123111 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063439841 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073168909 seconds)
  done (took 2.915074831 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.06527552 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.067189698 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06722582 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067404307 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067373882 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06321417 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.067410757 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06306176 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067822969 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063498811 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.06801815 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06347858 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.064393451 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063524415 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06359515 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064697826 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.067837077 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066530564 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.063106709 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066887555 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064687015 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.067134423 seconds)
  done (took 2.902538453 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06328976 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063039265 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071645314 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061741631 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062149128 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066631867 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061962492 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.06674845 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.067230123 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.067433828 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072359274 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063632693 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.06249499 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068730755 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061951523 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063322884 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.105861067 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063502797 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063945564 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.06210921 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065508204 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.07198139 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.0627469 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062808586 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066831783 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066020884 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062554128 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065050373 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063721097 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066796988 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063835188 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062595837 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071805187 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071428934 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06685609 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067022637 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064206995 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063250784 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062353447 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062937248 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071247239 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064319805 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062924581 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064766687 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.07190289 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062866336 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06262424 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.072139922 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062403706 seconds)
  done (took 4.707653232 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071748162 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116206624 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06863484 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.097052689 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076079544 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069397325 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.069147173 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097698106 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064368865 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064881797 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.077247367 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077234973 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.066050589 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067280692 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068732508 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065942391 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.066512595 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065279265 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068267924 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065655526 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068141996 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069573522 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075314478 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075965046 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066458579 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.0647066 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065048023 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066877482 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075786568 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.0693393 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067061826 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.068478479 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07666357 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068744924 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065301414 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065852242 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077394522 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066217214 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065886103 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064164668 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065429496 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067678517 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070508094 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076881379 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.06600285 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070754293 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065873691 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063979516 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076492424 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065749396 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.070088437 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077782966 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066934641 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066667887 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067391179 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076457855 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065847591 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064696053 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065951563 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076057097 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063913758 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066637032 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.079797426 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065131248 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069578059 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077069977 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071208471 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066697602 seconds)
  done (took 6.427174892 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070929091 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.097300514 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07436245 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074432367 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073947506 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073998441 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.074293667 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073727197 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074366575 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074344888 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073840893 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114968311 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070884997 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078448474 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074104605 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.074576967 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.074346992 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074118083 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.074198848 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07327174 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07350181 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07437174 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.074412215 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074239326 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076289129 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070334661 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.074031623 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073618697 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074294452 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074392392 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076453664 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073734405 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074379662 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07447689 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076731699 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074193041 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06429347 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073496642 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074351615 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.074175358 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070319582 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074448828 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07377618 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.07028457 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074334975 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074350421 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074986425 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076538603 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080874098 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074845497 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.074089887 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074901747 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073969744 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.074455575 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074820371 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.081129589 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074504736 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074722629 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073855555 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074455463 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074457145 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080974795 seconds)
  done (took 6.178633677 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074948353 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069748487 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082549098 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.063113113 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.06306898 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072866991 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063199378 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063510858 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070310529 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069895439 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072056587 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073296812 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075026612 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072073685 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072746656 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074757701 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07309213 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.073142356 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070196451 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073217663 seconds)
  done (took 2.923826105 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077612721 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.083412108 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.069071928 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072923362 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068914219 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072911508 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.068349988 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068680735 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069540724 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0691318 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073879041 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074546491 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069810053 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072897282 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074131646 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.073442515 seconds)
  done (took 2.646577854 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064945272 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.071737392 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070811652 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064803279 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066908926 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.064021897 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064750501 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.063255297 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.066510041 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.078257983 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064811379 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06743438 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.064735543 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063377053 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063918639 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067093997 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.065833205 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.064126035 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.064643734 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068685161 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.073134064 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064952692 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066834635 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064119462 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.066502808 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.073582129 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065359754 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066488169 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.065276935 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.067443117 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.066958439 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.07129071 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.06711481 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.065273824 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.063265986 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.064460394 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065374994 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.067334584 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06694354 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064493367 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.065925661 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069773126 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.065202805 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065094584 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.066294394 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.067435306 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06597206 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070539022 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064833123 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.066888855 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064977952 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.066433314 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064475233 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.07182279 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066539722 seconds)
  done (took 5.15669827 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07913412 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.069350336 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063499468 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063465292 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068411696 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069251367 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068648813 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068677699 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069191628 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06313681 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069264349 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068372263 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069506436 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.069117312 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06937217 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068938124 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063344028 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.069370826 seconds)
  done (took 2.736122772 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068543995 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.069686729 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.069011151 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065059894 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065209659 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070487074 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063426608 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.065469251 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065711433 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065562847 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065237997 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.064563762 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064434459 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.064745225 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.069643101 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065339383 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.06494948 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063738585 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066039931 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063363826 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.070333524 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063388069 seconds)
  done (took 2.948677245 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089436135 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.087159921 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132725726 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.083619674 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.092149699 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074672639 seconds)
  done (took 2.056571521 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095390875 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107708519 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068221328 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068354697 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0772322 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072174779 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07216615 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071996839 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077317395 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075623204 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072475419 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077720041 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077664719 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073563625 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077453646 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079660463 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072137138 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071694331 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068598157 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07996444 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072004851 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077712872 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071588554 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0718141 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07215326 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073357537 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080174033 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076513226 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071766257 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077592776 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079989675 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071771332 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078065309 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075750007 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068611318 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077173179 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071667632 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079956717 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077528494 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073698317 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068251252 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077467177 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077414764 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073448432 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079829263 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071832486 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073729848 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071569313 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071907653 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081592738 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077131398 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074052111 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077454794 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079828815 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080263471 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081764345 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075640403 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073604479 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077981402 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075789842 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07360119 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078057694 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073760979 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075969828 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079891496 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073824037 seconds)
  done (took 6.512740441 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101504799 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069444179 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072590406 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075558886 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073238826 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072450377 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072300044 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072437637 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072653045 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069162761 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.108199251 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072904709 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073881051 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07646373 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072188535 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071940328 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072560729 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07368976 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069268466 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082157018 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072408275 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073500716 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07356011 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07374895 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076073029 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079647095 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072194994 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071920858 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071688002 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071633641 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073406335 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071887563 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07362474 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.069000426 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073298857 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07191287 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072153077 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073681124 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071837014 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077348518 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073267376 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080428531 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071710366 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071556426 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07607824 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071387647 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071922507 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068681743 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071592912 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068668147 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07554628 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07624012 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075764855 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074057572 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071700178 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071980426 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07173483 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071834398 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071891651 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079665328 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073496338 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07150477 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082003063 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071547912 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07200035 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073566454 seconds)
  done (took 6.423717431 seconds)
done (took 132.953149199 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.219929858 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190591214 seconds)
  done (took 1.891533373 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076464563 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.170001608 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075691957 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.077297091 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.112783602 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107943514 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.076597593 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074652615 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.078090839 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074656237 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.142759893 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.076527454 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074902386 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.075630268 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.075007879 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.07490879 seconds)
  done (took 2.947906567 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.108835591 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18927116 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.084792426 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072463065 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.117997223 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.080139785 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.075201036 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07831799 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079925551 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.072900329 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.110977988 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.084699316 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076837543 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.080486526 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.074834023 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076970292 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078682281 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079385583 seconds)
  done (took 3.132104053 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099049311 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089870695 seconds)
  done (took 1.704544773 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.158728343 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106767232 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.147328117 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.331454633 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.133136694 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130099556 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.134334023 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.130761427 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.115088957 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.123100915 seconds)
  done (took 3.017347501 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.107271824 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.108841471 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.315569551 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.106107518 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.085886372 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080843428 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.078285741 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082790856 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078111581 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078700608 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125821875 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077796477 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.074720927 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127731725 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102718192 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110706201 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073931498 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080865993 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.082921498 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.07379644 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079156121 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08308503 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.183174606 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081391976 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103815768 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.07850435 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.08116319 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077350454 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077613044 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.08161415 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082421347 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.103699104 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.082220035 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085706522 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.079764499 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.100461774 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074438678 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102811785 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077352875 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075603193 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078266346 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082338226 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.07543625 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.081727858 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.07821376 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080147266 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083079127 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073910215 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.078414688 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077246247 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.075058568 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079300374 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079348163 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.080522683 seconds)
  done (took 6.472334997 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.10891598 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109427176 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073240026 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116576773 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109213525 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.073348482 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108184917 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103656279 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112599798 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072659401 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072187282 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072826704 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080084646 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083209741 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117508149 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109424347 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072454352 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072778795 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111360004 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.110976306 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072484236 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105480822 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103885253 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.110367099 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069510972 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.073115728 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.07118922 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071676728 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077587104 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077624748 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071670609 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079712343 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.089046454 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078930779 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071018296 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071463105 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07139172 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.079032901 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079364009 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079341652 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.078311672 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071137112 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071081949 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.07222348 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072242746 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070932151 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077716609 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078790149 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078025982 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071912865 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071861629 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071410461 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071581887 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078360084 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077556175 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079779199 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079685299 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071658824 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071835976 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.073412939 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08066409 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080810051 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.080213765 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072674612 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080741896 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071716412 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.082030242 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.085644077 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071953148 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072138635 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071761859 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071785734 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.072129569 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077363819 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077976663 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07226848 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071590856 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07133469 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080334968 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077601979 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071656093 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077269111 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071110977 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07204024 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071973633 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071922631 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077091678 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079686265 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072577857 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071406227 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071454993 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071387598 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070864372 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077228223 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078287934 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078090973 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.07699197 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07164011 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076987876 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076986902 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071491043 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076849226 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.07081334 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07144598 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070707333 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075910442 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075525635 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077192494 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070434321 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069359895 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075764304 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078274852 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.210226731 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078092439 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081654593 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079265225 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.072287454 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.082296523 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07226992 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081446289 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072388451 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081264372 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072715557 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.078073116 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071844055 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.071063095 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071744867 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077781212 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072606731 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071466301 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072229203 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071813181 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078739359 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.082063173 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072981431 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078337078 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078136382 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072413422 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078174067 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.072072698 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079195534 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072370183 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072310058 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070805509 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081213468 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071882397 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.072179603 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.07194233 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080552486 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072087898 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080131536 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.078365338 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071446606 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08437865 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079527615 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.078537713 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.081092726 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073224815 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.072051637 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07166241 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.075409123 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077593388 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078637052 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072558223 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071567422 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077130222 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081549594 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071309878 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.078067611 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077784086 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078722216 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071755631 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071640064 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.08121315 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081112491 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077924974 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077991427 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.310261454 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071483339 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077376975 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077653896 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071253482 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085995613 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071788337 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.08227385 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078997104 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077506971 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078739262 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079485234 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080551121 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080959266 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083261856 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071761244 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.071047611 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077883428 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071402146 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071689927 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077852443 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.072181983 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071964032 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084488592 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06973958 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.080806637 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.071696639 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.07856376 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071264264 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071815835 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.08347186 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072188545 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071834986 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077721795 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071479274 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077133354 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081035695 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075902286 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071120301 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071175631 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.077545043 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077406442 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070575932 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070710973 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070750522 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075872203 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075734517 seconds)
  done (took 19.291492725 seconds)
done (took 39.98451359 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.174227502 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.121031086 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.214038061 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20714472 seconds)
  done (took 2.336129677 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101755381 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.068422195 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.084639949 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.093945866 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.067702281 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.079217008 seconds)
  done (took 2.060358988 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.207478238 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.177550761 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.247237099 seconds)
  done (took 2.187886879 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.374548095 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.153761425 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221027079 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.513968012 seconds)
  done (took 2.923188574 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.114233571 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.104453372 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.081825668 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.115468848 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.088905428 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.065578754 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137557992 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.072765782 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.103725939 seconds)
  done (took 2.504231088 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.134163216 seconds)
done (took 13.736928543 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.193633797 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.243705959 seconds)
    (3/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.188032828 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.170211996 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.120268591 seconds)
    (6/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.180531039 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.123232195 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.131840634 seconds)
    (9/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.107111555 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.157463691 seconds)
    (11/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.226913472 seconds)
    (12/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.183164973 seconds)
    (13/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.18445014 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.080441483 seconds)
    (15/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.106159023 seconds)
    (16/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.08670057 seconds)
    (17/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.078261836 seconds)
    (18/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.081744947 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.079488577 seconds)
    (20/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.243448208 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.138705129 seconds)
    (22/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.077717334 seconds)
    (23/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.260619402 seconds)
    (24/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.224156104 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.080433787 seconds)
    (26/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.079451965 seconds)
    (27/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.078296489 seconds)
    (28/341) benchmarking ("sort", Float64, false)...
    done (took 0.140731794 seconds)
    (29/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.192864893 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081589011 seconds)
    (31/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.081491969 seconds)
    (32/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.085580509 seconds)
    (33/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077704281 seconds)
    (34/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.233143498 seconds)
    (35/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.142010567 seconds)
    (36/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.204621811 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.078330165 seconds)
    (38/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.193260092 seconds)
    (39/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.186212037 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.098556239 seconds)
    (41/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.086497578 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.180354846 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.126490963 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.264973513 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153190293 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.11524078 seconds)
    (47/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.228951111 seconds)
    (48/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.087986705 seconds)
    (49/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.148232307 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076077985 seconds)
    (51/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.078179031 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.079162345 seconds)
    (53/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.168857755 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.093141968 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.097432749 seconds)
    (56/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071511124 seconds)
    (57/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.223729108 seconds)
    (58/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09431751 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.130875224 seconds)
    (60/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.181742664 seconds)
    (61/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.075987581 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.081714582 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.155466741 seconds)
    (64/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.069953427 seconds)
    (65/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.069134897 seconds)
    (66/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.221818717 seconds)
    (67/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.165454 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.085277142 seconds)
    (69/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.08439932 seconds)
    (70/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.067529817 seconds)
    (71/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.209943099 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07606394 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.2020285 seconds)
    (74/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.080934377 seconds)
    (75/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197906296 seconds)
    (76/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068992384 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070165223 seconds)
    (78/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.254242111 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.087435826 seconds)
    (80/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.188845238 seconds)
    (81/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.071207969 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.088958307 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.081286884 seconds)
    (84/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.083938371 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.077939247 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.092354941 seconds)
    (87/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.069929373 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077291538 seconds)
    (89/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.069961049 seconds)
    (90/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.160276931 seconds)
    (91/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.069625661 seconds)
    (92/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.223625958 seconds)
    (93/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.206068342 seconds)
    (94/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.094009557 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.147744374 seconds)
    (96/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.162666148 seconds)
    (97/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.207667184 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.06900444 seconds)
    (99/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.069639782 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.156711793 seconds)
    (101/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.087911874 seconds)
    (102/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.070413746 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.069682656 seconds)
    (104/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.076383183 seconds)
    (105/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17739649 seconds)
    (106/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073478576 seconds)
    (107/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.170871536 seconds)
    (108/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.147435512 seconds)
    (109/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.077699215 seconds)
    (110/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.080669632 seconds)
    (111/341) benchmarking ("sort", Int8, false)...
    done (took 0.157531691 seconds)
    (112/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069976405 seconds)
    (113/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.168978387 seconds)
    (114/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.169624894 seconds)
    (115/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.077815948 seconds)
    (116/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.206123241 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088988518 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.068671699 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07656216 seconds)
    (120/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.070468605 seconds)
    (121/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.226140083 seconds)
    (122/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.069296396 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07378962 seconds)
    (124/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.074707652 seconds)
    (125/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071495967 seconds)
    (126/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.148293541 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.078169331 seconds)
    (128/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.200890354 seconds)
    (129/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.086096531 seconds)
    (130/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.08787819 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.087047418 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072981611 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093350891 seconds)
    (134/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.19525499 seconds)
    (135/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.150915394 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.069169946 seconds)
    (137/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.068963594 seconds)
    (138/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.088619574 seconds)
    (139/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.072852223 seconds)
    (140/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.097560959 seconds)
    (141/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069696689 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.07711111 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.203864299 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.09163413 seconds)
    (145/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.154147425 seconds)
    (146/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.170878172 seconds)
    (147/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071419064 seconds)
    (148/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.194864799 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12724733 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.076574968 seconds)
    (151/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.070506223 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078362755 seconds)
    (153/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.071885763 seconds)
    (154/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089829641 seconds)
    (155/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.232358082 seconds)
    (156/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.079713931 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.078770335 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 0.146562686 seconds)
    (159/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.072587635 seconds)
    (160/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069394414 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.068685677 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.068549356 seconds)
    (163/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069484715 seconds)
    (164/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.167964924 seconds)
    (165/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.072345816 seconds)
    (166/341) benchmarking ("sort", BigInt, false)...
    done (took 0.270271707 seconds)
    (167/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.06999426 seconds)
    (168/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.070617108 seconds)
    (169/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075623402 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077495708 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068645785 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 0.069527839 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087910264 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.07083029 seconds)
    (175/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07544394 seconds)
    (176/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.068603421 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087410199 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.07107751 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.332433422 seconds)
    (180/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.072136693 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.139299238 seconds)
    (182/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.089183939 seconds)
    (183/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.070049072 seconds)
    (184/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.078616343 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.069869212 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.095395082 seconds)
    (187/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.088200283 seconds)
    (188/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.163048807 seconds)
    (189/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.070527031 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.0700596 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.175363071 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078750015 seconds)
    (193/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.073110279 seconds)
    (194/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.071883022 seconds)
    (195/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.069513879 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148739436 seconds)
    (197/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.077465667 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.156838613 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088929299 seconds)
    (200/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069445467 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098019774 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.078754639 seconds)
    (203/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.070335586 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.067416025 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095157518 seconds)
    (206/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072617087 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.146248001 seconds)
    (208/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.069362032 seconds)
    (209/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.077361162 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.068358745 seconds)
    (211/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.077080765 seconds)
    (212/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.078552044 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 0.142177876 seconds)
    (214/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.073286249 seconds)
    (215/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.070112243 seconds)
    (216/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.076368852 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.148574229 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068956913 seconds)
    (219/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.151434933 seconds)
    (220/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.181425905 seconds)
    (221/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.077471177 seconds)
    (222/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.069377596 seconds)
    (223/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.069339023 seconds)
    (224/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.069617219 seconds)
    (225/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.069149686 seconds)
    (226/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.073214389 seconds)
    (227/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073819348 seconds)
    (228/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.198630489 seconds)
    (229/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.074027755 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.067802754 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.095683896 seconds)
    (232/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.068414147 seconds)
    (233/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.070715292 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.069060638 seconds)
    (235/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.073289492 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11938926 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.077164204 seconds)
    (238/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071811831 seconds)
    (239/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.076079692 seconds)
    (240/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.069475313 seconds)
    (241/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.069193893 seconds)
    (242/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.0712223 seconds)
    (243/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.152238425 seconds)
    (244/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.070021876 seconds)
    (245/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095645047 seconds)
    (246/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.07096263 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.067938148 seconds)
    (248/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.06952888 seconds)
    (249/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.07640034 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.084948043 seconds)
    (251/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.069356515 seconds)
    (252/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068913803 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.081094316 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.087084089 seconds)
    (255/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075828449 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075923453 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076784598 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.125231679 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076096752 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.078843883 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.069469106 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075651599 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072583561 seconds)
    (264/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.068865304 seconds)
    (265/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067236956 seconds)
    (266/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.069116642 seconds)
    (267/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069575338 seconds)
    (268/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073852367 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06793767 seconds)
    (270/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.069563917 seconds)
    (271/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.143925356 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.084334017 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.069439603 seconds)
    (274/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076702984 seconds)
    (275/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.069786104 seconds)
    (276/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096434743 seconds)
    (277/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.077741194 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.068539521 seconds)
    (279/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.080353829 seconds)
    (280/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069143126 seconds)
    (281/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.069343993 seconds)
    (282/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068936723 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067805644 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068228873 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.067397222 seconds)
    (286/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088543719 seconds)
    (287/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.069231856 seconds)
    (288/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080145018 seconds)
    (289/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069506747 seconds)
    (290/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071561009 seconds)
    (291/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068665399 seconds)
    (292/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075801685 seconds)
    (293/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.154943121 seconds)
    (294/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069134078 seconds)
    (295/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.069121846 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.151823478 seconds)
    (297/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.167324852 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089055944 seconds)
    (299/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069575449 seconds)
    (300/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.070501128 seconds)
    (301/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067724115 seconds)
    (302/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.167413244 seconds)
    (303/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069205869 seconds)
    (304/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079167686 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06824822 seconds)
    (306/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.179952226 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.06756965 seconds)
    (308/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.068453074 seconds)
    (309/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.247964268 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068301947 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.068894677 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.071397163 seconds)
    (313/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.06942017 seconds)
    (314/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.081503842 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.139493815 seconds)
    (316/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.071900922 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08874489 seconds)
    (318/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.08530433 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.070593144 seconds)
    (320/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.071195287 seconds)
    (321/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.069393125 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150858602 seconds)
    (323/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.070391147 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.067883882 seconds)
    (325/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.069651212 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068796421 seconds)
    (327/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.069420772 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080718339 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.068305666 seconds)
    (330/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069921969 seconds)
    (331/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136489011 seconds)
    (332/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.071912789 seconds)
    (333/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080933586 seconds)
    (334/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.069169883 seconds)
    (335/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.070453512 seconds)
    (336/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.071289285 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.130294654 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.095446074 seconds)
    (339/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.175626858 seconds)
    (340/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.070204782 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.070212662 seconds)
  done (took 38.096397266 seconds)
done (took 39.67244913 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092694821 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.081155063 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.081290056 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077786506 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.081477127 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.080088252 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.081083306 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.079523971 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.080244155 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080094915 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.080473061 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068494774 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.076563162 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.084208495 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077546012 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.084478943 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081688176 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.085054202 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069414553 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.083794546 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.096457334 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.080907049 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077482625 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.082921928 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06929705 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.07820282 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.093468539 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.090814917 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075658964 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.078463897 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076629446 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.087688203 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.076368079 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.075119751 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078349126 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074709534 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.078613137 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07681506 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.093491279 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075308478 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.068707226 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080915661 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.076114087 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076885603 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077540112 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.081322383 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073912704 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.0821761 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068714613 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080085179 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092281987 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074179617 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.076233647 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.077291299 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.074120144 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.078372654 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075623261 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.080476486 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073931889 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.080311686 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.081177498 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077637279 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068639072 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077590242 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.076288412 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076676203 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067219648 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074000616 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.069299451 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068891743 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.067957312 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.077826177 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.076196208 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073462929 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067815188 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069083181 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06788851 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080919626 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075225902 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.078178739 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068596482 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.074255869 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073664435 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068969814 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.07411458 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080086759 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.06769967 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.068559611 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068078661 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.083374212 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.074976867 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068691331 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.080918791 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074049156 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074339524 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068534114 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067858339 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074012673 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.076702369 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.068589847 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.067435973 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073872283 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073923692 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077559962 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.068903859 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073793408 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073810652 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067813916 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076987357 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075914706 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.077446049 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.081657138 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077033334 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080375321 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.068920392 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06769823 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.078319204 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.068945698 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073933793 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.077008622 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074435387 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.077373111 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.068969879 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.067752727 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073853437 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074931674 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06855503 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.068767129 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068599187 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077938889 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075872481 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.067522507 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.067892748 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077099823 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077258491 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067884546 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067325893 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076916312 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.068021601 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074260541 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07396659 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076286685 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.067113987 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.067716142 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.218353796 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.068770602 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.068822621 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075013344 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074448586 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06971604 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077513423 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.075045215 seconds)
done (took 13.331496209 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.069932688 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10922687 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076816522 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085829948 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081494959 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070712228 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073776392 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086713005 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07379107 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089909853 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.097575238 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091516729 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096560742 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068829197 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069333599 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070628858 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068637689 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077103361 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084173084 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093686611 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.09876179 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.06975461 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.078262762 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08656666 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080446726 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086381962 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070834252 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070773617 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.072345688 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.127762417 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095596026 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069145542 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070612606 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083673836 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.0841204 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076884717 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070501992 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073850104 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.073215922 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069059167 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.07163656 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083430428 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07343854 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.073663974 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.071180906 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.07043529 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.070390567 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.073041357 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082924449 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073150848 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076940031 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081637382 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.071666348 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.06971077 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067841027 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073397043 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.069440094 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.07035214 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069917795 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069345867 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069664486 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.072395626 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.07041039 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069889481 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073061542 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072021023 seconds)
  done (took 6.776574576 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.085967435 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.0957188 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084757805 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084841606 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068947973 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069918978 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.070013055 seconds)
  done (took 2.262599455 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.06977924 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078492392 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.082425431 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082724694 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092328461 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079806881 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070294227 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.102089714 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.069072215 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078792047 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.085396713 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083768391 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073662689 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.08245967 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070341675 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082281918 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070506541 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077095913 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.078309145 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083772422 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073810591 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100155844 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.084073102 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070344304 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083932939 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077344127 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072586374 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070058092 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070502139 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069761223 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06921966 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092465669 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076503065 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081956232 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070396071 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068715632 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074790246 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070885049 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074400942 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078778157 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073819865 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069716991 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070013964 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069854085 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.07085968 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074980243 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070691382 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.070329633 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069527401 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077826512 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.069129482 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076539149 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072042241 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.075570974 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074444334 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074772378 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077357812 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069843817 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077598482 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076105945 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06957083 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.0823595 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081785872 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073691911 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.082146096 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078224521 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076508974 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073827647 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069470342 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068707246 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.070281249 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081933282 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.073312698 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071706231 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070621536 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07473406 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.074111421 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.086024046 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085401091 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.083571388 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072344819 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069825177 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073930536 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085539805 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075190414 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069865898 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070608318 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.06970296 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074653703 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.070050103 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07475733 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069754807 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076790649 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.07223349 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072586342 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.078292248 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.06966817 seconds)
  done (took 9.039332598 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.072670206 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.072517699 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.07202272 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.071319838 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.071245673 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071383146 seconds)
  done (took 2.169715203 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09372713 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.071132197 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082280004 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.071001579 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092928425 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077353112 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077350389 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072746214 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086829415 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.081113135 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077812228 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079719209 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.077110677 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.072380776 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076768008 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071778079 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.077062356 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073287093 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080341522 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072632365 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.086998135 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072517806 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072777019 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082481879 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073665949 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071289079 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.07143657 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080749412 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080411448 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071963744 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071840105 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073425147 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078992001 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.07180518 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077226438 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07864129 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070141969 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075932315 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072374349 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.0736261 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07909886 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072656786 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072975733 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075699117 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.07207653 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078686787 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.076078004 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.07410921 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076410676 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075867857 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.076122973 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070886535 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.073344758 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075720969 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.078783829 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072139906 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.076021041 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076662396 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.072643235 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078795313 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070191252 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.0738698 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.07200886 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073222103 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075615938 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.076026675 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.079195604 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072237635 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072638931 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070576757 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075903342 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.07051232 seconds)
  done (took 7.158468681 seconds)
done (took 29.086976338 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.547003374 seconds)
  done (took 2.218393994 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.592760832 seconds)
  done (took 2.311326993 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.406983024 seconds)
  done (took 10.124778515 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.308947711 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.334451814 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.745380751 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133435016 seconds)
  done (took 3.281844864 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.756145878 seconds)
  done (took 2.48624445 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.234344858 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.222570313 seconds)
  done (took 2.195890753 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.339817343 seconds)
  done (took 2.058528024 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.160978533 seconds)
  done (took 2.86456919 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.234854054 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.165995442 seconds)
  done (took 2.127535986 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.550918193 seconds)
  done (took 2.272646175 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.311159996 seconds)
  done (took 6.040241647 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.238296656 seconds)
  done (took 1.992792078 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233648824 seconds)
  done (took 1.962744447 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.057164759 seconds)
  done (took 3.782601216 seconds)
done (took 47.447751989 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088552778 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.090927569 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.091511192 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.0861727 seconds)
  done (took 2.050999645 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.07908025 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.074675597 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077653884 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.078019294 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.075641883 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.07618219 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076943474 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.073782419 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075211303 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.074272322 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072319545 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073814333 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07678335 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.073925618 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076616602 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.078113284 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.074189753 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073873032 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076600703 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.07431816 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076775176 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073734111 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072104651 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073625706 seconds)
  done (took 3.537197927 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.08274543 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.075770852 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079483403 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074959576 seconds)
  done (took 2.047592324 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.081337747 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.080545408 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.090238958 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.095372821 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.08090173 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.08140336 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088414069 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088020782 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.069421551 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.091546671 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.072454348 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070446749 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.07051044 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.090345547 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.088584186 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066392484 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067634776 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.081395347 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080710087 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083796085 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072693688 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.069381475 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.081037266 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.081177769 seconds)
  done (took 3.659957463 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.084120158 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.069239494 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.083248619 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094821347 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.096602153 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069099587 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.08348094 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.097044326 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.132359108 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068989686 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075929002 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069309634 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109162975 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.06963735 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084990589 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112556144 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115786239 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.073200433 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.103274311 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.069538766 seconds)
  done (took 3.507381695 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.080012558 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072984526 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.0740828 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.069323147 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080444618 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076984947 seconds)
  done (took 2.194942064 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.072660869 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.071719082 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.073404085 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.075429102 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.071429781 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.071310445 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.070712494 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.06944463 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.069479937 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.070606306 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070209909 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.070701764 seconds)
  done (took 2.587959875 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.160455623 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072869947 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.074211564 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.070144331 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074907908 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.07044917 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085588168 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072669736 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089698056 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070599381 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.07123239 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072722508 seconds)
  done (took 2.717104067 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105033914 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105589058 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150748049 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12180004 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121700126 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10054447 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124442366 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.099721292 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.1667134 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141863313 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121661238 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098029094 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090750305 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073508298 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102740562 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106424235 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141075788 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076785184 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117957749 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.169707878 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119819705 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.117299175 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126825097 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122225991 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085440009 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126337693 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098646532 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107224941 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128834005 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114321721 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124940949 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.102467325 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075888216 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.075117765 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15354521 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10444867 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112266596 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097262186 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104687697 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092253796 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111638585 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.073534076 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090792083 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.110490324 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089514964 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121388393 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091954133 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107797968 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084861372 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134178182 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110411417 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103467067 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089574037 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108333416 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135335218 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098631658 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114579202 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110839223 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085447842 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.12056844 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103656863 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.260405685 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099396159 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085818322 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.166875226 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094454586 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116383348 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117585683 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.087328812 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09470267 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107313323 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13658597 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111914775 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.112255344 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118765334 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099675275 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114744391 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.095958245 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.132818668 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097754188 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076406759 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109347452 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132366322 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089672 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105178494 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134626268 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096302213 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081419068 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096672745 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.123470866 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084782038 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.100849621 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073234051 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101233388 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111934884 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102214117 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117213666 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111985171 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082134748 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128106144 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112348031 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076670106 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.122250887 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103760125 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157245883 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099292395 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080160344 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105319809 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098036987 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.152855387 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089272619 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084369171 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103301219 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144714487 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098489877 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175515701 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100455747 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134222472 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101828342 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091651105 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07913326 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.094114106 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105579408 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110342043 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105704926 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091416709 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080589467 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089906107 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098344889 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.259249977 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086286198 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120066808 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.107035017 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.080529769 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092553304 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.083634554 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130225993 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082139598 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114239812 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130102431 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.083091213 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110168706 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102727048 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112970848 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.102440964 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112019702 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144545295 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121131915 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083976531 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.088037586 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113033354 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146997105 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118652282 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089593057 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080167614 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104939518 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116090481 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102535507 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111377945 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10472979 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113524053 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101945881 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145334434 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12283495 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095474529 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099824521 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101207674 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.128084805 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081201766 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158317448 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098634628 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123547092 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088977636 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146086804 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.118701168 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09420872 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089319859 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100600687 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.109184709 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110594327 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147617 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.100571905 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076415555 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097220923 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137029687 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079775537 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105070786 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094393433 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097821373 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122303009 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.08652365 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084982555 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071666982 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105691883 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137726626 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.072863107 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116262164 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.285056475 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10572509 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109670871 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.074130753 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104705907 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143162411 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110822877 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145611774 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120706143 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105222356 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123356129 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.10430383 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109946192 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084295234 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.130884731 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13867829 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101162955 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094088945 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138256846 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123414178 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138885809 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.100970466 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118914263 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.110173828 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106043319 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108890268 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.105407946 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150385531 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124970727 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.130364735 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.09029249 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111563665 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114377691 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14184214 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086803175 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12141845 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079572096 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116171734 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.081775797 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112105741 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.084051312 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.11639359 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084019838 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104387456 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073540752 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.078303459 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146568671 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117671439 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093718333 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090400935 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141832684 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13616081 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085471258 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106851054 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107857648 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104582512 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104586109 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.110366668 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.088528072 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097148914 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.279024213 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08464255 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.087081844 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.104590301 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099484573 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112866068 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088724052 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079669093 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141106227 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109255415 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099757633 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082063769 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100151959 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125940552 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093815511 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092193785 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109791832 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1081699 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144302205 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094196749 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101545095 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122667339 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084478745 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096602844 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072883739 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088674653 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07977835 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113846158 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080253605 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112683227 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.072722766 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136041469 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091136281 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097655252 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107543329 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105958342 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133267359 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096543307 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134665104 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094384786 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107258837 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113023981 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099052026 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084454124 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108692407 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100712877 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114359338 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100428471 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110294266 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115069645 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098420271 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.147732916 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094494345 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125443886 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110644708 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112074235 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108460247 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119436686 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142559178 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116886235 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116337093 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079021086 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087067499 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108596917 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104962892 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149484207 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105601421 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07675102 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088019367 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094392087 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098975647 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.272543877 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088492073 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148078007 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092006781 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091949885 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118702606 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.094283352 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10293061 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080860864 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100402186 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105235659 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099369417 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098996318 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11320235 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122433137 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117616949 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138450417 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103452081 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.097313773 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.122895356 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115579744 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115305108 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090547412 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090631608 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128806184 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107949199 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.132491441 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.105746704 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099723883 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10767771 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095466409 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104960951 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101751717 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.115516387 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085649743 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080330749 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072541697 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.076473168 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123590423 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113489778 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102986697 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103279769 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076663715 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108576591 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104402428 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076119032 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092175949 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098382009 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.103839855 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.088750266 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096107186 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.118657445 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095525235 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108389403 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104597932 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134454586 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104377624 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093081728 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148832647 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133998271 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092518126 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096143094 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075965072 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083364449 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106290174 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148081956 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121510763 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.080083489 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086898374 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.245211109 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091698927 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07583818 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092553109 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.095280761 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108887763 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097626959 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.117436598 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109026335 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080309364 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108492439 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102191938 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09717301 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101621177 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107779377 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110679887 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.128912847 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105337077 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102132799 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080232321 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085338315 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079879642 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083851877 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106704045 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081973092 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08047359 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135288182 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095126343 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107959285 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113951751 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089014824 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079959793 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13971991 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073917799 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140152941 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075604124 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086958223 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085580595 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083895003 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098325173 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110735598 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101632658 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117887392 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110739189 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109245076 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115698102 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161586953 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075534917 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148867091 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080397156 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0794551 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080374269 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119516863 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094737315 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110258108 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146002328 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094679096 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097496468 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080663275 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133891662 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102724729 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108524278 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087086396 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083276492 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133386084 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083590412 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075872607 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090957203 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.11634455 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.075822884 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107240305 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088307458 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08340375 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115757739 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632907251 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092789904 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078367002 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.092180618 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.144380307 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128123808 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08616288 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109969273 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.11907911 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093306633 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086381896 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110052883 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.186153503 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078019625 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093848069 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.102772947 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098379637 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093791725 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.091249277 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086710379 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090577702 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088793079 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082180182 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107369234 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089260834 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094084266 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099394525 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0853567 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081971401 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.129357312 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10329016 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082857768 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088733189 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103492717 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085322184 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090376644 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.072624261 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113250823 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092601366 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101408383 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.089608504 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104492219 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119618142 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08931302 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11170507 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.088602165 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109383814 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08681889 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.08039902 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101769778 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080107446 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07931885 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116222943 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.083568474 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.095275562 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103066285 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097074775 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112080865 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114034178 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110429733 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097661932 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080827903 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086836752 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089357404 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077891048 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080688811 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076239947 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079218442 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.387101363 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092707274 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092310973 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125063597 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090483422 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.112330761 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.108606134 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117466267 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.090857545 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108584068 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118068853 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098863872 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111867789 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108274763 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.137590453 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154947129 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106691002 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131974725 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141983168 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.083357623 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.082218866 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.074355753 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121000879 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.085672081 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087280418 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087329118 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140428187 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.087496667 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100987661 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.237780786 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.086223293 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087423229 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102398122 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.075366104 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088015986 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112418014 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089648073 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08516695 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104915549 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089355815 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123988015 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116547602 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095173021 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088215209 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086711193 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099545242 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.110593611 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133635312 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095920758 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.080257878 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112651153 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.109255937 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129844291 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.078013005 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086327687 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.135605634 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097012874 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109754829 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085244341 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125493884 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13896676 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095615514 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139296681 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07565623 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088239963 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094631446 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.13022547 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079163883 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093327085 seconds)
  done (took 67.333072614 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.157373345 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.145907112 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.083310699 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.102257047 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.189275775 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.198950357 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.120866127 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.098187239 seconds)
  done (took 3.063889987 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.0722317 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.087730225 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.084929837 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.213991289 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.113168659 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.07245294 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.078083848 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.086738725 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.072046174 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.071384969 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.106645257 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.072400383 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.072070558 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.381174875 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.071262406 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.076384142 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.071857354 seconds)
  done (took 3.717725572 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.333107874 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.432573643 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.239432048 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 3.673129056 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138385048 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.486296469 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077969723 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08680959 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.634665885 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372397677 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135353233 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092332378 seconds)
  done (took 18.628000236 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.080659521 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.08244432 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082379771 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.079195057 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.078598541 seconds)
  done (took 2.321492817 seconds)
done (took 119.110472117 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087255372 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.179408322 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.071686631 seconds)
  done (took 2.200916873 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.087036878 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.08439071 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.084697367 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.083219152 seconds)
  done (took 2.268221928 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.079005565 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080703392 seconds)
  done (took 2.079390882 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.228232587 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.181280497 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095337508 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086932172 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083560082 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084391168 seconds)
  done (took 2.1903929 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.076457598 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075508251 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.076000392 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076658033 seconds)
  done (took 2.225668249 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072909653 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070002322 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072338135 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075525619 seconds)
  done (took 2.214041649 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.090485062 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087935667 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.117863777 seconds)
  done (took 2.217098503 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.087896288 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086767274 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082124748 seconds)
  done (took 2.194136339 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.117609719 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098409084 seconds)
  done (took 2.147235724 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.085423387 seconds)
  done (took 2.019151745 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094563663 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102584858 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.144773096 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.112879394 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.146856931 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.132498302 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.08142449 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.082655626 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.077964541 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076966755 seconds)
  done (took 2.985064912 seconds)
done (took 27.255337819 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.082685369 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.372098798 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364339495 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.091966781 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.677089129 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361349808 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.01068652 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096783198 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105834569 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073446893 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091259479 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.654300825 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.0022312 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.330580424 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.989627149 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.32948649 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.655266018 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073471606 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072464699 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073443859 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.995296577 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072588877 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072984335 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073057081 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.655331246 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.378964209 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074443973 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.328904394 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073108988 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07468984 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.36173666 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074574537 seconds)
  done (took 16.651764485 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.075173321 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.126368754 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077392524 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089204712 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.07577811 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073907767 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.0760229 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.073902177 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116213124 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073801663 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091114915 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072843589 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.076886765 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074403272 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09302076 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072982168 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074868181 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.077822563 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.074281096 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074530984 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092981256 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073632846 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.075018839 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.075182061 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.074298594 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086896981 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074963622 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073333434 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073740394 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075580062 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07690581 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074766636 seconds)
  done (took 4.509853581 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125774225 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130847414 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077840045 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.115058192 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.12368177 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074938208 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157385023 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096882087 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.119729699 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073484676 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091062508 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.073308357 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.10970525 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.075268969 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.094284151 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073505291 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074664706 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074059058 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073131579 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073897557 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092524365 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072782918 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07362956 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073920533 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073738009 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088654073 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074023088 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073096439 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073197188 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075966607 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077027401 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074879616 seconds)
  done (took 4.788963335 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072704189 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.076220985 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084720104 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085591487 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.071617871 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.073154796 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074738151 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.071292587 seconds)
  done (took 2.576761378 seconds)
done (took 30.482183597 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.082113108 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.071919811 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.075793666 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.091979405 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078302909 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074504323 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068474855 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.079150327 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075633636 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075837611 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077856254 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.071230988 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.074688884 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.069363321 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076123022 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.070395028 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076934365 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074818558 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.07537921 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076604619 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.073336313 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.075945613 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.079189187 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.075670383 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075775694 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.075144896 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.079857486 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076287142 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.071252015 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073425258 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.073295518 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.086220238 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076549813 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076813799 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070543575 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.070031129 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.074753967 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072762292 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.076907089 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.080101014 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072786595 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079489311 seconds)
  done (took 5.104264122 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.09395445 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.098468662 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.091156993 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.087215066 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.111301292 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086593403 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.095865906 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.084788247 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.082725634 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.095368125 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078962123 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.084176415 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.086002508 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.080616914 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.084033007 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079711766 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.085349745 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.078022838 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.083566895 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.083489214 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09623958 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.076665217 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083866197 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.085379007 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078945816 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084657313 seconds)
  done (took 4.220144587 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.077170183 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.091828713 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.097516896 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146854065 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.113673396 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.087216808 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086811607 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.102132102 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10587121 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.072910147 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076300927 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.100557001 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102091547 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.080201148 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111595776 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.091383932 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.085978514 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07429174 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.079086891 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.10720784 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095637215 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091417506 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.105275558 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.092853879 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071447003 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081711612 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.079405765 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.088453435 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.080343694 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.084849907 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.077284127 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.076042165 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.073313215 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.085550802 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.080124379 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.070497959 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.094009395 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084883064 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.088080868 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.111962827 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.082155543 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.07375536 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10337044 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.138164637 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071981819 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074953148 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076148945 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.085034749 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073814332 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102710639 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.091471764 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.072148577 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.091382261 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.074116134 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.073842071 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089908428 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073955037 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.074740256 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.08501054 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078497115 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.093432699 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077352513 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093814514 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071768012 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083673784 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07408205 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073751588 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070526904 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.10862227 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080137089 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.126382519 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.072751942 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.070312879 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084104467 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083859831 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.078667953 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071703404 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.091794932 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084782175 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.076019913 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083652283 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074417657 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075642827 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108824141 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071255615 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.070768952 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069874598 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074610237 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075105627 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072652266 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.08538978 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071562667 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075529878 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.088121277 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.072063929 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072593791 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074731334 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073922399 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071819584 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083277843 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075639216 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073490369 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084437847 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073347884 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.07574863 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.085883168 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081877142 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071050261 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.07318179 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074873612 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07332826 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076762242 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075798316 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073832832 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.079027086 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079899514 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077752112 seconds)
  done (took 11.774471696 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.16757408 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.159053391 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073507998 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.155889726 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.081309567 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.077539858 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.156873858 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092731864 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.073002757 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.074193581 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.071913572 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.10148607 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.09606083 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110216201 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077251609 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073583716 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.09827712 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106811369 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.158666933 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.153097103 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096669757 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.081332342 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.075227916 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.074585985 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.07389791 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081982971 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.091323833 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081325047 seconds)
  done (took 4.824978008 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.079680601 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.088200959 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076564233 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.097002709 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.09065898 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.072953944 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074419915 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073758089 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.090246639 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079780384 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072565884 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.077523808 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07653874 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073763471 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.073399753 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.078991654 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.079518542 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.072024448 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076324725 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.077339828 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083708632 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.099191515 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.077711527 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.07296548 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075300694 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072511716 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079319277 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082886178 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.072542567 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103533173 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.070130053 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07701027 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087785272 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073738006 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.072249588 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073255976 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072673957 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072658449 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072452673 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.071073037 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070523623 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077722136 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.071499739 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078882598 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086258599 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.080406937 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.074107411 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.078097002 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.075748764 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.069569939 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075546516 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075982586 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.075322532 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.081040177 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076430255 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.075285485 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.07372375 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.102199937 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.07891215 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.071952346 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.071108772 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070776008 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.073949486 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080120075 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089220712 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07433048 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.070758605 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072812782 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077447122 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.087097327 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071836759 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.07850222 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069702517 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.073291256 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.075236178 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075071299 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073919236 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070910174 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.072141704 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072826164 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.072892267 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072155092 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071859974 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.075122153 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070250489 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070771432 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072984247 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.074117168 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.079498605 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.071861444 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075482419 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073585603 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071349452 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07547862 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077537639 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075680924 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.093151138 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081203229 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.073176363 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.070380128 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087381431 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074855681 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.072306706 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.079275929 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.077204489 seconds)
  done (took 10.087017323 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.095996885 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.073502111 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.092791594 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.099826478 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083172049 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.078032473 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.086993616 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073876945 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089136313 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.071870306 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.082179721 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071663798 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.085795719 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.081714469 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.074434904 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082949695 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.075501854 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.0931664 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087768262 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071644526 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.082422616 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.085235985 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085228259 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.091318702 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090603517 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.091608013 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.085145636 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.075417707 seconds)
  done (took 4.347794413 seconds)
done (took 42.31327136 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.04022836 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.26666574 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.019010296 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.256948166 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.083040315 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.12243829 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.14771902 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.020235041 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.185634582 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.044449894 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.345785861 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.465440636 seconds)
done (took 70.005435466 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.038735255 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.168597257 seconds)
    (2/2) benchmarking "String"...
    done (took 2.242484183 seconds)
  done (took 6.35480795 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.61471678 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.018550033 seconds)
    (3/3) benchmarking "different"...
    done (took 2.070022185 seconds)
  done (took 8.643785938 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.115373437 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.680244037 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.279918996 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.017973362 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.020532803 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.406591655 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.835499074 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.492653151 seconds)
  done (took 33.67937248 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.259671965 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.244925414 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.803640063 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.811637106 seconds)
  done (took 17.113981277 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.639652278 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.280699898 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.280546511 seconds)
    (4/4) benchmarking "different"...
    done (took 2.27431595 seconds)
  done (took 11.481164835 seconds)
done (took 89.46951913 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.020161159 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.081644695 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.036917515 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.171903116 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.111546251 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.045157314 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.022524595 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.020674519 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.018455268 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.017063493 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.455218072 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.015133916 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.015885592 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.052597957 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.014756183 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.073317623 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.207209828 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.034646465 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.081382591 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.592450616 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.51464846 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.032953567 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.023337318 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.073847477 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.087018345 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.047143481 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.599416412 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.016033469 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.637142673 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.027098852 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.020764741 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.022945676 seconds)
  done (took 212.134384851 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.0209032 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.015211504 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.042590459 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.05177108 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.532404348 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.217182766 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.182853795 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.56673301 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.024826977 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.048372708 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.19664184 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.023804192 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.227206854 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.003617822 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.018415034 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.027956136 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.132233306 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.247625023 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.019911115 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.208460742 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.038722601 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.024715858 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.981566682 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.197214905 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.041933764 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.109520552 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.042619402 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.037914029 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.205770538 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.123339226 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.053256218 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.025074971 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.214358113 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.890728392 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.040259575 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.039838232 seconds)
  done (took 178.82328276 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.204372458 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.034351018 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.088795086 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.154684807 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.793116745 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.765339847 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.026453723 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.027877068 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.024271715 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.031319353 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.027700678 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.096430996 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.484514209 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.902686751 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.883179243 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.888382091 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.493968189 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.044120053 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.885719404 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.886080529 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.962458983 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.25754424 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.100653506 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.887459986 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.902608195 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.011350725 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.894827003 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.887581963 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.011459758 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.887892499 seconds)
    (30/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.888154634 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.966555389 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.008801001 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.900855772 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.968015261 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.891909685 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.366203574 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.883518467 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.887440945 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.889313334 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.949016029 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.884592293 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.965029387 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.97656446 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.887679886 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.903322566 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.96344199 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.582487861 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.889729002 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.892696376 seconds)
    (50/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.893198501 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.891555782 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.892910989 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.893097596 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.110408119 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.893692248 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.916819513 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.467473791 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.895826974 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.891779352 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.893299808 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.891615724 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.892191647 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.897366725 seconds)
    (64/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.889376113 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.933928338 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.614390551 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.600601162 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.279080096 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.628028251 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.892200207 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.462821324 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.950566062 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.894179909 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.971172034 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.888646107 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.893631933 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.892248322 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.890492294 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.988225834 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.94961843 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.889992078 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.015649853 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.892973827 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.891329911 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.893281848 seconds)
    (86/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.44960085 seconds)
    (87/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.528825538 seconds)
    (88/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.889947026 seconds)
    (89/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.906728827 seconds)
    (90/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.949695443 seconds)
    (91/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.87803055 seconds)
    (92/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.893653795 seconds)
    (93/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.900954294 seconds)
    (94/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.954876942 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.879808691 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.892169679 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.893444786 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.920961631 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.893144058 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.097619151 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.117244075 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.96397047 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.140009419 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.070957029 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.891823849 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.895598271 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.910632189 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.896761601 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.892923455 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.907609944 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.894944042 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.894266184 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.894149678 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.894796883 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.893582506 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.895702091 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.907364708 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.89200733 seconds)
  done (took 424.166484798 seconds)
done (took 819.324076642 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.562626379 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.633931072 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.489253981 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.522366457 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.486259839 seconds)
  done (took 14.515921839 seconds)
done (took 16.339041111 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.926056258 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.910279705 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.899577396 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.964484614 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.918198663 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.906668071 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.940073991 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.940502941 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.924534033 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.905665472 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.963035705 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.907940003 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.926905175 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.927957581 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.979840692 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.934233455 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.909536122 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.901362212 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.961416404 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.908590197 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.909984488 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.907972035 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.907636167 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.958099672 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.986978372 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.918569981 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.906719685 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.954943435 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.916760381 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.951615031 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.964203454 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.928968329 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.940450992 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.981967191 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.967522992 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.985385178 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.915811763 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.977423746 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.912949552 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.994136953 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.958749687 seconds)
  done (took 81.226830752 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.907101756 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.039217788 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.110128209 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.93411402 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.907583949 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.114023896 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.958742674 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.029128857 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.03575231 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.115327396 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.118307075 seconds)
  done (took 24.099343144 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.904761204 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.036428313 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.111503254 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.93718009 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.90755214 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.11781028 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.963882962 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.033823248 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.038755044 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.124876055 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.129453582 seconds)
  done (took 24.140748865 seconds)
done (took 131.292496507 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.278066462 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.925708575 seconds)
  done (took 6.029675214 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.900949476 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.91989288 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.056383142 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.905629647 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.903669323 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.902117106 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.903455165 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.903816283 seconds)
  done (took 17.222205932 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.902354814 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.901852566 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.901609911 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.901614101 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.902730747 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.902313914 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.901755977 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.902464293 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.901585088 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.90116749 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.901400658 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.902378518 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.902916143 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.900636761 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.901971523 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.902966098 seconds)
  done (took 32.260358705 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.902143371 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.902718969 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.90208418 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.903783164 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.902222431 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.902895325 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.90385506 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.902470652 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.902554601 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.902719476 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.903128471 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.901817238 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.902022815 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.902637332 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.902370724 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.90302721 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.902850003 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.904612791 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.902337788 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.904291715 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.903317665 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.904485694 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.907500377 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.902498194 seconds)
  done (took 47.502828335 seconds)
done (took 104.85034111 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.066387315 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.390078774 seconds)
  done (took 8.284755549 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.905297637 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.902384037 seconds)
  done (took 5.696361322 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.904253747 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.903327417 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.90407912 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.904864134 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.904261326 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.903701882 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.904042072 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.903773899 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.905442441 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.904652316 seconds)
  done (took 20.87029682 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.904174264 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.904865474 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.904804161 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.90541781 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.904753431 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.904851307 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.903141257 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.906426996 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.904239755 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.905465314 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.904852941 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.905839391 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.904829587 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.905596727 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.906362884 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.905561999 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.905855981 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.904712461 seconds)
  done (took 36.121009359 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.906313866 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.906821581 seconds)
  done (took 5.642933396 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.906023642 seconds)
    (2/7) benchmarking "second"...
    done (took 1.905867497 seconds)
    (3/7) benchmarking "month"...
    done (took 1.905110834 seconds)
    (4/7) benchmarking "year"...
    done (took 1.906884032 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.906495072 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.905997325 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.907060953 seconds)
  done (took 15.174624685 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.907102363 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.055260576 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.107619143 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.498339527 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.906904153 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.910033348 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.789310159 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.908218181 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.910930097 seconds)
  done (took 20.824089321 seconds)
done (took 114.443355818 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.743608359 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.905053927 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.127554369 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.005012781 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.921698685 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.199628613 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.920051041 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.447972241 seconds)
done (took 43.101841499 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.981069514 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.905574522 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.929091345 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.931641684 seconds)
  done (took 22.598330003 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.905600287 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.199921353 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.922390348 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.829009752 seconds)
  done (took 22.705391818 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.283369381 seconds)
    (2/2) benchmarking "read"...
    done (took 2.248397552 seconds)
  done (took 6.368480004 seconds)
done (took 60.488894408 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.908196862 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.908548946 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.908060714 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.908746462 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.907021527 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.9079731 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.908908246 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.907847433 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.881899487 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.902996149 seconds)
    (11/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.88571963 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.904890756 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.908464052 seconds)
    (14/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.909373625 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908360611 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.908463647 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908343153 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.908556603 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908942276 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.909874774 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.906986533 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.907953592 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.90895846 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.909414079 seconds)
  done (took 47.577680833 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.907393153 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.908092056 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.908289754 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.90876102 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.908533121 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.909798011 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.909848523 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.911448493 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.908509217 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.909056387 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.910040115 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.910751179 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.910435378 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.910063665 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.909665363 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.909557835 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.90957882 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.911295697 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.90923221 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.909463815 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.91137285 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.910292074 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.911896163 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.910742123 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.910535491 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.909979942 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.909661488 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.911442689 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.911339873 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.910898844 seconds)
  done (took 59.132180948 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.910774337 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.910457038 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.910855293 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.912056068 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.910978571 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.911307343 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.906097266 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.909486237 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.91162855 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.91159044 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.910961333 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.911369375 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.912273699 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.912468228 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.91176066 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.910990182 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.911672899 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.913759307 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.910834992 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.911539164 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.911186394 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.910752265 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.91203674 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.91287236 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.911854758 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.90979865 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.910200573 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.912416762 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.910784692 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.912765965 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.912166568 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.912866604 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.913141885 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.912668398 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.91243114 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.912344296 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.912835828 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.91322582 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.912269382 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.913927263 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.91305395 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.914332444 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.913127894 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.913629359 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.913470909 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.913398102 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.91395685 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.91392985 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.913186875 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.913807417 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.91329 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.914918832 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.913785336 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.914635733 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.913785442 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.914453487 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.914524967 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.91543258 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.914748879 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.914911863 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.914924541 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.915742616 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.916693773 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.913682083 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.916130733 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.914678119 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.915315025 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.91503857 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.915349811 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.917853471 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.915019602 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.916342044 seconds)
  done (took 139.569509904 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.913792504 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.914736408 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.915733568 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.915601146 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.915380158 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.916413858 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.917444498 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.915553127 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.915903199 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.915841743 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.915735897 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.915773819 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.916616976 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.915938948 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.916110417 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.91612833 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.916528541 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.915196692 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.916697202 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.916539616 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.915957093 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.916634903 seconds)
  done (took 43.9895468 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.916592065 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.914416757 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.916160489 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.9161844 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.916769893 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.916028276 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.916101735 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.916190524 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.916997606 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.9159331 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.916597247 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.915002422 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.917126294 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.91625326 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.918164084 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.916753057 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.916740892 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.917653749 seconds)
  done (took 36.336496305 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.917289827 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.916768972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.916712388 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.916080181 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.91738998 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.918535923 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.917154505 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.917613402 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.917914496 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.916241884 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.917640418 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.91812409 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.918014224 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.917541427 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.916992173 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.91852142 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.917252065 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.918889589 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.918619048 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.918106185 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.917961326 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.916757662 seconds)
  done (took 44.028210992 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.916701953 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.91702655 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.918197536 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.918408276 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.918404899 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.917653259 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.919011262 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.918154519 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.917513731 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.917382452 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.91865179 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.919000492 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.917901533 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.919400808 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.91903614 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.91968997 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.919093216 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.919515524 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.920254128 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.918206605 seconds)
  done (took 40.21301713 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.919948816 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.920144872 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.920973271 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.92107254 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.921409639 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.921442747 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.921552281 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.921307442 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.921387845 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.920345761 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.921361637 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.921733425 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.920931079 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.922023502 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.920718563 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.921681034 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.920788185 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.920659168 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.920067874 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.92230009 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.920026739 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.921518588 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.922414272 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.921847165 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.921081441 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.921700881 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.921212701 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.92076677 seconds)
  done (took 55.637246302 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.919786931 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.920118072 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.919303749 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.92082911 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.920530393 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.919751596 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.921100173 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.921724132 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.920661099 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.921762274 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.92154678 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.921390978 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.92027825 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.921098966 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.920297975 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.921664602 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.921283436 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.922132639 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.92294529 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.92152603 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.922275526 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.919886208 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.922401484 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.921820087 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.921375459 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.921056199 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.922022915 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.921973361 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.921798945 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.923082417 seconds)
  done (took 59.483645783 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.941961879 seconds)
    (2/2) benchmarking "in"...
    done (took 1.943621943 seconds)
  done (took 5.732668585 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.92191521 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.923073087 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.922657399 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.921161805 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.922250635 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.920483252 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.922559457 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.918321141 seconds)
  done (took 17.218722038 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.92266504 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.924405786 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.923220127 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.924096226 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.924389681 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.930605296 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.924853632 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.924730727 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.916469762 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.914514502 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.926259038 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.927534022 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.933113556 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.928157528 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.923568263 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.926572451 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.924579287 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.926684332 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.925111607 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.911815768 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.926950592 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.923461353 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.922899482 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.910577409 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.924402918 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.925509735 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.936210359 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.92722713 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.926530023 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.925376493 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.932476591 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.924584902 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.926266706 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.925906068 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.925082928 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.926100687 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.933309659 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.925511849 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.926080777 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.926493863 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.92749207 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.928211914 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.930383849 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.933258321 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.926727491 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.92591061 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.924648429 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.926369103 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.927886133 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.930234146 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.937164032 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.927905791 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.927715073 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.927053499 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.929192498 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.926580009 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.927396636 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.92872626 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.933568164 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.933698577 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.929022467 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.948935003 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.935793251 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.927624458 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.927122456 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.937002579 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.952355066 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.928719593 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.928562059 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.924822522 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.933543806 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.926399164 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.926031378 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.926211033 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.940527294 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.922666316 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.928931663 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.927773095 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.927823678 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.928518281 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.927996897 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.927632811 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.928001697 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.927522738 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.937662818 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.955661206 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.926913931 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.926086403 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.930344836 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.929291982 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.933127575 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.934025455 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.929124435 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.92824323 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.93102126 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.93069282 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.930547192 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.927298201 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.93099118 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.936793956 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.929651985 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.929462334 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.933717147 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.939653622 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.929595312 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.93034718 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.932305473 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.92927422 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.93678676 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.930296715 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.93047572 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.930419182 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.93191635 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.93547377 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.930899708 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.934144997 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.940690931 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.93761366 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.933521539 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.934648873 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.935926785 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.934218364 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.941636905 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.959062535 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.929835743 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.935302822 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.937296417 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.946381816 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.936431277 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.932350358 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.933406223 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.931132009 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.902533753 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.93437158 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.931570589 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.931101339 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.931491349 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.932962546 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.932238105 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.932385164 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.935960324 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.933642717 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.933626573 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.931462582 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.934771071 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.933286477 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.93477196 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.939794642 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.934503639 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.933211225 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.932404227 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.935957505 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.934340501 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.931489108 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.931413532 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.93318907 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.93280206 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.933954505 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.935419936 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.931653652 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.93132038 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.907036734 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.93840806 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.913328434 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.931646866 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.932175719 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.933984822 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.933447606 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.935437098 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.932214447 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.934233568 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.934046549 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.937743684 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.934401405 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.934686894 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.934048636 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.934182394 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.933479479 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.933464734 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.945496305 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.938309104 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.946110389 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.933530893 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.941295165 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.932706936 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.935088246 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.936349261 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.934902144 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.936230628 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.934233031 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.933546364 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.93704042 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.956541408 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.944509077 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.937355178 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.935572245 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.941089915 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.938017171 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.941354545 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.933627218 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.936388606 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.936542796 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.935195607 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.935500306 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.935868454 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.93934511 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.936367133 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.93466908 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.938597427 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.935428996 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.935799815 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.935502215 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.935306908 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.93705008 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.934484999 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.935698228 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.937164365 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.937662202 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.942775711 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.937911628 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.923642398 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.935367583 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.937691448 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.935272802 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.932055306 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.937683513 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.934296602 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.935183542 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.937880777 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.943189888 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.938011804 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.936924076 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.937144935 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.936509132 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.938774726 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.9304224 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.9421055 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.945947916 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.940899668 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.937299998 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.94288095 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.936413297 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.939593415 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.937763076 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.935871137 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.937604103 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.93736392 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.936134839 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.936933223 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.944114991 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.936594301 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.939092317 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.93682859 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.928863841 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.938385033 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.939737026 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.938964764 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.942000939 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.947503424 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.944461948 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.93881151 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.943346906 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.94055748 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.939516841 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.943248193 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.939114841 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.951533446 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.948136111 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.938733959 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.938538648 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.939669627 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.942930726 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.938732588 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.9393498 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.946392254 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.938816155 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.943002895 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.944353517 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.943331743 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.942012885 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.944688463 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.939821339 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.942907343 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.941274808 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.941547374 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.940451799 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.940197727 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.941734259 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.941512243 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.942663545 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.945759857 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.941456051 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.942529997 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.941824232 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.949948948 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.940648684 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.94200958 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.948288555 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.942961389 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.943106519 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.943258737 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.94251503 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.9431218 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.941999704 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.940997498 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.942513668 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.940340772 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.944695308 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.953310452 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.942793267 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.950021517 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.942567159 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.952742755 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.941730946 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.941405564 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.941341374 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.944102937 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.949441376 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.940437102 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.9401187 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.947489105 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.943113258 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.943163192 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.946244749 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.941585867 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.941213079 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.941022443 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.942641783 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.946895003 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.944129551 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.940755354 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.940670083 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.940588527 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.943317426 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.945046351 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.944162032 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.941652399 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.944692831 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.943103733 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.942605033 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.943538486 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.941093107 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.942049438 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.940327236 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.940738983 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.933500226 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.94071146 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.94543886 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.949117971 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.944619373 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.951566012 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.943573967 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.945107137 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.946929574 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.943864398 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.947966006 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.943338137 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.944922305 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.945403195 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.944085779 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.945643179 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.955802546 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.951281949 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.947874927 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.947122617 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.945057425 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.947149633 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.95376689 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.97254731 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.946346928 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.947011137 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.950280468 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.953029964 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.946358159 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.951866956 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.949917 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.955318385 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.947835008 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.944586577 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.948969097 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.959675721 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.945875888 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.945710552 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.946368024 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.949896701 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.947365762 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.943862948 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.947613089 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.947151173 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.945459702 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.958106257 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.945202304 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.948378337 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.946000843 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.946898649 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.945903372 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.946879579 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.949712741 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.933245222 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.946251823 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.947181756 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.935871641 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.951621514 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.948196172 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.950575264 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.956225404 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.946101916 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.946432132 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.949313713 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.946604803 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.948710707 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.945445575 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.948873549 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.95118196 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.946901067 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.950244901 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.950886114 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.958125857 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.948613821 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.947122107 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.947001098 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.949907951 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.94875848 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.947814869 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.95040745 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.958271414 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.952948375 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.963064974 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.959434808 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.949152823 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.950748141 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.956670769 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.959520193 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.949474751 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.950284757 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.949555267 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.951705055 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.950487869 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.949856655 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.950877876 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.950660302 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.956525901 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.950044084 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.950898584 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.949979548 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.950838862 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.951421059 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.951245418 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.955667655 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.949259504 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.948398716 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.950548458 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.95239025 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.949647222 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.951281501 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.949313217 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.937083035 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.953015497 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.952371028 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.954724286 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.951882469 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.951254944 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.953277634 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.950198622 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.951354987 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.950591124 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.951172016 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.95026129 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.954270145 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.960204994 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.949169413 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.9521461 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.952815438 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.955361234 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.950635132 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.951874412 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.952263358 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.950413178 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.960358531 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.950009757 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.950968957 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.95322924 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.952063526 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.957656935 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.95356741 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.956364917 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.95092108 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.95387085 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.952287879 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.956037049 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.96466188 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.956726934 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.956245184 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.961927267 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.956770104 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.952874662 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.95269213 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.950831748 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.955966523 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.954988559 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.955002961 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.955269145 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.955931665 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.953002158 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.954655935 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.951670725 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.956156518 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.941010003 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.953839828 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.956565625 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.963374189 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.962737979 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.953213954 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.955818644 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.954127476 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.957072496 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.967643217 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.955336759 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.955978373 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.954970627 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.95670169 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.955117038 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.957141298 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.964118687 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.957861502 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.954581696 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.959847687 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.973748161 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.957635102 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.964998225 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.9894047 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.95640404 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.955026134 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.955288857 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.956780818 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.95517715 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.958926479 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.956156187 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.95997416 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.95475739 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.954694437 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.963985402 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.955633903 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.956422951 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.956574541 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.9572016 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.961230326 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.955913205 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.962856285 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.955799426 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.955378932 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.956405446 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.956816477 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.952555433 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.95288266 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.952791903 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.955574226 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.965488104 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.097392283 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.106098615 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.09804898 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.098881096 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.114991505 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.107482937 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.096469485 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.095417517 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.581077092 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.100308656 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.097136848 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.088738825 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.097325696 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.105085161 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.101809718 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.103739355 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.097301907 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.082940076 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.09581593 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.095191318 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.097039352 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.106392312 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.106913533 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.094994823 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.093545428 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.098604056 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.05925109 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.098906474 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.09784678 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.094472657 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.095098552 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.092185555 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.088146977 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.092573469 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.091935089 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.095365027 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.10009699 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.09705479 seconds)
  done (took 1165.547474523 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.087900378 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.087810284 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.088403152 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.09442348 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.088916208 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.088607899 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.090488577 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.091027319 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.093397639 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.090485503 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.090592636 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.08851741 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.08940504 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.094362508 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.091049934 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.090240919 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.088623318 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.090704731 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.09155549 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.092552011 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.090972018 seconds)
  done (took 45.909954223 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.091357104 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.089476545 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.090614977 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.089955735 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.090329589 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.095158711 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.088777814 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.091130941 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.090789699 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.09023601 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.0930306 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.091757705 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.083875544 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.090781199 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.091141956 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.096845034 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.09161121 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.091742342 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.093410852 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.091659471 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.080462683 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.081122313 seconds)
  done (took 47.994762763 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.089403344 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.092651374 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.089842976 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.088909201 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.086753021 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.087879906 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.093628718 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.089939512 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.087585516 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.091387216 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.098277639 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.099622997 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.086944388 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.088963829 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.087018945 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.087376141 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.233618559 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.077349997 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.084158008 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.076261 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.089989004 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.094388804 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.085879268 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.086219951 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.087071233 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.089406189 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.08753278 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.088208845 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.088408151 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.090631873 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.09370954 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.08778303 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.090060011 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.090015001 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.09044566 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.092355324 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.091568218 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.08589908 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.087662731 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.089059025 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.098276394 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.116754013 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.088866681 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.085876804 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.095652818 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.08807831 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.088861841 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.092044338 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.097676748 seconds)
  done (took 104.569377911 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.087667587 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.085971078 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.088004397 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.088476804 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.092579232 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.089148493 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.088503626 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.086886603 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.087957711 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.09573513 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.088867042 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.088019085 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.088443248 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.087641076 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.091292377 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.08896271 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.089598714 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.088624697 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.091278708 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.087550297 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.09015613 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.090220905 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.088752574 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.093604009 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.090131729 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.089944678 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.090022642 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.088837714 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.094290941 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.090066843 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.089802431 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.089875801 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.090541304 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.097874345 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.088675116 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.089417872 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.087914771 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.092790301 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.083921502 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.083947037 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.08321586 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.08236824 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.087740822 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.082818283 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.084848822 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.083308236 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.083966241 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.084661435 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.083028166 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.083254923 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.082110601 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.082430448 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.089112777 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.081548133 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.082318461 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.084932512 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.081085289 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.089816413 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.081525793 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.080769 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.082680811 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.082270354 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.083661605 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.081186503 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.081298463 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.081277833 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.082886612 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.08073625 seconds)
  done (took 143.925390639 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.081098005 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.078880717 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.086030294 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.08123812 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.080769889 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.080501634 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.078632256 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.083259325 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.079922733 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.080812612 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.079700335 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.078616246 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.082284426 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.077921703 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.080005083 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.077675355 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.080353552 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.078648759 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.0782932 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.079456197 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.078100838 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.082029446 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.074716963 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.076997046 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.079332516 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.077647247 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.081966779 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.077715919 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.07738325 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.076941988 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.077786434 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.079633327 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.078177371 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.077459352 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.076996854 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.076098333 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.08214769 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.076667641 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.076104771 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.075716785 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.078414197 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.081048592 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.074496074 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.076055146 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.075825442 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.078982977 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.074851579 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.075514144 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.073527165 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.076074679 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.077046247 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.077309767 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.074424592 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.074761139 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.074723181 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.077099861 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.075173238 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.074272543 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.074180692 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.075545303 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.080727439 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.073992105 seconds)
  done (took 130.837001325 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.074555013 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.073436571 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.076644356 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.072910227 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.074016441 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.074439082 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.072520025 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.075238662 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.07509457 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.073814684 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.074652855 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.07917428 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.07237787 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.072652062 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.074895266 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.076474071 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.078742526 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.074611461 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.074200235 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.074689815 seconds)
  done (took 43.491243215 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.075809238 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.073280112 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.06967398 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.075470918 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.074278972 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.080092023 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.075614069 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.073872109 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.075248087 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.076624155 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.08162517 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.07475071 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.075561036 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.075114037 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.0767531 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.077477784 seconds)
  done (took 35.20668012 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.074515021 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.075334966 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.083031561 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.072508221 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.073672728 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.074396987 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.073083522 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.075023474 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.074404125 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.074572369 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.074507439 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.073680419 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.077236953 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.075279015 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.073554717 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.073418497 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.072321291 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.078403933 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.076297009 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.075185349 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.075039199 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.076376016 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.07841282 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.075582582 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.07579966 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.074515875 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.074549452 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.077709402 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.071475172 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.076628644 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.07541839 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.076286244 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.075330702 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.068354177 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.075409921 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.07605547 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.078560315 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.07336176 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.07460215 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.074311165 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.075861808 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.080007311 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.073585911 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.073282372 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.073223964 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.071734983 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.078857042 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.073670952 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.071632165 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.071407773 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.072867532 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.076041348 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.070296498 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.072140037 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.071227229 seconds)
  done (took 116.105803502 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.072971985 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.070374627 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.072413557 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.073734878 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.076645456 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.07059186 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.07096239 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.073954476 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.070599042 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.078211106 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.073949942 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.074969573 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.075436531 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.072711905 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.082700628 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.075499138 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.075853855 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.076839087 seconds)
  done (took 39.333684418 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.079445159 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.078285968 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.076085497 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.077562191 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.066225357 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.080283035 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.077663203 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.078680754 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.075815531 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.081743453 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.075747229 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.076505501 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.07760233 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.074930136 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.079451724 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.079052246 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.077354006 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078423294 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.076145429 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.082231047 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.078137848 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.064215048 seconds)
  done (took 47.686084323 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.079032449 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.083329413 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.091256677 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.097790407 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.095175862 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.110058195 seconds)
  done (took 14.55238129 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.078586828 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.079795985 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.084039356 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.078492601 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.078573999 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.079606518 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.081166813 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.080067553 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.080402622 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.078911536 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082716743 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07712552 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.080565904 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.085138423 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081351297 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082290403 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.082474467 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083578617 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086771824 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081349293 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082987981 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.080190141 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.082750169 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083557 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.083285485 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.08714505 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084996113 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084488443 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.088108553 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.081266133 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082585276 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.081196197 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085926866 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082338861 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088113048 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084880448 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083969028 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087101246 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086178768 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084513458 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.082730254 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086804742 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.089918027 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087541627 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0875693 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086706138 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084946467 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086737637 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084443637 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084170326 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082659607 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.082967917 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0870479 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084874824 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082650521 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084649236 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086360108 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083678247 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0847573 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084967061 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.083824633 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089802844 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.080872474 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082016304 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082449624 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084615022 seconds)
  done (took 139.528123651 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083171068 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.08341298 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.082239011 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08487097 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.086174757 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.083678386 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.082306807 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.084323387 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085468503 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086593266 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.083597015 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.088573519 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085352778 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.089104684 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.085756899 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086793104 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.084719308 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.085978866 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.092186019 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086354578 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.082467796 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086066583 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.084622644 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.09229601 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.086254523 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086577412 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.087866769 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086960495 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08706442 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088564304 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.084641179 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084813322 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08702451 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.090074369 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.08810533 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.086796702 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.090205156 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.091507284 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089368506 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.090889912 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092370608 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.089179783 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.092968582 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.089692625 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.086918102 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.091588644 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.087504777 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.092418858 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.088998314 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.089464528 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.081569238 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.087947828 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095332311 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087803259 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08889509 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087206725 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089155061 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.090649359 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.086940676 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.088960234 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.087530511 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.091056074 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08786958 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089827423 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.089044241 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.089529274 seconds)
  done (took 139.79402514 seconds)
done (took 2765.241851294 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.142538907 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.125332068 seconds)
  done (took 16.278284145 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.260005987 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.131632107 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.283445702 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.211083076 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.09646647 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.097712312 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.092687691 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.096285996 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.190124091 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.093331142 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.13893536 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.095918276 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.093875165 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.096231291 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.09745516 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.096304675 seconds)
  done (took 56.190889803 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.099828601 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.096873981 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.103428844 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.094673773 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.107376677 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.172804843 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.12112705 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.102916106 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.110347645 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.132057682 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.116549057 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.094955365 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.104015821 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.103020324 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.184667687 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.140880464 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.152242955 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.170402563 seconds)
  done (took 40.218727278 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.176022068 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.109937433 seconds)
  done (took 11.306725019 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.102907705 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.124299128 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.126228085 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.103277882 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.125193813 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.131460018 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.130821796 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.122700732 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.131568227 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.123171461 seconds)
  done (took 73.241125032 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.098518809 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.098189098 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.354047789 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.105445507 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.104376668 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.12450289 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.099031376 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.129021983 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.100849512 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.096786098 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.092340137 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.363685092 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.095005451 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.096644132 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.536991247 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.095447999 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.101309665 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.129815889 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.130883038 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.092232726 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.107109421 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.102131788 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.261201994 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.781779245 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.100722587 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.102379955 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.103643607 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.100105427 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.096176169 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.098741609 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.103822531 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.099500871 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.107492078 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.102238076 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.10233275 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.10322579 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.590189796 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.122812007 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.109550903 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.191509305 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.141872451 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.088733911 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.880653549 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.102293301 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.100130765 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.107256216 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.778715724 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.180646241 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.104135145 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.270434982 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.432025401 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.114778756 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.267919148 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.239238864 seconds)
  done (took 145.364795908 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.100635454 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.332231003 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.250572934 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.09905969 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.354358606 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.30773499 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.10325303 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.146152492 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.104238331 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.300181668 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.350119097 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.204153651 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.099621826 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.10073023 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.089699113 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.098267563 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.245880893 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.165873779 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.102210625 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.099411752 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.12532485 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.299972414 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.222362274 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.101695396 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.123988323 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.306186188 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.217720048 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.202983763 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.883194259 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.099151146 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.160610918 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.100330599 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.102904424 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.095827027 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.253183394 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.192963855 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.18801993 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.100200225 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.101037546 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.101612819 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.774641596 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.301613227 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.195474875 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.221258352 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.351843763 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.322589633 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.710508112 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.104206468 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.725387261 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.265906345 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.305267154 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.308851233 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.2172359 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.102137284 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.377564517 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.100313985 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.101015441 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.323154203 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.319534548 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.203421429 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.10462839 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.103766004 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.09988785 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.340440388 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.10503197 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.192281595 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.10313807 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.10319954 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.195327721 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.200737575 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.329101519 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.325353246 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.135083919 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.42322532 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.593474397 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.309099248 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.16562005 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.319555171 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.104182132 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.102149384 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.1808104 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.943984845 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.351996704 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.343808334 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.30269711 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.131334586 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.752841514 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.104849827 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.287172143 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.292022364 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.335042763 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.35032379 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.339163366 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.457003787 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.105249641 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.104732606 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.404529842 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.22105469 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.047181713 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.45629253 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.331698601 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.632940873 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.130152232 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.38968633 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.232282686 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.107754582 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.750150638 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.10793916 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.310917661 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.146747596 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.106120552 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.105426332 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.294097737 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.010151827 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.1072377 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.806052458 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.163405735 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.112622211 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.308982797 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.109011184 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.350734178 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.106732428 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.338810052 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.700810822 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.135197224 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.275465592 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.348473915 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.747009 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.422290146 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.347635811 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.220708221 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.328631378 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.906787967 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.106316513 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.369194726 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.110065688 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.105872371 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.273690147 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.110681742 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.250298682 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.109605312 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.373944893 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.129217126 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.33816791 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.108792779 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.347914298 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.136639669 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.154900508 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.107217609 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.231750533 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.108379807 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.059148844 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.265676491 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.10350814 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.105538676 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.698448534 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.110431914 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.262067881 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.331023183 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.127743938 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.178371754 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.673584424 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.10148819 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.188313946 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.12651247 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.394189295 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.110184981 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.356639049 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.073354543 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.582119237 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.10945373 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.341044582 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.292114093 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.090912466 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.108401181 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.947854541 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.108659841 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.108016653 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.263916563 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.526807211 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.008474187 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308656698 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.110764217 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.233913341 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.115208456 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.195104276 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.449792557 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.109787077 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.083293232 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.113011327 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.109244839 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.112454044 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.32192765 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.136805558 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.540446272 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.246531005 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.36552279 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.415266474 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.31045346 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.148757202 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.117514209 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.331410445 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.110754296 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.17432469 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.112630234 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.128445664 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.336864094 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.116807489 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.31245225 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.347342303 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.002926895 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.158763877 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.118132231 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.111299722 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.028180944 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.25464436 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.197559376 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.110472074 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.112706673 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.225715226 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.22210556 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.296089415 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.935062444 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.26846449 seconds)
  done (took 954.139200537 seconds)
done (took 1298.753879575 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.112080929 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.11453985 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.111492077 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.112547665 seconds)
  done (took 30.482318151 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.115167946 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.113241999 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.112670804 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.115697525 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.115814222 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.113781013 seconds)
  done (took 14.720067522 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.116228575 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.113236418 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.112881144 seconds)
  done (took 23.375042725 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.54099898 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.515402414 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.1917188 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.256375396 seconds)
  done (took 11.539714856 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.119859978 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.116491197 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.116389841 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.116030842 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.105297416 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.113695206 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.116962752 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.118472821 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.114353696 seconds)
  done (took 21.079345685 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.356459901 seconds)
done (took 107.584974839 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.116481014 seconds)
    (2/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.195064185 seconds)
    (3/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.383072958 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.242044175 seconds)
    (5/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.881784862 seconds)
    (6/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.19913893 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.073640861 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.131885556 seconds)
    (9/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.424121752 seconds)
    (10/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.138914054 seconds)
    (11/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.514961699 seconds)
    (12/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.48935007 seconds)
    (13/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.246069592 seconds)
    (14/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.364130684 seconds)
    (15/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.128336448 seconds)
    (16/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.208865092 seconds)
    (17/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.987199392 seconds)
    (18/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.473535081 seconds)
    (19/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.181702811 seconds)
    (20/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.469316513 seconds)
    (21/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.254187183 seconds)
    (22/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.229423948 seconds)
    (23/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.121871082 seconds)
    (24/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.698131806 seconds)
    (25/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.137259315 seconds)
    (26/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.136312557 seconds)
    (27/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.104791159 seconds)
    (28/341) benchmarking ("sort", Float64, false)...
    done (took 5.98935308 seconds)
    (29/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.384920143 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.13658875 seconds)
    (31/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.281154271 seconds)
    (32/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.124960746 seconds)
    (33/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.131405122 seconds)
    (34/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.427591184 seconds)
    (35/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.249985788 seconds)
    (36/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.342465504 seconds)
    (37/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.136272809 seconds)
    (38/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.66479513 seconds)
    (39/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.28057735 seconds)
    (40/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.762766373 seconds)
    (41/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.719572875 seconds)
    (42/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.230481248 seconds)
    (43/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.255177644 seconds)
    (44/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.166440825 seconds)
    (45/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.23250751 seconds)
    (46/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.242539192 seconds)
    (47/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.314444326 seconds)
    (48/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.182233855 seconds)
    (49/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.24480967 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.209657074 seconds)
    (51/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.132241774 seconds)
    (52/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.347202505 seconds)
    (53/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.326407739 seconds)
    (54/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.006389395 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.994462859 seconds)
    (56/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.129896498 seconds)
    (57/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 8.517262261 seconds)
    (58/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.146886337 seconds)
    (59/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.111588061 seconds)
    (60/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.308484173 seconds)
    (61/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.530022364 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.539687434 seconds)
    (63/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.123137506 seconds)
    (64/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.124795538 seconds)
    (65/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.40751203 seconds)
    (66/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.449154626 seconds)
    (67/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.246044029 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.377013158 seconds)
    (69/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.222948209 seconds)
    (70/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.340649991 seconds)
    (71/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.534458523 seconds)
    (72/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.134324919 seconds)
    (73/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.324234073 seconds)
    (74/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.125819541 seconds)
    (75/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.514491211 seconds)
    (76/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.131417758 seconds)
    (77/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.846445498 seconds)
    (78/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.149514922 seconds)
    (79/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.328167979 seconds)
    (80/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.289512849 seconds)
    (81/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.262251389 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.45603737 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.267223819 seconds)
    (84/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.794567037 seconds)
    (85/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.148992615 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.335345606 seconds)
    (87/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.402932672 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.137023139 seconds)
    (89/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.213088347 seconds)
    (90/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.013356555 seconds)
    (91/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.538754753 seconds)
    (92/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.015820375 seconds)
    (93/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.639330226 seconds)
    (94/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.125411678 seconds)
    (95/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 3.824041174 seconds)
    (96/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.822671748 seconds)
    (97/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.35373817 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.433203358 seconds)
    (99/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.465226292 seconds)
    (100/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.131059929 seconds)
    (101/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.210962364 seconds)
    (102/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.063087383 seconds)
    (103/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.234092746 seconds)
    (104/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.213237582 seconds)
    (105/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.133830602 seconds)
    (106/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.213166192 seconds)
    (107/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.399603513 seconds)
    (108/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.37743897 seconds)
    (109/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.139314387 seconds)
    (110/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.894107461 seconds)
    (111/341) benchmarking ("sort", Int8, false)...
    done (took 5.066783007 seconds)
    (112/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.592413436 seconds)
    (113/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.242209113 seconds)
    (114/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.411335274 seconds)
    (115/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.254330468 seconds)
    (116/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.364828261 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.986851417 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.253370411 seconds)
    (119/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.144148513 seconds)
    (120/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.461959743 seconds)
    (121/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.414600918 seconds)
    (122/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.364433113 seconds)
    (123/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.21089524 seconds)
    (124/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.203478081 seconds)
    (125/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.222997874 seconds)
    (126/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.357128742 seconds)
    (127/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.144756063 seconds)
    (128/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.040124394 seconds)
    (129/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.938920399 seconds)
    (130/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.376219704 seconds)
    (131/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.429018835 seconds)
    (132/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.40268038 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.015821429 seconds)
    (134/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.1351161 seconds)
    (135/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.125642713 seconds)
    (136/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 4.367450799 seconds)
    (137/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.212012846 seconds)
    (138/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.385965882 seconds)
    (139/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.33809217 seconds)
    (140/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.136212478 seconds)
    (141/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.195256695 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 3.895189614 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.913349321 seconds)
    (144/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.45723105 seconds)
    (145/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.134513081 seconds)
    (146/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.559244907 seconds)
    (147/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.226259013 seconds)
    (148/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.12631722 seconds)
    (149/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.968970559 seconds)
    (150/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.347250599 seconds)
    (151/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.127415617 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.393131013 seconds)
    (153/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.188077781 seconds)
    (154/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.138387967 seconds)
    (155/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.512626911 seconds)
    (156/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.130084858 seconds)
    (157/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.487705748 seconds)
    (158/341) benchmarking ("sort", Bool, false)...
    done (took 2.344930908 seconds)
    (159/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.211056734 seconds)
    (160/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.563002983 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.443797783 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.417957626 seconds)
    (163/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.887965909 seconds)
    (164/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.278492104 seconds)
    (165/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.235131691 seconds)
    (166/341) benchmarking ("sort", BigInt, false)...
    done (took 7.133083441 seconds)
    (167/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.134307704 seconds)
    (168/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.281191791 seconds)
    (169/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.150419862 seconds)
    (170/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.145128648 seconds)
    (171/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.30967709 seconds)
    (172/341) benchmarking ("sort", Int64, false)...
    done (took 5.751897991 seconds)
    (173/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.304502596 seconds)
    (174/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.131109596 seconds)
    (175/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 3.714692321 seconds)
    (176/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.533666194 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.302093781 seconds)
    (178/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.267478582 seconds)
    (179/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.127982055 seconds)
    (180/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.358065656 seconds)
    (181/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.253943388 seconds)
    (182/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.208067747 seconds)
    (183/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.235302839 seconds)
    (184/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.218140161 seconds)
    (185/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.34035246 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.013652041 seconds)
    (187/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.27508809 seconds)
    (188/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.310078698 seconds)
    (189/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.346154171 seconds)
    (190/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.330349059 seconds)
    (191/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.138692672 seconds)
    (192/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.151493044 seconds)
    (193/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.191012061 seconds)
    (194/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.455355482 seconds)
    (195/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.272303358 seconds)
    (196/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.264044111 seconds)
    (197/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.142603793 seconds)
    (198/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.155070738 seconds)
    (199/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.188139201 seconds)
    (200/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.413350121 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.212046128 seconds)
    (202/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.140944952 seconds)
    (203/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.221970727 seconds)
    (204/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.285295427 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.834292445 seconds)
    (206/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.206605725 seconds)
    (207/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.58267165 seconds)
    (208/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.834101439 seconds)
    (209/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.237152585 seconds)
    (210/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.395264001 seconds)
    (211/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.147849158 seconds)
    (212/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.142725165 seconds)
    (213/341) benchmarking ("sort", Float32, false)...
    done (took 5.806278613 seconds)
    (214/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.460482492 seconds)
    (215/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.343741473 seconds)
    (216/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.239958304 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.309235284 seconds)
    (218/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.542357213 seconds)
    (219/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.135188316 seconds)
    (220/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.142772913 seconds)
    (221/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.14542019 seconds)
    (222/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.136350476 seconds)
    (223/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.868768192 seconds)
    (224/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.238481788 seconds)
    (225/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.26526861 seconds)
    (226/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.52361129 seconds)
    (227/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.283470764 seconds)
    (228/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.133996629 seconds)
    (229/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.592942415 seconds)
    (230/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.150173101 seconds)
    (231/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.835968655 seconds)
    (232/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.226302948 seconds)
    (233/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.472846092 seconds)
    (234/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.434090741 seconds)
    (235/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.507827306 seconds)
    (236/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.262949336 seconds)
    (237/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.302492154 seconds)
    (238/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.192597499 seconds)
    (239/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.148901499 seconds)
    (240/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.955909373 seconds)
    (241/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.626640406 seconds)
    (242/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.417324711 seconds)
    (243/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.141508779 seconds)
    (244/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.475827304 seconds)
    (245/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.245109286 seconds)
    (246/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.232597241 seconds)
    (247/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 3.659233169 seconds)
    (248/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.537127495 seconds)
    (249/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.13841438 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.476139832 seconds)
    (251/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.556777961 seconds)
    (252/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.137377957 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.895250662 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.43459733 seconds)
    (255/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.138549188 seconds)
    (256/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.371079239 seconds)
    (257/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.149462574 seconds)
    (258/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.140031425 seconds)
    (259/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.184893174 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.142384755 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.646579856 seconds)
    (262/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.151220867 seconds)
    (263/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.214650812 seconds)
    (264/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.580242368 seconds)
    (265/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.219515399 seconds)
    (266/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.39489762 seconds)
    (267/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.415724567 seconds)
    (268/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.154718079 seconds)
    (269/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.222130983 seconds)
    (270/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.390965767 seconds)
    (271/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.241476809 seconds)
    (272/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.544259906 seconds)
    (273/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.300227421 seconds)
    (274/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.164786365 seconds)
    (275/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.375234761 seconds)
    (276/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.183214541 seconds)
    (277/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.213753013 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.344986607 seconds)
    (279/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.028142712 seconds)
    (280/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.382499374 seconds)
    (281/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.439465381 seconds)
    (282/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.454135985 seconds)
    (283/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.261825857 seconds)
    (284/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.546114929 seconds)
    (285/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.159419399 seconds)
    (286/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.026946957 seconds)
    (287/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.938785109 seconds)
    (288/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.934729678 seconds)
    (289/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.447732985 seconds)
    (290/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.915730825 seconds)
    (291/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.514193006 seconds)
    (292/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.149670062 seconds)
    (293/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.113896642 seconds)
    (294/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.047289706 seconds)
    (295/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.422302806 seconds)
    (296/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.145655026 seconds)
    (297/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.289449368 seconds)
    (298/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.552099593 seconds)
    (299/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.877061314 seconds)
    (300/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.224307429 seconds)
    (301/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.55889401 seconds)
    (302/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.252773312 seconds)
    (303/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.149435728 seconds)
    (304/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.150093217 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.310331879 seconds)
    (306/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.15075775 seconds)
    (307/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.432487847 seconds)
    (308/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.452181107 seconds)
    (309/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.053648678 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.55263755 seconds)
    (311/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.470068747 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.339468104 seconds)
    (313/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.445541745 seconds)
    (314/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.276256578 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.238890343 seconds)
    (316/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.884552868 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.25242413 seconds)
    (318/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.621079301 seconds)
    (319/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.573695818 seconds)
    (320/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.144740932 seconds)
    (321/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 4.252337081 seconds)
    (322/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.147010008 seconds)
    (323/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.56922369 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.222577019 seconds)
    (325/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.220021725 seconds)
    (326/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.499122894 seconds)
    (327/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.154597118 seconds)
    (328/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.168706581 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.250992764 seconds)
    (330/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.372811922 seconds)
    (331/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.13273877 seconds)
    (332/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.110968529 seconds)
    (333/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.754436132 seconds)
    (334/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.291345144 seconds)
    (335/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.451850153 seconds)
    (336/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.148885276 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.248135417 seconds)
    (338/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.92940313 seconds)
    (339/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.095231334 seconds)
    (340/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.466993723 seconds)
    (341/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.243072288 seconds)
  done (took 1184.453994611 seconds)
done (took 1186.595494417 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.17133409 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.145125482 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.654999494 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.161453201 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.14884689 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.150120318 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.662868065 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.179643414 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.164237008 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.661168505 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.154228955 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.149078084 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.159534792 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.181111894 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.157805396 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.160164075 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.154416561 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.172301695 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.181738295 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.153988176 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.199974775 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.15698684 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.145241987 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.200345414 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.147265034 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.163189654 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.168001011 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.201270967 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.202386755 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.152656916 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.151834562 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.509945616 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.202673691 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.155791419 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.160494311 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.162606925 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.153452467 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.161552339 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.169149394 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.16607782 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.145470504 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.160596455 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.153718874 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.152034947 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.147910012 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.146352443 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.148446441 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.271874318 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.164112689 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.496940607 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.209931382 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.169576477 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.206126306 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.152779117 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.149531379 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.15146072 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.203543188 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.158158248 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.156791041 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.495775979 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.24747982 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.167537523 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.494868438 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.198385726 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.159951404 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.159734768 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.149660779 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.167870147 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.508706425 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.705528746 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.182371182 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.17076932 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.150686148 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.151592296 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.164183057 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.666070433 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.166495059 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.734269418 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.174674888 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.167870669 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.156522889 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.150569485 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.151203719 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.165741553 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.170637375 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.149930381 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.156888399 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.157729033 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.166953595 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.510903163 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.195393219 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.650874035 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.163644568 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.140737209 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.171947156 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.733538092 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.177928001 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.173377914 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.155947931 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.512563395 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.192171234 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.173541711 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.155845157 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.164680571 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.266507886 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.167808314 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.172635205 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.152146873 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.172251889 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.156356332 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.154138107 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.166553359 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.171099231 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.188871361 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.168355569 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.155699852 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.158845111 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.158609062 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.169222803 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.163191505 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.157056101 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.162966385 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.152105036 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.204451687 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.17201812 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.168778428 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.267734683 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.157576121 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.277199636 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.166905855 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.160785375 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.152736895 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.49950621 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.202130135 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.175320186 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.161691951 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.160636282 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.178770551 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.170799277 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.159375 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.166720153 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.156826347 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.209962504 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.153570482 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.179726739 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.20529585 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.167341926 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.161010063 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.170659468 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.190422446 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.177250876 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.158762701 seconds)
done (took 338.707496474 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.204746605 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.154314816 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.231461329 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.15522399 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.22852926 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.208313697 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.155203134 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.156460096 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.155024348 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.569034469 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.153025948 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.161869161 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.153176543 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.159468293 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.212520159 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.152780779 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.155842973 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.425814848 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.156979499 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.215290429 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.156389496 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.153280094 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.155782908 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.55317235 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.154979767 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.15996634 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.214743225 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.156955282 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.397711736 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.155748408 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.155715943 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.39978342 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.215388434 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.167476366 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.165848177 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.161855117 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.227912734 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.168117892 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.205048157 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.209770966 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.236405897 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.187456265 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.160037577 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.159181033 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.164976265 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.161256658 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.156762241 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.191384296 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.152503533 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.160568232 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.402099553 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.163227042 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.163826216 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.155134361 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.156628485 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.171918328 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.16012558 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.159087837 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.217715631 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.158599097 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.204449435 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.557278191 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.619667173 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.157723524 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.16023264 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.158608166 seconds)
  done (took 203.070250237 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.229653508 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.243798299 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.229111611 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.166953696 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.21286867 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.232828661 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.170410985 seconds)
  done (took 17.564774948 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.168605934 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.161212888 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.180849448 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.182004679 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.16190181 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.298305301 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.171222199 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.164349058 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.187211451 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.162204798 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.494992844 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.185088183 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.169745836 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.161075634 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.175500167 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.189685103 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.164027904 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.165931989 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.260526278 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.240783482 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.165998621 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.167281363 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.191103193 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.178426563 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.159750912 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.160897378 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.166236368 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.168201324 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.164291043 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.162535469 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.162241982 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.180240975 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.162628497 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.161466745 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.162683611 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.165469414 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.161907253 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.162903563 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.161125154 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.163139275 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.161630354 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.160545778 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.16325025 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.161997973 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.163771736 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.181821312 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.161940545 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.163700597 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.161466067 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.162519102 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.190535394 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.161112098 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.163625407 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.171149207 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.204055781 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.169097502 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.16499856 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.149321137 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.163466766 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.163628895 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.162888529 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.243703831 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.187500569 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.163024823 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.187896971 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.200711181 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.166793891 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.163652509 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.165028763 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.190386378 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.16071752 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.186504914 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.165193667 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.26714208 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.164326139 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.310554311 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.187564553 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.167573604 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.169118961 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.165689644 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.174245262 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.166904268 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.168261588 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.172358272 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.170758087 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.162896608 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.166519791 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.167553716 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.172217271 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.164489075 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.213179926 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.167252447 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.168677721 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.264898812 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.167127403 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.264561149 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.190823726 seconds)
  done (took 233.694687216 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.170589399 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.166217638 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.181645067 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.165976307 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.16699667 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.173336082 seconds)
  done (took 15.106674447 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.173004544 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.169709191 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.168883979 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.165108636 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.169425317 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.169570672 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.169244991 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.169230003 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.171937305 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.169717222 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.169080309 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.166112251 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.169326565 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.168151802 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.17137267 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.167265992 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.165918666 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.172270754 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.167142441 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.169435932 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.36950938 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.165188428 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.168689987 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.175419534 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.176023543 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.163716435 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.176961965 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.164923405 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.166445146 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.175750205 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.174980117 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.170656487 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.175481731 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.177252565 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.174283516 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.177237031 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.173792613 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.166744672 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.16940344 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.168766856 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.17113194 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.171614763 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.168167567 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.170096823 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.172244655 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.182540497 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.172867534 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.177189896 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.169541993 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.169709305 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.17345356 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.168349166 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.1673585 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.172086871 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.175632278 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.179490072 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.175250652 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.169613019 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.16846957 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.174373357 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.174255015 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.166794426 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.173724123 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.176387056 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.17523022 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.169298023 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.180152951 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.178849395 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.173833257 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.172764791 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.169567105 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.168921661 seconds)
  done (took 159.629764849 seconds)
done (took 631.139758559 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.282182174 seconds)
  done (took 9.37007628 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.193663552 seconds)
  done (took 9.391886999 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.700703652 seconds)
  done (took 12.79373431 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.199819251 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.21873872 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.189532463 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.179674941 seconds)
  done (took 30.890859 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.481147874 seconds)
  done (took 9.572614375 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.187683515 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.171730699 seconds)
  done (took 16.525378316 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.207188307 seconds)
  done (took 9.302562409 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.62375156 seconds)
  done (took 9.726970575 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.156025762 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.184733702 seconds)
  done (took 16.446003944 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.176453881 seconds)
  done (took 9.266775455 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.008186973 seconds)
  done (took 10.193982195 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.18270278 seconds)
  done (took 9.292053558 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.23982253 seconds)
  done (took 9.329910436 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.284171876 seconds)
  done (took 10.374795969 seconds)
done (took 174.5686052 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.180505034 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.173355665 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.17554347 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.175923669 seconds)
  done (took 30.794637076 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.207218694 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.205989154 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.214667647 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.207076407 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.197938723 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.196925976 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.204708742 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.208045593 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.202898147 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.202841882 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.208431288 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.210735511 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.207463002 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.220276147 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.219082573 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.206304657 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.209644898 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.213230301 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.199843432 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.218126651 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.208627506 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.208316717 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.175017087 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.173420053 seconds)
  done (took 55.022104588 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.368296117 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.239685521 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.32839642 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.221395632 seconds)
  done (took 11.247035681 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.172842684 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.23865943 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.229039445 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.21997755 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.258088924 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.278072396 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.224725935 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.385806127 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.292059416 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.299820356 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.183074487 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.19612193 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.199710405 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.21984628 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.282317196 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.173363896 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.17551564 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.293650479 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.23977729 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.38433764 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.175574196 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.227222167 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.261118921 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.229208394 seconds)
  done (took 55.931986192 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.175637789 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.184917659 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.18181989 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.175614312 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.179158366 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.176571724 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.183490891 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.180327794 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.186324983 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.176894228 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.176951242 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.176952377 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.186617474 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.179655196 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.173853626 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.188019718 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.191858525 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.175589992 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.18142014 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.183535704 seconds)
  done (took 45.706811543 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.173704464 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.021926841 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.524099813 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.429613696 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.175191913 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.17550494 seconds)
  done (took 33.590744186 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.188120867 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.193963947 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.184691737 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.200682795 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.224192275 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.185452251 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.236415648 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.336514683 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.185788238 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.234345375 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.194850778 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.184736475 seconds)
  done (took 28.645507873 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.176076926 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.17733319 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.177344109 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.190941856 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.18770678 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.187126857 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.186713013 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.176013542 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.190314453 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.197086293 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.187257611 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.190477288 seconds)
  done (took 48.3211192 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.390955686 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.402376614 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.400266116 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.706056038 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.501461817 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.164607816 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.464195309 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.390104904 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.929826035 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.970354536 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.48073488 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.165699157 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126843159 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.101777994 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.074761799 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419031158 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17984254 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.035668049 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.440780824 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229558714 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180806813 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.17722419 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180323505 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.469698389 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.512061477 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.183824131 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.390307894 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194229413 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.226313371 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.389523989 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.59804985 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.231174017 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.381497776 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.4404378 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.527209878 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.233838371 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.282100939 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.284498537 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.222129287 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.217151743 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.188061957 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.18947791 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.688621924 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.193224542 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.449980679 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181582017 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.189272264 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.287939469 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.104720571 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.613726989 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.307483124 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.181259405 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.214809094 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.613918544 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.301215409 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420401968 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.184218827 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.283209114 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.235126862 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.551317244 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.298818273 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.279405915 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.393192513 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.105289361 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.635988688 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.318021516 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.181636982 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.186633819 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.879969559 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.422531436 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.264314114 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.629097183 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.95405596 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.182160638 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.183208611 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.225499489 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276429905 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.178713231 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.467687206 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.183209032 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.109855643 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.251746144 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.578618482 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.185908061 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.181968122 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.188079107 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.028454505 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.094908749 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.277410012 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.587866455 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.518534919 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.181879007 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.187808347 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.204724766 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18320695 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.124328029 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.672168928 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.246870421 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.108909362 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.746549297 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.607394789 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.14641765 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.606249091 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.222978752 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.467972213 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.340918854 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.586868991 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.393846169 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.430863278 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.714849906 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.176628774 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.787378468 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.265469788 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.255753969 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.183580894 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.741039767 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.291919578 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.630914136 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.285812928 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.181856391 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.110387747 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.194085386 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.385360947 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.602218181 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.237824772 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.182282287 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.189593406 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.183431172 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189191246 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.28995931 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203317814 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.48948419 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.268955692 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.1848905 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.12122475 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.188268782 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.481086451 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.749378832 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242340268 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.453106119 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.465347288 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.884628881 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.781638319 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.1324544 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.467409997 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.269549081 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25889599 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.771422062 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.320613488 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.280945055 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.174920866 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.328835585 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.193289271 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.187652107 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.460052015 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.601852136 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.616694492 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.23125238 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.186850022 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.136638362 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.294939832 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.424814114 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.345537759 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.2147746 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.189710466 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.269836452 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411158445 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.185886149 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.111986046 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441205615 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.431980359 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.482166734 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.603383123 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.338934198 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.260929379 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.197128457 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.400761271 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.269351499 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.840310307 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.732711627 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.411341194 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.685807023 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.151233068 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.823538204 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.59961154 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.581984837 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.20413343 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.642133447 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.299818318 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.872534534 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.217916669 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.717273429 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.114194054 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193455678 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.536117111 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.147861427 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.51468639 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.261134799 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.202104536 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.190334593 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.188053052 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.197436218 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.168904386 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.295246484 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.25714676 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259005012 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.115045947 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.772804912 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.226299708 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.193046602 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.188906259 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.686666249 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.141854044 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.143816596 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.188427185 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.26541613 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.942435743 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.738041072 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.192306709 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.191445319 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.792867919 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.194878975 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098397819 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.200190027 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.132421972 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.22001385 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.606088868 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.904686418 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.492262252 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.27369166 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.266024769 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.188677172 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196280615 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.890712588 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.199248522 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.891634998 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490376812 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.476862858 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.65241338 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.261051359 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.401064938 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.203509263 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.190690163 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.793546 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.21604581 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193605358 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39388343 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.712123588 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.665893284 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.849956191 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.27788681 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.192470687 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.472455582 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.19935915 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.616807074 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.902921995 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.211144115 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.191070545 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.457542042 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.878078566 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.193207912 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.166943262 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.19809868 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.404036113 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.394607709 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.476444321 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.505303639 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.649930999 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.118709315 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.198784331 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.231203825 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.435787004 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.171025004 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.2284564 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.642226737 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.358332501 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.621842768 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.495897062 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.747217055 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.844608991 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.469698305 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.26456301 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.204509778 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.872362835 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.343898399 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.119346214 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.310535338 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.108989652 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.966663994 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.487601309 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.209589759 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.475168506 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179329015 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550116153 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.499764016 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.618662967 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.259803057 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.222894741 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.194715795 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.249318879 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.195089939 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.316238911 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.311937644 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.200463531 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.66654901 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.235277253 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242121528 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.199375184 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.811763741 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.215840507 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.198589977 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.888884831 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.211506143 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.31353646 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.265055765 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.044367997 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.645491507 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.300933683 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.070372601 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.840233716 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.476258621 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.260712577 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.650074071 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.239067223 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.599645835 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.194538338 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.409273623 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.201034913 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.696979471 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241113971 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.475091609 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.155946576 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.408477323 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.40528213 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.225928947 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.202463779 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123505296 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.30229969 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.096683319 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.178303423 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.200508034 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.880189303 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.704581751 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.333531916 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.74334151 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.004801588 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.200369428 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.702703314 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.630545863 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.755869969 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.230382087 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.198318192 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.678597855 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.344560162 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.662060245 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.507102165 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204918389 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.224448682 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.408140539 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.295721751 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.118261442 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.687769966 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.784802265 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.899420075 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.210077104 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.403611635 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.686901921 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.425357992 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233367341 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.27685184 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.602793285 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.4783471 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.27462854 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.127063578 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.200253763 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.594241911 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.599044746 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.295277407 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437991043 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.5225821 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.71720569 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.625202828 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.591404528 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.740832898 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.625422585 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595489841 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.424799469 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.574270288 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.529931568 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.789876544 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.610509824 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.410276089 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.299881867 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.481428957 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.076840229 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.908909111 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.440183262 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.199475085 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.125234454 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.404293591 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.206217214 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.502172533 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.771107359 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.447048179 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.610894279 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.678511184 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.73781524 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.312267618 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.22283303 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.162991772 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.216204758 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214454567 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.191144751 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.684838765 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.473266415 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209399389 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133053502 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.865018566 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.098882287 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.406602058 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.309064167 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.229579357 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.752819898 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.587158568 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.310102428 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.498546434 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.377961796 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.234239117 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.127572632 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032813024 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.146926023 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.357155435 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.629963212 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213547049 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.202018032 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.401558076 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.134331891 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242327684 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.201956581 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.402183079 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.786180958 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.477309177 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.32936468 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452683919 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.499341577 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.172262003 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.236783483 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.469122138 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.123391433 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.778194209 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.8936509 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.240257791 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.267034751 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197483097 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.202185695 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46807773 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.67222481 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.30927939 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.714478081 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.231660297 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.223611595 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.677632015 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.301640466 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.201721738 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.203995924 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.657862207 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.430916219 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.197820037 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.180330083 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.408982286 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.277577302 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.391663196 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.271857668 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.712239239 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.202783829 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.192255859 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.312830509 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.146271572 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.196818803 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.055254262 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.256645328 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.200567729 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.483181979 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.881999607 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.401732615 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.593647564 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.109914136 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.311232177 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.239156673 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.206200198 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.203372064 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.592364906 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.511465672 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.198721561 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.481133798 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.255636817 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206945629 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.864335603 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.168682426 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.202642541 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.987579092 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.120837882 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.9292569 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.595456752 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.210465759 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203412666 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204306423 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.129132825 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.199327287 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.372478749 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.211154469 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.201139604 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.57184173 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.654552872 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.300120938 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202549043 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.201298361 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.206917622 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.415941296 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.714426995 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.218861103 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.901629903 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404897732 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.206316265 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.692810248 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.666440845 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.406526969 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.239633359 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.323607793 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.452975722 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.745128813 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.332616019 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.184314002 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.425925457 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.203351939 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.474568081 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.47667984 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.20322945 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.414304629 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.644293074 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.484828952 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.551386879 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.523117603 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.277731413 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.327567282 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.126623102 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.201534265 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.20519507 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.47697267 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.265785282 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.201835727 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.212204895 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.760100432 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.029658768 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.674660356 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.363911704 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.646542321 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.151758291 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.956670285 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.205196681 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.131487204 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.203471363 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.229057954 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.207225642 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.130435653 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.95852676 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.928206272 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.416712497 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.517444302 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.131537933 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.407239026 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.782926537 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.12818809 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.172519791 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.205356906 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.469029768 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.130385736 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.20895943 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.160372203 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.602625378 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.899373373 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.472642868 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.205288348 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.150236579 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.207330573 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.208860653 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.205881982 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.291781484 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.206431251 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.323398519 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.478357777 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.702934261 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.319266607 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.845313388 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.961349758 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.143613119 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247640149 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.764531713 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.774468161 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.609215033 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.344365701 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.959371991 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.151382542 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.204854311 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223757165 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.44782853 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.210856853 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.210299416 seconds)
  done (took 2279.739272649 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.231363872 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.266040357 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.268266991 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.317880791 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.322344265 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.302468623 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.263295054 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.285393119 seconds)
  done (took 60.378569577 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.204694439 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.22420367 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.201276135 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.210617809 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.206668403 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.267556279 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.40395772 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.237934027 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.20808841 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.211459337 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.209937941 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.211816001 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.210577266 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.207752996 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.225945383 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.519390549 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.229709729 seconds)
  done (took 82.351900311 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.268614649 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.001518901 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.208247229 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.875441255 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.243089581 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.545223167 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.209981713 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.210528175 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.310740144 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.508886833 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.2533226 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.22695498 seconds)
  done (took 94.028017687 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.21122739 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.21139537 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.208058052 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.21094176 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.210529444 seconds)
  done (took 13.177130536 seconds)
done (took 2841.0871484 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.512438815 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.307335731 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.284990433 seconds)
  done (took 6.722060063 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.35882707 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.406003554 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.519406761 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.505632466 seconds)
  done (took 11.925586397 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.501683615 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.591043827 seconds)
  done (took 7.223324156 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.583223292 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.218007692 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.604320907 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.213370901 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.214491927 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.215786851 seconds)
  done (took 23.778036415 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.215605826 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.216630927 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.217273344 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.216267315 seconds)
  done (took 10.996185485 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.19174365 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.950510481 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.213542677 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.22493775 seconds)
  done (took 22.709968477 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.421507068 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.258781092 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.983927098 seconds)
  done (took 10.797662721 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.835468508 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.906091681 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.821868528 seconds)
  done (took 10.694659091 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.354538703 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.201933474 seconds)
  done (took 8.684904807 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.354073181 seconds)
  done (took 4.486341359 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.050081323 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.527048955 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.687562246 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.735666924 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.804516724 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.441258617 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.531967792 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.479952802 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.62109204 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.621489144 seconds)
  done (took 28.632806982 seconds)
done (took 163.696512603 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.645788218 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.230868896 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.424889878 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.591187361 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.44830416 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.419738411 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.520669543 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.582538105 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.2588817 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.217995597 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.594138271 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.454318957 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.463016223 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.223071921 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.467878089 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.232714212 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.449509657 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.663230551 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.266730155 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.508584059 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.523294067 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.235656487 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.434504936 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.247088492 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.452399347 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.37517005 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.839219758 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.233987551 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.417252845 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.853187398 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.372663287 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.660950156 seconds)
  done (took 180.441259973 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.088707879 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.218509429 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.218078707 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.21693424 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.563598216 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.218902319 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.219453248 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.216856003 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.516398163 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.498837646 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.218881081 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.550059428 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.220463548 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.221069226 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.220828578 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.219519714 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.638158805 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.12367766 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.219360271 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.218156805 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.220767913 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.42730932 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.218964876 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.466042375 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.621405892 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.219853962 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.22045248 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.220717661 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.219472891 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.219461529 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.220675577 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.220775079 seconds)
  done (took 219.457802372 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.222488364 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.219184219 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.220419854 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.219654595 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.221314738 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.223192157 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.223198875 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.218543695 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.949232674 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.939434502 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.222452377 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.220273594 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.222829041 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.219953862 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.223818099 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.221753337 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.221779967 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.221610864 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.222288132 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.221874487 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.223707434 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.997841879 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.221176313 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.051815375 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.222477193 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.222323921 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.222152476 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.223254992 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.221281019 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.221852701 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.223339215 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.22273259 seconds)
  done (took 232.288167604 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.469507483 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.226088159 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.225191354 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.229819403 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.226190723 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.224289544 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.227372622 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.470380002 seconds)
  done (took 22.437600424 seconds)
done (took 656.768356087 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.590510214 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.959345943 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.358190905 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.24877198 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.472112844 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.290072319 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.243295992 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.306666309 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.895619288 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.322767237 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.634527692 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.253109314 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.936717577 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.271562802 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.36046427 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.304771693 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.615699611 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.86893257 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.378399291 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.900785358 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.43971271 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.199393948 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.321310765 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.934783919 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.650193577 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.215376212 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.267857511 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.616357126 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.247426843 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.478549744 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.909082414 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.480717483 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.258259331 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.247364476 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.297999919 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.289127254 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.445880074 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.254970246 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.344397197 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.995585143 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.889012818 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.769641957 seconds)
  done (took 114.905390628 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.236273284 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.235068597 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.233239122 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.236121697 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.24485377 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.234009371 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.235684785 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.234572857 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.235819089 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.236608252 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.235588611 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.2413766 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.234651882 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.243064521 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.234913159 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.236063252 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.234639619 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.244057257 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.233662063 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.235786183 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.22218073 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.235425002 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.229007023 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.234056996 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.235608217 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.228577662 seconds)
  done (took 60.273549953 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.228497763 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.407855551 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.515569707 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.259613079 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.229392179 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.234773396 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.257077659 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.236149745 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.232994472 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.232676481 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.323013989 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.232558856 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.241976298 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.514640091 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.255151153 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.230972074 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.231364432 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.232691058 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.412850561 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.24327213 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.259172933 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.238471467 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.259522009 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.245500046 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.235054166 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.232972252 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.23526299 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.653308569 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.242260699 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.325183972 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.273691818 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.261354967 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.582237282 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.526760671 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.282694172 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.236573622 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.232040661 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.372729347 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.244404747 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.231995501 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.260490857 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.242059174 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.518648302 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.734830533 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.246830081 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.231626918 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.653369646 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.386626496 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.278400294 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.244454159 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.527718453 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.259516394 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.232413459 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.234010049 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.269331415 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.243818345 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.234574159 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.480971314 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.250220418 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.261103353 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.24023611 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.235599745 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.420949964 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.240485209 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.410168361 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.242010988 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.239319058 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.235390255 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.518407415 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.259335221 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.740088743 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.247218108 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.235299018 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.328675908 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.413724988 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.676948923 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.246671873 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.407269352 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.597886009 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.271067841 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.241161342 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.630442559 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.273587728 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.245861569 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.234456827 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.234538743 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.235084258 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.280546908 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.262606646 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.656503932 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.734451624 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.490586028 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.273277623 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.25000559 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.236380019 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.48058896 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.243694798 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.23499286 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.515158871 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.759618439 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.250490648 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.243646075 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.718446557 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.249306423 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.264264495 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.246028841 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.533289735 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.263286121 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.277886962 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.236350271 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.242200588 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.240175458 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.264877854 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.246300809 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.234821429 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.707561078 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.384959783 seconds)
  done (took 275.186676031 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.239460586 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.234010786 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.235693011 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.233949029 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.23526388 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.237607505 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.235855792 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.235374622 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.238097924 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.234953153 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.236555739 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.238495122 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.238522923 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.236088095 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.277330675 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.238310659 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.725014387 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.239139752 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.236285922 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.236701178 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.812315011 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.241769741 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.237058134 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.236669148 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.238080575 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.237495646 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.243455619 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.2741236 seconds)
  done (took 177.941367508 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.237812812 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.28530648 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.250434264 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.282773431 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.247177499 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.238061189 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.259122747 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.253589234 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.244682885 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.238716231 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.23971907 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.265531547 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.245360964 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.312304768 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.265464317 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.266479442 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.314377106 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.244194974 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.239068675 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.239016761 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.286108306 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.251686725 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.266583292 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.29219136 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.248952243 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.285031881 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.249740303 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.239842764 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.240264994 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.32777488 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.255902292 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.266143188 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.271732972 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.258279447 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.331043936 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.327731509 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.315959251 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.264970276 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.243910725 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.241224671 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.240552052 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.241689053 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.288240621 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.250376961 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.240848238 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.33147013 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.256185564 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.241634449 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.257742324 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.220060299 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.25158881 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.2579618 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.274438772 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.340705592 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.282928021 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.26709204 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.26216231 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.259944053 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.243547271 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.31427097 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.248282334 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.33147801 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.25954548 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.242419671 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.243644496 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.244619734 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.287885702 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.273230415 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.319719335 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.248209168 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.313925714 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.294990368 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.253190246 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.244020013 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.242119442 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.289964579 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.327056123 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.292062697 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.300103164 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.275164757 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.251015017 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.244423085 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.244549812 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.269062615 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.248709848 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.330954429 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.331807285 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.24775705 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.243841456 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.242885931 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.244493238 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.265053229 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.294657993 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.255527673 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.323523072 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.273769952 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.277845586 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.249855624 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.25589081 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.249160041 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.273903165 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.250242858 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.256153637 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.581273477 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.278963987 seconds)
  done (took 240.631149533 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.577007039 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.286370747 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.313158678 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.497392809 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.598178805 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.124059793 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.28118369 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.294160981 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.30444024 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.412013964 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.358370063 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.337983831 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.275521156 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.267408422 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.287922597 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.304478107 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.326408441 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.594069488 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.38908159 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.748421947 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.281647695 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.557251994 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.587183145 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.637092818 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.333270934 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.673275609 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.893154333 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.372631025 seconds)
  done (took 73.076138461 seconds)
done (took 944.155869646 seconds)
SAVING RESULT...
DONE!
